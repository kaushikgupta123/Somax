@model Admin.Models.CreatePassword
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    @if (!Model.IsResetPassword)
    {
        <title>
            Somax | Create Password
        </title>
    }
    else
    {
        <title>
            Somax | Reset Password
        </title>
    }
    <meta name="description" content="Latest updates and statistic charts">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.16/webfont.js"></script>
    <script>
        WebFont.load({
            google: { "families": ["Montserrat:300,400,500,600,700", "Roboto:300,400,500,600,700"] },
            active: function () {
                sessionStorage.fonts = true;
            }
        });
    </script>
    <link href="~/Scripts/Metronic/assets/font-awesome-4.7.0/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" />
    @Styles.Render("~/Content/passwordcreate")
    @*<link href="~/Scripts/Metronic/assets/login/demo/default/base/style.bundle.css" rel="stylesheet" media="all" />*@
    @Styles.Render("~/Content/Common")
    @Styles.Render("~/Content/AdminLogin")
    <link rel="shortcut icon" href="~/Content/Images/favicon.png" />
</head>
<body class="m-page--fluid m--skin- m-content--skin-light2 m-header--fixed m-header--fixed-mobile m-aside-left--enabled m-aside-left--skin-dark m-aside-left--fixed m-aside-left--offcanvas m-footer--push m-aside--offcanvas-default">
    <div class="m-grid m-grid--hor m-grid--root m-page">
        <div class="m-grid__item m-grid__item--fluid m-grid m-grid--ver-desktop m-grid--desktop m-grid--tablet-and-mobile m-grid--hor-tablet-and-mobile m-login m-login--1 m-login--signin themeBg" id="m_login">
            <div class="m-grid__item m-grid__item--order-tablet-and-mobile-2 m-login__aside">
                <div class="m-stack m-stack--hor m-stack--desktop">
                    <div class="m-stack__item m-stack__item--fluid">
                        <div class="m-login__wrapper">
                            <div class="m-login__logo">
                                <a href="javascript:void(0)">
                                    <img src="/Admin/Content/Images/somaxLogo.png">
                                </a>
                            </div>
                            @using (Ajax.BeginForm("CreatePassword", "Login", new AjaxOptions { HttpMethod = "Post", OnSuccess = "PasswordCreateOnSuccess", OnBegin = "CreatePassBeginForm", OnComplete = "CreatePassFormComplete", OnFailure = "CreatePassFormFaillure" }, new { @class = "m-login__form m-form" }))
                            {
                                @Html.AntiForgeryToken()
                                <div class="m-login__signin">
                                    <div class="lockIcon">
                                        <img src="~/Content/Images/changePassword.png" />
                                    </div>

                                    @if (!Model.IsResetPassword)
                                    {
                                        <h2>Create Password</h2>
                                    }
                                    else
                                    {
                                        <h2>Reset Password</h2>
                                    }
                                    <div class="form-group m-form__group adjust">
                                        <label id="userId" class="userPass">Your User Name</label>
                                        @Html.TextBoxFor(model => model.UserName, new { @class = "form-control m-input", @readonly = "readonly", autocomplete = "off" })
                                    </div>
                                    <div class="form-group m-form__group adjust">
                                        @Html.TextBoxFor(m => m.NewPassword, new { @class = "form-control m-input", type = "password", placeholder = "Enter New Password", autocomplete = "off" })
                                        <a href="javascript:void(0)" class="password_eyes"><i id="NewPasswordEye" class="fa fa-eye-slash"></i></a>
                                    </div>
                                    <div class="form-group m-form__group adjust">
                                        @Html.TextBoxFor(m => m.ConfirmPassword, new { @class = "form-control  m-input", type = "password", placeholder = "Confirm Password", autocomplete = "off" })
                                        <a href="javascript:void(0)" class="password_eyes"><i id="ConfirmPasswordEye" class="fa fa-eye-slash"></i></a>

                                    </div>
                                    @if (!Model.IsResetPassword)
                                    {
                                        if (!string.IsNullOrEmpty(Model.UserMail))
                                        {
                                            <div class="form-group m-form__group" id="divSecQest">
                                                <div class="dateRangeDrop">
                                                    <div class="btn-group bootstrap-select m-datatable__pager-size dropup show selectDrop">
                                                        <div class="btn-group bootstrap-select m-datatable__pager-size">
                                                            @Html.DropDownListFor(model => model.SecurityQuestion, Model.SecurityQuestList, "--Select Security Question--", new { @class = "selectpicker m-datatable__pager-size", tabindex = "-98;" })
                                                        </div>
                                                    </div>
                                                    <div style="clear:both; height:15px;"></div>
                                                </div>
                                            </div>

                                            <div class="form-group m-form__group adjust" id="divSecResp">
                                                @Html.TextBoxFor(m => m.SecurityAnswer, new { @class = "form-control  m-input", placeholder = "Enter Security Response", autocomplete = "off" })
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(m => m.SecurityQuestion)
                                        @Html.HiddenFor(m => m.SecurityAnswer)
                                    }
                                    <div id="error_Message" class="ul-login-error-lst text-danger" style="text-align: center;"></div>
                                    <div class="m-login__form-action">
                                        @if (!Model.IsResetPassword)
                                        {
                                            <button id="Create_Password" type="submit" class="btn btn-focus m-btn m-btn--pill m-btn--custom m-btn--air">Create Password</button>
                                        }
                                        else
                                        {
                                            <button id="Create_Password" type="submit" class="btn btn-focus m-btn m-btn--pill m-btn--custom m-btn--air">Reset Password</button>
                                        }

                                        <button type="button" id="return_to_signin" class="btn btn-focus m-btn m-btn--pill m-btn--custom m-btn--air">Return To Sign In</button>
                                    </div>
                                </div>
                                @Html.HiddenFor(m => m.UserMail)
                                @Html.HiddenFor(m => m.TempPassword)
                                @Html.HiddenFor(m => m.PasswordCode)
                            }
                        </div>
                    </div>
                    <div class="m-stack__item m-stack__item--center">
                        <div class="m-login__account">
                          <span class="m-login__account-msg">
                            &copy; @DateTime.Now.Year SOMAX Inc. All rights reserved. SOMAX is a registered trademark of SOMAX, Inc.
                          </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

@Scripts.Render("~/bundles/CreatePassword")
@Scripts.Render("~/bundles/jqueryval")

<style type="text/css">
    h4.subHeading {
        font-size: 1rem !important;
        font-weight: 400 !important;
    }

    .m-login.m-login--1 .m-login__wrapper .m-login__form .m-form__group .form-control {
        -webkit-text-fill-color: #fff !important;
    }

    .dateRangeDrop {
        margin-top: 30px;
    }

    .bootstrap-select:not([class*="col-"]):not([class*="form-control"]):not(.input-group-btn) {
        width: 100%;
    }

    .bootstrap-select.btn-group > .dropdown-toggle.btn-default {
        border: 0px;
        border-bottom: 1px solid #fff;
        color: #ffffff;
        background: transparent;
    }

    .bootstrap-select.btn-group .dropdown-toggle .filter-option {
        text-align: center;
        font-weight: 300;
    }

    .bootstrap-select.btn-group > .dropdown-toggle:after {
        color: #fff;
    }

    .input-validation-error {
        border-bottom: 1px solid red !important;
    }

    a.password_eyes {
        position: absolute;
        right: 0;
        top: 13px;
        color: #fff;
        cursor: pointer;
        z-index: 9;
    }

    .m-login.m-login--1 {
        background: white !important;
    }
    .bootstrap-select.btn-group.show > .dropdown-toggle.btn-default, .bootstrap-select.btn-group.show > .dropdown-toggle.btn-secondary {
        border-color: #fff;
    }
</style>
