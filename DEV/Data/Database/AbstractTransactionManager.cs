
/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.  MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;
using Common.Enumerations;
using Common.Structures;

namespace Database
{
    /// <summary>
    /// This abstract class models the process of performing a set of work with the database.
    /// It handles creation of a database connection, creation of a transaction, commit or
    /// rollback of the transaction, and closing of the database connection.
    /// </summary>
    public abstract class AbstractTransactionManager : MarshalByRefObject
    {
        public AbstractTransactionManager() : base()
        {
            m_Connection = null;
            m_Transaction = null;
            m_ConnectionString = String.Empty;
            m_UseTransaction = true;
            CallerUserInfoId = 0;
            CallerUserName = String.Empty;
            UseDatabase = DatabaseTypeEnum.Undefined;
            dbKey = null;
        }

        /// <summary>
        /// Perform local validation association with this transaction object
        /// </summary>
        public virtual void PerformLocalValidation()
        {
            if (dbKey == null)
            {
                throw new Exception("The DatabaseKey has not been set!");
            }

            // Handle missing connection information
            if ((String.IsNullOrWhiteSpace(m_ConnectionString)) && (null == m_Connection))
            {
                string message = "";
                switch (UseDatabase)
                {
                    case DatabaseTypeEnum.Admin:
                        m_ConnectionString = dbKey.AdminConnectionString;
                        if (String.IsNullOrWhiteSpace(m_ConnectionString))
                        {
                            message = "Admin Database connection string has not been set.";
                        }
                        break;

                    case DatabaseTypeEnum.Client:
                        m_ConnectionString = dbKey.ClientConnectionString;
                        if (String.IsNullOrWhiteSpace(m_ConnectionString))
                        {
                            message = "Client Database connection string has not been set.";
                        }
                        break;

                    default:
                        message = "The UseDatabase property has not been set!";
                        break;
                }


                if (!String.IsNullOrWhiteSpace(message)) { throw new Exception(message); }

                //---------Added By Indusnet Technologies--------------------------
                if (dbKey.IsAccessClientData == true && dbKey.AccessingClient != null)
                {
                    if(String.IsNullOrWhiteSpace(dbKey.AccessingClient.ConnectionString) == false)
                    {
                        m_ConnectionString = dbKey.AccessingClient.ConnectionString;
                        dbKey.Client = dbKey.AccessingClient;
                    }
                }
                //--------End Added By Indusnet Technologies-----------------------

            }
        }

        /// <summary>
        /// Execute the work item associated with this transaction object
        /// </summary>
        public abstract void PerformWorkItem();

        /// <summary>
        /// Preprocess property
        /// </summary>
        public abstract void Preprocess();

        /// <summary>
        /// Postprocess property
        /// </summary>
        public abstract void Postprocess();

        /// <summary>
        /// Perform a unit of work
        /// </summary>
        public virtual void Execute()
        {
            bool bConnectionOpenedInThisMethod = false;
            bool bTransactionOpenedInThisMethod = false;
            bool bFinishedProcessing = false;

            // Perform local validation
            PerformLocalValidation();

            try
            {
                // Open the database connection
                if (null == m_Connection)
                {
                    m_Connection = new SqlConnection();
                    m_Connection.ConnectionString = m_ConnectionString;
                    m_Connection.Open();
                    bConnectionOpenedInThisMethod = true;
                }

                // Open the database transaction
                if (null == m_Transaction)
                {
                    if (bConnectionOpenedInThisMethod)
                    {
                        if (m_UseTransaction)
                        {
                            m_Transaction = m_Connection.BeginTransaction();
                            bTransactionOpenedInThisMethod = true;
                        }
                    }
                }

                // Perform preprocessing
                Preprocess();

                // Perform processing within scope of the transaction
                PerformWorkItem();

                // Perform post-processing
                Postprocess();

                // Commit the transaction
                if (bTransactionOpenedInThisMethod)
                {
                    if (m_UseTransaction)
                    {
                        m_Transaction.Commit();
                    }
                }

                // Mark processing as finished
                bFinishedProcessing = true;
            }
            catch (Exception ex)
            {
                // Package the error
                //PackageException(ex);

                // Rollback the transaction
                if (bTransactionOpenedInThisMethod)
                {
                    if (m_UseTransaction)
                    {
                        if (null != m_Transaction)
                        {
                            m_Transaction.Rollback();
                        }
                    }
                }
                throw ex;
            }
            finally
            {
                if (null != m_Transaction)
                {
                    m_Transaction = null;
                }
                if (bConnectionOpenedInThisMethod)
                {
                    if (null != m_Connection)
                    {
                        try
                        {
                            if (ConnectionState.Closed != m_Connection.State)
                            {
                                m_Connection.Close();
                            }
                        }
                        catch (Exception ex)
                        {
                            //PackageException(ex);
                            if (bFinishedProcessing)
                            {
                                throw;
                            }
                        }
                        finally
                        {
                            m_Connection = null;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Handle exception logging
        /// </summary>
        /// <param name="ex">Exception to be logged</param>
        protected void PackageException(Exception ex)
        {
            Console.WriteLine("Exception encountered");
            for (Exception f = ex; null != f; f = f.InnerException)
            {
                Console.WriteLine("=====================");
                Console.WriteLine(f.Message);
                Console.WriteLine(f.StackTrace.ToString());
                if (f.Data.Count > 0)
                {
                    foreach (object key in f.Data.Keys)
                    {
                        Console.WriteLine(key.ToString(), f.Data[key].ToString());
                    }
                }
            }
        }

        // <summary>
        // Connection property
        // </summary>
        public SqlConnection Connection
        {
            get
            {
                return m_Connection;
            }
            set
            {
                m_Connection = value;
            }
        }

        /// <summary>
        /// Transaction property
        /// </summary>
        public SqlTransaction Transaction
        {
            get
            {
                return m_Transaction;
            }
            set
            {
                m_Transaction = value;
            }
        }

        /// <summary>
        /// ConnectionString property
        /// </summary>
        public string ConnectionString
        {
            get
            {
                return m_ConnectionString;
            }
            set
            {
                m_ConnectionString = value;
            }
        }

        /// <summary>
        /// UseTransaction property
        /// </summary>
        public bool UseTransaction
        {
            get
            {
                return m_UseTransaction;
            }
            set
            {
                m_UseTransaction = value;
            }
        }

        public long CallerUserInfoId { get; set; }
        public string CallerUserName { get; set; }
        public DatabaseKey dbKey { get; set; }
        public DatabaseTypeEnum UseDatabase { get; set; }

        protected SqlConnection m_Connection;
        protected SqlTransaction m_Transaction;
        protected string m_ConnectionString;
        protected bool m_UseTransaction;

        public static void CheckReturnCodeStatus(string proc, int returnCode)
        {
            switch (returnCode)
            {
                case 0: // Success.
                    return;
                case -101:
                    throw new UpdateIndexMismatchException(string.Format("{0} update index mismatch.", proc));    // Update Index mismatch
                default:
                    throw new Exception(string.Format("{0} stored procedure returned invalid return code: {1}", proc, returnCode));
            }

        }
    }
}
