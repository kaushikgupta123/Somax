/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Client table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Client : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Client()
        {
            ClientId = 0;
            CompanyName = String.Empty;
            LegalName = String.Empty;
            PrimaryContact = String.Empty;
            NumberOfEmployees = 0;
            AnnualSales = 0;
            TaxIDNumber = String.Empty;
            VATNumber = String.Empty;
            Email = String.Empty;
            Website = String.Empty;
            Status = String.Empty;
            BusinessType = String.Empty;
            DateEstablished = new System.Nullable<System.DateTime>();
            NumberOfLocations = 0;
            OfficerName = String.Empty;
            OfficerTitle = String.Empty;
            OfficerPhone = String.Empty;
            DunnsNumber = String.Empty;
            PackageLevel = String.Empty;
            AppUsers = 0;
            MaxAppUsers = 0;
            LimitedUsers = 0;
            MaxLimitedUsers = 0;
            PhoneUsers = 0;
            MaxPhoneUsers = 0;
            WorkRequestUsers = 0;
            MaxWorkRequestUsers = 0;
            SiteControl = false;
            Purchasing = false;
            Sanitation = false;
            SanitationUsers = 0;
            MaxSanitationUsers = 0;
            SuperUsers = 0;
            MaxSuperUsers = 0;
            PrimarySICCode = String.Empty;
            NAICSCode = String.Empty;
            Sites = 0;
            MaxSites = 0;
            MinorityStatus = String.Empty;
            Localization = String.Empty;
            DefaultTimeZone = String.Empty;
            DefaultCustomerManager = String.Empty;
            MaxAttempts = 0;
            MaxTimeOut = 0;
            ConnectionString = String.Empty;
            TabletUsers = 0;
            MaxTabletUsers = 0;
            UIConfiguration = String.Empty;
            WOPrintMessage = String.Empty;
            PurchaseTermsandConds = String.Empty;
            PMLibCopy = false;
            AssetTree = false;
            ProdAppUsers = 0;
            MaxProdAppUsers = 0;
            UseAssetGroupMasterQuery = false;
            OnPremise = false;
            PMWOGenerateMethod = String.Empty;
            UseMultiStoreroom = false;
            MasterSanGenerateMethod = String.Empty;
            UseFormalProject = false;
            UpdateIndex = 0;
        }

        /// <summary>
        /// CompanyName property
        /// </summary>
        public string CompanyName { get; set; }

        /// <summary>
        /// LegalName property
        /// </summary>
        public string LegalName { get; set; }

        /// <summary>
        /// PrimaryContact property
        /// </summary>
        public string PrimaryContact { get; set; }

        /// <summary>
        /// NumberOfEmployees property
        /// </summary>
        public int NumberOfEmployees { get; set; }

        /// <summary>
        /// AnnualSales property
        /// </summary>
        public long AnnualSales { get; set; }

        /// <summary>
        /// TaxIDNumber property
        /// </summary>
        public string TaxIDNumber { get; set; }

        /// <summary>
        /// VATNumber property
        /// </summary>
        public string VATNumber { get; set; }

        /// <summary>
        /// Email property
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Website property
        /// </summary>
        public string Website { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// BusinessType property
        /// </summary>
        public string BusinessType { get; set; }

        /// <summary>
        /// DateEstablished property
        /// </summary>
        public DateTime? DateEstablished { get; set; }

        /// <summary>
        /// NumberOfLocations property
        /// </summary>
        public int NumberOfLocations { get; set; }

        /// <summary>
        /// OfficerName property
        /// </summary>
        public string OfficerName { get; set; }

        /// <summary>
        /// OfficerTitle property
        /// </summary>
        public string OfficerTitle { get; set; }

        /// <summary>
        /// OfficerPhone property
        /// </summary>
        public string OfficerPhone { get; set; }

        /// <summary>
        /// DunnsNumber property
        /// </summary>
        public string DunnsNumber { get; set; }

        /// <summary>
        /// PackageLevel property
        /// </summary>
        public string PackageLevel { get; set; }

        /// <summary>
        /// AppUsers property
        /// </summary>
        public int AppUsers { get; set; }

        /// <summary>
        /// MaxAppUsers property
        /// </summary>
        public int MaxAppUsers { get; set; }

        /// <summary>
        /// LimitedUsers property
        /// </summary>
        public int LimitedUsers { get; set; }

        /// <summary>
        /// MaxLimitedUsers property
        /// </summary>
        public int MaxLimitedUsers { get; set; }

        /// <summary>
        /// PhoneUsers property
        /// </summary>
        public int PhoneUsers { get; set; }

        /// <summary>
        /// MaxPhoneUsers property
        /// </summary>
        public int MaxPhoneUsers { get; set; }

        /// <summary>
        /// WorkRequestUsers property
        /// </summary>
        public int WorkRequestUsers { get; set; }

        /// <summary>
        /// MaxWorkRequestUsers property
        /// </summary>
        public int MaxWorkRequestUsers { get; set; }

        /// <summary>
        /// SiteControl property
        /// </summary>
        public bool SiteControl { get; set; }

        /// <summary>
        /// Purchasing property
        /// </summary>
        public bool Purchasing { get; set; }

        /// <summary>
        /// Sanitation property
        /// </summary>
        public bool Sanitation { get; set; }

        /// <summary>
        /// SanitationUsers property
        /// </summary>
        public int SanitationUsers { get; set; }

        /// <summary>
        /// MaxSanitationUsers property
        /// </summary>
        public int MaxSanitationUsers { get; set; }

        /// <summary>
        /// SuperUsers property
        /// </summary>
        public int SuperUsers { get; set; }

        /// <summary>
        /// MaxSuperUsers property
        /// </summary>
        public int MaxSuperUsers { get; set; }

        /// <summary>
        /// PrimarySICCode property
        /// </summary>
        public string PrimarySICCode { get; set; }

        /// <summary>
        /// NAICSCode property
        /// </summary>
        public string NAICSCode { get; set; }

        /// <summary>
        /// Sites property
        /// </summary>
        public int Sites { get; set; }

        /// <summary>
        /// MaxSites property
        /// </summary>
        public int MaxSites { get; set; }

        /// <summary>
        /// MinorityStatus property
        /// </summary>
        public string MinorityStatus { get; set; }

        /// <summary>
        /// Localization property
        /// </summary>
        public string Localization { get; set; }

        /// <summary>
        /// DefaultTimeZone property
        /// </summary>
        public string DefaultTimeZone { get; set; }

        /// <summary>
        /// DefaultCustomerManager property
        /// </summary>
        public string DefaultCustomerManager { get; set; }

        /// <summary>
        /// MaxAttempts property
        /// </summary>
        public int MaxAttempts { get; set; }

        /// <summary>
        /// MaxTimeOut property
        /// </summary>
        public int MaxTimeOut { get; set; }

        /// <summary>
        /// ConnectionString property
        /// </summary>
        public string ConnectionString { get; set; }

        /// <summary>
        /// TabletUsers property
        /// </summary>
        public int TabletUsers { get; set; }

        /// <summary>
        /// MaxTabletUsers property
        /// </summary>
        public int MaxTabletUsers { get; set; }

        /// <summary>
        /// UIConfiguration property
        /// </summary>
        public string UIConfiguration { get; set; }

        /// <summary>
        /// WOPrintMessage property
        /// </summary>
        public string WOPrintMessage { get; set; }

        /// <summary>
        /// PurchaseTermsandConds property
        /// </summary>
        public string PurchaseTermsandConds { get; set; }

        /// <summary>
        /// PMLibCopy property
        /// </summary>
        public bool PMLibCopy { get; set; }

        /// <summary>
        /// AssetTree property
        /// </summary>
        public bool AssetTree { get; set; }

        /// <summary>
        /// ProdAppUsers property
        /// </summary>
        public int ProdAppUsers { get; set; }

        /// <summary>
        /// MaxProdAppUsers property
        /// </summary>
        public int MaxProdAppUsers { get; set; }

        /// <summary>
        /// UseAssetGroupMasterQuery property
        /// </summary>
        public bool UseAssetGroupMasterQuery { get; set; }

        /// <summary>
        /// OnPremise property
        /// </summary>
        public bool OnPremise { get; set; }

        /// <summary>
        /// PMWOGenerateMethod property
        /// </summary>
        public string PMWOGenerateMethod { get; set; }

        /// <summary>
        /// UseMultiStoreroom property
        /// </summary>
        public bool UseMultiStoreroom { get; set; }

        /// <summary>
        /// MasterSanGenerateMethod property
        /// </summary>
        public string MasterSanGenerateMethod { get; set; }

        /// <summary>
        /// UseFormalProject property
        /// </summary>
        public bool UseFormalProject { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Client object.
        /// This routine should be applied to the usp_Client_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Client_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Client object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_Client obj = new b_Client();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Client object.
        /// This routine should be applied to the usp_Client_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Client_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // CompanyName column, nvarchar(63), not null
                CompanyName = reader.GetString(i++);

                // LegalName column, nvarchar(63), not null
                LegalName = reader.GetString(i++);

                // PrimaryContact column, nvarchar(63), not null
                PrimaryContact = reader.GetString(i++);

                // NumberOfEmployees column, int, not null
                NumberOfEmployees = reader.GetInt32(i++);

                // AnnualSales column, bigint, not null
                AnnualSales = reader.GetInt64(i++);

                // TaxIDNumber column, nvarchar(15), not null
                TaxIDNumber = reader.GetString(i++);

                // VATNumber column, nvarchar(31), not null
                VATNumber = reader.GetString(i++);

                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // Website column, nvarchar(255), not null
                Website = reader.GetString(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // BusinessType column, nvarchar(15), not null
                BusinessType = reader.GetString(i++);

                // DateEstablished column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateEstablished = reader.GetDateTime(i);
                }
                else
                {
                    DateEstablished = DateTime.MinValue;
                }
                i++;
                // NumberOfLocations column, int, not null
                NumberOfLocations = reader.GetInt32(i++);

                // OfficerName column, nvarchar(63), not null
                OfficerName = reader.GetString(i++);

                // OfficerTitle column, nvarchar(63), not null
                OfficerTitle = reader.GetString(i++);

                // OfficerPhone column, nvarchar(31), not null
                OfficerPhone = reader.GetString(i++);

                // DunnsNumber column, nvarchar(15), not null
                DunnsNumber = reader.GetString(i++);

                // PackageLevel column, nvarchar(15), not null
                PackageLevel = reader.GetString(i++);

                // AppUsers column, int, not null
                AppUsers = reader.GetInt32(i++);

                // MaxAppUsers column, int, not null
                MaxAppUsers = reader.GetInt32(i++);

                // LimitedUsers column, int, not null
                LimitedUsers = reader.GetInt32(i++);

                // MaxLimitedUsers column, int, not null
                MaxLimitedUsers = reader.GetInt32(i++);

                // PhoneUsers column, int, not null
                PhoneUsers = reader.GetInt32(i++);

                // MaxPhoneUsers column, int, not null
                MaxPhoneUsers = reader.GetInt32(i++);

                // WorkRequestUsers column, int, not null
                WorkRequestUsers = reader.GetInt32(i++);

                // MaxWorkRequestUsers column, int, not null
                MaxWorkRequestUsers = reader.GetInt32(i++);

                // SiteControl column, bit, not null
                SiteControl = reader.GetBoolean(i++);

                // Purchasing column, bit, not null
                Purchasing = reader.GetBoolean(i++);

                // Sanitation column, bit, not null
                Sanitation = reader.GetBoolean(i++);

                // SanitationUsers column, int, not null
                SanitationUsers = reader.GetInt32(i++);

                // MaxSanitationUsers column, int, not null
                MaxSanitationUsers = reader.GetInt32(i++);

                // SuperUsers column, int, not null
                SuperUsers = reader.GetInt32(i++);

                // MaxSuperUsers column, int, not null
                MaxSuperUsers = reader.GetInt32(i++);

                // PrimarySICCode column, nvarchar(7), not null
                PrimarySICCode = reader.GetString(i++);

                // NAICSCode column, nvarchar(7), not null
                NAICSCode = reader.GetString(i++);

                // Sites column, int, not null
                Sites = reader.GetInt32(i++);

                // MaxSites column, int, not null
                MaxSites = reader.GetInt32(i++);

                // MinorityStatus column, nvarchar(15), not null
                MinorityStatus = reader.GetString(i++);

                // Localization column, nvarchar(255), not null
                Localization = reader.GetString(i++);

                // DefaultTimeZone column, nvarchar(31), not null
                DefaultTimeZone = reader.GetString(i++);

                // DefaultCustomerManager column, nvarchar(63), not null
                DefaultCustomerManager = reader.GetString(i++);

                // MaxAttempts column, int, not null
                MaxAttempts = reader.GetInt32(i++);

                // MaxTimeOut column, int, not null
                MaxTimeOut = reader.GetInt32(i++);

                // ConnectionString column, nvarchar(511), not null
                ConnectionString = reader.GetString(i++);

                // TabletUsers column, int, not null
                TabletUsers = reader.GetInt32(i++);

                // MaxTabletUsers column, int, not null
                MaxTabletUsers = reader.GetInt32(i++);

                // UIConfiguration column, nvarchar(255), not null
                UIConfiguration = reader.GetString(i++);

                // WOPrintMessage column, nvarchar(511), not null
                WOPrintMessage = reader.GetString(i++);

                // PurchaseTermsandConds column, nvarchar(255), not null
                PurchaseTermsandConds = reader.GetString(i++);

                // PMLibCopy column, bit, not null
                PMLibCopy = reader.GetBoolean(i++);

                // AssetTree column, bit, not null
                AssetTree = reader.GetBoolean(i++);

                // ProdAppUsers column, int, not null
                ProdAppUsers = reader.GetInt32(i++);

                // MaxProdAppUsers column, int, not null
                MaxProdAppUsers = reader.GetInt32(i++);

                // UseAssetGroupMasterQuery column, bit, not null
                UseAssetGroupMasterQuery = reader.GetBoolean(i++);

                // OnPremise column, bit, not null
                OnPremise = reader.GetBoolean(i++);

                // PMWOGenerateMethod column, nvarchar(15), not null
                PMWOGenerateMethod = reader.GetString(i++);

                // UseMultiStoreroom column, bit, not null
                UseMultiStoreroom = reader.GetBoolean(i++);

                // MasterSanGenerateMethod column, nvarchar(15), not null
                MasterSanGenerateMethod = reader.GetString(i++);

                // UseFormalProject column, bit, not null
                UseFormalProject = reader.GetBoolean(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["CompanyName"].ToString(); }
                catch { missing.Append("CompanyName "); }

                try { reader["LegalName"].ToString(); }
                catch { missing.Append("LegalName "); }

                try { reader["PrimaryContact"].ToString(); }
                catch { missing.Append("PrimaryContact "); }

                try { reader["NumberOfEmployees"].ToString(); }
                catch { missing.Append("NumberOfEmployees "); }

                try { reader["AnnualSales"].ToString(); }
                catch { missing.Append("AnnualSales "); }

                try { reader["TaxIDNumber"].ToString(); }
                catch { missing.Append("TaxIDNumber "); }

                try { reader["VATNumber"].ToString(); }
                catch { missing.Append("VATNumber "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["Website"].ToString(); }
                catch { missing.Append("Website "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["BusinessType"].ToString(); }
                catch { missing.Append("BusinessType "); }

                try { reader["DateEstablished"].ToString(); }
                catch { missing.Append("DateEstablished "); }

                try { reader["NumberOfLocations"].ToString(); }
                catch { missing.Append("NumberOfLocations "); }

                try { reader["OfficerName"].ToString(); }
                catch { missing.Append("OfficerName "); }

                try { reader["OfficerTitle"].ToString(); }
                catch { missing.Append("OfficerTitle "); }

                try { reader["OfficerPhone"].ToString(); }
                catch { missing.Append("OfficerPhone "); }

                try { reader["DunnsNumber"].ToString(); }
                catch { missing.Append("DunnsNumber "); }

                try { reader["PackageLevel"].ToString(); }
                catch { missing.Append("PackageLevel "); }

                try { reader["AppUsers"].ToString(); }
                catch { missing.Append("AppUsers "); }

                try { reader["MaxAppUsers"].ToString(); }
                catch { missing.Append("MaxAppUsers "); }

                try { reader["LimitedUsers"].ToString(); }
                catch { missing.Append("LimitedUsers "); }

                try { reader["MaxLimitedUsers"].ToString(); }
                catch { missing.Append("MaxLimitedUsers "); }

                try { reader["PhoneUsers"].ToString(); }
                catch { missing.Append("PhoneUsers "); }

                try { reader["MaxPhoneUsers"].ToString(); }
                catch { missing.Append("MaxPhoneUsers "); }

                try { reader["WorkRequestUsers"].ToString(); }
                catch { missing.Append("WorkRequestUsers "); }

                try { reader["MaxWorkRequestUsers"].ToString(); }
                catch { missing.Append("MaxWorkRequestUsers "); }

                try { reader["SiteControl"].ToString(); }
                catch { missing.Append("SiteControl "); }

                try { reader["Purchasing"].ToString(); }
                catch { missing.Append("Purchasing "); }

                try { reader["Sanitation"].ToString(); }
                catch { missing.Append("Sanitation "); }

                try { reader["SanitationUsers"].ToString(); }
                catch { missing.Append("SanitationUsers "); }

                try { reader["MaxSanitationUsers"].ToString(); }
                catch { missing.Append("MaxSanitationUsers "); }

                try { reader["SuperUsers"].ToString(); }
                catch { missing.Append("SuperUsers "); }

                try { reader["MaxSuperUsers"].ToString(); }
                catch { missing.Append("MaxSuperUsers "); }

                try { reader["PrimarySICCode"].ToString(); }
                catch { missing.Append("PrimarySICCode "); }

                try { reader["NAICSCode"].ToString(); }
                catch { missing.Append("NAICSCode "); }

                try { reader["Sites"].ToString(); }
                catch { missing.Append("Sites "); }

                try { reader["MaxSites"].ToString(); }
                catch { missing.Append("MaxSites "); }

                try { reader["MinorityStatus"].ToString(); }
                catch { missing.Append("MinorityStatus "); }

                try { reader["Localization"].ToString(); }
                catch { missing.Append("Localization "); }

                try { reader["DefaultTimeZone"].ToString(); }
                catch { missing.Append("DefaultTimeZone "); }

                try { reader["DefaultCustomerManager"].ToString(); }
                catch { missing.Append("DefaultCustomerManager "); }

                try { reader["MaxAttempts"].ToString(); }
                catch { missing.Append("MaxAttempts "); }

                try { reader["MaxTimeOut"].ToString(); }
                catch { missing.Append("MaxTimeOut "); }

                try { reader["ConnectionString"].ToString(); }
                catch { missing.Append("ConnectionString "); }

                try { reader["TabletUsers"].ToString(); }
                catch { missing.Append("TabletUsers "); }

                try { reader["MaxTabletUsers"].ToString(); }
                catch { missing.Append("MaxTabletUsers "); }

                try { reader["UIConfiguration"].ToString(); }
                catch { missing.Append("UIConfiguration "); }

                try { reader["WOPrintMessage"].ToString(); }
                catch { missing.Append("WOPrintMessage "); }

                try { reader["PurchaseTermsandConds"].ToString(); }
                catch { missing.Append("PurchaseTermsandConds "); }

                try { reader["PMLibCopy"].ToString(); }
                catch { missing.Append("PMLibCopy "); }

                try { reader["AssetTree"].ToString(); }
                catch { missing.Append("AssetTree "); }

                try { reader["ProdAppUsers"].ToString(); }
                catch { missing.Append("ProdAppUsers "); }

                try { reader["MaxProdAppUsers"].ToString(); }
                catch { missing.Append("MaxProdAppUsers "); }

                try { reader["UseAssetGroupMasterQuery"].ToString(); }
                catch { missing.Append("UseAssetGroupMasterQuery "); }

                try { reader["OnPremise"].ToString(); }
                catch { missing.Append("OnPremise "); }

                try { reader["PMWOGenerateMethod"].ToString(); }
                catch { missing.Append("PMWOGenerateMethod "); }

                try { reader["UseMultiStoreroom"].ToString(); }
                catch { missing.Append("UseMultiStoreroom "); }

                try { reader["MasterSanGenerateMethod"].ToString(); }
                catch { missing.Append("MasterSanGenerateMethod "); }

                try { reader["UseFormalProject"].ToString(); }
                catch { missing.Append("UseFormalProject "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Client table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Client_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Client table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Client_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Client table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Client_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Client table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Client[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Client[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Client> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Client[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Client>(reader => { b_Client obj = new b_Client(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Client_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Client[])results.ToArray(typeof(b_Client));
                }
                else
                {
                    data = new b_Client[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Client table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Client[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Client> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Client>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Client_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Client objects.
        /// </summary>
        /// <param name="obj">b_Client object to compare against the current object.</param>
        public bool Equals(b_Client obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (!CompanyName.Equals(obj.CompanyName)) return false;
            if (!LegalName.Equals(obj.LegalName)) return false;
            if (!PrimaryContact.Equals(obj.PrimaryContact)) return false;
            if (NumberOfEmployees != obj.NumberOfEmployees) return false;
            if (AnnualSales != obj.AnnualSales) return false;
            if (!TaxIDNumber.Equals(obj.TaxIDNumber)) return false;
            if (!VATNumber.Equals(obj.VATNumber)) return false;
            if (!Email.Equals(obj.Email)) return false;
            if (!Website.Equals(obj.Website)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!BusinessType.Equals(obj.BusinessType)) return false;
            if (!DateEstablished.Equals(obj.DateEstablished)) return false;
            if (NumberOfLocations != obj.NumberOfLocations) return false;
            if (!OfficerName.Equals(obj.OfficerName)) return false;
            if (!OfficerTitle.Equals(obj.OfficerTitle)) return false;
            if (!OfficerPhone.Equals(obj.OfficerPhone)) return false;
            if (!DunnsNumber.Equals(obj.DunnsNumber)) return false;
            if (!PackageLevel.Equals(obj.PackageLevel)) return false;
            if (AppUsers != obj.AppUsers) return false;
            if (MaxAppUsers != obj.MaxAppUsers) return false;
            if (LimitedUsers != obj.LimitedUsers) return false;
            if (MaxLimitedUsers != obj.MaxLimitedUsers) return false;
            if (PhoneUsers != obj.PhoneUsers) return false;
            if (MaxPhoneUsers != obj.MaxPhoneUsers) return false;
            if (WorkRequestUsers != obj.WorkRequestUsers) return false;
            if (MaxWorkRequestUsers != obj.MaxWorkRequestUsers) return false;
            if (SiteControl != obj.SiteControl) return false;
            if (Purchasing != obj.Purchasing) return false;
            if (Sanitation != obj.Sanitation) return false;
            if (SanitationUsers != obj.SanitationUsers) return false;
            if (MaxSanitationUsers != obj.MaxSanitationUsers) return false;
            if (SuperUsers != obj.SuperUsers) return false;
            if (MaxSuperUsers != obj.MaxSuperUsers) return false;
            if (!PrimarySICCode.Equals(obj.PrimarySICCode)) return false;
            if (!NAICSCode.Equals(obj.NAICSCode)) return false;
            if (Sites != obj.Sites) return false;
            if (MaxSites != obj.MaxSites) return false;
            if (!MinorityStatus.Equals(obj.MinorityStatus)) return false;
            if (!Localization.Equals(obj.Localization)) return false;
            if (!DefaultTimeZone.Equals(obj.DefaultTimeZone)) return false;
            if (!DefaultCustomerManager.Equals(obj.DefaultCustomerManager)) return false;
            if (MaxAttempts != obj.MaxAttempts) return false;
            if (MaxTimeOut != obj.MaxTimeOut) return false;
            if (!ConnectionString.Equals(obj.ConnectionString)) return false;
            if (TabletUsers != obj.TabletUsers) return false;
            if (MaxTabletUsers != obj.MaxTabletUsers) return false;
            if (!UIConfiguration.Equals(obj.UIConfiguration)) return false;
            if (!WOPrintMessage.Equals(obj.WOPrintMessage)) return false;
            if (!PurchaseTermsandConds.Equals(obj.PurchaseTermsandConds)) return false;
            if (PMLibCopy != obj.PMLibCopy) return false;
            if (AssetTree != obj.AssetTree) return false;
            if (ProdAppUsers != obj.ProdAppUsers) return false;
            if (MaxProdAppUsers != obj.MaxProdAppUsers) return false;
            if (UseAssetGroupMasterQuery != obj.UseAssetGroupMasterQuery) return false;
            if (OnPremise != obj.OnPremise) return false;
            if (!PMWOGenerateMethod.Equals(obj.PMWOGenerateMethod)) return false;
            if (UseMultiStoreroom != obj.UseMultiStoreroom) return false;
            if (!MasterSanGenerateMethod.Equals(obj.MasterSanGenerateMethod)) return false;
            if (UseFormalProject != obj.UseFormalProject) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Client objects.
        /// </summary>
        /// <param name="obj1">b_Client object to use in the comparison.</param>
        /// <param name="obj2">b_Client object to use in the comparison.</param>
        public static bool Equals(b_Client obj1, b_Client obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
