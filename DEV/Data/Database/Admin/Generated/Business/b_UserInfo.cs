/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the UserInfo table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_UserInfo : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_UserInfo()
        {
            ClientId = 0;
            UserInfoId = 0;
            SecurityProfileId = 0;
            FirstName = String.Empty;
            LastName = String.Empty;
            MiddleName = String.Empty;
            Email = String.Empty;
            Localization = String.Empty;
            UIConfiguration = String.Empty;
            TimeZone = String.Empty;
            IsSuperUser = false;
            DefaultSiteId = 0;
            TabletUser = false;
            PhoneUser = false;
            WebAppUser = false;
            UserType = String.Empty;
            ResultsPerPage = 0;
            StartPage = String.Empty;
            IsPasswordTemporary = false;
            MaintenanceNotify = false;
            UIVersion = String.Empty;
            IsSiteAdmin = false;
            //V2SecurityProfileId = 0;
            EmployeeId = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        public long UserInfoId { get; set; }

        /// <summary>
        /// SecurityProfileId property
        /// </summary>
        public long SecurityProfileId { get; set; }

        /// <summary>
        /// FirstName property
        /// </summary>
        public string FirstName { get; set; }

        /// <summary>
        /// LastName property
        /// </summary>
        public string LastName { get; set; }

        /// <summary>
        /// MiddleName property
        /// </summary>
        public string MiddleName { get; set; }

        /// <summary>
        /// Email property
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Localization property
        /// </summary>
        public string Localization { get; set; }

        /// <summary>
        /// UIConfiguration property
        /// </summary>
        public string UIConfiguration { get; set; }

        /// <summary>
        /// TimeZone property
        /// </summary>
        public string TimeZone { get; set; }

        /// <summary>
        /// IsSuperUser property
        /// </summary>
        public bool IsSuperUser { get; set; }

        /// <summary>
        /// DefaultSiteId property
        /// </summary>
        public long DefaultSiteId { get; set; }

        /// <summary>
        /// TabletUser property
        /// </summary>
        public bool TabletUser { get; set; }

        /// <summary>
        /// PhoneUser property
        /// </summary>
        public bool PhoneUser { get; set; }

        /// <summary>
        /// WebAppUser property
        /// </summary>
        public bool WebAppUser { get; set; }

        /// <summary>
        /// UserType property
        /// </summary>
        public string UserType { get; set; }

        /// <summary>
        /// ResultsPerPage property
        /// </summary>
        public int ResultsPerPage { get; set; }

        /// <summary>
        /// StartPage property
        /// </summary>
        public string StartPage { get; set; }

        /// <summary>
        /// IsPasswordTemporary property
        /// </summary>
        public bool IsPasswordTemporary { get; set; }

        /// <summary>
        /// MaintenanceNotify property
        /// </summary>
        public bool MaintenanceNotify { get; set; }

        /// <summary>
        /// UIVersion property
        /// </summary>
        public string UIVersion { get; set; }

        /// <summary>
        /// IsSiteAdmin property
        /// </summary>
        public bool IsSiteAdmin { get; set; }

        /// <summary>
        /// V2SecurityProfileId property
        /// </summary>
        //public long V2SecurityProfileId { get; set; }

        /// <summary>
        /// EmployeeId property
        /// </summary>
        public string EmployeeId { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_UserInfo object.
        /// This routine should be applied to the usp_UserInfo_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_UserInfo_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_UserInfo object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_UserInfo obj = new b_UserInfo();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_UserInfo object.
        /// This routine should be applied to the usp_UserInfo_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_UserInfo_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // SecurityProfileId column, bigint, not null
                SecurityProfileId = reader.GetInt64(i++);

                // FirstName column, nvarchar(63), not null
                FirstName = reader.GetString(i++);

                // LastName column, nvarchar(63), not null
                LastName = reader.GetString(i++);

                // MiddleName column, nvarchar(63), not null
                MiddleName = reader.GetString(i++);

                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // Localization column, nvarchar(255), not null
                Localization = reader.GetString(i++);

                // UIConfiguration column, nvarchar(255), not null
                UIConfiguration = reader.GetString(i++);

                // TimeZone column, nvarchar(31), not null
                TimeZone = reader.GetString(i++);

                // IsSuperUser column, bit, not null
                IsSuperUser = reader.GetBoolean(i++);

                // DefaultSiteId column, bigint, not null
                DefaultSiteId = reader.GetInt64(i++);

                // TabletUser column, bit, not null
                TabletUser = reader.GetBoolean(i++);

                // PhoneUser column, bit, not null
                PhoneUser = reader.GetBoolean(i++);

                // WebAppUser column, bit, not null
                WebAppUser = reader.GetBoolean(i++);

                // UserType column, nvarchar(31), not null
                UserType = reader.GetString(i++);

                // ResultsPerPage column, int, not null
                ResultsPerPage = reader.GetInt32(i++);

                // StartPage column, nvarchar(255), not null
                StartPage = reader.GetString(i++);

                // IsPasswordTemporary column, bit, not null
                IsPasswordTemporary = reader.GetBoolean(i++);

                // MaintenanceNotify column, bit, not null
                MaintenanceNotify = reader.GetBoolean(i++);

                // UIVersion column, nvarchar(15), not null
                UIVersion = reader.GetString(i++);

                // IsSiteAdmin column, bit, not null
                IsSiteAdmin = reader.GetBoolean(i++);

                //// V2SecurityProfileId column, bigint, not null
                //V2SecurityProfileId = reader.GetInt64(i++);

                // EmployeeId column, nvarchar(31), not null
                EmployeeId = reader.GetString(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["SecurityProfileId"].ToString(); }
                catch { missing.Append("SecurityProfileId "); }

                try { reader["FirstName"].ToString(); }
                catch { missing.Append("FirstName "); }

                try { reader["LastName"].ToString(); }
                catch { missing.Append("LastName "); }

                try { reader["MiddleName"].ToString(); }
                catch { missing.Append("MiddleName "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["Localization"].ToString(); }
                catch { missing.Append("Localization "); }

                try { reader["UIConfiguration"].ToString(); }
                catch { missing.Append("UIConfiguration "); }

                try { reader["TimeZone"].ToString(); }
                catch { missing.Append("TimeZone "); }

                try { reader["IsSuperUser"].ToString(); }
                catch { missing.Append("IsSuperUser "); }

                try { reader["DefaultSiteId"].ToString(); }
                catch { missing.Append("DefaultSiteId "); }

                try { reader["TabletUser"].ToString(); }
                catch { missing.Append("TabletUser "); }

                try { reader["PhoneUser"].ToString(); }
                catch { missing.Append("PhoneUser "); }

                try { reader["WebAppUser"].ToString(); }
                catch { missing.Append("WebAppUser "); }

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType "); }

                try { reader["ResultsPerPage"].ToString(); }
                catch { missing.Append("ResultsPerPage "); }

                try { reader["StartPage"].ToString(); }
                catch { missing.Append("StartPage "); }

                try { reader["IsPasswordTemporary"].ToString(); }
                catch { missing.Append("IsPasswordTemporary "); }

                try { reader["MaintenanceNotify"].ToString(); }
                catch { missing.Append("MaintenanceNotify "); }

                try { reader["UIVersion"].ToString(); }
                catch { missing.Append("UIVersion "); }

                try { reader["IsSiteAdmin"].ToString(); }
                catch { missing.Append("IsSiteAdmin "); }

                //try { reader["V2SecurityProfileId"].ToString(); }
                //catch { missing.Append("V2SecurityProfileId "); }

                try { reader["EmployeeId"].ToString(); }
                catch { missing.Append("EmployeeId "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a UserInfo table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UserInfo_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the UserInfo table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UserInfo_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the UserInfo table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UserInfo_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all UserInfo table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_UserInfo[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_UserInfo[] data
        )
        {
            Database.SqlClient.ProcessRow<b_UserInfo> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_UserInfo[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_UserInfo>(reader => { b_UserInfo obj = new b_UserInfo(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_UserInfo_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_UserInfo[])results.ToArray(typeof(b_UserInfo));
                }
                else
                {
                    data = new b_UserInfo[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve UserInfo table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_UserInfo[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_UserInfo> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_UserInfo>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_UserInfo_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_UserInfo objects.
        /// </summary>
        /// <param name="obj">b_UserInfo object to compare against the current object.</param>
        public bool Equals(b_UserInfo obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (UserInfoId != obj.UserInfoId) return false;
            if (SecurityProfileId != obj.SecurityProfileId) return false;
            if (!FirstName.Equals(obj.FirstName)) return false;
            if (!LastName.Equals(obj.LastName)) return false;
            if (!MiddleName.Equals(obj.MiddleName)) return false;
            if (!Email.Equals(obj.Email)) return false;
            if (!Localization.Equals(obj.Localization)) return false;
            if (!UIConfiguration.Equals(obj.UIConfiguration)) return false;
            if (!TimeZone.Equals(obj.TimeZone)) return false;
            if (IsSuperUser != obj.IsSuperUser) return false;
            if (DefaultSiteId != obj.DefaultSiteId) return false;
            if (TabletUser != obj.TabletUser) return false;
            if (PhoneUser != obj.PhoneUser) return false;
            if (WebAppUser != obj.WebAppUser) return false;
            if (!UserType.Equals(obj.UserType)) return false;
            if (ResultsPerPage != obj.ResultsPerPage) return false;
            if (!StartPage.Equals(obj.StartPage)) return false;
            if (IsPasswordTemporary != obj.IsPasswordTemporary) return false;
            if (MaintenanceNotify != obj.MaintenanceNotify) return false;
            if (!UIVersion.Equals(obj.UIVersion)) return false;
            if (IsSiteAdmin != obj.IsSiteAdmin) return false;
            //if (V2SecurityProfileId != obj.V2SecurityProfileId) return false;
            if (!EmployeeId.Equals(obj.EmployeeId)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_UserInfo objects.
        /// </summary>
        /// <param name="obj1">b_UserInfo object to use in the comparison.</param>
        /// <param name="obj2">b_UserInfo object to use in the comparison.</param>
        public static bool Equals(b_UserInfo obj1, b_UserInfo obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
