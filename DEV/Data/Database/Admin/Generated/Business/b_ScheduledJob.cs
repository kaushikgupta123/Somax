/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using SOMAX.G4.Data.Database.SqlClient;

namespace SOMAX.G4.Data.Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ScheduledJob table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ScheduledJob : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ScheduledJob ()
        {
            ClientId = 0;
            ScheduledJobId = 0;
            ObjectName = String.Empty;
            ServiceName = String.Empty;
            WaitTime = 0;
            NextDue = new System.Nullable<System.DateTime>();
            Status = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// ScheduledJobId property
        /// </summary>
        public long ScheduledJobId { get; set; }

        /// <summary>
        /// ObjectName property
        /// </summary>
        public string ObjectName { get; set; }

        /// <summary>
        /// ServiceName property
        /// </summary>
        public string ServiceName { get; set; }

        /// <summary>
        /// WaitTime property
        /// </summary>
        public long WaitTime { get; set; }

        /// <summary>
        /// NextDue property
        /// </summary>
        public DateTime? NextDue { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ScheduledJob object.
        /// This routine should be applied to the usp_ScheduledJob_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ScheduledJob_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ScheduledJob object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ScheduledJob obj = new b_ScheduledJob();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ScheduledJob object.
        /// This routine should be applied to the usp_ScheduledJob_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ScheduledJob_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // ScheduledJobId column, bigint, not null
                        ScheduledJobId = reader.GetInt64(i++);

                        // ObjectName column, nvarchar(127), not null
                        ObjectName = reader.GetString(i++);

                        // ServiceName column, nvarchar(63), not null
                        ServiceName = reader.GetString(i++);

                        // WaitTime column, bigint, not null
                        WaitTime = reader.GetInt64(i++);

            // NextDue column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    NextDue = reader.GetDateTime(i);
            }
            else
            {
                    NextDue = DateTime.MinValue;
            }
            i++;
                        // Status column, nvarchar(31), not null
                        Status = reader.GetString(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["ScheduledJobId"].ToString(); }
            catch { missing.Append("ScheduledJobId "); }
            
            try { reader["ObjectName"].ToString(); }
            catch { missing.Append("ObjectName "); }
            
            try { reader["ServiceName"].ToString(); }
            catch { missing.Append("ServiceName "); }
            
            try { reader["WaitTime"].ToString(); }
            catch { missing.Append("WaitTime "); }
            
            try { reader["NextDue"].ToString(); }
            catch { missing.Append("NextDue "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a ScheduledJob table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                SOMAX.G4.Data.Database.StoredProcedure.usp_ScheduledJob_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ScheduledJob table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                SOMAX.G4.Data.Database.StoredProcedure.usp_ScheduledJob_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ScheduledJob table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                SOMAX.G4.Data.Database.StoredProcedure.usp_ScheduledJob_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ScheduledJob table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ScheduledJob[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ScheduledJob[] data
        )
        {
            SOMAX.G4.Data.Database.SqlClient.ProcessRow<b_ScheduledJob> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ScheduledJob[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new SOMAX.G4.Data.Database.SqlClient.ProcessRow<b_ScheduledJob>(reader => { b_ScheduledJob obj = new b_ScheduledJob(); obj.LoadFromDatabase(reader); return obj; });
                results = SOMAX.G4.Data.Database.StoredProcedure.usp_ScheduledJob_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_ScheduledJob[])results.ToArray(typeof(b_ScheduledJob));
                }
                else
                {
                    data = new b_ScheduledJob[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ScheduledJob table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ScheduledJob[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SOMAX.G4.Data.Database.SqlClient.ProcessRow<b_ScheduledJob> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new SOMAX.G4.Data.Database.SqlClient.ProcessRow<b_ScheduledJob>(reader => { this.LoadFromDatabase(reader); return this; });
                SOMAX.G4.Data.Database.StoredProcedure.usp_ScheduledJob_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ScheduledJob objects.
        /// </summary>
        /// <param name="obj">b_ScheduledJob object to compare against the current object.</param>
        public bool Equals (b_ScheduledJob obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (ScheduledJobId != obj.ScheduledJobId) return false;
            if (!ObjectName.Equals(obj.ObjectName)) return false;
            if (!ServiceName.Equals(obj.ServiceName)) return false;
            if (WaitTime != obj.WaitTime) return false;
            if (!NextDue.Equals(obj.NextDue)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ScheduledJob objects.
        /// </summary>
        /// <param name="obj1">b_ScheduledJob object to use in the comparison.</param>
        /// <param name="obj2">b_ScheduledJob object to use in the comparison.</param>
        public static bool Equals (b_ScheduledJob obj1, b_ScheduledJob obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
