/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the LoginInfo table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_LoginInfo : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_LoginInfo ()
        {
            ClientId = 0;
            LoginInfoId = 0;
            UserInfoId = 0;
            UserName = String.Empty;
            Password = String.Empty;
            SecurityQuestion = String.Empty;
            SecurityResponse = String.Empty;
            FailedAttempts = 0;
            LastFailureDate = new System.Nullable<System.DateTime>();
            LastLoginDate = DateTime.MinValue;
            IsActive = false;
            ResetPasswordCode = System.Guid.Empty;
            ResetPasswordRequestDate = new System.Nullable<System.DateTime>();
            TempPassword = String.Empty;
            LastPWChangeDate = new System.Nullable<System.DateTime>();
            SOMAXAdmin = false;
            UpdateIndex = 0;
        }

        /// <summary>
        /// LoginInfoId property
        /// </summary>
        public long LoginInfoId { get; set; }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        public long UserInfoId { get; set; }

        /// <summary>
        /// UserName property
        /// </summary>
        public string UserName { get; set; }

        /// <summary>
        /// Password property
        /// </summary>
        public string Password { get; set; }

        /// <summary>
        /// SecurityQuestion property
        /// </summary>
        public string SecurityQuestion { get; set; }

        /// <summary>
        /// SecurityResponse property
        /// </summary>
        public string SecurityResponse { get; set; }

        /// <summary>
        /// FailedAttempts property
        /// </summary>
        public int FailedAttempts { get; set; }

        /// <summary>
        /// LastFailureDate property
        /// </summary>
        public DateTime? LastFailureDate { get; set; }

        /// <summary>
        /// LastLoginDate property
        /// </summary>
        public DateTime LastLoginDate { get; set; }

        /// <summary>
        /// IsActive property
        /// </summary>
        public bool IsActive { get; set; }

        /// <summary>
        /// ResetPasswordCode property
        /// </summary>
        public System.Guid ResetPasswordCode { get; set; }

        /// <summary>
        /// ResetPasswordRequestDate property
        /// </summary>
        public DateTime? ResetPasswordRequestDate { get; set; }

        /// <summary>
        /// TempPassword property
        /// </summary>
        public string TempPassword { get; set; }

        /// <summary>
        /// LastPWChangeDate property
        /// </summary>
        public DateTime? LastPWChangeDate { get; set; }

        /// <summary>
        /// SOMAXAdmin property
        /// </summary>
        public bool SOMAXAdmin { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_LoginInfo object.
        /// This routine should be applied to the usp_LoginInfo_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_LoginInfo_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_LoginInfo object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_LoginInfo obj = new b_LoginInfo();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_LoginInfo object.
        /// This routine should be applied to the usp_LoginInfo_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_LoginInfo_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // LoginInfoId column, bigint, not null
                        LoginInfoId = reader.GetInt64(i++);

                        // UserInfoId column, bigint, not null
                        UserInfoId = reader.GetInt64(i++);

                        // UserName column, nvarchar(63), not null
                        UserName = reader.GetString(i++);

                        // Password column, nvarchar(255), not null
                        Password = reader.GetString(i++);

                        // SecurityQuestion column, nvarchar(511), not null
                        SecurityQuestion = reader.GetString(i++);

                        // SecurityResponse column, nvarchar(50), not null
                        SecurityResponse = reader.GetString(i++);

                        // FailedAttempts column, int, not null
                        FailedAttempts = reader.GetInt32(i++);

            // LastFailureDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastFailureDate = reader.GetDateTime(i);
            }
            else
            {
                    LastFailureDate = DateTime.MinValue;
            }
            i++;
            // LastLoginDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastLoginDate = reader.GetDateTime(i);
            }
            else
            {
                    LastLoginDate = DateTime.MinValue;
            }
            i++;
                        // IsActive column, bit, not null
                        IsActive = reader.GetBoolean(i++);

                        // ResetPasswordCode column, uniqueidentifier, not null
                        if (false == reader.IsDBNull(i))
                        {
                          ResetPasswordCode = reader.GetGuid(i);
                        }
                        else
                        {
                           ResetPasswordCode = Guid.Empty;
                        }
                        i++;

            // ResetPasswordRequestDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ResetPasswordRequestDate = reader.GetDateTime(i);
            }
            else
            {
                    ResetPasswordRequestDate = DateTime.MinValue;
            }
            i++;
                        // TempPassword column, nvarchar(255), not null
                        TempPassword = reader.GetString(i++);

            // LastPWChangeDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastPWChangeDate = reader.GetDateTime(i);
            }
            else
            {
                    LastPWChangeDate = DateTime.MinValue;
            }
            i++;
                        // SOMAXAdmin column, bit, not null
                        SOMAXAdmin = reader.GetBoolean(i++);

                        // UpdateIndex column, bigint, not null
                        UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["LoginInfoId"].ToString(); }
            catch { missing.Append("LoginInfoId "); }
            
            try { reader["UserInfoId"].ToString(); }
            catch { missing.Append("UserInfoId "); }
            
            try { reader["UserName"].ToString(); }
            catch { missing.Append("UserName "); }
            
            try { reader["Password"].ToString(); }
            catch { missing.Append("Password "); }
            
            try { reader["SecurityQuestion"].ToString(); }
            catch { missing.Append("SecurityQuestion "); }
            
            try { reader["SecurityResponse"].ToString(); }
            catch { missing.Append("SecurityResponse "); }
            
            try { reader["FailedAttempts"].ToString(); }
            catch { missing.Append("FailedAttempts "); }
            
            try { reader["LastFailureDate"].ToString(); }
            catch { missing.Append("LastFailureDate "); }
            
            try { reader["LastLoginDate"].ToString(); }
            catch { missing.Append("LastLoginDate "); }
            
            try { reader["IsActive"].ToString(); }
            catch { missing.Append("IsActive "); }
            
            try { reader["ResetPasswordCode"].ToString(); }
            catch { missing.Append("ResetPasswordCode "); }
            
            try { reader["ResetPasswordRequestDate"].ToString(); }
            catch { missing.Append("ResetPasswordRequestDate "); }
            
            try { reader["TempPassword"].ToString(); }
            catch { missing.Append("TempPassword "); }
            
            try { reader["LastPWChangeDate"].ToString(); }
            catch { missing.Append("LastPWChangeDate "); }
            
            try { reader["SOMAXAdmin"].ToString(); }
            catch { missing.Append("SOMAXAdmin "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a LoginInfo table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_LoginInfo_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the LoginInfo table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_LoginInfo_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the LoginInfo table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_LoginInfo_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all LoginInfo table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_LoginInfo[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_LoginInfo[] data
        )
        {
            Database.SqlClient.ProcessRow<b_LoginInfo> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_LoginInfo[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_LoginInfo>(reader => { b_LoginInfo obj = new b_LoginInfo(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_LoginInfo_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_LoginInfo[])results.ToArray(typeof(b_LoginInfo));
                }
                else
                {
                    data = new b_LoginInfo[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve LoginInfo table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_LoginInfo[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_LoginInfo> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_LoginInfo>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_LoginInfo_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_LoginInfo objects.
        /// </summary>
        /// <param name="obj">b_LoginInfo object to compare against the current object.</param>
        public bool Equals (b_LoginInfo obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (LoginInfoId != obj.LoginInfoId) return false;
            if (UserInfoId != obj.UserInfoId) return false;
            if (!UserName.Equals(obj.UserName)) return false;
            if (!Password.Equals(obj.Password)) return false;
            if (!SecurityQuestion.Equals(obj.SecurityQuestion)) return false;
            if (!SecurityResponse.Equals(obj.SecurityResponse)) return false;
            if (FailedAttempts != obj.FailedAttempts) return false;
            if (!LastFailureDate.Equals(obj.LastFailureDate)) return false;
            if (LastLoginDate != obj.LastLoginDate) return false;
            if (IsActive != obj.IsActive) return false;
            if (!ResetPasswordCode.Equals(obj.ResetPasswordCode)) return false;
            if (!ResetPasswordRequestDate.Equals(obj.ResetPasswordRequestDate)) return false;
            if (!TempPassword.Equals(obj.TempPassword)) return false;
            if (!LastPWChangeDate.Equals(obj.LastPWChangeDate)) return false;
            if (SOMAXAdmin != obj.SOMAXAdmin) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_LoginInfo objects.
        /// </summary>
        /// <param name="obj1">b_LoginInfo object to use in the comparison.</param>
        /// <param name="obj2">b_LoginInfo object to use in the comparison.</param>
        public static bool Equals (b_LoginInfo obj1, b_LoginInfo obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
