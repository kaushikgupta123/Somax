/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the SupportTicket table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_SupportTicket : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_SupportTicket ()
        {
            SupportTicketId = 0;
            ClientId = 0;
            SiteId = 0;
            Agent_PersonnelId = 0;
            CancelDate = new System.Nullable<System.DateTime>();
            CancelBy_PersonnelId = 0;
            CompleteDate = new System.Nullable<System.DateTime>();
            CompleteBy_PersonnelId = 0;
            Contact_PersonnelId = 0;
            ContactEmail = String.Empty;
            ContactName = String.Empty;
            ContactPhoneNumber = String.Empty;
            DeleteBy_PersonnelId = 0;
            Description = String.Empty;
            Status = String.Empty;
            Subject = String.Empty;
            Tags = String.Empty;
            Type = String.Empty;
        }

        /// <summary>
        /// SupportTicketId property
        /// </summary>
        public long SupportTicketId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// Agent_PersonnelId property
        /// </summary>
        public long Agent_PersonnelId { get; set; }

        /// <summary>
        /// CancelDate property
        /// </summary>
        public DateTime? CancelDate { get; set; }

        /// <summary>
        /// CancelBy_PersonnelId property
        /// </summary>
        public long CancelBy_PersonnelId { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        public long CompleteBy_PersonnelId { get; set; }

        /// <summary>
        /// Contact_PersonnelId property
        /// </summary>
        public long Contact_PersonnelId { get; set; }

        /// <summary>
        /// ContactEmail property
        /// </summary>
        public string ContactEmail { get; set; }

        /// <summary>
        /// ContactName property
        /// </summary>
        public string ContactName { get; set; }

        /// <summary>
        /// ContactPhoneNumber property
        /// </summary>
        public string ContactPhoneNumber { get; set; }

        /// <summary>
        /// DeleteBy_PersonnelId property
        /// </summary>
        public long DeleteBy_PersonnelId { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Subject property
        /// </summary>
        public string Subject { get; set; }

        /// <summary>
        /// Tags property
        /// </summary>
        public string Tags { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_SupportTicket object.
        /// This routine should be applied to the usp_SupportTicket_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_SupportTicket_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_SupportTicket object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_SupportTicket obj = new b_SupportTicket();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_SupportTicket object.
        /// This routine should be applied to the usp_SupportTicket_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_SupportTicket_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // SupportTicketId column, bigint, not null
                        SupportTicketId = reader.GetInt64(i++);

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // Agent_PersonnelId column, bigint, not null
                        Agent_PersonnelId = reader.GetInt64(i++);

            // CancelDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    CancelDate = reader.GetDateTime(i);
            }
            else
            {
                    CancelDate = DateTime.MinValue;
            }
            i++;
                        // CancelBy_PersonnelId column, bigint, not null
                        CancelBy_PersonnelId = reader.GetInt64(i++);

            // CompleteDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    CompleteDate = reader.GetDateTime(i);
            }
            else
            {
                    CompleteDate = DateTime.MinValue;
            }
            i++;
                        // CompleteBy_PersonnelId column, bigint, not null
                        CompleteBy_PersonnelId = reader.GetInt64(i++);

                        // Contact_PersonnelId column, bigint, not null
                        Contact_PersonnelId = reader.GetInt64(i++);

                        // ContactEmail column, nvarchar(255), not null
                        ContactEmail = reader.GetString(i++);

                        // ContactName column, nvarchar(63), not null
                        ContactName = reader.GetString(i++);

                        // ContactPhoneNumber column, nvarchar(31), not null
                        ContactPhoneNumber = reader.GetString(i++);

                        // DeleteBy_PersonnelId column, bigint, not null
                        DeleteBy_PersonnelId = reader.GetInt64(i++);

                        // Description column, nvarchar(MAX), not null
                        Description = reader.GetString(i++);

                        // Status column, nvarchar(15), not null
                        Status = reader.GetString(i++);

                        // Subject column, nvarchar(63), not null
                        Subject = reader.GetString(i++);

                        // Tags column, nvarchar(MAX), not null
                        Tags = reader.GetString(i++);

                        // Type column, nvarchar(15), not null
                        Type = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["SupportTicketId"].ToString(); }
            catch { missing.Append("SupportTicketId "); }
            
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["Agent_PersonnelId"].ToString(); }
            catch { missing.Append("Agent_PersonnelId "); }
            
            try { reader["CancelDate"].ToString(); }
            catch { missing.Append("CancelDate "); }
            
            try { reader["CancelBy_PersonnelId"].ToString(); }
            catch { missing.Append("CancelBy_PersonnelId "); }
            
            try { reader["CompleteDate"].ToString(); }
            catch { missing.Append("CompleteDate "); }
            
            try { reader["CompleteBy_PersonnelId"].ToString(); }
            catch { missing.Append("CompleteBy_PersonnelId "); }
            
            try { reader["Contact_PersonnelId"].ToString(); }
            catch { missing.Append("Contact_PersonnelId "); }
            
            try { reader["ContactEmail"].ToString(); }
            catch { missing.Append("ContactEmail "); }
            
            try { reader["ContactName"].ToString(); }
            catch { missing.Append("ContactName "); }
            
            try { reader["ContactPhoneNumber"].ToString(); }
            catch { missing.Append("ContactPhoneNumber "); }
            
            try { reader["DeleteBy_PersonnelId"].ToString(); }
            catch { missing.Append("DeleteBy_PersonnelId "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
            try { reader["Subject"].ToString(); }
            catch { missing.Append("Subject "); }
            
            try { reader["Tags"].ToString(); }
            catch { missing.Append("Tags "); }
            
            try { reader["Type"].ToString(); }
            catch { missing.Append("Type "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a SupportTicket table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SupportTicket_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the SupportTicket table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SupportTicket_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the SupportTicket table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SupportTicket_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all SupportTicket table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_SupportTicket[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_SupportTicket[] data
        )
        {
            Database.SqlClient.ProcessRow<b_SupportTicket> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_SupportTicket[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SupportTicket>(reader => { b_SupportTicket obj = new b_SupportTicket(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_SupportTicket_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_SupportTicket[])results.ToArray(typeof(b_SupportTicket));
                }
                else
                {
                    data = new b_SupportTicket[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve SupportTicket table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_SupportTicket[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_SupportTicket> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SupportTicket>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_SupportTicket_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_SupportTicket objects.
        /// </summary>
        /// <param name="obj">b_SupportTicket object to compare against the current object.</param>
        public bool Equals (b_SupportTicket obj)
        {
            if (SupportTicketId != obj.SupportTicketId) return false;
            if (ClientId != obj.ClientId) return false;
            if (SiteId != obj.SiteId) return false;
            if (Agent_PersonnelId != obj.Agent_PersonnelId) return false;
            if (!CancelDate.Equals(obj.CancelDate)) return false;
            if (CancelBy_PersonnelId != obj.CancelBy_PersonnelId) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (CompleteBy_PersonnelId != obj.CompleteBy_PersonnelId) return false;
            if (Contact_PersonnelId != obj.Contact_PersonnelId) return false;
            if (!ContactEmail.Equals(obj.ContactEmail)) return false;
            if (!ContactName.Equals(obj.ContactName)) return false;
            if (!ContactPhoneNumber.Equals(obj.ContactPhoneNumber)) return false;
            if (DeleteBy_PersonnelId != obj.DeleteBy_PersonnelId) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!Subject.Equals(obj.Subject)) return false;
            if (!Tags.Equals(obj.Tags)) return false;
            if (!Type.Equals(obj.Type)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_SupportTicket objects.
        /// </summary>
        /// <param name="obj1">b_SupportTicket object to use in the comparison.</param>
        /// <param name="obj2">b_SupportTicket object to use in the comparison.</param>
        public static bool Equals (b_SupportTicket obj1, b_SupportTicket obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
