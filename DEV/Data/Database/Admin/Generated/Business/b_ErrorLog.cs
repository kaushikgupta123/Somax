/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using SOMAX.G4.Data.Database.SqlClient;

namespace SOMAX.G4.Data.Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ErrorLog table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ErrorLog : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ErrorLog ()
        {
            ClientId = 0;
            ErrorLogId = 0;
            UserInfoId = 0;
            SessionId = System.Guid.Empty;
            ExceptionType = String.Empty;
            ErrorMessage = String.Empty;
            Source = String.Empty;
            StackTrace = String.Empty;
            TargetSite = String.Empty;
            Url = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// ErrorLogId property
        /// </summary>
        public long ErrorLogId { get; set; }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        public long UserInfoId { get; set; }

        /// <summary>
        /// SessionId property
        /// </summary>
        public System.Guid SessionId { get; set; }

        /// <summary>
        /// ExceptionType property
        /// </summary>
        public string ExceptionType { get; set; }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Source property
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// StackTrace property
        /// </summary>
        public string StackTrace { get; set; }

        /// <summary>
        /// TargetSite property
        /// </summary>
        public string TargetSite { get; set; }

        /// <summary>
        /// Url property
        /// </summary>
        public string Url { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ErrorLog object.
        /// This routine should be applied to the usp_ErrorLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ErrorLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ErrorLog object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ErrorLog obj = new b_ErrorLog();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ErrorLog object.
        /// This routine should be applied to the usp_ErrorLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ErrorLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // ErrorLogId column, bigint, not null
                        ErrorLogId = reader.GetInt64(i++);

                        // UserInfoId column, bigint, not null
                        UserInfoId = reader.GetInt64(i++);

                        // SessionId column, uniqueidentifier, not null
                        SessionId = reader.GetGuid(i++);

                        // ExceptionType column, nvarchar(255), not null
                        ExceptionType = reader.GetString(i++);

                        // ErrorMessage column, nvarchar(1023), not null
                        ErrorMessage = reader.GetString(i++);

                        // Source column, nvarchar(255), not null
                        Source = reader.GetString(i++);

                        // StackTrace column, nvarchar(MAX), not null
                        StackTrace = reader.GetString(i++);

                        // TargetSite column, nvarchar(255), not null
                        TargetSite = reader.GetString(i++);

                        // Url column, nvarchar(511), not null
                        Url = reader.GetString(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["ErrorLogId"].ToString(); }
            catch { missing.Append("ErrorLogId "); }
            
            try { reader["UserInfoId"].ToString(); }
            catch { missing.Append("UserInfoId "); }
            
            try { reader["SessionId"].ToString(); }
            catch { missing.Append("SessionId "); }
            
            try { reader["ExceptionType"].ToString(); }
            catch { missing.Append("ExceptionType "); }
            
            try { reader["ErrorMessage"].ToString(); }
            catch { missing.Append("ErrorMessage "); }
            
            try { reader["Source"].ToString(); }
            catch { missing.Append("Source "); }
            
            try { reader["StackTrace"].ToString(); }
            catch { missing.Append("StackTrace "); }
            
            try { reader["TargetSite"].ToString(); }
            catch { missing.Append("TargetSite "); }
            
            try { reader["Url"].ToString(); }
            catch { missing.Append("Url "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
}

        /// <summary>
        /// Insert this object into the database as a ErrorLog table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                SOMAX.G4.Data.Database.StoredProcedure.usp_ErrorLog_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ErrorLog table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                SOMAX.G4.Data.Database.StoredProcedure.usp_ErrorLog_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ErrorLog table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                SOMAX.G4.Data.Database.StoredProcedure.usp_ErrorLog_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ErrorLog table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ErrorLog[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ErrorLog[] data
        )
        {
            SOMAX.G4.Data.Database.SqlClient.ProcessRow<b_ErrorLog> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ErrorLog[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new SOMAX.G4.Data.Database.SqlClient.ProcessRow<b_ErrorLog>(reader => { b_ErrorLog obj = new b_ErrorLog(); obj.LoadFromDatabase(reader); return obj; });
                results = SOMAX.G4.Data.Database.StoredProcedure.usp_ErrorLog_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_ErrorLog[])results.ToArray(typeof(b_ErrorLog));
                }
                else
                {
                    data = new b_ErrorLog[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ErrorLog table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ErrorLog[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SOMAX.G4.Data.Database.SqlClient.ProcessRow<b_ErrorLog> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new SOMAX.G4.Data.Database.SqlClient.ProcessRow<b_ErrorLog>(reader => { this.LoadFromDatabase(reader); return this; });
                SOMAX.G4.Data.Database.StoredProcedure.usp_ErrorLog_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ErrorLog objects.
        /// </summary>
        /// <param name="obj">b_ErrorLog object to compare against the current object.</param>
        public bool Equals (b_ErrorLog obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (ErrorLogId != obj.ErrorLogId) return false;
            if (UserInfoId != obj.UserInfoId) return false;
            if (!SessionId.Equals(obj.SessionId)) return false;
            if (!ExceptionType.Equals(obj.ExceptionType)) return false;
            if (!ErrorMessage.Equals(obj.ErrorMessage)) return false;
            if (!Source.Equals(obj.Source)) return false;
            if (!StackTrace.Equals(obj.StackTrace)) return false;
            if (!TargetSite.Equals(obj.TargetSite)) return false;
            if (!Url.Equals(obj.Url)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ErrorLog objects.
        /// </summary>
        /// <param name="obj1">b_ErrorLog object to use in the comparison.</param>
        /// <param name="obj2">b_ErrorLog object to use in the comparison.</param>
        public static bool Equals (b_ErrorLog obj1, b_ErrorLog obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
