/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using Database.Business;
using System;
using System.Collections.Generic;

namespace Database.Transactions
{
    public class LoginAuditing_RetrieveBySessionId : LoginAuditing_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (string.IsNullOrEmpty(LoginAuditing.SessionId.ToString()))
            {
                string message = "LoginAuditing has an invalid Session ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            LoginAuditing.RetrieveBySessionIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class LoginAuditing_RetrieveByUserInfoId : LoginAuditing_TransactionBaseClass
    {
        public List<b_LoginAuditing> LoginAuditingList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (string.IsNullOrEmpty(LoginAuditing.SessionId.ToString()))
            {
                string message = "LoginAuditing has an invalid Session ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            List<b_LoginAuditing> tmpArray = null;
            LoginAuditing.RetrieveByUserInfoId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName,ref tmpArray);
            LoginAuditingList = new List<b_LoginAuditing>();
            foreach (b_LoginAuditing tmpObj in tmpArray)
            {
                LoginAuditingList.Add(tmpObj);
            }
        }
    }

    public class LoginAuditing_RetrieveLoginRecordsCountByCreateDate : LoginAuditing_TransactionBaseClass
    {
        public List<b_LoginAuditing> LoginAuditingList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (string.IsNullOrEmpty(LoginAuditing.SessionId.ToString()))
            {
                string message = "LoginAuditing has an invalid Session ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            List<b_LoginAuditing> tmpArray = null;
            LoginAuditing.RetrieveLoginRecordsCountByCreateDate(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);
            LoginAuditingList = new List<b_LoginAuditing>();
            foreach (b_LoginAuditing tmpObj in tmpArray)
            {
                LoginAuditingList.Add(tmpObj);
            }
        }
    }

    #region Retrieve Login Records Count By User
    public class LoginAuditing_RetrieveLoginRecordsCountByUser : LoginAuditing_TransactionBaseClass
    {
        public List<b_LoginAuditing> LoginAuditRecordsCountList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (string.IsNullOrEmpty(LoginAuditing.SessionId.ToString()))
            {
                string message = "LoginAuditing has an invalid Session ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            List<b_LoginAuditing> tmpArray = null;
            LoginAuditing.RetrieveLoginRecordsCountByUser(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);
            LoginAuditRecordsCountList = new List<b_LoginAuditing>();
            foreach (b_LoginAuditing tmpObj in tmpArray)
            {
                LoginAuditRecordsCountList.Add(tmpObj);
            }
        }
    }
    #endregion

    #region Retrieve Login Records By Client
    public class LoginAuditing_RetrieveLoginRecordsByClientId : LoginAuditing_TransactionBaseClass
    {
        public long SearchClientId { get; set; }
        public List<b_LoginAuditing> LoginAuditRecordsList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (string.IsNullOrEmpty(LoginAuditing.SessionId.ToString()))
            {
                string message = "LoginAuditing has an invalid Session ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            List<b_LoginAuditing> tmpArray = null;
            LoginAuditing.ClientId = SearchClientId;
            LoginAuditing.RetrieveLoginRecordsCountByClientId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);
            LoginAuditRecordsList = new List<b_LoginAuditing>();
            foreach (b_LoginAuditing tmpObj in tmpArray)
            {
                LoginAuditRecordsList.Add(tmpObj);
            }
        }
    }
    #endregion
}
