/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using Common.Enumerations;
using Database.Business;

namespace Database.Transactions
{
    public class UserDataSet_TransactionBaseClass : AbstractTransactionManager
    {
        public UserDataSet_TransactionBaseClass()
        {
            UseDatabase = DatabaseTypeEnum.Admin;
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (UserDataSet == null)
            {
                string message = "UserData has not been set.";
                throw new Exception(message);
            }
        }

        public b_UserDataSet UserDataSet { get; set; }

        public override void PerformWorkItem()
        {
            // 
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class UserDataSet_RetrieveBySessionId : UserDataSet_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {

            base.PerformLocalValidation();
            if (UserDataSet.SessionId.Equals(Guid.Empty))
            {
                string message = "LoginInfo has an invalid Session Id.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            UserDataSet.RetrieveBySessionIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class UserDataSet_RetrieveBySessionIdAdmin : UserDataSet_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {

            base.PerformLocalValidation();
            if (UserDataSet.SessionId.Equals(Guid.Empty))
            {
                string message = "LoginInfo has an invalid Session Id.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            UserDataSet.RetrieveBySessionIdFromDatabaseAdmin(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class Personnel_RetrieveByUserInfoId : UserDataSet_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            UseDatabase = DatabaseTypeEnum.Client;

            if (UserDataSet.Client == null)
            {
                throw new Exception("UserData.Client must be set. Invoke UserData_RetrieveBySessionId.Execute() before calling this class.");
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;


            UserDataSet.RetrievePersonnelByUserInfoId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class DeploymentEnvironment_Retrieve : UserDataSet_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (UserDataSet.Client == null)
            {
                throw new Exception("UserData.Client must be set. Invoke UserData_RetrieveBySessionId.Execute() before calling this class.");
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            UserDataSet.RetrieveClientDBDeploymentEnvironment(this.Connection, this.Transaction, "");
        }
    }
    #region V2-419 Enterprise User Management - Add/Remove Sites
    public class UserDataSet_RetrieveUserSiteDetialsByUserID : AbstractTransactionManager
    {
        public UserDataSet_RetrieveUserSiteDetialsByUserID()
        {
            UseDatabase = DatabaseTypeEnum.Admin;
        }

        public List<b_UserDataSet> UserDetailsList { get; set; }
        public b_UserDataSet UserDetails { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            b_UserDataSet[] tmpArray = null;
            UserDetails.RetrievePersonnelSiteByUserInfoId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);
            UserDetailsList = new List<b_UserDataSet>(tmpArray);
        }
    }
    #endregion
}
