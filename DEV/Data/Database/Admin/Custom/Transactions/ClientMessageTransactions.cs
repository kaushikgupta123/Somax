/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

using Database;
using Database.Business;


namespace Database
{

    #region ClientMessage Details V2-993
    public class ClientMessage_RetrieveChunkSearchFromDetails : ClientMessage_TransactionBaseClass
    {
        public List<b_ClientMessage> ClientMessageList { get; set; }
        public long ClientId { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            ClientMessage.ClientId = ClientMessage.CustomClientId;
        }
        public override void PerformWorkItem()
        {
            List<b_ClientMessage> tmpList = null;
            ClientMessage.RetrieveChunkSearchClientMessageDetails(this.Connection, this.Transaction, ClientId, CallerUserInfoId, CallerUserName, ref tmpList);

            ClientMessageList = new List<b_ClientMessage>();
            foreach (var item in tmpList)
            {
                ClientMessageList.Add(item);
            }
        }
    }
    #endregion
    public class ClientMessage_Create_V2 : ClientMessage_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (ClientMessage.ClientMessageId > 0)
            {
                string message = "ClientMessage has an invalid ID.";
                throw new Exception(message);
            }
            ClientMessage.ClientId= ClientMessage.CustomClientId;
        }
        public override void PerformWorkItem()
        {
            ClientMessage.InsertIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
            System.Diagnostics.Debug.Assert(ClientMessage.ClientMessageId > 0);
        }
    }
    public class ClientMessage_Retrieve_V2 : ClientMessage_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (ClientMessage.ClientMessageId == 0)
            {
                string message = "ClientMessage has an invalid ID.";
                throw new Exception(message);
            }
            ClientMessage.ClientId = ClientMessage.CustomClientId;
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            ClientMessage.RetrieveByPKFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
    public class ClientMessage_Update_V2 : ClientMessage_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (ClientMessage.ClientMessageId == 0)
            {
                string message = "ClientMessage has an invalid ID.";
                throw new Exception(message);
            }
            ClientMessage.ClientId = ClientMessage.CustomClientId;
        }

        public override void PerformWorkItem()
        {
            ClientMessage.UpdateInDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            // If no have been made, no change log is created
            if (ChangeLog != null) { ChangeLog.InsertIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName); }
        }
    }
    public class ClientMessage_RetrieveClientMessageSch : ClientMessage_TransactionBaseClass
    {
        public List<b_ClientMessage> clientMsgList = new List<b_ClientMessage>();
        public long ClientId { get; set; }
        public override void PerformLocalValidation()
        {
            base.UseTransaction = false;    // moved from PerformWorkItem
            base.PerformLocalValidation();
            if (ClientMessage.ClientMessageId == 0)
            {
                //string message = "Equipment has an invalid ID.";
                //throw new Exception(message);
            }
            ClientMessage.ClientId = this.dbKey.Client.ClientId;
        }

        public override void PerformWorkItem()
        {
            List<b_ClientMessage> tempList = new List<b_ClientMessage>();
            ClientMessage.RetrieveClientMessageSearch(this.Connection, this.Transaction,  CallerUserInfoId, CallerUserName,this.ClientMessage.TimeZone, ref tempList);
            clientMsgList = tempList;
        }
    }

}
