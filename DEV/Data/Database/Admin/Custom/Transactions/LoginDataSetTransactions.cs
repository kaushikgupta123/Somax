/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using Common.Enumerations;
using Database.Business;

namespace Database.Transactions
{
    public class LoginDataSet_TransactionBaseClass : AbstractTransactionManager
    {
        public LoginDataSet_TransactionBaseClass()
        {
            UseDatabase = DatabaseTypeEnum.Admin;
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (LoginData == null)
            {
                string message = "UserData has not been set.";
                throw new Exception(message);
            }
        }

        public b_LoginDataSet LoginData { get; set; }

        public override void PerformWorkItem()
        {
            // 
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class LoginDataSet_RetrieveByUsername : LoginDataSet_TransactionBaseClass
    {
        public string UserName { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (String.IsNullOrEmpty(LoginData.UserName))
            {
                string message = "LoginInfo has an invalid Session Id.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            LoginData.RetrieveByUserNameFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class LoginDataSet_RetrieveByUsername_V2 : LoginDataSet_TransactionBaseClass
    {
        public string UserName { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (String.IsNullOrEmpty(LoginData.UserName))
            {
                string message = "LoginInfo has an invalid Session Id.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            LoginData.RetrieveByUserNameFromDatabase_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class LoginDataSet_RetrieveByLoginInfoId_V2 : LoginDataSet_TransactionBaseClass
    {
        //public string UserName { get; set; }

        //public override void PerformLocalValidation()
        //{
        //    base.PerformLocalValidation();
        //    if (String.IsNullOrEmpty(LoginData.UserName))
        //    {
        //        string message = "LoginInfo has an invalid Session Id.";
        //        throw new Exception(message);
        //    }
        //}

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            LoginData.RetrieveByLoginInfoIdFromDatabase_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class LoginDataSet_RetrieveBySSO : LoginDataSet_TransactionBaseClass
    {
        public string UserName { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (String.IsNullOrEmpty(LoginData.UserName))
            {
                string message = "LoginInfo has an invalid Session Id.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            LoginData.RetrieveBySSO(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class LoginDataSet_RetrieveByAdminUsername : LoginDataSet_TransactionBaseClass
    {
        public string UserName { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (String.IsNullOrEmpty(LoginData.UserName))
            {
                string message = "LoginInfo has an invalid Session Id.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            LoginData.RetrieveByAdminUserNameFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
}
