/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Text;

namespace Database.Business
{

    /// <summary>
    /// Business object that stores a record from the Client table.
    /// </summary>
    public partial class b_Client
    {
        #region Property
        public long CreatedClientId { get; set; }
        public Int32 CustomQueryDisplayId { get; set; }
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        public Int32 OffSetVal { get; set; }
        public Int32 NextRow { get; set; }
        public string Name { get; set; }
        public string Contact { get; set; }
        public string SearchText { get; set; }
        public DateTime CreateDate { get; set; }
        public Int32 TotalCount { get; set; }
        public List<b_Client> listOfClient { get; set; }
        public string UserType { get; set; }
        public Int32 Count { get; set; }
        public String LocalizationName{get;set;}
        public String TimeZoneName { get; set; }
        public string SiteStatus { get; set; }
        #region V2-964
        public long SiteId { get; set; }
        public int ChildCount { get; set; }
        //public string SiteName { get; set; }
        //public string SiteDescription { get; set; }
        //public string SiteTimezone { get; set; }
        //public bool APM { get; set; }
        //public bool CMMS { get; set; }
        //public int SiteMaxAppUsers { get; set; }
        //public int SiteMaxSanitationUsers { get; set; }
        public string LocalizationLanguage { get; set; }
        public string LocalizationCulture { get; set; }
        #endregion
        #endregion





        /// <summary>
        /// Retrieve all Client table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerId">string that identifies the user calling the database</param>
        /// <param name="data">b_Client[] that contains the results</param>
        public void RetrieveByClientSearchFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
			string callerUserName,
            ref b_Client[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Client> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Client[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Client>(reader => { b_Client obj = new b_Client(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Client_RetrieveByClientSearch.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                // Extract the results
                if (null != results)
                {
                    data = (b_Client[])results.ToArray(typeof(b_Client));
                }
                else
                {
                    data = new b_Client[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void ValidateFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_StoredProcValidationError> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Client_Validate.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public long CreateClientSecurityGroup(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
          string callerUserName,
          string SecurityGroupName
       )
        {
            SqlCommand command = null;
            long retSecurityGroupId = 0;
            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
               retSecurityGroupId=Database.StoredProcedure.usp_SecurityGroup_CreateWithPermission.CallStoredProcedure(command, callerUserInfoId, callerUserName, this, SecurityGroupName);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }

            return (retSecurityGroupId);
        }

        public void InsertIntoDatabaseBySomaxAdmin(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
      string callerUserName
      )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Client_CreateBYSomaxAdmin.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void RetrieveByPKFromDatabaseBySomaxAdmin(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
     string callerUserName
       )
        {
            Database.SqlClient.ProcessRow<b_Client> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Client>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Client_RetrieveByPKBySomaxAdmin.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }


        public void RetrieveByPKFromDatabaseBySomaxAdmin_V2(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
    string callerUserName
      )
        {
            Database.SqlClient.ProcessRow<b_Client> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Client>(reader => { this.LoadFromDatabaseRetriveBySomaxCustom(reader); return this; });
                Database.StoredProcedure.usp_Client_RetrieveByPKBySomaxAdmin_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public int LoadFromDatabaseRetriveBySomaxCustom(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // CompanyName column, nvarchar(63), not null
                CompanyName = reader.GetString(i++);

                // LegalName column, nvarchar(63), not null
                LegalName = reader.GetString(i++);

                // PrimaryContact column, nvarchar(63), not null
                PrimaryContact = reader.GetString(i++);

                // NumberOfEmployees column, int, not null
                NumberOfEmployees = reader.GetInt32(i++);

                // AnnualSales column, bigint, not null
                AnnualSales = reader.GetInt64(i++);

                // TaxIDNumber column, nvarchar(15), not null
                TaxIDNumber = reader.GetString(i++);

                // VATNumber column, nvarchar(31), not null
                VATNumber = reader.GetString(i++);

                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // Website column, nvarchar(255), not null
                Website = reader.GetString(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // BusinessType column, nvarchar(15), not null
                BusinessType = reader.GetString(i++);

                // DateEstablished column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateEstablished = reader.GetDateTime(i);
                }
                else
                {
                    DateEstablished = DateTime.MinValue;
                }
                i++;
                // NumberOfLocations column, int, not null
                NumberOfLocations = reader.GetInt32(i++);

                // OfficerName column, nvarchar(63), not null
                OfficerName = reader.GetString(i++);

                // OfficerTitle column, nvarchar(63), not null
                OfficerTitle = reader.GetString(i++);

                // OfficerPhone column, nvarchar(31), not null
                OfficerPhone = reader.GetString(i++);

                // DunnsNumber column, nvarchar(15), not null
                DunnsNumber = reader.GetString(i++);

                // PackageLevel column, nvarchar(15), not null
                PackageLevel = reader.GetString(i++);

                // AppUsers column, int, not null
                AppUsers = reader.GetInt32(i++);

                // MaxAppUsers column, int, not null
                MaxAppUsers = reader.GetInt32(i++);

                // LimitedUsers column, int, not null
                LimitedUsers = reader.GetInt32(i++);

                // MaxLimitedUsers column, int, not null
                MaxLimitedUsers = reader.GetInt32(i++);

                // PhoneUsers column, int, not null
                PhoneUsers = reader.GetInt32(i++);

                // MaxPhoneUsers column, int, not null
                MaxPhoneUsers = reader.GetInt32(i++);

                // WorkRequestUsers column, int, not null
                WorkRequestUsers = reader.GetInt32(i++);

                // MaxWorkRequestUsers column, int, not null
                MaxWorkRequestUsers = reader.GetInt32(i++);

                // SiteControl column, bit, not null
                SiteControl = reader.GetBoolean(i++);

                // Purchasing column, bit, not null
                Purchasing = reader.GetBoolean(i++);

                // Sanitation column, bit, not null
                Sanitation = reader.GetBoolean(i++);

                // SanitationUsers column, int, not null
                SanitationUsers = reader.GetInt32(i++);

                // MaxSanitationUsers column, int, not null
                MaxSanitationUsers = reader.GetInt32(i++);

                // SuperUsers column, int, not null
                SuperUsers = reader.GetInt32(i++);

                // MaxSuperUsers column, int, not null
                MaxSuperUsers = reader.GetInt32(i++);

                // PrimarySICCode column, nvarchar(7), not null
                PrimarySICCode = reader.GetString(i++);

                // NAICSCode column, nvarchar(7), not null
                NAICSCode = reader.GetString(i++);

                // Sites column, int, not null
                Sites = reader.GetInt32(i++);

                // MaxSites column, int, not null
                MaxSites = reader.GetInt32(i++);

                // MinorityStatus column, nvarchar(15), not null
                MinorityStatus = reader.GetString(i++);

                // Localization column, nvarchar(255), not null
                Localization = reader.GetString(i++);

                // DefaultTimeZone column, nvarchar(31), not null
                DefaultTimeZone = reader.GetString(i++);

                // DefaultCustomerManager column, nvarchar(63), not null
                DefaultCustomerManager = reader.GetString(i++);

                // MaxAttempts column, int, not null
                MaxAttempts = reader.GetInt32(i++);

                // MaxTimeOut column, int, not null
                MaxTimeOut = reader.GetInt32(i++);

                // ConnectionString column, nvarchar(511), not null
                ConnectionString = reader.GetString(i++);

                // TabletUsers column, int, not null
                TabletUsers = reader.GetInt32(i++);

                // MaxTabletUsers column, int, not null
                MaxTabletUsers = reader.GetInt32(i++);

                // UIConfiguration column, nvarchar(255), not null
                UIConfiguration = reader.GetString(i++);

                // WOPrintMessage column, nvarchar(511), not null
                WOPrintMessage = reader.GetString(i++);

                // PurchaseTermsandConds column, nvarchar(255), not null
                PurchaseTermsandConds = reader.GetString(i++);

                // PMLibCopy column, bit, not null
                PMLibCopy = reader.GetBoolean(i++);

                // AssetTree column, bit, not null
                AssetTree = reader.GetBoolean(i++);

                // ProdAppUsers column, int, not null
                ProdAppUsers = reader.GetInt32(i++);

                // MaxProdAppUsers column, int, not null
                MaxProdAppUsers = reader.GetInt32(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);
              
                // TimeZoneName column, nvarchar(255), not null
                if (false == reader.IsDBNull(i))
                {
                    TimeZoneName = reader.GetString(i);
                }
                else
                {
                    TimeZoneName = "";
                }
                i++;

                // CreateDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CreateDate = reader.GetDateTime(i);
                }
                else
                {
                    CreateDate = DateTime.MinValue;
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["CompanyName"].ToString(); }
                catch { missing.Append("CompanyName "); }

                try { reader["LegalName"].ToString(); }
                catch { missing.Append("LegalName "); }

                try { reader["PrimaryContact"].ToString(); }
                catch { missing.Append("PrimaryContact "); }

                try { reader["NumberOfEmployees"].ToString(); }
                catch { missing.Append("NumberOfEmployees "); }

                try { reader["AnnualSales"].ToString(); }
                catch { missing.Append("AnnualSales "); }

                try { reader["TaxIDNumber"].ToString(); }
                catch { missing.Append("TaxIDNumber "); }

                try { reader["VATNumber"].ToString(); }
                catch { missing.Append("VATNumber "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["Website"].ToString(); }
                catch { missing.Append("Website "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["BusinessType"].ToString(); }
                catch { missing.Append("BusinessType "); }

                try { reader["DateEstablished"].ToString(); }
                catch { missing.Append("DateEstablished "); }

                try { reader["NumberOfLocations"].ToString(); }
                catch { missing.Append("NumberOfLocations "); }

                try { reader["OfficerName"].ToString(); }
                catch { missing.Append("OfficerName "); }

                try { reader["OfficerTitle"].ToString(); }
                catch { missing.Append("OfficerTitle "); }

                try { reader["OfficerPhone"].ToString(); }
                catch { missing.Append("OfficerPhone "); }

                try { reader["DunnsNumber"].ToString(); }
                catch { missing.Append("DunnsNumber "); }

                try { reader["PackageLevel"].ToString(); }
                catch { missing.Append("PackageLevel "); }

                try { reader["AppUsers"].ToString(); }
                catch { missing.Append("AppUsers "); }

                try { reader["MaxAppUsers"].ToString(); }
                catch { missing.Append("MaxAppUsers "); }

                try { reader["LimitedUsers"].ToString(); }
                catch { missing.Append("LimitedUsers "); }

                try { reader["MaxLimitedUsers"].ToString(); }
                catch { missing.Append("MaxLimitedUsers "); }

                try { reader["PhoneUsers"].ToString(); }
                catch { missing.Append("PhoneUsers "); }

                try { reader["MaxPhoneUsers"].ToString(); }
                catch { missing.Append("MaxPhoneUsers "); }

                try { reader["WorkRequestUsers"].ToString(); }
                catch { missing.Append("WorkRequestUsers "); }

                try { reader["MaxWorkRequestUsers"].ToString(); }
                catch { missing.Append("MaxWorkRequestUsers "); }

                try { reader["SiteControl"].ToString(); }
                catch { missing.Append("SiteControl "); }

                try { reader["Purchasing"].ToString(); }
                catch { missing.Append("Purchasing "); }

                try { reader["Sanitation"].ToString(); }
                catch { missing.Append("Sanitation "); }

                try { reader["SanitationUsers"].ToString(); }
                catch { missing.Append("SanitationUsers "); }

                try { reader["MaxSanitationUsers"].ToString(); }
                catch { missing.Append("MaxSanitationUsers "); }

                try { reader["SuperUsers"].ToString(); }
                catch { missing.Append("SuperUsers "); }

                try { reader["MaxSuperUsers"].ToString(); }
                catch { missing.Append("MaxSuperUsers "); }

                try { reader["PrimarySICCode"].ToString(); }
                catch { missing.Append("PrimarySICCode "); }

                try { reader["NAICSCode"].ToString(); }
                catch { missing.Append("NAICSCode "); }

                try { reader["Sites"].ToString(); }
                catch { missing.Append("Sites "); }

                try { reader["MaxSites"].ToString(); }
                catch { missing.Append("MaxSites "); }

                try { reader["MinorityStatus"].ToString(); }
                catch { missing.Append("MinorityStatus "); }

                try { reader["Localization"].ToString(); }
                catch { missing.Append("Localization "); }

                try { reader["DefaultTimeZone"].ToString(); }
                catch { missing.Append("DefaultTimeZone "); }

                try { reader["DefaultCustomerManager"].ToString(); }
                catch { missing.Append("DefaultCustomerManager "); }

                try { reader["MaxAttempts"].ToString(); }
                catch { missing.Append("MaxAttempts "); }

                try { reader["MaxTimeOut"].ToString(); }
                catch { missing.Append("MaxTimeOut "); }

                try { reader["ConnectionString"].ToString(); }
                catch { missing.Append("ConnectionString "); }

                try { reader["TabletUsers"].ToString(); }
                catch { missing.Append("TabletUsers "); }

                try { reader["MaxTabletUsers"].ToString(); }
                catch { missing.Append("MaxTabletUsers "); }

                try { reader["UIConfiguration"].ToString(); }
                catch { missing.Append("UIConfiguration "); }

                try { reader["WOPrintMessage"].ToString(); }
                catch { missing.Append("WOPrintMessage "); }

                try { reader["PurchaseTermsandConds"].ToString(); }
                catch { missing.Append("PurchaseTermsandConds "); }

                try { reader["PMLibCopy"].ToString(); }
                catch { missing.Append("PMLibCopy "); }

                try { reader["AssetTree"].ToString(); }
                catch { missing.Append("AssetTree "); }

                try { reader["ProdAppUsers"].ToString(); }
                catch { missing.Append("ProdAppUsers "); }

                try { reader["MaxProdAppUsers"].ToString(); }
                catch { missing.Append("MaxProdAppUsers "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }
                
                try { reader["TimeZoneName"].ToString(); }
                catch { missing.Append("TimeZoneName "); }
                
                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public static b_Client ProcessRetrieveForClientChunkV2(SqlDataReader reader)
        {
            b_Client Client = new b_Client();

            Client.LoadFromDatabaseForClientChunkV2ChunkSearchV2(reader);
            return Client;
        }


        public int LoadFromDatabaseForClientChunkV2ChunkSearchV2(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // Client Id
                ClientId = reader.GetInt64(i++);
               

                if (false == reader.IsDBNull(i))
                {
                    Name = reader.GetString(i);
                }
                else
                {
                    Name = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    Contact = reader.GetString(i);
                }
                else
                {
                    Contact = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    Email = reader.GetString(i);
                }
                else
                {
                    Email = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    BusinessType = reader.GetString(i);
                }
                else
                {
                    BusinessType = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PackageLevel = reader.GetString(i);
                }
                else
                {
                    PackageLevel = "";
                }
                i++;
               
                if (false == reader.IsDBNull(i))
                {
                    CreateDate = reader.GetDateTime(i);
                }
                else
                {
                    CreateDate = DateTime.MinValue;
                }
                i++;
              
                if (false == reader.IsDBNull(i))
                {
                    Status = reader.GetString(i);
                }
                else
                {
                    Status = "";
                }
                i++;
                
                if (false == reader.IsDBNull(i))
                {
                    UpdateIndex = reader.GetInt32(i++);
                }

                ChildCount = reader.GetInt32(i);
                i++;

                TotalCount = reader.GetInt32(i);
                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["Contact"].ToString(); }
                catch { missing.Append("Contact "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append(" Email "); }

                try { reader["BusinessType"].ToString(); }
                catch { missing.Append(" BusinessType "); }

                try { reader["PackageLevel"].ToString(); }
                catch { missing.Append(" PackageLevel "); }

                try { reader["CreateDate"].ToString(); }
                catch { missing.Append(" CreateDate "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append(" Status "); }               

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append(" UpdateIndex "); }
               
                try { reader["ChildCount"].ToString(); }
                catch { missing.Append(" ChildCount "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append(" TotalCount "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

            return i;
        }

        public void RetrieveClientChunkSearchV2(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName,
ref b_Client results
)
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_Client_RetrieveChunkSearch_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static object ProcessRowForAdmin(SqlDataReader reader)
        {
            // Create instance of object
            b_Client obj = new b_Client();

            // Load the object from the database
            obj.LoadFromDatabaseAdmin(reader);

            // Return result
            return (object)obj;
        }
        public int LoadFromDatabaseAdmin(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                i = LoadFromDatabase(reader);

                UserType = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }
        public static object ProcessRowForAdminSSO(SqlDataReader reader)
        {
            // Create instance of object
            b_Client obj = new b_Client();

            // Load the object from the database
            obj.LoadFromDatabaseAdminSSO(reader);

            // Return result
            return (object)obj;
        }
        public int LoadFromDatabaseAdminSSO(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                i = LoadFromDatabase(reader);

                UserType = reader.GetString(i++);
                SiteStatus = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType "); }

                try { reader["SiteStatus"].ToString(); }
                catch { missing.Append("SiteStatus "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public void RetrieveAllActiveClientFromDatabase(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
   string callerUserName,
         ref b_Client[] data
     )
        {
            Database.SqlClient.ProcessRow<b_Client> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Client[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Client>(reader => { b_Client obj = new b_Client(); obj.LoadFromDatabaseActiveClient(reader); return obj; });
                results = Database.StoredProcedure.usp_Admin_ActiveClientRetrieve_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName);

                // Extract the results
                if (null != results)
                {
                    data = (b_Client[])results.ToArray(typeof(b_Client));
                }
                else
                {
                    data = new b_Client[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public static object ProcessRowForActiveClient(SqlDataReader reader)
        {
            b_Client obj = new b_Client();
            obj.LoadFromDatabaseActiveClient(reader);
            return (object)obj;
        }
        public int LoadFromDatabaseActiveClient(SqlDataReader reader)
        {
            int i = 0;
           // i = LoadFromDatabase(reader);
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i);
                i++;
                // CompanyName column, nvarchar(63), not null
                CompanyName = reader.GetString(i);               
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["CompanyName"].ToString(); }
                catch { missing.Append("CompanyName "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }


        public static object ProcessRowForCount(SqlDataReader reader)
        {
            b_Client obj = new b_Client();
            obj.LoadFromDatabaseCustom(reader);
            return (object)obj;
        }


        public int LoadFromDatabaseCustom(SqlDataReader reader)
        {
            int i = 0;

            try
            {
                Count = reader.GetInt32(i);
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                try { reader["Count"].ToString(); }
                catch { missing.Append("Count "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public void RetrieveCountforCompanyName(SqlConnection connection,
       SqlTransaction transaction,
       long callerUserInfoId,
       string callerUserName,
       ref List<b_Client> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_Client> results = null;
            data = new List<b_Client>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Client_CountIfCompanyNameExist_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Client>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        #region V2-858
        public static object ProcessRowForAdmin_V2(SqlDataReader reader)
        {
            // Create instance of object
            b_Client obj = new b_Client();

            // Load the object from the database
            obj.LoadFromDatabaseAdmin_V2(reader);

            // Return result
            return (object)obj;
        }
        public int LoadFromDatabaseAdmin_V2(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                i = LoadFromDatabase(reader);

                UserType = reader.GetString(i++);
                SiteStatus = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType "); }

                try { reader["SiteStatus"].ToString(); }
                catch { missing.Append("SiteStatus "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        #endregion

        #region V2-964
        public void InsertIntoDatabaseBySomaxAdminV2(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
      string callerUserName
      )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Client_CreateBYSomaxAdmin_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion
    }
}
