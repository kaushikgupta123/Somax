/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the UserInfo table.
    /// </summary>
    public partial class b_UserInfo 
    {

        public string LoginUserName { get; set; }
        public string UserName { get; set; }
        //V2-911
        public long ClientUserInfoListID { get; set; }
        public long LoginClientID { get; set; }
        
        #region V2-962
        public string SecurityProfileName { get; set; }
        public string SecurityProfileDescription { get; set; }
        public string CompanyName { get; set; }
        public bool IsActive { get; set; }
        public long Personnel_CraftId { get; set; }
        public long Personnel_PersonnelId { get; set; }
        #endregion
        public void LoadAdditionalDataFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // FirstName column, varchar(63), not null
                FirstName = reader.GetString(i++);

                // LastName column, varchar(63), not null
                LastName = reader.GetString(i++);

                // MiddleName column, varchar(63), not null
                MiddleName = reader.GetString(i++);

                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // LocalizationCulture column, nvarchar(255), not null
                Localization = reader.GetString(i++);

                // TimeZone column, nvarchar(31), not null
                TimeZone = reader.GetString(i++);

                // IsSuperUser column, bit, not null
                IsSuperUser = reader.GetBoolean(i++);

                // UIConfigurationLocation column, nvarchar(255), not null
                UIConfiguration = reader.GetString(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);

                UserName = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["FirstName"].ToString(); }
                catch { missing.Append("FirstName "); }

                try { reader["LastName"].ToString(); }
                catch { missing.Append("LastName "); }

                try { reader["MiddleName"].ToString(); }
                catch { missing.Append("MiddleName "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["Localization"].ToString(); }
                catch { missing.Append("Localization "); }

                try { reader["TimeZone"].ToString(); }
                catch { missing.Append("TimeZone "); }

                try { reader["IsSuperUser"].ToString(); }
                catch { missing.Append("IsSuperUser "); }

                try { reader["UIConfiguration"].ToString(); }
                catch { missing.Append("UIConfiguration "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["UserName"].ToString(); }
                catch { missing.Append("UserName "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void LoadFromDatabaseByPKForeignKey(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);

            try
            {
                if (false == reader.IsDBNull(i))
                {
                    LoginUserName = reader.GetString(i);
                }
                else
                {
                    LoginUserName = string.Empty; ;
                }
                i++;

              
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["LoginUserName"].ToString(); }
                catch { missing.Append("LoginUserName"); }

                

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        /// <summary>
        /// Retrieve all UserInfo table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
		/// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_UserInfo[] that contains the results</param>
        public void RetrieveByClientIdFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
			string callerUserName,
            ref b_UserInfo[] data
        )
        {
            Database.SqlClient.ProcessRow<b_UserInfo> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_UserInfo[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_UserInfo>(reader => { b_UserInfo obj = new b_UserInfo(); obj.LoadAdditionalDataFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_UserInfo_RetrieveByClientId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                // Extract the results
                if (null != results)
                {
                    data = (b_UserInfo[])results.ToArray(typeof(b_UserInfo));
                }
                else
                {
                    data = new b_UserInfo[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
				callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        //public override void RetrieveLoginInfoFromDatabase(
        //      SqlConnection connection,
        //      SqlTransaction transaction,
        //      long callerUserInfoId,
        //string callerUserName, ref b_UserInfo[] data
        //  )
        //{
        //    Database.SqlClient.ProcessRow<b_UserInfo> processRow = null;
        //    SqlCommand command = null;
        //    ArrayList results = null;
        //    string message = String.Empty;
        //    data = new b_UserInfo[0];
        //    try
        //    {
        //        // Create the command to use in calling the stored procedures
        //        command = new SqlCommand();
        //        command.Connection = connection;
        //        command.Transaction = transaction;

        //        // Call the stored procedure to retrieve the data
        //        processRow = new Database.SqlClient.ProcessRow<b_UserInfo>(reader => { b_UserInfo obj = new b_UserInfo(); obj.LoadAdditionalDataFromDatabase(reader); return obj; });
        //        Database.StoredProcedure.usp_UserLoginInfo_RetrieveByUserInfoId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);
        //        if (null != results)
        //        {
        //            data = (b_UserInfo[])results.ToArray(typeof(b_UserInfo));
        //        }
        //        else
        //        {
        //            data = new b_UserInfo[0];
        //        }
        //        // Clear the results collection
        //        if (null != results)
        //        {
        //            results.Clear();
        //            results = null;
        //        }
        //    }
        //    finally
        //    {
        //        if (null != command)
        //        {
        //            command.Dispose();
        //            command = null;
        //        }
        //        processRow = null;
        //        message = String.Empty;
        //        callerUserInfoId = 0;
        //        callerUserName = String.Empty;
        //    }
        //}

        
        public void RetrieveLoginInfoFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            ProcessRow<b_UserInfo> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new ProcessRow<b_UserInfo>(reader => { this.LoadFromDatabaseByPKForeignKey(reader); return this; });
                Database.StoredProcedure.usp_UserLoginInfo_RetrieveByUserInfoId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public  void DeleteUserFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
     string callerUserName
       )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UserInfo_Delete.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void RetrieveUserInfoFromDatabaseAdmin(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            ProcessRow<b_UserInfo> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new ProcessRow<b_UserInfo>(reader => { 
this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_AdminUserInfo_RetrieveByPK_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void UpdateByPKAdmin(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_AdminUserInfo_UpdateByPK_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void LoadFromDatabaseForUserType(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                if (false == reader.IsDBNull(i))
                {
                    UserType = reader.GetString(i);
                }
                else
                {
                    UserType = string.Empty; ;
                }
                i++;


            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType"); }
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void RetrieveUserInfoUserTypeFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName
       )
        {
            ProcessRow<b_UserInfo> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new ProcessRow<b_UserInfo>(reader => { this.LoadFromDatabaseForUserType(reader); return this; });
                Database.StoredProcedure.usp_UserInfo_RetrieveUserType_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void InsertIntoDatabase_V2(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
      string callerUserName
      )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UserInfo_Create_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #region Update Data V2-911
        public void UpdateInDatabaseCustomForSomaxAdminDetails(
              SqlConnection connection,
              SqlTransaction transaction,
              long callerUserInfoId,
              string callerUserName
          )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UserInfo_UpdateByUserInfoIdForSomaxAdminDetails_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        #endregion
        #region V2-962
        public void RetrieveUserDeatilsByUserInfoIdFromDatabase(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          ref b_UserInfo data
      )
        {
          
            SqlCommand command = null;
            string message = String.Empty;

            

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                data = Database.StoredProcedure.usp_UserInfo_RetrieveUserDetailsByUserInfoId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

              
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_UserInfo ProcessRowForUserDetailsByUserInfoId(SqlDataReader reader)
        {
            b_UserInfo obj = new b_UserInfo();
            obj.LoadFromDataFromDatabaseForUserDetailsByUserInfoId(reader);
            return (b_UserInfo)obj;
        }
        public void LoadFromDataFromDatabaseForUserDetailsByUserInfoId(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // CompanyName column, varchar(63), not null
                CompanyName = reader.GetString(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // UserName column, varchar(63), not null
                UserName = reader.GetString(i++);

                // FirstName column, varchar(63), not null
                FirstName = reader.GetString(i++);

                // LastName column, varchar(63), not null
                LastName = reader.GetString(i++);

                // MiddleName column, varchar(63), not null
                MiddleName = reader.GetString(i++);

                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // IsSuperUser column, bit, not null
                IsSuperUser = reader.GetBoolean(i++);

                // IsActive column, bit, not null
                IsActive = reader.GetBoolean(i++);

                // UserType column, nvarchar(255), not null
                UserType = reader.GetString(i++);

                // SecurityProfileId column, bigint, not null
                SecurityProfileId = reader.GetInt64(i++);
                // SecurityProfileId column, bigint, not null
                DefaultSiteId = reader.GetInt64(i++);
                // PersonnelId column, bigint, not null
                Personnel_PersonnelId = reader.GetInt64(i++);
                // CraftId column, bigint, not null
                Personnel_CraftId = reader.GetInt64(i++);
                // SecurityProfileName column, nvarchar(63), not null
                SecurityProfileName = reader.GetString(i++);

                // SecurityProfileDescription column, nvarchar(255), not null
                SecurityProfileDescription = reader.GetString(i++);

               
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["CompanyName"].ToString(); }
                catch { missing.Append("CompanyName "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["UserName"].ToString(); }
                catch { missing.Append("UserName "); }

                try { reader["FirstName"].ToString(); }
                catch { missing.Append("FirstName "); }

                try { reader["LastName"].ToString(); }
                catch { missing.Append("LastName "); }

                try { reader["MiddleName"].ToString(); }
                catch { missing.Append("MiddleName "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }
               
                try { reader["IsSuperUser"].ToString(); }
                catch { missing.Append("IsSuperUser "); }

                try { reader["IsActive"].ToString(); }
                catch { missing.Append("IsActive "); }

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType "); }

                try { reader["SecurityProfileId"].ToString(); }
                catch { missing.Append("SecurityProfileId "); }

                try { reader["DefaultSiteId"].ToString(); }
                catch { missing.Append("DefaultSiteId "); }

                try { reader["PersonnelId"].ToString(); }
                catch { missing.Append("PersonnelId "); }

                try { reader["SecurityProfileId"].ToString(); }
                catch { missing.Append("SecurityProfileId "); }


                try { reader["CraftId"].ToString(); }
                catch { missing.Append("CraftId "); }

                try { reader["SecurityProfileName"].ToString(); }
                catch { missing.Append("SecurityProfileName "); }

                try { reader["SecurityProfileDescription"].ToString(); }
                catch { missing.Append("SecurityProfileDescription "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        #endregion
    }
}
