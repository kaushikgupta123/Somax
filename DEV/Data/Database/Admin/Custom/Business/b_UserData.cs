/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Text;
using System.Collections;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the User table.
    /// </summary>
    [Serializable()]
    public partial class b_UserDataSet
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_UserDataSet()
        {
            Client = new b_Client();
            User = new b_UserInfo();
            LoginInfo = new b_LoginInfo();
            LoginAuditing = new b_LoginAuditing();
            Personnel = new b_Personnel();
            AdminDeploymentEnvironment = string.Empty;
            ClientDeploymentEnvironment = string.Empty;
            ApprovalGroupSettings= new b_ApprovalGroupSettings();
        }

        public Guid SessionId { get; set; }
        public b_Client Client { get; set; }
        public b_UserInfo User { get; set; }
        public b_LoginInfo LoginInfo { get; set; }
        public b_LoginAuditing LoginAuditing { get; set; }
        public b_Personnel Personnel { get; set; }
        public string AdminDeploymentEnvironment { get; set; }
        public string ClientDeploymentEnvironment { get; set; }
        public bool IsFound { get; set; }
        public b_ApprovalGroupSettings ApprovalGroupSettings { get; set; }
        public void RetrievePersonnelByUserInfoId(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<Object> results = null;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Personnel_RetrieveByUserInfoId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                IsFound = true;

                // Extract the results
                if (results.Count > 0 && results[0] != null)
                {
                    Personnel = (b_Personnel)results[0];
                }
                else
                {
                    Personnel = new b_Personnel();
                    IsFound = false;
                }

                if (results.Count > 0 && results[1] != null)
                {
                    ClientDeploymentEnvironment = results[1].ToString();
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }


            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }


        public void RetrieveClientDBDeploymentEnvironment(
            SqlConnection connection,
            SqlTransaction transaction,
            string callerId
        )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                ClientDeploymentEnvironment = Database.StoredProcedure.usp_DeploymentEnvironment_Retrieve.CallStoredProcedure(command);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerId = String.Empty;
            }
        }
      
        /// <summary>
        /// Retrieve User table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_User[] that contains the results</param>
        public void RetrieveBySessionIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
			string callerUserName
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<Object> results = null;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_UserData_RetrieveBySessionId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                IsFound = true;

                // Extract the results
                if (results.Count > 0 && results[0] != null )
                {
                    Client = (b_Client)results[0];
                }
                else
                {
                    Client = new b_Client();
                    IsFound = false;
                }

                if (results.Count > 1 && results[1] != null)
                {
                    User = (b_UserInfo)results[1];
                }
                else
                {
                    User = new b_UserInfo();
                    IsFound = false;
                }

                if (results.Count > 2 && results[2] != null)
                {
                    LoginInfo = (b_LoginInfo)results[2];
                }
                else
                {
                    LoginInfo = new b_LoginInfo();
                    IsFound = false;
                }

                if (results.Count > 3 && results[3] != null)
                {
                    LoginAuditing = (b_LoginAuditing)results[3];
                }
                else
                {
                    LoginAuditing = new b_LoginAuditing();
                    IsFound = false;
                }

                if (results.Count > 4 && results[4] != null)
                {
                    AdminDeploymentEnvironment = results[4].ToString();
                }

                //For ApprovalGroupSettings V2-730 Start
                if (results.Count > 5 && results[5] != null)
                {
                    ApprovalGroupSettings = (b_ApprovalGroupSettings)results[5];
                }
                else
                {
                    ApprovalGroupSettings = new b_ApprovalGroupSettings();
                    //IsFound = false;
                }
                //For ApprovalGroupSettings V2-730 End
                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }


            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveBySessionIdFromDatabaseAdmin(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<Object> results = null;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_AdminUserData_RetrieveBySessionId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                IsFound = true;

                // Extract the results
                if (results.Count > 0 && results[0] != null)
                {
                    Client = (b_Client)results[0];
                }
                else
                {
                    Client = new b_Client();
                    IsFound = false;
                }

                if (results.Count > 1 && results[1] != null)
                {
                    User = (b_UserInfo)results[1];
                }
                else
                {
                    User = new b_UserInfo();
                    IsFound = false;
                }

                if (results.Count > 2 && results[2] != null)
                {
                    LoginInfo = (b_LoginInfo)results[2];
                }
                else
                {
                    LoginInfo = new b_LoginInfo();
                    IsFound = false;
                }

                if (results.Count > 3 && results[3] != null)
                {
                    LoginAuditing = (b_LoginAuditing)results[3];
                }
                else
                {
                    LoginAuditing = new b_LoginAuditing();
                    IsFound = false;
                }

                if (results.Count > 4 && results[4] != null)
                {
                    AdminDeploymentEnvironment = results[4].ToString();
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }


            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        #region V2-419 Enterprise User Management - Add/Remove Sites

        public void RetrievePersonnelSiteByUserInfoId(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
           ref b_UserDataSet[] data
      )
        {
            Database.SqlClient.ProcessRow<b_UserDataSet> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;
            // List<Object> results = null;
            ArrayList results = null;
            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_UserDataSet>(reader => { b_UserDataSet obj = new b_UserDataSet(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_UserData_RetrieveBySelectedUser_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);
                // Extract the results
                if (null != results)
                {
                    data = (b_UserDataSet[])results.ToArray(typeof(b_UserDataSet));
                }
                else
                {
                    data = new b_UserDataSet[0];
                }
                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }


            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                this.Personnel.ClientId = reader.GetInt64(i++);
                // PersonnelId column, bigint, not null
                this.Personnel.PersonnelId = reader.GetInt64(i++);
                // UserInfoId column, bigint, not null
                this.Personnel.UserInfoId = reader.GetInt64(i++);
                // SiteId column, bigint, not null
                this.Personnel.SiteId = reader.GetInt64(i++);
                // SiteName column, nvarchar, not null
                this.Personnel.SiteName = reader.GetString(i++);
                // CraftDescription column, nvarchar, not null
                this.Personnel.CraftDescription = reader.GetString(i++);
                // SiteDescription column, nvarchar, not null
                this.Personnel.SiteDescription = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId"); }
                try { reader["PersonnelId"].ToString(); }
                catch { missing.Append("PersonnelId"); }
                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId"); }
                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId"); }             
                try { reader["UserSiteName"].ToString(); }
                catch { missing.Append("UserSiteName"); }
                try { reader["CraftDescription"].ToString(); }
                catch { missing.Append("CraftDescription"); }
                try { reader["SiteDescription"].ToString(); }
                catch { missing.Append("SiteDescription"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        #endregion
    }
}
