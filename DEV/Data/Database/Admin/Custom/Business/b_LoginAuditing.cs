/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Text;
using System.Data.SqlClient;
using Database.StoredProcedure;
using Database.Admin.Custom.StoredProcedure;
using System.Collections.Generic;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the LoginAuditing table.
    /// </summary>
    public partial class b_LoginAuditing
    {
        #region Properies
        public DateTime CreateDate { get; set; }
        public string UserName { get; set; }    
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public Int64 SiteId { get; set; }
        public int CaseNo { get; set; }
        public bool IsEnterprise { get; set; }
        public int TotalRecords { get; set; }
        public string Name { get; set; }
        public int LoginCount { get; set; }
        #region V2-964
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        public int OffSetVal { get; set; }
        public int NextRow { get; set; }
        public string SearchText { get; set; }
        public int TotalCount { get; set; }
        #endregion
        #endregion

        #region  Retrieve By SessionId From Database
        /// <summary>
        /// Retrieve LoginAuditing table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_LoginAuditing[] that contains the results</param>
        public void RetrieveBySessionIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_LoginAuditing> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_LoginAuditing>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_LoginAuditing_RetrieveBySessionId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_LoginAuditing object.
        /// This routine should be applied to the usp_LoginAuditing_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_LoginAuditing_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_LoginAuditing object</returns>
        public static object ProcessRowWithCreateDate(SqlDataReader reader)
        {
            // Create instance of object
            b_LoginAuditing obj = new b_LoginAuditing();

            // Load the object from the database
            obj.LoadWithCreateDateFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_LoginAuditing object.
        /// This routine should be applied to the usp_LoginAuditing_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_LoginAuditing_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadWithCreateDateFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // LoginAuditingId column, bigint, not null
                LoginAuditingId = reader.GetInt64(i++);

                // LoginInfoId column, bigint, not null
                LoginInfoId = reader.GetInt64(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // SessionId column, uniqueidentifier, not null
                SessionId = reader.GetGuid(i++);

                // Active column, bit, not null
                Active = reader.GetBoolean(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);

                CreateDate = reader.GetDateTime(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["LoginAuditingId"].ToString(); }
                catch { missing.Append("LoginAuditingId "); }

                try { reader["LoginInfoId"].ToString(); }
                catch { missing.Append("LoginInfoId "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["SessionId"].ToString(); }
                catch { missing.Append("SessionId "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
            }
        }
        #endregion

        #region Retrieve By UserInfoId
        public void RetrieveByUserInfoId(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
            ref List<b_LoginAuditing> data
       )
        {
           
            SqlCommand command = null;
            string message = String.Empty;
            List<b_LoginAuditing> results = null;
            data = new List<b_LoginAuditing>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                results = usp_LoginAuditing_RetrieveByUserInfoId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_LoginAuditing>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
               
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_LoginAuditing ProcessRowForLoginAuditing(SqlDataReader reader)
        {
            // Create instance of object
            b_LoginAuditing obj = new b_LoginAuditing();
            // Load the object from the database
            obj.LoadWithUserInfoFromDatabase(reader);

            // Return result
            return obj;
        }
        public void LoadWithUserInfoFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // LoginAuditingId column, bigint, not null
                LoginAuditingId = reader.GetInt64(i++);

                // LoginInfoId column, bigint, not null
                LoginInfoId = reader.GetInt64(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // SessionId column, uniqueidentifier, not null
                SessionId = reader.GetGuid(i++);

                Browser = reader.GetString(i++);

                IPAddress = reader.GetString(i++);
                // Active column, bit, not null
                Active = reader.GetBoolean(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);

                CreateDate = reader.GetDateTime(i++);

                FirstName = reader.GetString(i++);
                LastName = reader.GetString(i++);

                UserName = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["LoginAuditingId"].ToString(); }
                catch { missing.Append("LoginAuditingId "); }

                try { reader["LoginInfoId"].ToString(); }
                catch { missing.Append("LoginInfoId "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["SessionId"].ToString(); }
                catch { missing.Append("SessionId "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
            }
        }

        #endregion

        #region Retrieve Login Records Count By CreateDate
        public void RetrieveLoginRecordsCountByCreateDate(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
            ref List<b_LoginAuditing> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_LoginAuditing> results = null;
            data = new List<b_LoginAuditing>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                results = usp_LoginAuditing_RetrieveLoginRecordsCountByCreateDate_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_LoginAuditing>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public static object ProcessRowLoginRecordsCountByCreateDate(SqlDataReader reader)
        {
            // Create instance of object
            b_LoginAuditing obj = new b_LoginAuditing();

            // Load the object from the database
            obj.LoadLoginRecordsCountByCreateDateFromDatabase(reader);

            // Return result
            return (object)obj;
        }
        public void LoadLoginRecordsCountByCreateDateFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                if (false == reader.IsDBNull(i))
                {
                    CreateDate = reader.GetDateTime(i);
                }
                else
                {
                    CreateDate = DateTime.MinValue;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    TotalRecords = reader.GetInt32(i);
                }
                else
                {
                    TotalRecords = 0;
                }
                i++;
                
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate "); }

                try { reader["TotalRecords"].ToString(); }
                catch { missing.Append("TotalRecords "); }
               
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
            }
        }

        #endregion

        #region Retrieve Login Records Count By User
        public void RetrieveLoginRecordsCountByUser(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_LoginAuditing> data
)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_LoginAuditing> results = null;
            data = new List<b_LoginAuditing>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                results = usp_LoginAuditing_RetrieveLoginRecordsCountByUser_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_LoginAuditing>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public static object ProcessRowForLoginRecordsCountByUser(SqlDataReader reader)
        {
            // Create instance of object
            b_LoginAuditing obj = new b_LoginAuditing();

            // Load the object from the database
            obj.LoadLoginRecordsCountByUserFromDatabase(reader);

            // Return result
            return (object)obj;
        }
        public void LoadLoginRecordsCountByUserFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                Name = reader.GetString(i++);

                if (false == reader.IsDBNull(i))
                {
                    LoginCount = reader.GetInt32(i);
                }
                else
                {
                    LoginCount = 0;
                }
                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["LoginCount"].ToString(); }
                catch { missing.Append("LoginCount "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
            }
        }
        #endregion

        #region Retrieve Login Records By Client
        public void RetrieveLoginRecordsCountByClientId(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_LoginAuditing> data
)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_LoginAuditing> results = null;
            data = new List<b_LoginAuditing>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                results = usp_LoginAuditing_ChunkSearchByClientId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_LoginAuditing>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public static object ProcessRowForLoginRecordsCountByClientId(SqlDataReader reader)
        {
            // Create instance of object
            b_LoginAuditing obj = new b_LoginAuditing();

            // Load the object from the database
            obj.LoadLoginRecordsCountByClientIdFromDatabase(reader);

            // Return result
            return (object)obj;
        }
        public void LoadLoginRecordsCountByClientIdFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                if (false == reader.IsDBNull(i))
                {
                    ClientId = reader.GetInt64(i);
                }
                else
                {
                    ClientId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    LoginAuditingId = reader.GetInt64(i);
                }
                else
                {
                    LoginAuditingId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    LoginInfoId = reader.GetInt64(i);
                }
                else
                {
                    LoginInfoId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    UserInfoId = reader.GetInt64(i);
                }
                else
                {
                    UserInfoId = 0;
                }
                i++;

                // SessionId column, uniqueidentifier, not null
                SessionId = reader.GetGuid(i);
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CreateDate = reader.GetDateTime(i);
                }
                else
                {
                    CreateDate = DateTime.MinValue;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    Browser = reader.GetString(i);
                }
                else
                {
                    Browser = "";
                }
                i++;
                
                if (false == reader.IsDBNull(i))
                {
                    IPAddress = reader.GetString(i);
                }
                else
                {
                    IPAddress = "";
                }
                i++;
                
                TotalCount = reader.GetInt32(i++);

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId"); }

                try { reader["LoginAuditingId"].ToString(); }
                catch { missing.Append("LoginAuditingId"); }

                try { reader["LoginInfoId"].ToString(); }
                catch { missing.Append("LoginInfoId"); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId"); }

                try { reader["SessionId"].ToString(); }
                catch { missing.Append("SessionId"); }

                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate"); }

                try { reader["Browser"].ToString(); }
                catch { missing.Append("Browser"); }

                try { reader["IPAddress"].ToString(); }
                catch { missing.Append("IPAddress"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
            }
        }
        #endregion
    }
}
