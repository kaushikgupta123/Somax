/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using System.Collections.Generic;
using System.Xml.Linq;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the SiteBilling table.InsertIntoDatabase
    /// </summary>
    public partial class b_SiteBilling
    {
        #region Properties
        public long CustomClientId { get; set; }
        #endregion
        public void RetrieveSiteBillingByClientIdSiteId_V2(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName/*,
            ref b_SiteBilling data*/
        )
        {
            Database.SqlClient.ProcessRow<b_SiteBilling> processRow = null;
            //List<b_SiteBilling> results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            //data = new b_SiteBilling();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                //processRow = new Database.SqlClient.ProcessRow<b_SiteBilling>(reader => { b_SiteBilling obj = new b_SiteBilling(); obj.LoadFromDatabaseForClientIdSiteId_V2(reader); return obj; });
                //results = Database.StoredProcedure.usp_SiteBilling_RetrieveByClientIdSiteId_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                processRow = new Database.SqlClient.ProcessRow<b_SiteBilling>(reader => { this.LoadFromDatabaseForClientIdSiteId_V2(reader); return this; });
                Database.StoredProcedure.usp_SiteBilling_RetrieveByClientIdSiteId_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                //// Extract the results
                //if (null != results)
                //{
                //    data = results[0];
                //}
                //else
                //{
                //    data = new b_SiteBilling();
                //}

                //// Clear the results collection
                //if (null != results)
                //{
                //    results.Clear();
                //    results = null;
                //}
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                //results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void LoadFromDatabaseForClientIdSiteId_V2(SqlDataReader reader)
        {
            int i = 0;

            try
            {
                if (false == reader.IsDBNull(i))
                {
                    ClientId = reader.GetInt64(i);
                }
                else
                {
                    ClientId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    SiteId = reader.GetInt64(i);
                }
                else
                {
                    SiteId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    SiteBillingId = reader.GetInt64(i);
                }
                else
                {
                    SiteBillingId = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    AnniversaryDate = reader.GetDateTime(i);
                }
                else
                {
                    AnniversaryDate = DateTime.MinValue;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    InvoiceFreq = reader.GetString(i);
                }
                else
                {
                    InvoiceFreq = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    Terms = reader.GetString(i);
                }
                else
                {
                    Terms = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    CurrentInvoice = reader.GetString(i);
                }
                else
                {
                    CurrentInvoice = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    InvoiceDate = reader.GetDateTime(i);
                }
                else
                {
                    InvoiceDate = DateTime.MinValue;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NextInvoiceDate = reader.GetDateTime(i);
                }
                else
                {
                    NextInvoiceDate = DateTime.MinValue;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    QuoteRequired = reader.GetBoolean(i);
                }
                else
                {
                    QuoteRequired = false;
                }
                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId"); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId"); }

                try { reader["SiteBillingId"].ToString(); }
                catch { missing.Append("SiteBillingId"); }

                try { reader["AnniversaryDate"].ToString(); }
                catch { missing.Append("AnniversaryDate"); }

                try { reader["InvoiceFreq"].ToString(); }
                catch { missing.Append("InvoiceFreq"); }

                try { reader["Terms"].ToString(); }
                catch { missing.Append("Terms"); }

                try { reader["CurrentInvoice"].ToString(); }
                catch { missing.Append("CurrentInvoice"); }

                try { reader["InvoiceDate"].ToString(); }
                catch { missing.Append("InvoiceDate"); }

                try { reader["NextInvoiceDate"].ToString(); }
                catch { missing.Append("NextInvoiceDate"); }

                try { reader["QuoteRequired"].ToString(); }
                catch { missing.Append("QuoteRequired"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
    }
}
