/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the LoginAuditing table.
    /// </summary>
    public partial class b_UserSearch
    {
        public b_UserSearch()
        {
            ClientId = 0;
            CompanyName = string.Empty;
            FirstName = string.Empty;
            LastName = string.Empty;
            UserName = string.Empty;
            UserInfoId = 0;
            LoginInfoId = 0;
            Email = string.Empty;
            IsActive = false;
            IsSuperUser = false;
            DefaultSiteId = 0;
            PersonnelClientLookupId = string.Empty;
            PersonnelShift = string.Empty;
            PersonnelCraftId = 0;
            CraftDescription = string.Empty;
            UserType = string.Empty;
            SecurityProfileId = 0;
    }

        public long ClientId { get; set; }
        public string CompanyName { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string UserName { get; set; }
        public long UserInfoId { get; set; }
        public long LoginInfoId { get; set; }
       
        //------------------Added By Indusnet Technologies----------------
        public string Email { get; set; }
        public bool IsActive { get; set; }
        public bool IsSuperUser { get; set; }
        public long DefaultSiteId { get; set; }
        public string UserType { get; set; }
        public string PersonnelClientLookupId { get; set; }
        public string PersonnelShift { get; set; } 
        public long PersonnelCraftId { get; set; }
        public string CraftDescription { get; set; }
        public long SecurityProfileId { get; set;}  // SOM-1681
        /* V2-402 */
        public string SelectedSites { get; set; }
        public string OrderByColumn { get; set; }
        public string OrderBy { get; set; }
        public int Offset { get; set; }
        public int NextRow { get; set; }
        public int CaseNo { get; set; }
        public string SearchText { get; set; }
        public string PackageLevel { get; set; }
        public long TotalCount { get; set; }
        public int SiteCount { get; set; }
        public string SecurityProfileDescription { get; set; }
        public string SiteName { get; set; }
        public string SecurityProfileIds { get; set; } /*V2-802*/
        /* V2-402 */
        #region V2-905
        public string SecurityProfileName { get; set; } //V2-962
        public string Shift { get; set; }
        public bool? IsActiveStatus { get; set; }
        #endregion
        public string EmployeeId { get; set; } //V2-1160
        /* 
         * RKL SOM-1681 - Not Used  
                /// <summary>
                /// Load the current row in the input SqlDataReader into a b_CompanyName object.
                /// This routine should be applied to the usp_CompanyName_RetrieveAll. stored procedure.
                /// </summary>
                /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
                public void LoadFromDatabase(SqlDataReader reader)
                {
                    int i = 0;
                    try
                    {
                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        CompanyName = reader.GetString(i++);

                        FirstName = reader.GetString(i++);

                        LastName = reader.GetString(i++);

                        UserName = reader.GetString(i++);

                        UserInfoId = reader.GetInt64(i++);

                        LoginInfoId = reader.GetInt64(i++);

                        Email = reader.GetString(i++);

                        IsActive = reader.GetBoolean(i++);

                        IsSuperUser = reader.GetBoolean(i++);
                    }
                    catch (Exception ex)
                    {
                        // Diagnostics
                        StringBuilder missing = new StringBuilder();

                        try { reader["ClientId"].ToString(); }
                        catch { missing.Append("ClientId "); }

                        try { reader["CompanyName"].ToString(); }
                        catch { missing.Append("CompanyName "); }

                        try { reader["FristName"].ToString(); }
                        catch { missing.Append("FristName "); }

                        try { reader["LastName"].ToString(); }
                        catch { missing.Append("LastName "); }

                        try { reader["UserName"].ToString(); }
                        catch { missing.Append("UserName "); }

                        try { reader["UserInfoId"].ToString(); }
                        catch { missing.Append("UserInfoId "); }

                        try { reader["LoginInfoId"].ToString(); }
                        catch { missing.Append("LoginInfoId "); }

                        try { reader["Email"].ToString(); }
                        catch { missing.Append("Email "); }

                        try { reader["IsActive"].ToString(); }
                        catch { missing.Append("IsActive "); }

                        try { reader["IsSuperUser"].ToString(); }
                        catch { missing.Append("IsSuperUser "); }

                        try { reader["IsSuperUser"].ToString(); }
                        catch { missing.Append("IsSuperUser "); }

                        StringBuilder msg = new StringBuilder();
                        msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                        if (missing.Length > 0)
                        {
                            msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                        }

                        throw new Exception(msg.ToString(), ex);
                    }
                }
        */
        /*
        Removed By RKL 2019-May-10 - Not Used
                /// <summary>
                /// Retrieve records for UserSearch represented by this object in the database.
                /// </summary>
                /// <param name="connection">SqlConnection containing the database connection</param>
                /// <param name="transaction">SqlTransaction containing the database transaction</param>
                /// <param name="callerId">string that identifies the user calling the database</param>
                /// <param name="data">b_UserSearch[] that contains the results</param> 
                public void RetrieveUserSearch(
                    SqlConnection connection,
                    SqlTransaction transaction,
                    long callerUserInfoId,
                    string callerUserName,
                    ref b_UserSearch[] data
                )
                {
                    Database.SqlClient.ProcessRow<b_UserSearch> processRow = null;
                    ArrayList results = null;
                    SqlCommand command = null;
                    string message = String.Empty;

                    // Initialize the results
                    data = new b_UserSearch[0];

                    try
                    {
                        // Create the command to use in calling the stored procedures
                        command = new SqlCommand();
                        command.Connection = connection;
                        command.Transaction = transaction;

                        // Call the stored procedure to retrieve the data
                        processRow = new Database.SqlClient.ProcessRow<b_UserSearch>(reader => { b_UserSearch obj = new b_UserSearch(); obj.LoadFromDatabase(reader); return obj; });
                        results = Database.StoredProcedure.usp_UserData_RetrieveByUserSearch.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                        // Extract the results
                        if (null != results)
                        {
                            data = (b_UserSearch[])results.ToArray(typeof(b_UserSearch));
                        }
                        else
                        {
                            data = new b_UserSearch[0];
                        }

                        // Clear the results collection
                        if (null != results)
                        {
                            results.Clear();
                            results = null;
                        }
                    }
                    finally
                    {
                        if (null != command)
                        {
                            command.Dispose();
                            command = null;
                        }
                        processRow = null;
                        results = null;
                        message = String.Empty;
                        callerUserInfoId = 0;
                        callerUserName = String.Empty;
                    }
                }

        */
        //------------------Added By Indusnet Technologies----------------

        public static b_UserSearch ProcessRowForGetUserListFromAdmin(SqlDataReader reader)
        {
            // Create instance of object
            b_UserSearch users = new b_UserSearch();

            // Load the object from the database
            users.LoadFromDatabaseForGetUserListFromAdmin(reader);

            // Return result
            return users;
        }

        public void LoadFromDatabaseForGetUserListFromAdmin(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // FirstName column, varchar(63), not null
                FirstName = reader.GetString(i++);

                // LastName column, varchar(63), not null
                LastName = reader.GetString(i++);
                

                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // IsSuperUser column, bit, not null
                IsSuperUser = reader.GetBoolean(i++);

                UserType = reader.GetString(i++);

                // SecurityProfileId 
                SecurityProfileId = reader.GetInt64(i++);

                // UserName 
                UserName = reader.GetString(i++);

                // IsActive 
                IsActive = reader.GetBoolean(i++);

                // LoginInfoId 
                LoginInfoId = reader.GetInt64(i++);

                // CompanyName 
                CompanyName = reader.GetString(i++);

                // Personnel ClientLookupId 
                PersonnelClientLookupId = reader.GetString(i++);

                // Personnel CraftId 
                PersonnelCraftId = reader.GetInt64(i++);

                // Personnel Shift
                PersonnelShift = reader.GetString(i++);

                // Craft Descriptiopn
                CraftDescription = reader.GetString(i++);
            }   
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["FirstName"].ToString(); }
                catch { missing.Append("FirstName "); }

                try { reader["LastName"].ToString(); }
                catch { missing.Append("LastName "); }
              
                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["IsSuperUser"].ToString(); }
                catch { missing.Append("IsSuperUser "); }

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType "); }

                try { reader["SecurityProfileId"].ToString(); }
                catch { missing.Append("SecurityProfileId "); }

                try { reader["UserName"].ToString(); }
                catch { missing.Append("UserName "); }

                try { reader["IsActive"].ToString(); }
                catch { missing.Append("IsActive "); }

                try { reader["LoginInfoId"].ToString(); }
                catch { missing.Append("LoginInfoId "); }

                try { reader["CompanyName"].ToString(); }
                catch { missing.Append("CompanyName "); }

                try { reader["Personnel_ClientLookupId"].ToString(); }
                catch { missing.Append("Personnel_ClientLookupId "); }

                try { reader["CraftId"].ToString(); }
                catch { missing.Append("CraftId "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["CraftDescription"].ToString(); }
                catch { missing.Append("CraftDescription "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void RetrieveUserListFromAdmin(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,           
            ref List<b_UserSearch> data
           )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_UserSearch> results = null;
            data = new List<b_UserSearch>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_UserData_RetrieveInfoByClientId.CallStoredProcedure(command, callerUserInfoId, callerUserName,this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_UserSearch>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveUserListByClientAndSite(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_UserSearch> data
           )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_UserSearch> results = null;
            data = new List<b_UserSearch>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_UserData_RetrieveInfoByClientIdAndSite.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_UserSearch>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        //------------------End Added By Indusnet Technologies------------

        #region V2-402
        public static b_UserSearch ProcessRowForUserSearchList_Enterprise(SqlDataReader reader)
        {
            // Create instance of object
            b_UserSearch users = new b_UserSearch();

            // Load the object from the database
            users.LoadFromDatabaseForUserSearchList_Enterprise(reader);

            // Return result
            return users;
        }

        public void LoadFromDatabaseForUserSearchList_Enterprise(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // FirstName column, varchar(63), not null
                FirstName = reader.GetString(i++);

                // LastName column, varchar(63), not null
                LastName = reader.GetString(i++);


                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // IsSuperUser column, bit, not null
                IsSuperUser = reader.GetBoolean(i++);

                UserType = reader.GetString(i++);

                // SecurityProfileId 
                SecurityProfileId = reader.GetInt64(i++);

                // UserName 
                UserName = reader.GetString(i++);

                // IsActive 
                IsActive = reader.GetBoolean(i++);

                // LoginInfoId 
                LoginInfoId = reader.GetInt64(i++);

                // CompanyName 
                CompanyName = reader.GetString(i++);

                // Personnel ClientLookupId 
                PersonnelClientLookupId = reader.GetString(i++);

                // total count
                TotalCount = reader.GetInt32(i++);

                // site count
                SiteCount = reader.GetInt32(i++);

                // security profile
                SecurityProfileDescription = reader.GetString(i++);

                //EmployeeId
                EmployeeId = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["FirstName"].ToString(); }
                catch { missing.Append("FirstName "); }

                try { reader["LastName"].ToString(); }
                catch { missing.Append("LastName "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["IsSuperUser"].ToString(); }
                catch { missing.Append("IsSuperUser "); }

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType "); }

                try { reader["SecurityProfileId"].ToString(); }
                catch { missing.Append("SecurityProfileId "); }

                try { reader["UserName"].ToString(); }
                catch { missing.Append("UserName "); }

                try { reader["IsActive"].ToString(); }
                catch { missing.Append("IsActive "); }

                try { reader["LoginInfoId"].ToString(); }
                catch { missing.Append("LoginInfoId "); }

                try { reader["CompanyName"].ToString(); }
                catch { missing.Append("CompanyName "); }

                try { reader["Personnel_ClientLookupId"].ToString(); }
                catch { missing.Append("Personnel_ClientLookupId "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }

                try { reader["SiteCount"].ToString(); }
                catch { missing.Append("SiteCount "); }

                try { reader["SecurityProfileDescription"].ToString(); }
                catch { missing.Append("SecurityProfileDescription "); }
                
                try { reader["EmployeeId"].ToString(); }
                catch { missing.Append("EmployeeId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void RetrieveUserSearchListForEnterprise(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_UserSearch> data
           )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_UserSearch> results = null;
            data = new List<b_UserSearch>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_UserData_RetrieveChunkSearch_Enterprise_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_UserSearch>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_UserSearch ProcessRowForUserSearchList(SqlDataReader reader)
        {
            // Create instance of object
            b_UserSearch users = new b_UserSearch();

            // Load the object from the database
            users.LoadFromDatabaseForUserSearchList(reader);

            // Return result
            return users;
        }

        public void LoadFromDatabaseForUserSearchList(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // FirstName column, varchar(63), not null
                FirstName = reader.GetString(i++);

                // LastName column, varchar(63), not null
                LastName = reader.GetString(i++);


                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // IsSuperUser column, bit, not null
                IsSuperUser = reader.GetBoolean(i++);

                UserType = reader.GetString(i++);

                // SecurityProfileId 
                SecurityProfileId = reader.GetInt64(i++);

                // UserName 
                UserName = reader.GetString(i++);

                // IsActive 
                IsActive = reader.GetBoolean(i++);

                // LoginInfoId 
                LoginInfoId = reader.GetInt64(i++);

                // CompanyName 
                CompanyName = reader.GetString(i++);

                // Personnel ClientLookupId 
                PersonnelClientLookupId = reader.GetString(i++);

                // Personnel CraftId 
                PersonnelCraftId = reader.GetInt64(i++);

                // Personnel Shift
                PersonnelShift = reader.GetString(i++);

                // Craft Descriptiopn
                CraftDescription = reader.GetString(i++);

                // total count
                TotalCount = reader.GetInt32(i++);

                // security profile
                SecurityProfileDescription = reader.GetString(i++);

                //EmployeeId
                EmployeeId = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["FirstName"].ToString(); }
                catch { missing.Append("FirstName "); }

                try { reader["LastName"].ToString(); }
                catch { missing.Append("LastName "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["IsSuperUser"].ToString(); }
                catch { missing.Append("IsSuperUser "); }

                try { reader["UserType"].ToString(); }
                catch { missing.Append("UserType "); }

                try { reader["SecurityProfileId"].ToString(); }
                catch { missing.Append("SecurityProfileId "); }

                try { reader["UserName"].ToString(); }
                catch { missing.Append("UserName "); }

                try { reader["IsActive"].ToString(); }
                catch { missing.Append("IsActive "); }

                try { reader["LoginInfoId"].ToString(); }
                catch { missing.Append("LoginInfoId "); }

                try { reader["CompanyName"].ToString(); }
                catch { missing.Append("CompanyName "); }

                try { reader["Personnel_ClientLookupId"].ToString(); }
                catch { missing.Append("Personnel_ClientLookupId "); }

                try { reader["CraftId"].ToString(); }
                catch { missing.Append("CraftId "); }

                try { reader["CraftDescription"].ToString(); }
                catch { missing.Append("CraftDescription "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }

                try { reader["SecurityProfileDescription"].ToString(); }
                catch { missing.Append("SecurityProfileDescription "); }
                
                try { reader["EmployeeId"].ToString(); }
                catch { missing.Append("EmployeeId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void RetrieveUserSearchListForBasicProfessional(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_UserSearch> data
           )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_UserSearch> results = null;
            data = new List<b_UserSearch>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_UserData_RetrieveChunkSearch_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_UserSearch>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_UserSearch ProcessRowForUserCraftDetails(SqlDataReader reader)
        {
            // Create instance of object
            b_UserSearch users = new b_UserSearch();

            // Load the object from the database
            users.LoadFromDatabaseForUserCraftDetails(reader);

            // Return result
            return users;
        }

        public void LoadFromDatabaseForUserCraftDetails(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // PersonnelClientLookupId 
                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i++);
                }
                else
                {
                    PersonnelClientLookupId = "";
                }

                // PersonnelCraftId 
                if (false == reader.IsDBNull(i))
                {
                    PersonnelCraftId = reader.GetInt64(i++);
                }
                else
                {
                    PersonnelCraftId = 0;
                }

                // CraftDescription 
                if (false == reader.IsDBNull(i))
                {
                    CraftDescription = reader.GetString(i++);
                }
                else
                {
                    CraftDescription = "";
                }  

                // SiteName column, varchar(63), not null
                if(false == reader.IsDBNull(i))
                {
                    SiteName = reader.GetString(i++);
                }
                else
                {
                    SiteName = "";
                }

                //Siteid
                if(false == reader.IsDBNull(i))
                {
                    DefaultSiteId = reader.GetInt64(i++);
                }
                else
                {
                    DefaultSiteId = 0;
                }
                
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["PersonnelCraftId"].ToString(); }
                catch { missing.Append("PersonnelCraftId "); }

                try { reader["CraftDescription"].ToString(); }
                catch { missing.Append("CraftDescription "); }

                try { reader["SiteName"].ToString(); }
                catch { missing.Append("SiteName "); }

                try { reader["DefaultSiteId"].ToString(); }
                catch { missing.Append("DefaultSiteId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void RetrieveUserSearchCraftDetails(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_UserSearch> data
           )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_UserSearch> results = null;
            data = new List<b_UserSearch>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_UserData_RetrievePersonnelChild_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_UserSearch>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        #endregion
        #region V2-962
        public static b_UserSearch ProcessRowForUserSearchList_Admin(SqlDataReader reader)
        {
            // Create instance of object
            b_UserSearch users = new b_UserSearch();

            // Load the object from the database
            users.LoadFromDatabaseForUserSearchList_Admin(reader);

            // Return result
            return users;
        }

        public void LoadFromDatabaseForUserSearchList_Admin(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // UserName 
                UserName = reader.GetString(i++);

                // FirstName column, varchar(63), not null
                FirstName = reader.GetString(i++);

                // LastName column, varchar(63), not null
                LastName = reader.GetString(i++);

                // CompanyName 
                CompanyName = reader.GetString(i++);

                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);



                // SecurityProfileName  column, varchar(63), not null
                SecurityProfileName = reader.GetString(i++);

                // IsActive 
                IsActive = reader.GetBoolean(i++);

                // site count
                SiteCount = reader.GetInt32(i++);

                // total count
                TotalCount = reader.GetInt32(i++);

             
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["UserName"].ToString(); }
                catch { missing.Append("UserName "); }

                try { reader["FirstName"].ToString(); }
                catch { missing.Append("FirstName "); }

                try { reader["LastName"].ToString(); }
                catch { missing.Append("LastName "); }

                try { reader["CompanyName"].ToString(); }
                catch { missing.Append("CompanyName "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["SecurityProfileName"].ToString(); }
                catch { missing.Append("SecurityProfileName "); }

                try { reader["IsActive"].ToString(); }
                catch { missing.Append("IsActive "); }

                try { reader["SiteCount"].ToString(); }
                catch { missing.Append("SiteCount "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void RetrieveUserSearchListForAdmin(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_UserSearch> data
           )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_UserSearch> results = null;
            data = new List<b_UserSearch>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_UserData_RetrieveChunkSearchForUserManagement_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_UserSearch>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        #endregion
    }
}
