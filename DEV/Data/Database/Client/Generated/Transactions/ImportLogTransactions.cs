/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;
using Common.Enumerations;

namespace Database
{
  public class ImportLog_TransactionBaseClass : AbstractTransactionManager
  {
    public ImportLog_TransactionBaseClass()
    {
      // Set the database in which this table resides.
      // This must be called prior to base.PerformLocalValidation(), 
      // since that process will validate that the appropriate 
      // connection string is set.
      UseDatabase = DatabaseTypeEnum.Client;
    }

    public override void PerformLocalValidation()
    {
      base.PerformLocalValidation();
      if (ImportLog == null)
      {
        string message = "ImportLog has not been set.";
        throw new Exception(message);
      }

      CallerUserInfoId = dbKey.User.UserInfoId;
      CallerUserName = dbKey.UserName;


      // Explicitly set tenant id from dbkey
      this.ImportLog.ClientId = this.dbKey.Client.ClientId;

    }

    public b_ImportLog ImportLog { get; set; }
    public b_ChangeLog ChangeLog { get; set; }

    public override void PerformWorkItem()
    {
      // 
    }

    public override void Preprocess()
    {
      // throw new NotImplementedException();
    }

    public override void Postprocess()
    {
      // throw new NotImplementedException();
    }
  }

  public class ImportLog_Create : ImportLog_TransactionBaseClass
  {

    public override void PerformLocalValidation()
    {
      base.PerformLocalValidation();
      if (ImportLog.ImportLogId > 0)
      {
        string message = "ImportLog has an invalid ID.";
        throw new Exception(message);
      }
    }
    public override void PerformWorkItem()
    {
      ImportLog.InsertIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
    }

    public override void Postprocess()
    {
      base.Postprocess();
      System.Diagnostics.Debug.Assert(ImportLog.ImportLogId > 0);
    }
  }

  public class ImportLog_Retrieve : ImportLog_TransactionBaseClass
  {

    public override void PerformLocalValidation()
    {
      base.PerformLocalValidation();
      if (ImportLog.ImportLogId == 0)
      {
        string message = "ImportLog has an invalid ID.";
        throw new Exception(message);
      }
    }

    public override void PerformWorkItem()
    {
      base.UseTransaction = false;
      ImportLog.RetrieveByPKFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
    }
  }

  public class ImportLog_Update : ImportLog_TransactionBaseClass
  {

    public override void PerformLocalValidation()
    {
      base.PerformLocalValidation();
      if (ImportLog.ImportLogId == 0)
      {
        string message = "ImportLog has an invalid ID.";
        throw new Exception(message);
      }
    }

    public override void PerformWorkItem()
    {
      ImportLog.UpdateInDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
      // If no have been made, no change log is created
      if (ChangeLog != null) { ChangeLog.InsertIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName); }
    }
  }

  public class ImportLog_Delete : ImportLog_TransactionBaseClass
  {
    public override void PerformLocalValidation()
    {
      base.PerformLocalValidation();
      if (ImportLog.ImportLogId == 0)
      {
        string message = "ImportLog has an invalid ID.";
        throw new Exception(message);
      }
    }

    public override void PerformWorkItem()
    {
      ImportLog.DeleteFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
    }
  }

  public class ImportLog_RetrieveAll : AbstractTransactionManager
  {

    public ImportLog_RetrieveAll()
    {
      // Set the database in which this table resides.
      // This must be called prior to base.PerformLocalValidation(), 
      // since that process will validate that the appropriate 
      // connection string is set.
      UseDatabase = DatabaseTypeEnum.Client;
    }


    public List<b_ImportLog> ImportLogList { get; set; }

    public override void Preprocess()
    {
      //throw new NotImplementedException();
    }

    public override void Postprocess()
    {
      //throw new NotImplementedException();
    }

    public override void PerformLocalValidation()
    {
      base.PerformLocalValidation();
    }

    public override void PerformWorkItem()
    {
      b_ImportLog[] tmpArray = null;
      b_ImportLog o = new b_ImportLog();


      // Explicitly set tenant id from dbkey
      o.ClientId = this.dbKey.Client.ClientId;


      o.RetrieveAllFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

      ImportLogList = new List<b_ImportLog>(tmpArray);
    }
  }
}
