/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the CustomId table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_CustomId : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_CustomId ()
        {
            ClientId = 0;
            CustomIdId = 0;
            SiteId = 0;
            Key = String.Empty;
            Pattern = String.Empty;
            LastSeed = 0;
            Prefix = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// CustomIdId property
        /// </summary>
        public long CustomIdId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// Key property
        /// </summary>
        public string Key { get; set; }

        /// <summary>
        /// Pattern property
        /// </summary>
        public string Pattern { get; set; }

        /// <summary>
        /// LastSeed property
        /// </summary>
        public long LastSeed { get; set; }

        /// <summary>
        /// Prefix property
        /// </summary>
        public string Prefix { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_CustomId object.
        /// This routine should be applied to the usp_CustomId_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_CustomId_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_CustomId object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_CustomId obj = new b_CustomId();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_CustomId object.
        /// This routine should be applied to the usp_CustomId_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_CustomId_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // CustomIdId column, bigint, not null
                        CustomIdId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // Key column, nvarchar(15), not null
                        Key = reader.GetString(i++);

                        // Pattern column, nvarchar(255), not null
                        Pattern = reader.GetString(i++);

                        // LastSeed column, bigint, not null
                        LastSeed = reader.GetInt64(i++);

                        // Prefix column, nvarchar(4), not null
                        Prefix = reader.GetString(i++);

                        // UpdateIndex column, bigint, not null
                        UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["CustomIdId"].ToString(); }
            catch { missing.Append("CustomIdId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["Key"].ToString(); }
            catch { missing.Append("Key "); }
            
            try { reader["Pattern"].ToString(); }
            catch { missing.Append("Pattern "); }
            
            try { reader["LastSeed"].ToString(); }
            catch { missing.Append("LastSeed "); }
            
            try { reader["Prefix"].ToString(); }
            catch { missing.Append("Prefix "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a CustomId table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_CustomId_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the CustomId table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_CustomId_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the CustomId table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_CustomId_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all CustomId table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_CustomId[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_CustomId[] data
        )
        {
            Database.SqlClient.ProcessRow<b_CustomId> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_CustomId[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_CustomId>(reader => { b_CustomId obj = new b_CustomId(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_CustomId_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_CustomId[])results.ToArray(typeof(b_CustomId));
                }
                else
                {
                    data = new b_CustomId[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve CustomId table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_CustomId[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_CustomId> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_CustomId>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_CustomId_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_CustomId objects.
        /// </summary>
        /// <param name="obj">b_CustomId object to compare against the current object.</param>
        public bool Equals (b_CustomId obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (CustomIdId != obj.CustomIdId) return false;
            if (SiteId != obj.SiteId) return false;
            if (!Key.Equals(obj.Key)) return false;
            if (!Pattern.Equals(obj.Pattern)) return false;
            if (LastSeed != obj.LastSeed) return false;
            if (!Prefix.Equals(obj.Prefix)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_CustomId objects.
        /// </summary>
        /// <param name="obj1">b_CustomId object to use in the comparison.</param>
        /// <param name="obj2">b_CustomId object to use in the comparison.</param>
        public static bool Equals (b_CustomId obj1, b_CustomId obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
