/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the FleetDimensions table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_FleetDimensions : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_FleetDimensions ()
        {
            FleetDimensionsId = 0;
            ClientId = 0;
            EquipmentId = 0;
            Color = String.Empty;
            BodyType = String.Empty;
            Width = 0;
            Height = new System.Nullable<decimal>();
            Length = 0;
            PassengerVolume = 0;
            CargoVolume = 0;
            GroundClearance = 0;
            BedLength = 0;
            CurbWeight = 0;
            VehicleWeight = 0;
            TowingCapacity = 0;
            MaxPayload = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// FleetDimensionsId property
        /// </summary>
        public long FleetDimensionsId { get; set; }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        public long EquipmentId { get; set; }

        /// <summary>
        /// Color property
        /// </summary>
        public string Color { get; set; }

        /// <summary>
        /// BodyType property
        /// </summary>
        public string BodyType { get; set; }

        /// <summary>
        /// Width property
        /// </summary>
        public decimal Width { get; set; }

        /// <summary>
        /// Height property
        /// </summary>
        public decimal? Height { get; set; }

        /// <summary>
        /// Length property
        /// </summary>
        public decimal Length { get; set; }

        /// <summary>
        /// PassengerVolume property
        /// </summary>
        public decimal PassengerVolume { get; set; }

        /// <summary>
        /// CargoVolume property
        /// </summary>
        public decimal CargoVolume { get; set; }

        /// <summary>
        /// GroundClearance property
        /// </summary>
        public decimal GroundClearance { get; set; }

        /// <summary>
        /// BedLength property
        /// </summary>
        public decimal BedLength { get; set; }

        /// <summary>
        /// CurbWeight property
        /// </summary>
        public decimal CurbWeight { get; set; }

        /// <summary>
        /// VehicleWeight property
        /// </summary>
        public decimal VehicleWeight { get; set; }

        /// <summary>
        /// TowingCapacity property
        /// </summary>
        public decimal TowingCapacity { get; set; }

        /// <summary>
        /// MaxPayload property
        /// </summary>
        public decimal MaxPayload { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_FleetDimensions object.
        /// This routine should be applied to the usp_FleetDimensions_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FleetDimensions_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_FleetDimensions object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_FleetDimensions obj = new b_FleetDimensions();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_FleetDimensions object.
        /// This routine should be applied to the usp_FleetDimensions_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FleetDimensions_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // FleetDimensionsId column, bigint, not null
                        FleetDimensionsId = reader.GetInt64(i++);

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // EquipmentId column, bigint, not null
                        EquipmentId = reader.GetInt64(i++);

                        // Color column, nvarchar(30), not null
                        Color = reader.GetString(i++);

                        // BodyType column, nvarchar(30), not null
                        BodyType = reader.GetString(i++);

                        // Width column, decimal(6,2), not null
                        Width = reader.GetDecimal(i++);

                        // Height column, decimal(6,2), not null
                        Height = reader.GetDecimal(i++);

                        // Length column, decimal(6,2), not null
                        Length = reader.GetDecimal(i++);

                        // PassengerVolume column, decimal(6,2), not null
                        PassengerVolume = reader.GetDecimal(i++);

                        // CargoVolume column, decimal(6,2), not null
                        CargoVolume = reader.GetDecimal(i++);

                        // GroundClearance column, decimal(6,2), not null
                        GroundClearance = reader.GetDecimal(i++);

                        // BedLength column, decimal(6,2), not null
                        BedLength = reader.GetDecimal(i++);

                        // CurbWeight column, decimal(9,2), not null
                        CurbWeight = reader.GetDecimal(i++);

                        // VehicleWeight column, decimal(9,2), not null
                        VehicleWeight = reader.GetDecimal(i++);

                        // TowingCapacity column, decimal(9,2), not null
                        TowingCapacity = reader.GetDecimal(i++);

                        // MaxPayload column, decimal(9,2), not null
                        MaxPayload = reader.GetDecimal(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["FleetDimensionsId"].ToString(); }
            catch { missing.Append("FleetDimensionsId "); }
            
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["EquipmentId"].ToString(); }
            catch { missing.Append("EquipmentId "); }
            
            try { reader["Color"].ToString(); }
            catch { missing.Append("Color "); }
            
            try { reader["BodyType"].ToString(); }
            catch { missing.Append("BodyType "); }
            
            try { reader["Width"].ToString(); }
            catch { missing.Append("Width "); }
            
            try { reader["Height"].ToString(); }
            catch { missing.Append("Height "); }
            
            try { reader["Length"].ToString(); }
            catch { missing.Append("Length "); }
            
            try { reader["PassengerVolume"].ToString(); }
            catch { missing.Append("PassengerVolume "); }
            
            try { reader["CargoVolume"].ToString(); }
            catch { missing.Append("CargoVolume "); }
            
            try { reader["GroundClearance"].ToString(); }
            catch { missing.Append("GroundClearance "); }
            
            try { reader["BedLength"].ToString(); }
            catch { missing.Append("BedLength "); }
            
            try { reader["CurbWeight"].ToString(); }
            catch { missing.Append("CurbWeight "); }
            
            try { reader["VehicleWeight"].ToString(); }
            catch { missing.Append("VehicleWeight "); }
            
            try { reader["TowingCapacity"].ToString(); }
            catch { missing.Append("TowingCapacity "); }
            
            try { reader["MaxPayload"].ToString(); }
            catch { missing.Append("MaxPayload "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a FleetDimensions table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetDimensions_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the FleetDimensions table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetDimensions_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the FleetDimensions table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetDimensions_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all FleetDimensions table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_FleetDimensions[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_FleetDimensions[] data
        )
        {
            Database.SqlClient.ProcessRow<b_FleetDimensions> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_FleetDimensions[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FleetDimensions>(reader => { b_FleetDimensions obj = new b_FleetDimensions(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_FleetDimensions_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_FleetDimensions[])results.ToArray(typeof(b_FleetDimensions));
                }
                else
                {
                    data = new b_FleetDimensions[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve FleetDimensions table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_FleetDimensions[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_FleetDimensions> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FleetDimensions>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_FleetDimensions_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_FleetDimensions objects.
        /// </summary>
        /// <param name="obj">b_FleetDimensions object to compare against the current object.</param>
        public bool Equals (b_FleetDimensions obj)
        {
            if (FleetDimensionsId != obj.FleetDimensionsId) return false;
            if (ClientId != obj.ClientId) return false;
            if (EquipmentId != obj.EquipmentId) return false;
            if (!Color.Equals(obj.Color)) return false;
            if (!BodyType.Equals(obj.BodyType)) return false;
            if (Width != obj.Width) return false;
            if (!Height.Equals(obj.Height)) return false;
            if (Length != obj.Length) return false;
            if (PassengerVolume != obj.PassengerVolume) return false;
            if (CargoVolume != obj.CargoVolume) return false;
            if (GroundClearance != obj.GroundClearance) return false;
            if (BedLength != obj.BedLength) return false;
            if (CurbWeight != obj.CurbWeight) return false;
            if (VehicleWeight != obj.VehicleWeight) return false;
            if (TowingCapacity != obj.TowingCapacity) return false;
            if (MaxPayload != obj.MaxPayload) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_FleetDimensions objects.
        /// </summary>
        /// <param name="obj1">b_FleetDimensions object to use in the comparison.</param>
        /// <param name="obj2">b_FleetDimensions object to use in the comparison.</param>
        public static bool Equals (b_FleetDimensions obj1, b_FleetDimensions obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
