/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ReportListing table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ReportListing : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ReportListing()
        {
            ReportListingId = 0;
            ReportName = String.Empty;
            Description = String.Empty;
            ReportGroup = String.Empty;
            SourceName = String.Empty;
            UseSP = false;
            PrimarySortColumn = String.Empty;
            SecondarySortColumn = String.Empty;
            IsGrouped = false;
            GroupColumn = String.Empty;
            IncludePrompt = false;
            Prompt1Source = String.Empty;
            Prompt1Type = String.Empty;
            Prompt1ListSource = String.Empty;
            Prompt1List = String.Empty;
            Prompt2Source = String.Empty;
            Prompt2Type = String.Empty;
            Prompt2ListSource = String.Empty;
            Prompt2List = String.Empty;
            ChildSourceName = String.Empty;
            MasterLinkColumn = String.Empty;
            ChildLinkColumn = String.Empty;
            IncludeChild = false;
            IsEnterprise = false;
            BaseQuery = String.Empty;
            NoExcel = false;
            NoCSV = false;
            DevExpressRpt = false;
            DevExpressRptName = String.Empty;
        }

        /// <summary>
        /// ReportListingId property
        /// </summary>
        public long ReportListingId { get; set; }

        /// <summary>
        /// ReportName property
        /// </summary>
        public string ReportName { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// ReportGroup property
        /// </summary>
        public string ReportGroup { get; set; }

        /// <summary>
        /// SourceName property
        /// </summary>
        public string SourceName { get; set; }

        /// <summary>
        /// UseSP property
        /// </summary>
        public bool UseSP { get; set; }

        /// <summary>
        /// PrimarySortColumn property
        /// </summary>
        public string PrimarySortColumn { get; set; }

        /// <summary>
        /// SecondarySortColumn property
        /// </summary>
        public string SecondarySortColumn { get; set; }

        /// <summary>
        /// IsGrouped property
        /// </summary>
        public bool IsGrouped { get; set; }

        /// <summary>
        /// GroupColumn property
        /// </summary>
        public string GroupColumn { get; set; }

        /// <summary>
        /// IncludePrompt property
        /// </summary>
        public bool IncludePrompt { get; set; }

        /// <summary>
        /// Prompt1Source property
        /// </summary>
        public string Prompt1Source { get; set; }

        /// <summary>
        /// Prompt1Type property
        /// </summary>
        public string Prompt1Type { get; set; }

        /// <summary>
        /// Prompt1ListSource property
        /// </summary>
        public string Prompt1ListSource { get; set; }

        /// <summary>
        /// Prompt1List property
        /// </summary>
        public string Prompt1List { get; set; }

        /// <summary>
        /// Prompt2Source property
        /// </summary>
        public string Prompt2Source { get; set; }

        /// <summary>
        /// Prompt2Type property
        /// </summary>
        public string Prompt2Type { get; set; }

        /// <summary>
        /// Prompt2ListSource property
        /// </summary>
        public string Prompt2ListSource { get; set; }

        /// <summary>
        /// Prompt2List property
        /// </summary>
        public string Prompt2List { get; set; }

        /// <summary>
        /// ChildSourceName property
        /// </summary>
        public string ChildSourceName { get; set; }

        /// <summary>
        /// MasterLinkColumn property
        /// </summary>
        public string MasterLinkColumn { get; set; }

        /// <summary>
        /// ChildLinkColumn property
        /// </summary>
        public string ChildLinkColumn { get; set; }

        /// <summary>
        /// IncludeChild property
        /// </summary>
        public bool IncludeChild { get; set; }

        /// <summary>
        /// IsEnterprise property
        /// </summary>
        public bool IsEnterprise { get; set; }

        /// <summary>
        /// BaseQuery property
        /// </summary>
        public string BaseQuery { get; set; }

        /// <summary>
        /// NoExcel property
        /// </summary>
        public bool NoExcel { get; set; }

        /// <summary>
        /// NoCSV property
        /// </summary>
        public bool NoCSV { get; set; }

        /// <summary>
        /// DevExpressRpt property
        /// </summary>
        public bool DevExpressRpt { get; set; }

        /// <summary>
        /// DevExpressRptName property
        /// </summary>
        public string DevExpressRptName { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ReportListing object.
        /// This routine should be applied to the usp_ReportListing_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ReportListing_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ReportListing object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_ReportListing obj = new b_ReportListing();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ReportListing object.
        /// This routine should be applied to the usp_ReportListing_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ReportListing_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ReportListingId column, bigint, not null
                ReportListingId = reader.GetInt64(i++);

                // ReportName column, nvarchar(250), not null
                ReportName = reader.GetString(i++);

                // Description column, nvarchar(250), not null
                Description = reader.GetString(i++);

                // ReportGroup column, nvarchar(30), not null
                ReportGroup = reader.GetString(i++);

                // SourceName column, nvarchar(250), not null
                SourceName = reader.GetString(i++);

                // UseSP column, bit, not null
                UseSP = reader.GetBoolean(i++);

                // PrimarySortColumn column, nvarchar(30), not null
                PrimarySortColumn = reader.GetString(i++);

                // SecondarySortColumn column, nvarchar(30), not null
                SecondarySortColumn = reader.GetString(i++);

                // IsGrouped column, bit, not null
                IsGrouped = reader.GetBoolean(i++);

                // GroupColumn column, nvarchar(30), not null
                GroupColumn = reader.GetString(i++);

                // IncludePrompt column, bit, not null
                IncludePrompt = reader.GetBoolean(i++);

                // Prompt1Source column, nvarchar(30), not null
                Prompt1Source = reader.GetString(i++);

                // Prompt1Type column, nvarchar(15), not null
                Prompt1Type = reader.GetString(i++);

                // Prompt1ListSource column, nvarchar(30), not null
                Prompt1ListSource = reader.GetString(i++);

                // Prompt1List column, nvarchar(30), not null
                Prompt1List = reader.GetString(i++);

                // Prompt2Source column, nvarchar(30), not null
                Prompt2Source = reader.GetString(i++);

                // Prompt2Type column, nvarchar(15), not null
                Prompt2Type = reader.GetString(i++);

                // Prompt2ListSource column, nvarchar(30), not null
                Prompt2ListSource = reader.GetString(i++);

                // Prompt2List column, nvarchar(30), not null
                Prompt2List = reader.GetString(i++);

                // ChildSourceName column, nvarchar(250), not null
                ChildSourceName = reader.GetString(i++);

                // MasterLinkColumn column, nvarchar(30), not null
                MasterLinkColumn = reader.GetString(i++);

                // ChildLinkColumn column, nvarchar(30), not null
                ChildLinkColumn = reader.GetString(i++);

                // IncludeChild column, bit, not null
                IncludeChild = reader.GetBoolean(i++);

                // IsEnterprise column, bit, not null
                IsEnterprise = reader.GetBoolean(i++);

                // BaseQuery column, nvarchar(MAX), not null
                BaseQuery = reader.GetString(i++);

                // NoExcel column, bit, not null
                NoExcel = reader.GetBoolean(i++);

                // NoCSV column, bit, not null
                NoCSV = reader.GetBoolean(i++);

                // DevExpressRpt column, bit, not null
                DevExpressRpt = reader.GetBoolean(i++);

                // DevExpressRptName column, nvarchar(205), not null
                DevExpressRptName = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ReportListingId"].ToString(); }
                catch { missing.Append("ReportListingId "); }

                try { reader["ReportName"].ToString(); }
                catch { missing.Append("ReportName "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["ReportGroup"].ToString(); }
                catch { missing.Append("ReportGroup "); }

                try { reader["SourceName"].ToString(); }
                catch { missing.Append("SourceName "); }

                try { reader["UseSP"].ToString(); }
                catch { missing.Append("UseSP "); }

                try { reader["PrimarySortColumn"].ToString(); }
                catch { missing.Append("PrimarySortColumn "); }

                try { reader["SecondarySortColumn"].ToString(); }
                catch { missing.Append("SecondarySortColumn "); }

                try { reader["IsGrouped"].ToString(); }
                catch { missing.Append("IsGrouped "); }

                try { reader["GroupColumn"].ToString(); }
                catch { missing.Append("GroupColumn "); }

                try { reader["IncludePrompt"].ToString(); }
                catch { missing.Append("IncludePrompt "); }

                try { reader["Prompt1Source"].ToString(); }
                catch { missing.Append("Prompt1Source "); }

                try { reader["Prompt1Type"].ToString(); }
                catch { missing.Append("Prompt1Type "); }

                try { reader["Prompt1ListSource"].ToString(); }
                catch { missing.Append("Prompt1ListSource "); }

                try { reader["Prompt1List"].ToString(); }
                catch { missing.Append("Prompt1List "); }

                try { reader["Prompt2Source"].ToString(); }
                catch { missing.Append("Prompt2Source "); }

                try { reader["Prompt2Type"].ToString(); }
                catch { missing.Append("Prompt2Type "); }

                try { reader["Prompt2ListSource"].ToString(); }
                catch { missing.Append("Prompt2ListSource "); }

                try { reader["Prompt2List"].ToString(); }
                catch { missing.Append("Prompt2List "); }

                try { reader["ChildSourceName"].ToString(); }
                catch { missing.Append("ChildSourceName "); }

                try { reader["MasterLinkColumn"].ToString(); }
                catch { missing.Append("MasterLinkColumn "); }

                try { reader["ChildLinkColumn"].ToString(); }
                catch { missing.Append("ChildLinkColumn "); }

                try { reader["IncludeChild"].ToString(); }
                catch { missing.Append("IncludeChild "); }

                try { reader["IsEnterprise"].ToString(); }
                catch { missing.Append("IsEnterprise "); }

                try { reader["BaseQuery"].ToString(); }
                catch { missing.Append("BaseQuery "); }

                try { reader["NoExcel"].ToString(); }
                catch { missing.Append("NoExcel "); }

                try { reader["NoCSV"].ToString(); }
                catch { missing.Append("NoCSV "); }

                try { reader["DevExpressRpt"].ToString(); }
                catch { missing.Append("DevExpressRpt "); }

                try { reader["DevExpressRptName"].ToString(); }
                catch { missing.Append("DevExpressRptName "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a ReportListing table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReportListing_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ReportListing table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReportListing_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ReportListing table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReportListing_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ReportListing table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ReportListing[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ReportListing[] data
        )
        {
            Database.SqlClient.ProcessRow<b_ReportListing> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ReportListing[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReportListing>(reader => { b_ReportListing obj = new b_ReportListing(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_ReportListing_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName);

                // Extract the results
                if (null != results)
                {
                    data = (b_ReportListing[])results.ToArray(typeof(b_ReportListing));
                }
                else
                {
                    data = new b_ReportListing[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ReportListing table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ReportListing[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_ReportListing> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReportListing>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_ReportListing_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ReportListing objects.
        /// </summary>
        /// <param name="obj">b_ReportListing object to compare against the current object.</param>
        public bool Equals(b_ReportListing obj)
        {
            if (ReportListingId != obj.ReportListingId) return false;
            if (!ReportName.Equals(obj.ReportName)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!ReportGroup.Equals(obj.ReportGroup)) return false;
            if (!SourceName.Equals(obj.SourceName)) return false;
            if (UseSP != obj.UseSP) return false;
            if (!PrimarySortColumn.Equals(obj.PrimarySortColumn)) return false;
            if (!SecondarySortColumn.Equals(obj.SecondarySortColumn)) return false;
            if (IsGrouped != obj.IsGrouped) return false;
            if (!GroupColumn.Equals(obj.GroupColumn)) return false;
            if (IncludePrompt != obj.IncludePrompt) return false;
            if (!Prompt1Source.Equals(obj.Prompt1Source)) return false;
            if (!Prompt1Type.Equals(obj.Prompt1Type)) return false;
            if (!Prompt1ListSource.Equals(obj.Prompt1ListSource)) return false;
            if (!Prompt1List.Equals(obj.Prompt1List)) return false;
            if (!Prompt2Source.Equals(obj.Prompt2Source)) return false;
            if (!Prompt2Type.Equals(obj.Prompt2Type)) return false;
            if (!Prompt2ListSource.Equals(obj.Prompt2ListSource)) return false;
            if (!Prompt2List.Equals(obj.Prompt2List)) return false;
            if (!ChildSourceName.Equals(obj.ChildSourceName)) return false;
            if (!MasterLinkColumn.Equals(obj.MasterLinkColumn)) return false;
            if (!ChildLinkColumn.Equals(obj.ChildLinkColumn)) return false;
            if (IncludeChild != obj.IncludeChild) return false;
            if (IsEnterprise != obj.IsEnterprise) return false;
            if (!BaseQuery.Equals(obj.BaseQuery)) return false;
            if (NoExcel != obj.NoExcel) return false;
            if (NoCSV != obj.NoCSV) return false;
            if (DevExpressRpt != obj.DevExpressRpt) return false;
            if (!DevExpressRptName.Equals(obj.DevExpressRptName)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ReportListing objects.
        /// </summary>
        /// <param name="obj1">b_ReportListing object to use in the comparison.</param>
        /// <param name="obj2">b_ReportListing object to use in the comparison.</param>
        public static bool Equals(b_ReportListing obj1, b_ReportListing obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
