/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the InterfaceProp table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_InterfaceProp : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_InterfaceProp()
        {
            ClientId = 0;
            InterfacePropId = 0;
            SiteId = 0;
            InterfaceType = String.Empty;
            InUse = false;
            APIKey1 = String.Empty;
            APIKey2 = String.Empty;
            Switch1 = false;
            Switch2 = false;
            Switch3 = false;
            FTPAddress = String.Empty;
            FTPUserName = String.Empty;
            FTPPassword = String.Empty;
            CreatedBy = String.Empty;
            CreatedDate = new System.Nullable<System.DateTime>();
            FTPFileDirectory = String.Empty;
            FTPArcDirectory = String.Empty;
            FilesEncrypted = false;
            Delimiter = String.Empty;
            JSONSchemaDir = String.Empty;
            PublicKey = String.Empty;
            PrivateKey = String.Empty;
            KeyPass = String.Empty;
            FTPPort = 0;
        }

        /// <summary>
        /// InterfacePropId property
        /// </summary>
        public long InterfacePropId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// InterfaceType property
        /// </summary>
        public string InterfaceType { get; set; }

        /// <summary>
        /// InUse property
        /// </summary>
        public bool InUse { get; set; }

        /// <summary>
        /// APIKey1 property
        /// </summary>
        public string APIKey1 { get; set; }

        /// <summary>
        /// APIKey2 property
        /// </summary>
        public string APIKey2 { get; set; }

        /// <summary>
        /// Switch1 property
        /// </summary>
        public bool Switch1 { get; set; }

        /// <summary>
        /// Switch2 property
        /// </summary>
        public bool Switch2 { get; set; }

        /// <summary>
        /// Switch3 property
        /// </summary>
        public bool Switch3 { get; set; }

        /// <summary>
        /// FTPAddress property
        /// </summary>
        public string FTPAddress { get; set; }

        /// <summary>
        /// FTPUserName property
        /// </summary>
        public string FTPUserName { get; set; }

        /// <summary>
        /// FTPPassword property
        /// </summary>
        public string FTPPassword { get; set; }

        /// <summary>
        /// CreatedBy property
        /// </summary>
        public string CreatedBy { get; set; }

        /// <summary>
        /// CreatedDate property
        /// </summary>
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// FTPFileDirectory property
        /// </summary>
        public string FTPFileDirectory { get; set; }

        /// <summary>
        /// FTPArcDirectory property
        /// </summary>
        public string FTPArcDirectory { get; set; }

        /// <summary>
        /// FilesEncrypted property
        /// </summary>
        public bool FilesEncrypted { get; set; }

        /// <summary>
        /// Delimiter property
        /// </summary>
        public string Delimiter { get; set; }

        /// <summary>
        /// JSONSchemaDir property
        /// </summary>
        public string JSONSchemaDir { get; set; }

        /// <summary>
        /// PublicKey property
        /// </summary>
        public string PublicKey { get; set; }

        /// <summary>
        /// PrivateKey property
        /// </summary>
        public string PrivateKey { get; set; }

        /// <summary>
        /// KeyPass property
        /// </summary>
        public string KeyPass { get; set; }

        /// <summary>
        /// FTPPort property
        /// </summary>
        public int FTPPort { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_InterfaceProp object.
        /// This routine should be applied to the usp_InterfaceProp_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_InterfaceProp_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_InterfaceProp object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_InterfaceProp obj = new b_InterfaceProp();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_InterfaceProp object.
        /// This routine should be applied to the usp_InterfaceProp_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_InterfaceProp_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // InterfacePropId column, bigint, not null
                InterfacePropId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // InterfaceType column, nvarchar(31), not null
                InterfaceType = reader.GetString(i++);

                // InUse column, bit, not null
                InUse = reader.GetBoolean(i++);

                // APIKey1 column, nvarchar(255), not null
                APIKey1 = reader.GetString(i++);

                // APIKey2 column, nvarchar(255), not null
                APIKey2 = reader.GetString(i++);

                // Switch1 column, bit, not null
                Switch1 = reader.GetBoolean(i++);

                // Switch2 column, bit, not null
                Switch2 = reader.GetBoolean(i++);

                // Switch3 column, bit, not null
                Switch3 = reader.GetBoolean(i++);

                // FTPAddress column, nvarchar(255), not null
                FTPAddress = reader.GetString(i++);

                // FTPUserName column, nvarchar(31), not null
                FTPUserName = reader.GetString(i++);

                // FTPPassword column, nvarchar(31), not null
                FTPPassword = reader.GetString(i++);

                // CreatedBy column, nvarchar(255), not null
                CreatedBy = reader.GetString(i++);

                // CreatedDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CreatedDate = reader.GetDateTime(i);
                }
                else
                {
                    CreatedDate = DateTime.MinValue;
                }
                i++;
                // FTPFileDirectory column, nvarchar(255), not null
                FTPFileDirectory = reader.GetString(i++);

                // FTPArcDirectory column, nvarchar(255), not null
                FTPArcDirectory = reader.GetString(i++);

                // FilesEncrypted column, bit, not null
                FilesEncrypted = reader.GetBoolean(i++);

                // Delimiter column, nvarchar(7), not null
                Delimiter = reader.GetString(i++);

                // JSONSchemaDir column, nvarchar(255), not null
                JSONSchemaDir = reader.GetString(i++);

                // PublicKey column, nvarchar(MAX), not null
                PublicKey = reader.GetString(i++);

                // PrivateKey column, nvarchar(MAX), not null
                PrivateKey = reader.GetString(i++);

                // KeyPass column, nvarchar(67), not null
                KeyPass = reader.GetString(i++);

                // FTPPort column, int, not null
                FTPPort = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["InterfacePropId"].ToString(); }
                catch { missing.Append("InterfacePropId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["InterfaceType"].ToString(); }
                catch { missing.Append("InterfaceType "); }

                try { reader["InUse"].ToString(); }
                catch { missing.Append("InUse "); }

                try { reader["APIKey1"].ToString(); }
                catch { missing.Append("APIKey1 "); }

                try { reader["APIKey2"].ToString(); }
                catch { missing.Append("APIKey2 "); }

                try { reader["Switch1"].ToString(); }
                catch { missing.Append("Switch1 "); }

                try { reader["Switch2"].ToString(); }
                catch { missing.Append("Switch2 "); }

                try { reader["Switch3"].ToString(); }
                catch { missing.Append("Switch3 "); }

                try { reader["FTPAddress"].ToString(); }
                catch { missing.Append("FTPAddress "); }

                try { reader["FTPUserName"].ToString(); }
                catch { missing.Append("FTPUserName "); }

                try { reader["FTPPassword"].ToString(); }
                catch { missing.Append("FTPPassword "); }

                try { reader["CreatedBy"].ToString(); }
                catch { missing.Append("CreatedBy "); }

                try { reader["CreatedDate"].ToString(); }
                catch { missing.Append("CreatedDate "); }

                try { reader["FTPFileDirectory"].ToString(); }
                catch { missing.Append("FTPFileDirectory "); }

                try { reader["FTPArcDirectory"].ToString(); }
                catch { missing.Append("FTPArcDirectory "); }

                try { reader["FilesEncrypted"].ToString(); }
                catch { missing.Append("FilesEncrypted "); }

                try { reader["Delimiter"].ToString(); }
                catch { missing.Append("Delimiter "); }

                try { reader["JSONSchemaDir"].ToString(); }
                catch { missing.Append("JSONSchemaDir "); }

                try { reader["PublicKey"].ToString(); }
                catch { missing.Append("PublicKey "); }

                try { reader["PrivateKey"].ToString(); }
                catch { missing.Append("PrivateKey "); }

                try { reader["KeyPass"].ToString(); }
                catch { missing.Append("KeyPass "); }

                try { reader["FTPPort"].ToString(); }
                catch { missing.Append("FTPPort "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a InterfaceProp table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_InterfaceProp_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the InterfaceProp table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_InterfaceProp_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the InterfaceProp table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_InterfaceProp_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all InterfaceProp table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_InterfaceProp[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_InterfaceProp[] data
        )
        {
            Database.SqlClient.ProcessRow<b_InterfaceProp> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_InterfaceProp[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_InterfaceProp>(reader => { b_InterfaceProp obj = new b_InterfaceProp(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_InterfaceProp_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_InterfaceProp[])results.ToArray(typeof(b_InterfaceProp));
                }
                else
                {
                    data = new b_InterfaceProp[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve InterfaceProp table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_InterfaceProp[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_InterfaceProp> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_InterfaceProp>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_InterfaceProp_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_InterfaceProp objects.
        /// </summary>
        /// <param name="obj">b_InterfaceProp object to compare against the current object.</param>
        public bool Equals(b_InterfaceProp obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (InterfacePropId != obj.InterfacePropId) return false;
            if (SiteId != obj.SiteId) return false;
            if (!InterfaceType.Equals(obj.InterfaceType)) return false;
            if (InUse != obj.InUse) return false;
            if (!APIKey1.Equals(obj.APIKey1)) return false;
            if (!APIKey2.Equals(obj.APIKey2)) return false;
            if (Switch1 != obj.Switch1) return false;
            if (Switch2 != obj.Switch2) return false;
            if (Switch3 != obj.Switch3) return false;
            if (!FTPAddress.Equals(obj.FTPAddress)) return false;
            if (!FTPUserName.Equals(obj.FTPUserName)) return false;
            if (!FTPPassword.Equals(obj.FTPPassword)) return false;
            if (!CreatedBy.Equals(obj.CreatedBy)) return false;
            if (!CreatedDate.Equals(obj.CreatedDate)) return false;
            if (!FTPFileDirectory.Equals(obj.FTPFileDirectory)) return false;
            if (!FTPArcDirectory.Equals(obj.FTPArcDirectory)) return false;
            if (FilesEncrypted != obj.FilesEncrypted) return false;
            if (!Delimiter.Equals(obj.Delimiter)) return false;
            if (!JSONSchemaDir.Equals(obj.JSONSchemaDir)) return false;
            if (!PublicKey.Equals(obj.PublicKey)) return false;
            if (!PrivateKey.Equals(obj.PrivateKey)) return false;
            if (!KeyPass.Equals(obj.KeyPass)) return false;
            if (FTPPort != obj.FTPPort) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_InterfaceProp objects.
        /// </summary>
        /// <param name="obj1">b_InterfaceProp object to use in the comparison.</param>
        /// <param name="obj2">b_InterfaceProp object to use in the comparison.</param>
        public static bool Equals(b_InterfaceProp obj1, b_InterfaceProp obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
