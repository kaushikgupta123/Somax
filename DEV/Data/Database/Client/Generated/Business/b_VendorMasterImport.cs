/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
  /// <summary>
  /// Business object that stores a record from the VendorMasterImport table.InsertIntoDatabase
  /// </summary>
  [Serializable()]
  public partial class b_VendorMasterImport : DataBusinessBase
  {
    /// <summary>
    /// Default constructor.
    /// </summary>
    public b_VendorMasterImport()
    {
      ClientId = 0;
      VendorMasterImportId = 0;
      ClientLookupId = String.Empty;
      ExVendorId = 0;
      ExVendorSiteId = 0;
      ExVendorSiteCode = String.Empty;
      Name = String.Empty;
      Type = String.Empty;
      Terms = String.Empty;
      FOBCode = String.Empty;
      Address1 = String.Empty;
      Address2 = String.Empty;
      Address3 = String.Empty;
      AddressCity = String.Empty;
      AddressState = String.Empty;
      AddressPostCode = String.Empty;
      AddressCountry = String.Empty;
      RemitAddress1 = String.Empty;
      RemitAddress2 = String.Empty;
      RemitAddress3 = String.Empty;
      RemitAddressCity = String.Empty;
      RemitAddressState = String.Empty;
      RemitAddressPostCode = String.Empty;
      RemitAddressCountry = String.Empty;
      RemitUseBusiness = false;
      Enabled = String.Empty;
      FaxNumber = String.Empty;
      PhoneNumber = String.Empty;
      EmailAddress = String.Empty;
      ErrorMessage = String.Empty;
      LastProcess = new System.Nullable<System.DateTime>();
      InactiveDate = new System.Nullable<System.DateTime>();
      SiteId = 0;
      ErrorCodes = String.Empty;
      TermsDesc = String.Empty;
      UpdateIndex = 0;
    }

    /// <summary>
    /// VendorMasterImportId property
    /// </summary>
    public long VendorMasterImportId { get; set; }

    /// <summary>
    /// ClientLookupId property
    /// </summary>
    public string ClientLookupId { get; set; }

    /// <summary>
    /// ExVendorId property
    /// </summary>
    public long ExVendorId { get; set; }

    /// <summary>
    /// ExVendorSiteId property
    /// </summary>
    public long ExVendorSiteId { get; set; }

    /// <summary>
    /// ExVendorSiteCode property
    /// </summary>
    public string ExVendorSiteCode { get; set; }

    /// <summary>
    /// Name property
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Type property
    /// </summary>
    public string Type { get; set; }

    /// <summary>
    /// Terms property
    /// </summary>
    public string Terms { get; set; }

    /// <summary>
    /// FOBCode property
    /// </summary>
    public string FOBCode { get; set; }

    /// <summary>
    /// Address1 property
    /// </summary>
    public string Address1 { get; set; }

    /// <summary>
    /// Address2 property
    /// </summary>
    public string Address2 { get; set; }

    /// <summary>
    /// Address3 property
    /// </summary>
    public string Address3 { get; set; }

    /// <summary>
    /// AddressCity property
    /// </summary>
    public string AddressCity { get; set; }

    /// <summary>
    /// AddressState property
    /// </summary>
    public string AddressState { get; set; }

    /// <summary>
    /// AddressPostCode property
    /// </summary>
    public string AddressPostCode { get; set; }

    /// <summary>
    /// AddressCountry property
    /// </summary>
    public string AddressCountry { get; set; }

    /// <summary>
    /// RemitAddress1 property
    /// </summary>
    public string RemitAddress1 { get; set; }

    /// <summary>
    /// RemitAddress2 property
    /// </summary>
    public string RemitAddress2 { get; set; }

    /// <summary>
    /// RemitAddress3 property
    /// </summary>
    public string RemitAddress3 { get; set; }

    /// <summary>
    /// RemitAddressCity property
    /// </summary>
    public string RemitAddressCity { get; set; }

    /// <summary>
    /// RemitAddressState property
    /// </summary>
    public string RemitAddressState { get; set; }

    /// <summary>
    /// RemitAddressPostCode property
    /// </summary>
    public string RemitAddressPostCode { get; set; }

    /// <summary>
    /// RemitAddressCountry property
    /// </summary>
    public string RemitAddressCountry { get; set; }

    /// <summary>
    /// RemitUseBusiness property
    /// </summary>
    public bool RemitUseBusiness { get; set; }

    /// <summary>
    /// Enabled property
    /// </summary>
    public string Enabled { get; set; }

    /// <summary>
    /// FaxNumber property
    /// </summary>
    public string FaxNumber { get; set; }

    /// <summary>
    /// PhoneNumber property
    /// </summary>
    public string PhoneNumber { get; set; }

    /// <summary>
    /// EmailAddress property
    /// </summary>
    public string EmailAddress { get; set; }

    /// <summary>
    /// ErrorMessage property
    /// </summary>
    public string ErrorMessage { get; set; }

    /// <summary>
    /// LastProcess property
    /// </summary>
    public DateTime? LastProcess { get; set; }

    /// <summary>
    /// InactiveDate property
    /// </summary>
    public DateTime? InactiveDate { get; set; }

    /// <summary>
    /// SiteId property
    /// </summary>
    public long SiteId { get; set; }

    /// <summary>
    /// ErrorCodes property
    /// </summary>
    public string ErrorCodes { get; set; }

    /// <summary>
    /// TermsDesc property
    /// </summary>
    public string TermsDesc { get; set; }

    /// <summary>
    /// UpdateIndex property
    /// </summary>
    public int UpdateIndex { get; set; }

    /// <summary>
    /// Process the current row in the input SqlDataReader into a b_VendorMasterImport object.
    /// This routine should be applied to the usp_VendorMasterImport_RetrieveByPK stored procedure.
    /// This routine should be applied to the usp_VendorMasterImport_RetrieveAll. stored procedure.
    /// </summary>
    /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
    /// <returns>object cast of the b_VendorMasterImport object</returns>
    public static object ProcessRow(SqlDataReader reader)
    {
      // Create instance of object
      b_VendorMasterImport obj = new b_VendorMasterImport();

      // Load the object from the database
      obj.LoadFromDatabase(reader);

      // Return result
      return (object)obj;
    }

    /// <summary>
    /// Load the current row in the input SqlDataReader into a b_VendorMasterImport object.
    /// This routine should be applied to the usp_VendorMasterImport_RetrieveByPK stored procedure.
    /// This routine should be applied to the usp_VendorMasterImport_RetrieveAll. stored procedure.
    /// </summary>
    /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
    public int LoadFromDatabase(SqlDataReader reader)
    {
      int i = 0;
      try
      {

        // ClientId column, bigint, not null
        ClientId = reader.GetInt64(i++);

        // VendorMasterImportId column, bigint, not null
        VendorMasterImportId = reader.GetInt64(i++);

        // ClientLookupId column, nvarchar(31), not null
        ClientLookupId = reader.GetString(i++);

        // ExVendorId column, bigint, not null
        ExVendorId = reader.GetInt64(i++);

        // ExVendorSiteId column, bigint, not null
        ExVendorSiteId = reader.GetInt64(i++);

        // ExVendorSiteCode column, nvarchar(15), not null
        ExVendorSiteCode = reader.GetString(i++);

        // Name column, nvarchar(255), not null
        Name = reader.GetString(i++);

        // Type column, nvarchar(20), not null
        Type = reader.GetString(i++);

        // Terms column, nvarchar(15), not null
        Terms = reader.GetString(i++);

        // FOBCode column, nvarchar(15), not null
        FOBCode = reader.GetString(i++);

        // Address1 column, nvarchar(63), not null
        Address1 = reader.GetString(i++);

        // Address2 column, nvarchar(63), not null
        Address2 = reader.GetString(i++);

        // Address3 column, nvarchar(63), not null
        Address3 = reader.GetString(i++);

        // AddressCity column, nvarchar(63), not null
        AddressCity = reader.GetString(i++);

        // AddressState column, nvarchar(63), not null
        AddressState = reader.GetString(i++);

        // AddressPostCode column, nvarchar(31), not null
        AddressPostCode = reader.GetString(i++);

        // AddressCountry column, nvarchar(63), not null
        AddressCountry = reader.GetString(i++);

        // RemitAddress1 column, nvarchar(63), not null
        RemitAddress1 = reader.GetString(i++);

        // RemitAddress2 column, nvarchar(63), not null
        RemitAddress2 = reader.GetString(i++);

        // RemitAddress3 column, nvarchar(63), not null
        RemitAddress3 = reader.GetString(i++);

        // RemitAddressCity column, nvarchar(63), not null
        RemitAddressCity = reader.GetString(i++);

        // RemitAddressState column, nvarchar(63), not null
        RemitAddressState = reader.GetString(i++);

        // RemitAddressPostCode column, nvarchar(31), not null
        RemitAddressPostCode = reader.GetString(i++);

        // RemitAddressCountry column, nvarchar(63), not null
        RemitAddressCountry = reader.GetString(i++);

        // RemitUseBusiness column, bit, not null
        RemitUseBusiness = reader.GetBoolean(i++);

        // Enabled column, nvarchar(50), not null
        Enabled = reader.GetString(i++);

        // FaxNumber column, nvarchar(31), not null
        FaxNumber = reader.GetString(i++);

        // PhoneNumber column, nvarchar(31), not null
        PhoneNumber = reader.GetString(i++);

        // EmailAddress column, nvarchar(63), not null
        EmailAddress = reader.GetString(i++);

        // ErrorMessage column, nvarchar(511), not null
        ErrorMessage = reader.GetString(i++);

        // LastProcess column, datetime2, not null
        if (false == reader.IsDBNull(i))
        {
          LastProcess = reader.GetDateTime(i);
        }
        else
        {
          LastProcess = DateTime.MinValue;
        }
        i++;
        // InactiveDate column, datetime2, not null
        if (false == reader.IsDBNull(i))
        {
          InactiveDate = reader.GetDateTime(i);
        }
        else
        {
          InactiveDate = DateTime.MinValue;
        }
        i++;
        // SiteId column, bigint, not null
        SiteId = reader.GetInt64(i++);

        // ErrorCodes column, nvarchar(127), not null
        ErrorCodes = reader.GetString(i++);

        // TermsDesc column, nvarchar(63), not null
        TermsDesc = reader.GetString(i++);

        // UpdateIndex column, int, not null
        UpdateIndex = reader.GetInt32(i++);
      }
      catch (Exception ex)
      {
        // Diagnostics
        StringBuilder missing = new StringBuilder();


        try { reader["ClientId"].ToString(); }
        catch { missing.Append("ClientId "); }

        try { reader["VendorMasterImportId"].ToString(); }
        catch { missing.Append("VendorMasterImportId "); }

        try { reader["ClientLookupId"].ToString(); }
        catch { missing.Append("ClientLookupId "); }

        try { reader["ExVendorId"].ToString(); }
        catch { missing.Append("ExVendorId "); }

        try { reader["ExVendorSiteId"].ToString(); }
        catch { missing.Append("ExVendorSiteId "); }

        try { reader["ExVendorSiteCode"].ToString(); }
        catch { missing.Append("ExVendorSiteCode "); }

        try { reader["Name"].ToString(); }
        catch { missing.Append("Name "); }

        try { reader["Type"].ToString(); }
        catch { missing.Append("Type "); }

        try { reader["Terms"].ToString(); }
        catch { missing.Append("Terms "); }

        try { reader["FOBCode"].ToString(); }
        catch { missing.Append("FOBCode "); }

        try { reader["Address1"].ToString(); }
        catch { missing.Append("Address1 "); }

        try { reader["Address2"].ToString(); }
        catch { missing.Append("Address2 "); }

        try { reader["Address3"].ToString(); }
        catch { missing.Append("Address3 "); }

        try { reader["AddressCity"].ToString(); }
        catch { missing.Append("AddressCity "); }

        try { reader["AddressState"].ToString(); }
        catch { missing.Append("AddressState "); }

        try { reader["AddressPostCode"].ToString(); }
        catch { missing.Append("AddressPostCode "); }

        try { reader["AddressCountry"].ToString(); }
        catch { missing.Append("AddressCountry "); }

        try { reader["RemitAddress1"].ToString(); }
        catch { missing.Append("RemitAddress1 "); }

        try { reader["RemitAddress2"].ToString(); }
        catch { missing.Append("RemitAddress2 "); }

        try { reader["RemitAddress3"].ToString(); }
        catch { missing.Append("RemitAddress3 "); }

        try { reader["RemitAddressCity"].ToString(); }
        catch { missing.Append("RemitAddressCity "); }

        try { reader["RemitAddressState"].ToString(); }
        catch { missing.Append("RemitAddressState "); }

        try { reader["RemitAddressPostCode"].ToString(); }
        catch { missing.Append("RemitAddressPostCode "); }

        try { reader["RemitAddressCountry"].ToString(); }
        catch { missing.Append("RemitAddressCountry "); }

        try { reader["RemitUseBusiness"].ToString(); }
        catch { missing.Append("RemitUseBusiness "); }

        try { reader["Enabled"].ToString(); }
        catch { missing.Append("Enabled "); }

        try { reader["FaxNumber"].ToString(); }
        catch { missing.Append("FaxNumber "); }

        try { reader["PhoneNumber"].ToString(); }
        catch { missing.Append("PhoneNumber "); }

        try { reader["EmailAddress"].ToString(); }
        catch { missing.Append("EmailAddress "); }

        try { reader["ErrorMessage"].ToString(); }
        catch { missing.Append("ErrorMessage "); }

        try { reader["LastProcess"].ToString(); }
        catch { missing.Append("LastProcess "); }

        try { reader["InactiveDate"].ToString(); }
        catch { missing.Append("InactiveDate "); }

        try { reader["SiteId"].ToString(); }
        catch { missing.Append("SiteId "); }

        try { reader["ErrorCodes"].ToString(); }
        catch { missing.Append("ErrorCodes "); }

        try { reader["TermsDesc"].ToString(); }
        catch { missing.Append("TermsDesc "); }

        try { reader["UpdateIndex"].ToString(); }
        catch { missing.Append("UpdateIndex "); }


        StringBuilder msg = new StringBuilder();
        msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
        if (missing.Length > 0)
        {
          msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
        }

        throw new Exception(msg.ToString(), ex);
      }
      return i;
    }

    /// <summary>
    /// Insert this object into the database as a VendorMasterImport table record.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void InsertIntoDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
    string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_VendorMasterImport_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Update the VendorMasterImport table record represented by this object in the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void UpdateInDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
        string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_VendorMasterImport_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Delete the VendorMasterImport table record represented by this object from the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void DeleteFromDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_VendorMasterImport_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Retrieve all VendorMasterImport table records represented by this object in the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    /// <param name="data">b_VendorMasterImport[] that contains the results</param>
    public void RetrieveAllFromDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName,
        ref b_VendorMasterImport[] data
    )
    {
      Database.SqlClient.ProcessRow<b_VendorMasterImport> processRow = null;
      ArrayList results = null;
      SqlCommand command = null;
      string message = String.Empty;

      // Initialize the results
      data = new b_VendorMasterImport[0];

      try
      {
        // Create the command to use in calling the stored procedures
        command = new SqlCommand();
        command.Connection = connection;
        command.Transaction = transaction;

        // Call the stored procedure to retrieve the data
        processRow = new Database.SqlClient.ProcessRow<b_VendorMasterImport>(reader => { b_VendorMasterImport obj = new b_VendorMasterImport(); obj.LoadFromDatabase(reader); return obj; });
        results = Database.StoredProcedure.usp_VendorMasterImport_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

        // Extract the results
        if (null != results)
        {
          data = (b_VendorMasterImport[])results.ToArray(typeof(b_VendorMasterImport));
        }
        else
        {
          data = new b_VendorMasterImport[0];
        }

        // Clear the results collection
        if (null != results)
        {
          results.Clear();
          results = null;
        }
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
        processRow = null;
        results = null;
        message = String.Empty;
        callerUserInfoId = 0;
        callerUserName = String.Empty;
      }
    }

    /// <summary>
    /// Retrieve VendorMasterImport table records with specified primary key from the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    /// <param name="key">System.Guid that contains the key to use in the lookup</param>
    /// <param name="data">b_VendorMasterImport[] that contains the results</param>
    public override void RetrieveByPKFromDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName
    )
    {
      Database.SqlClient.ProcessRow<b_VendorMasterImport> processRow = null;
      SqlCommand command = null;
      string message = String.Empty;

      try
      {
        // Create the command to use in calling the stored procedures
        command = new SqlCommand();
        command.Connection = connection;
        command.Transaction = transaction;

        // Call the stored procedure to retrieve the data
        processRow = new Database.SqlClient.ProcessRow<b_VendorMasterImport>(reader => { this.LoadFromDatabase(reader); return this; });
        Database.StoredProcedure.usp_VendorMasterImport_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
        processRow = null;
        message = String.Empty;
        callerUserInfoId = 0;
        callerUserName = String.Empty;
      }
    }

    /// <summary>
    /// Test equality of two b_VendorMasterImport objects.
    /// </summary>
    /// <param name="obj">b_VendorMasterImport object to compare against the current object.</param>
    public bool Equals(b_VendorMasterImport obj)
    {
      if (ClientId != obj.ClientId) return false;
      if (VendorMasterImportId != obj.VendorMasterImportId) return false;
      if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
      if (ExVendorId != obj.ExVendorId) return false;
      if (ExVendorSiteId != obj.ExVendorSiteId) return false;
      if (!ExVendorSiteCode.Equals(obj.ExVendorSiteCode)) return false;
      if (!Name.Equals(obj.Name)) return false;
      if (!Type.Equals(obj.Type)) return false;
      if (!Terms.Equals(obj.Terms)) return false;
      if (!FOBCode.Equals(obj.FOBCode)) return false;
      if (!Address1.Equals(obj.Address1)) return false;
      if (!Address2.Equals(obj.Address2)) return false;
      if (!Address3.Equals(obj.Address3)) return false;
      if (!AddressCity.Equals(obj.AddressCity)) return false;
      if (!AddressState.Equals(obj.AddressState)) return false;
      if (!AddressPostCode.Equals(obj.AddressPostCode)) return false;
      if (!AddressCountry.Equals(obj.AddressCountry)) return false;
      if (!RemitAddress1.Equals(obj.RemitAddress1)) return false;
      if (!RemitAddress2.Equals(obj.RemitAddress2)) return false;
      if (!RemitAddress3.Equals(obj.RemitAddress3)) return false;
      if (!RemitAddressCity.Equals(obj.RemitAddressCity)) return false;
      if (!RemitAddressState.Equals(obj.RemitAddressState)) return false;
      if (!RemitAddressPostCode.Equals(obj.RemitAddressPostCode)) return false;
      if (!RemitAddressCountry.Equals(obj.RemitAddressCountry)) return false;
      if (RemitUseBusiness != obj.RemitUseBusiness) return false;
      if (!Enabled.Equals(obj.Enabled)) return false;
      if (!FaxNumber.Equals(obj.FaxNumber)) return false;
      if (!PhoneNumber.Equals(obj.PhoneNumber)) return false;
      if (!EmailAddress.Equals(obj.EmailAddress)) return false;
      if (!ErrorMessage.Equals(obj.ErrorMessage)) return false;
      if (!LastProcess.Equals(obj.LastProcess)) return false;
      if (!InactiveDate.Equals(obj.InactiveDate)) return false;
      if (SiteId != obj.SiteId) return false;
      if (!ErrorCodes.Equals(obj.ErrorCodes)) return false;
      if (!TermsDesc.Equals(obj.TermsDesc)) return false;
      if (UpdateIndex != obj.UpdateIndex) return false;
      return true;
    }

    /// <summary>
    /// Test equality of two b_VendorMasterImport objects.
    /// </summary>
    /// <param name="obj1">b_VendorMasterImport object to use in the comparison.</param>
    /// <param name="obj2">b_VendorMasterImport object to use in the comparison.</param>
    public static bool Equals(b_VendorMasterImport obj1, b_VendorMasterImport obj2)
    {
      if ((null == obj1) && (null == obj2)) return true;
      if ((null == obj1) && (null != obj2)) return false;
      if ((null != obj1) && (null == obj2)) return false;
      return obj1.Equals(obj2);
    }
  }
}
