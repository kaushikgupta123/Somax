/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the OtherCosts table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_OtherCosts : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_OtherCosts ()
        {
            ClientId = 0;
            OtherCostsId = 0;
            ObjectType = String.Empty;
            ObjectId = 0;
            Category = String.Empty;
            CategoryId = 0;
            Description = String.Empty;
            UnitCost = 0;
            Quantity = 0;
            Source = String.Empty;
            VendorId = 0;
            ObjectType_Secondary = String.Empty;
            ObjectId_Secondary = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// OtherCostsId property
        /// </summary>
        public long OtherCostsId { get; set; }

        /// <summary>
        /// ObjectType property
        /// </summary>
        public string ObjectType { get; set; }

        /// <summary>
        /// ObjectId property
        /// </summary>
        public long ObjectId { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// CategoryId property
        /// </summary>
        public long CategoryId { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// Quantity property
        /// </summary>
        public decimal Quantity { get; set; }

        /// <summary>
        /// Source property
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// VendorId property
        /// </summary>
        public long VendorId { get; set; }

        /// <summary>
        /// ObjectType_Secondary property
        /// </summary>
        public string ObjectType_Secondary { get; set; }

        /// <summary>
        /// ObjectId_Secondary property
        /// </summary>
        public long ObjectId_Secondary { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_OtherCosts object.
        /// This routine should be applied to the usp_OtherCosts_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_OtherCosts_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_OtherCosts object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_OtherCosts obj = new b_OtherCosts();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_OtherCosts object.
        /// This routine should be applied to the usp_OtherCosts_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_OtherCosts_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // OtherCostsId column, bigint, not null
                        OtherCostsId = reader.GetInt64(i++);

                        // ObjectType column, nvarchar(15), not null
                        ObjectType = reader.GetString(i++);

                        // ObjectId column, bigint, not null
                        ObjectId = reader.GetInt64(i++);

                        // Category column, nvarchar(15), not null
                        Category = reader.GetString(i++);

                        // CategoryId column, bigint, not null
                        CategoryId = reader.GetInt64(i++);

                        // Description column, nvarchar(127), not null
                        Description = reader.GetString(i++);

                        // UnitCost column, decimal(15,5), not null
                        UnitCost = reader.GetDecimal(i++);

                        // Quantity column, decimal(10,2), not null
                        Quantity = reader.GetDecimal(i++);

                        // Source column, nvarchar(15), not null
                        Source = reader.GetString(i++);

                        // VendorId column, bigint, not null
                        VendorId = reader.GetInt64(i++);

                        // ObjectType_Secondary column, nvarchar(15), not null
                        ObjectType_Secondary = reader.GetString(i++);

                        // ObjectId_Secondary column, bigint, not null
                        ObjectId_Secondary = reader.GetInt64(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["OtherCostsId"].ToString(); }
            catch { missing.Append("OtherCostsId "); }
            
            try { reader["ObjectType"].ToString(); }
            catch { missing.Append("ObjectType "); }
            
            try { reader["ObjectId"].ToString(); }
            catch { missing.Append("ObjectId "); }
            
            try { reader["Category"].ToString(); }
            catch { missing.Append("Category "); }
            
            try { reader["CategoryId"].ToString(); }
            catch { missing.Append("CategoryId "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["UnitCost"].ToString(); }
            catch { missing.Append("UnitCost "); }
            
            try { reader["Quantity"].ToString(); }
            catch { missing.Append("Quantity "); }
            
            try { reader["Source"].ToString(); }
            catch { missing.Append("Source "); }
            
            try { reader["VendorId"].ToString(); }
            catch { missing.Append("VendorId "); }
            
            try { reader["ObjectType_Secondary"].ToString(); }
            catch { missing.Append("ObjectType_Secondary "); }
            
            try { reader["ObjectId_Secondary"].ToString(); }
            catch { missing.Append("ObjectId_Secondary "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a OtherCosts table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_OtherCosts_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the OtherCosts table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_OtherCosts_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the OtherCosts table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_OtherCosts_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all OtherCosts table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_OtherCosts[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_OtherCosts[] data
        )
        {
            Database.SqlClient.ProcessRow<b_OtherCosts> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_OtherCosts[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_OtherCosts>(reader => { b_OtherCosts obj = new b_OtherCosts(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_OtherCosts_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_OtherCosts[])results.ToArray(typeof(b_OtherCosts));
                }
                else
                {
                    data = new b_OtherCosts[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve OtherCosts table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_OtherCosts[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_OtherCosts> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_OtherCosts>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_OtherCosts_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_OtherCosts objects.
        /// </summary>
        /// <param name="obj">b_OtherCosts object to compare against the current object.</param>
        public bool Equals (b_OtherCosts obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (OtherCostsId != obj.OtherCostsId) return false;
            if (!ObjectType.Equals(obj.ObjectType)) return false;
            if (ObjectId != obj.ObjectId) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (CategoryId != obj.CategoryId) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (Quantity != obj.Quantity) return false;
            if (!Source.Equals(obj.Source)) return false;
            if (VendorId != obj.VendorId) return false;
            if (!ObjectType_Secondary.Equals(obj.ObjectType_Secondary)) return false;
            if (ObjectId_Secondary != obj.ObjectId_Secondary) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_OtherCosts objects.
        /// </summary>
        /// <param name="obj1">b_OtherCosts object to use in the comparison.</param>
        /// <param name="obj2">b_OtherCosts object to use in the comparison.</param>
        public static bool Equals (b_OtherCosts obj1, b_OtherCosts obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
