/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ShoppingCart table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ShoppingCart : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ShoppingCart ()
        {
            ClientId = 0;
            ShoppingCartId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ApprovedBy_PersonnelId = 0;
            Approved_Date = new System.Nullable<System.DateTime>();
            CreatedBy_PersonnelId = 0;
            Process_Comments = String.Empty;
            Reason = String.Empty;
            Processed_Date = new System.Nullable<System.DateTime>();
            ProcessBy_PersonnelId = 0;
            Status = String.Empty;
            BuyerReview = false;
            Buyer_PersonnelId = 0;
            AutoPurch = false;
            ProcessLogId = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// ShoppingCartId property
        /// </summary>
        public long ShoppingCartId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ApprovedBy_PersonnelId property
        /// </summary>
        public long ApprovedBy_PersonnelId { get; set; }

        /// <summary>
        /// Approved_Date property
        /// </summary>
        public DateTime? Approved_Date { get; set; }

        /// <summary>
        /// CreatedBy_PersonnelId property
        /// </summary>
        public long CreatedBy_PersonnelId { get; set; }

        /// <summary>
        /// Process_Comments property
        /// </summary>
        public string Process_Comments { get; set; }

        /// <summary>
        /// Reason property
        /// </summary>
        public string Reason { get; set; }

        /// <summary>
        /// Processed_Date property
        /// </summary>
        public DateTime? Processed_Date { get; set; }

        /// <summary>
        /// ProcessBy_PersonnelId property
        /// </summary>
        public long ProcessBy_PersonnelId { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// BuyerReview property
        /// </summary>
        public bool BuyerReview { get; set; }

        /// <summary>
        /// Buyer_PersonnelId property
        /// </summary>
        public long Buyer_PersonnelId { get; set; }

        /// <summary>
        /// AutoPurch property
        /// </summary>
        public bool AutoPurch { get; set; }

        /// <summary>
        /// ProcessLogId property
        /// </summary>
        public long ProcessLogId { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ShoppingCart object.
        /// This routine should be applied to the usp_ShoppingCart_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ShoppingCart_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ShoppingCart object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ShoppingCart obj = new b_ShoppingCart();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ShoppingCart object.
        /// This routine should be applied to the usp_ShoppingCart_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ShoppingCart_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // ShoppingCartId column, bigint, not null
                        ShoppingCartId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // AreaId column, bigint, not null
                        AreaId = reader.GetInt64(i++);

                        // DepartmentId column, bigint, not null
                        DepartmentId = reader.GetInt64(i++);

                        // StoreroomId column, bigint, not null
                        StoreroomId = reader.GetInt64(i++);

                        // ApprovedBy_PersonnelId column, bigint, not null
                        ApprovedBy_PersonnelId = reader.GetInt64(i++);

            // Approved_Date column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    Approved_Date = reader.GetDateTime(i);
            }
            else
            {
                    Approved_Date = DateTime.MinValue;
            }
            i++;
                        // CreatedBy_PersonnelId column, bigint, not null
                        CreatedBy_PersonnelId = reader.GetInt64(i++);

                        // Process_Comments column, nvarchar(511), not null
                        Process_Comments = reader.GetString(i++);

                        // Reason column, nvarchar(255), not null
                        Reason = reader.GetString(i++);

            // Processed_Date column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    Processed_Date = reader.GetDateTime(i);
            }
            else
            {
                    Processed_Date = DateTime.MinValue;
            }
            i++;
                        // ProcessBy_PersonnelId column, bigint, not null
                        ProcessBy_PersonnelId = reader.GetInt64(i++);

                        // Status column, nvarchar(15), not null
                        Status = reader.GetString(i++);

                        // BuyerReview column, bit, not null
                        BuyerReview = reader.GetBoolean(i++);

                        // Buyer_PersonnelId column, bigint, not null
                        Buyer_PersonnelId = reader.GetInt64(i++);

                        // AutoPurch column, bit, not null
                        AutoPurch = reader.GetBoolean(i++);

                        // ProcessLogId column, bigint, not null
                        ProcessLogId = reader.GetInt64(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["ShoppingCartId"].ToString(); }
            catch { missing.Append("ShoppingCartId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["AreaId"].ToString(); }
            catch { missing.Append("AreaId "); }
            
            try { reader["DepartmentId"].ToString(); }
            catch { missing.Append("DepartmentId "); }
            
            try { reader["StoreroomId"].ToString(); }
            catch { missing.Append("StoreroomId "); }
            
            try { reader["ApprovedBy_PersonnelId"].ToString(); }
            catch { missing.Append("ApprovedBy_PersonnelId "); }
            
            try { reader["Approved_Date"].ToString(); }
            catch { missing.Append("Approved_Date "); }
            
            try { reader["CreatedBy_PersonnelId"].ToString(); }
            catch { missing.Append("CreatedBy_PersonnelId "); }
            
            try { reader["Process_Comments"].ToString(); }
            catch { missing.Append("Process_Comments "); }
            
            try { reader["Reason"].ToString(); }
            catch { missing.Append("Reason "); }
            
            try { reader["Processed_Date"].ToString(); }
            catch { missing.Append("Processed_Date "); }
            
            try { reader["ProcessBy_PersonnelId"].ToString(); }
            catch { missing.Append("ProcessBy_PersonnelId "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
            try { reader["BuyerReview"].ToString(); }
            catch { missing.Append("BuyerReview "); }
            
            try { reader["Buyer_PersonnelId"].ToString(); }
            catch { missing.Append("Buyer_PersonnelId "); }
            
            try { reader["AutoPurch"].ToString(); }
            catch { missing.Append("AutoPurch "); }
            
            try { reader["ProcessLogId"].ToString(); }
            catch { missing.Append("ProcessLogId "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a ShoppingCart table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ShoppingCart_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ShoppingCart table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ShoppingCart_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ShoppingCart table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ShoppingCart_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ShoppingCart table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ShoppingCart[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ShoppingCart[] data
        )
        {
            Database.SqlClient.ProcessRow<b_ShoppingCart> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ShoppingCart[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ShoppingCart>(reader => { b_ShoppingCart obj = new b_ShoppingCart(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_ShoppingCart_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_ShoppingCart[])results.ToArray(typeof(b_ShoppingCart));
                }
                else
                {
                    data = new b_ShoppingCart[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ShoppingCart table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ShoppingCart[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_ShoppingCart> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ShoppingCart>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_ShoppingCart_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ShoppingCart objects.
        /// </summary>
        /// <param name="obj">b_ShoppingCart object to compare against the current object.</param>
        public bool Equals (b_ShoppingCart obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (ShoppingCartId != obj.ShoppingCartId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (ApprovedBy_PersonnelId != obj.ApprovedBy_PersonnelId) return false;
            if (!Approved_Date.Equals(obj.Approved_Date)) return false;
            if (CreatedBy_PersonnelId != obj.CreatedBy_PersonnelId) return false;
            if (!Process_Comments.Equals(obj.Process_Comments)) return false;
            if (!Reason.Equals(obj.Reason)) return false;
            if (!Processed_Date.Equals(obj.Processed_Date)) return false;
            if (ProcessBy_PersonnelId != obj.ProcessBy_PersonnelId) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (BuyerReview != obj.BuyerReview) return false;
            if (Buyer_PersonnelId != obj.Buyer_PersonnelId) return false;
            if (AutoPurch != obj.AutoPurch) return false;
            if (ProcessLogId != obj.ProcessLogId) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ShoppingCart objects.
        /// </summary>
        /// <param name="obj1">b_ShoppingCart object to use in the comparison.</param>
        /// <param name="obj2">b_ShoppingCart object to use in the comparison.</param>
        public static bool Equals (b_ShoppingCart obj1, b_ShoppingCart obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
