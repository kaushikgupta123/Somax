/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Part_Vendor_Xref table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Part_Vendor_Xref : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Part_Vendor_Xref()
        {
            ClientId = 0;
            Part_Vendor_XrefId = 0;
            PartId = 0;
            VendorId = 0;
            PreferredVendor = false;
            CatalogNumber = String.Empty;
            IssueOrder = 0;
            Manufacturer = String.Empty;
            ManufacturerId = String.Empty;
            OrderQuantity = 0;
            OrderUnit = String.Empty;
            Price = 0;
            UOMConvRequired = false;
            Punchout = false;
            UpdateIndex = 0;
        }

        /// <summary>
        /// Part_Vendor_XrefId property
        /// </summary>
        public long Part_Vendor_XrefId { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// VendorId property
        /// </summary>
        public long VendorId { get; set; }

        /// <summary>
        /// PreferredVendor property
        /// </summary>
        public bool PreferredVendor { get; set; }

        /// <summary>
        /// CatalogNumber property
        /// </summary>
        public string CatalogNumber { get; set; }

        /// <summary>
        /// IssueOrder property
        /// </summary>
        public decimal IssueOrder { get; set; }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        public string Manufacturer { get; set; }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        public string ManufacturerId { get; set; }

        /// <summary>
        /// OrderQuantity property
        /// </summary>
        public int OrderQuantity { get; set; }

        /// <summary>
        /// OrderUnit property
        /// </summary>
        public string OrderUnit { get; set; }

        /// <summary>
        /// Price property
        /// </summary>
        public decimal Price { get; set; }

        /// <summary>
        /// UOMConvRequired property
        /// </summary>
        public bool UOMConvRequired { get; set; }

        /// <summary>
        /// Punchout property
        /// </summary>
        public bool Punchout { get; set; }
        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Part_Vendor_Xref object.
        /// This routine should be applied to the usp_Part_Vendor_Xref_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Part_Vendor_Xref_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Part_Vendor_Xref object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_Part_Vendor_Xref obj = new b_Part_Vendor_Xref();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Part_Vendor_Xref object.
        /// This routine should be applied to the usp_Part_Vendor_Xref_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Part_Vendor_Xref_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);
                // Part_Vendor_XrefId column, bigint, not null
                Part_Vendor_XrefId = reader.GetInt64(i++);
                // PartId column, bigint, not null
                PartId = reader.GetInt64(i++);
                // VendorId column, bigint, not null
                VendorId = reader.GetInt64(i++);
                // PreferredVendor column, bit, not null
                PreferredVendor = reader.GetBoolean(i++);
                // CatalogNumber column, nvarchar(31), not null
                CatalogNumber = reader.GetString(i++);
                // IssueOrder column, decimal(15,6), not null
                IssueOrder = reader.GetDecimal(i++);
                // Manufacturer column, nvarchar(31), not null
                Manufacturer = reader.GetString(i++);
                // ManufacturerId column, nvarchar(63), not null
                ManufacturerId = reader.GetString(i++);
                // OrderQuantity column, int, not null
                OrderQuantity = reader.GetInt32(i++);
                // OrderUnit column, nvarchar(15), not null
                OrderUnit = reader.GetString(i++);
                // Price column, decimal(15,5), not null
                Price = reader.GetDecimal(i++);
                // UOMConvRequired column, bit, not null
                UOMConvRequired = reader.GetBoolean(i++);
                // Punchout column, bit, not null
                Punchout = reader.GetBoolean(i++);
                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["Part_Vendor_XrefId"].ToString(); }
                catch { missing.Append("Part_Vendor_XrefId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["VendorId"].ToString(); }
                catch { missing.Append("VendorId "); }

                try { reader["PreferredVendor"].ToString(); }
                catch { missing.Append("PreferredVendor "); }

                try { reader["CatalogNumber"].ToString(); }
                catch { missing.Append("CatalogNumber "); }

                try { reader["IssueOrder"].ToString(); }
                catch { missing.Append("IssueOrder "); }

                try { reader["Manufacturer"].ToString(); }
                catch { missing.Append("Manufacturer "); }

                try { reader["ManufacturerId"].ToString(); }
                catch { missing.Append("ManufacturerId "); }

                try { reader["OrderQuantity"].ToString(); }
                catch { missing.Append("OrderQuantity "); }

                try { reader["OrderUnit"].ToString(); }
                catch { missing.Append("OrderUnit "); }

                try { reader["Price"].ToString(); }
                catch { missing.Append("Price "); }

                try { reader["UOMConvRequired"].ToString(); }
                catch { missing.Append("UOMConvRequired "); }

                try { reader["Punchout"].ToString(); }
                catch { missing.Append("Punchout "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Part_Vendor_Xref table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Part_Vendor_Xref_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Part_Vendor_Xref table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Part_Vendor_Xref_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Part_Vendor_Xref table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Part_Vendor_Xref_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Part_Vendor_Xref table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Part_Vendor_Xref[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Part_Vendor_Xref[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Part_Vendor_Xref> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Part_Vendor_Xref[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Part_Vendor_Xref>(reader => { b_Part_Vendor_Xref obj = new b_Part_Vendor_Xref(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Part_Vendor_Xref_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Part_Vendor_Xref[])results.ToArray(typeof(b_Part_Vendor_Xref));
                }
                else
                {
                    data = new b_Part_Vendor_Xref[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Part_Vendor_Xref table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Part_Vendor_Xref[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Part_Vendor_Xref> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Part_Vendor_Xref>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Part_Vendor_Xref_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Part_Vendor_Xref objects.
        /// </summary>
        /// <param name="obj">b_Part_Vendor_Xref object to compare against the current object.</param>
        public bool Equals(b_Part_Vendor_Xref obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (Part_Vendor_XrefId != obj.Part_Vendor_XrefId) return false;
            if (PartId != obj.PartId) return false;
            if (VendorId != obj.VendorId) return false;
            if (PreferredVendor != obj.PreferredVendor) return false;
            if (!CatalogNumber.Equals(obj.CatalogNumber)) return false;
            if (IssueOrder != obj.IssueOrder) return false;
            if (!Manufacturer.Equals(obj.Manufacturer)) return false;
            if (!ManufacturerId.Equals(obj.ManufacturerId)) return false;
            if (OrderQuantity != obj.OrderQuantity) return false;
            if (!OrderUnit.Equals(obj.OrderUnit)) return false;
            if (Price != obj.Price) return false;
            if (UOMConvRequired != obj.UOMConvRequired) return false;
            if (Punchout != obj.Punchout) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Part_Vendor_Xref objects.
        /// </summary>
        /// <param name="obj1">b_Part_Vendor_Xref object to use in the comparison.</param>
        /// <param name="obj2">b_Part_Vendor_Xref object to use in the comparison.</param>
        public static bool Equals(b_Part_Vendor_Xref obj1, b_Part_Vendor_Xref obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
