/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2014 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the WorkOrderTask table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_WorkOrderTask : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_WorkOrderTask()
        {
            ClientId = 0;
            WorkOrderTaskId = 0;
            WorkOrderId = 0;
            ProcedureMasterId = 0;
            ProcedureMasterTaskId = 0;
            ActualDuration = 0;
            ActualFinishDate = new System.Nullable<System.DateTime>();
            ActualStartDate = new System.Nullable<System.DateTime>();
            AssignedTo_PersonnelId = 0;
            CancelReason = String.Empty;
            ChargeToId = 0;
            ChargeType = String.Empty;
            CompleteBy_PersonnelId = new System.Nullable<long>();
            CompleteDate = new System.Nullable<System.DateTime>();
            Description = String.Empty;
            MeterId = 0;
            Reading = 0;
            ReadingType = String.Empty;
            RequiredDate = new System.Nullable<System.DateTime>();
            ScheduledDuration = 0;
            ScheduledFinishDate = new System.Nullable<System.DateTime>();
            ScheduledStartDate = new System.Nullable<System.DateTime>();
            Status = String.Empty;
            TaskNumber = String.Empty;
            Type = String.Empty;
            SourceType = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// WorkOrderTaskId property
        /// </summary>
        public long WorkOrderTaskId { get; set; }

        /// <summary>
        /// WorkOrderId property
        /// </summary>
        public long WorkOrderId { get; set; }

        /// <summary>
        /// ProcedureMasterId property
        /// </summary>
        public long ProcedureMasterId { get; set; }

        /// <summary>
        /// ProcedureMasterTaskId property
        /// </summary>
        public long ProcedureMasterTaskId { get; set; }

        /// <summary>
        /// ActualDuration property
        /// </summary>
        public decimal ActualDuration { get; set; }

        /// <summary>
        /// ActualFinishDate property
        /// </summary>
        public DateTime? ActualFinishDate { get; set; }

        /// <summary>
        /// ActualStartDate property
        /// </summary>
        public DateTime? ActualStartDate { get; set; }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        public long AssignedTo_PersonnelId { get; set; }

        /// <summary>
        /// CancelReason property
        /// </summary>
        public string CancelReason { get; set; }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        public long ChargeToId { get; set; }

        /// <summary>
        /// ChargeType property
        /// </summary>
        public string ChargeType { get; set; }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        public long? CompleteBy_PersonnelId { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// MeterId property
        /// </summary>
        public long MeterId { get; set; }

        /// <summary>
        /// Reading property
        /// </summary>
        public decimal Reading { get; set; }

        /// <summary>
        /// ReadingType property
        /// </summary>
        public string ReadingType { get; set; }

        /// <summary>
        /// RequiredDate property
        /// </summary>
        public DateTime? RequiredDate { get; set; }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        public decimal ScheduledDuration { get; set; }

        /// <summary>
        /// ScheduledFinishDate property
        /// </summary>
        public DateTime? ScheduledFinishDate { get; set; }

        /// <summary>
        /// ScheduledStartDate property
        /// </summary>
        public DateTime? ScheduledStartDate { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// TaskNumber property
        /// </summary>
        public string TaskNumber { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        public string SourceType { get; set; }

        
        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_WorkOrderTask object.
        /// This routine should be applied to the usp_WorkOrderTask_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_WorkOrderTask_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_WorkOrderTask object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_WorkOrderTask obj = new b_WorkOrderTask();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_WorkOrderTask object.
        /// This routine should be applied to the usp_WorkOrderTask_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_WorkOrderTask_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // WorkOrderTaskId column, bigint, not null
                WorkOrderTaskId = reader.GetInt64(i++);

                // WorkOrderId column, bigint, not null
                WorkOrderId = reader.GetInt64(i++);

                // ProcedureMasterId column, bigint, not null
                ProcedureMasterId = reader.GetInt64(i++);

                // ProcedureMasterTaskId column, bigint, not null
                ProcedureMasterTaskId = reader.GetInt64(i++);

                // ActualDuration column, decimal(8,2), not null
                ActualDuration = reader.GetDecimal(i++);

                // ActualFinishDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ActualFinishDate = reader.GetDateTime(i);
                }
                else
                {
                    ActualFinishDate = DateTime.MinValue;
                }
                i++;
                // ActualStartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ActualStartDate = reader.GetDateTime(i);
                }
                else
                {
                    ActualStartDate = DateTime.MinValue;
                }
                i++;
                // AssignedTo_PersonnelId column, bigint, not null
                AssignedTo_PersonnelId = reader.GetInt64(i++);

                // CancelReason column, nvarchar(15), not null
                CancelReason = reader.GetString(i++);

                // ChargeToId column, bigint, not null
                ChargeToId = reader.GetInt64(i++);

                // ChargeType column, nvarchar(15), not null
                ChargeType = reader.GetString(i++);

                // CompleteBy_PersonnelId column, bigint, null
                if (false == reader.IsDBNull(i))
                {
                    CompleteBy_PersonnelId = reader.GetInt64(i);
                }
                i++;

                // CompleteDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CompleteDate = reader.GetDateTime(i);
                }
                else
                {
                    CompleteDate = DateTime.MinValue;
                }
                i++;
                // Description column, nvarchar(MAX), not null
                Description = reader.GetString(i++);

                // MeterId column, bigint, not null
                MeterId = reader.GetInt64(i++);

                // Reading column, decimal(10,2), not null
                Reading = reader.GetDecimal(i++);

                // ReadingType column, nvarchar(15), not null
                ReadingType = reader.GetString(i++);

                // RequiredDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    RequiredDate = reader.GetDateTime(i);
                }
                else
                {
                    RequiredDate = DateTime.MinValue;
                }
                i++;
                // ScheduledDuration column, decimal(8,2), not null
                ScheduledDuration = reader.GetDecimal(i++);

                // ScheduledFinishDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ScheduledFinishDate = reader.GetDateTime(i);
                }
                else
                {
                    ScheduledFinishDate = DateTime.MinValue;
                }
                i++;
                // ScheduledStartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ScheduledStartDate = reader.GetDateTime(i);
                }
                else
                {
                    ScheduledStartDate = DateTime.MinValue;
                }
                i++;
                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // TaskNumber column, nvarchar(7), not null
                TaskNumber = reader.GetString(i++);

                // Type column, nvarchar(15), not null
                Type = reader.GetString(i++);

                SourceType = reader.GetString(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["WorkOrderTaskId"].ToString(); }
                catch { missing.Append("WorkOrderTaskId "); }

                try { reader["WorkOrderId"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["ProcedureMasterId"].ToString(); }
                catch { missing.Append("ProcedureMasterId "); }

                try { reader["ProcedureMasterTaskId"].ToString(); }
                catch { missing.Append("ProcedureMasterTaskId "); }

                try { reader["ActualDuration"].ToString(); }
                catch { missing.Append("ActualDuration "); }

                try { reader["ActualFinishDate"].ToString(); }
                catch { missing.Append("ActualFinishDate "); }

                try { reader["ActualStartDate"].ToString(); }
                catch { missing.Append("ActualStartDate "); }

                try { reader["AssignedTo_PersonnelId"].ToString(); }
                catch { missing.Append("AssignedTo_PersonnelId "); }

                try { reader["CancelReason"].ToString(); }
                catch { missing.Append("CancelReason "); }

                try { reader["ChargeToId"].ToString(); }
                catch { missing.Append("ChargeToId "); }

                try { reader["ChargeType"].ToString(); }
                catch { missing.Append("ChargeType "); }

                try { reader["CompleteBy_PersonnelId"].ToString(); }
                catch { missing.Append("CompleteBy_PersonnelId "); }

                try { reader["CompleteDate"].ToString(); }
                catch { missing.Append("CompleteDate "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["MeterId"].ToString(); }
                catch { missing.Append("MeterId "); }

                try { reader["Reading"].ToString(); }
                catch { missing.Append("Reading "); }

                try { reader["ReadingType"].ToString(); }
                catch { missing.Append("ReadingType "); }

                try { reader["RequiredDate"].ToString(); }
                catch { missing.Append("RequiredDate "); }

                try { reader["ScheduledDuration"].ToString(); }
                catch { missing.Append("ScheduledDuration "); }

                try { reader["ScheduledFinishDate"].ToString(); }
                catch { missing.Append("ScheduledFinishDate "); }

                try { reader["ScheduledStartDate"].ToString(); }
                catch { missing.Append("ScheduledStartDate "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["TaskNumber"].ToString(); }
                catch { missing.Append("TaskNumber "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a WorkOrderTask table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrderTask_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the WorkOrderTask table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrderTask_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the WorkOrderTask table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrderTask_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all WorkOrderTask table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_WorkOrderTask[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_WorkOrderTask[] data
        )
        {
            Database.SqlClient.ProcessRow<b_WorkOrderTask> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_WorkOrderTask[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_WorkOrderTask>(reader => { b_WorkOrderTask obj = new b_WorkOrderTask(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_WorkOrderTask_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_WorkOrderTask[])results.ToArray(typeof(b_WorkOrderTask));
                }
                else
                {
                    data = new b_WorkOrderTask[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve WorkOrderTask table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_WorkOrderTask[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_WorkOrderTask> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_WorkOrderTask>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_WorkOrderTask_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_WorkOrderTask objects.
        /// </summary>
        /// <param name="obj">b_WorkOrderTask object to compare against the current object.</param>
        public bool Equals(b_WorkOrderTask obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (WorkOrderTaskId != obj.WorkOrderTaskId) return false;
            if (WorkOrderId != obj.WorkOrderId) return false;
            if (ProcedureMasterId != obj.ProcedureMasterId) return false;
            if (ProcedureMasterTaskId != obj.ProcedureMasterTaskId) return false;
            if (ActualDuration != obj.ActualDuration) return false;
            if (!ActualFinishDate.Equals(obj.ActualFinishDate)) return false;
            if (!ActualStartDate.Equals(obj.ActualStartDate)) return false;
            if (AssignedTo_PersonnelId != obj.AssignedTo_PersonnelId) return false;
            if (!CancelReason.Equals(obj.CancelReason)) return false;
            if (ChargeToId != obj.ChargeToId) return false;
            if (!ChargeType.Equals(obj.ChargeType)) return false;
            if (!CompleteBy_PersonnelId.Equals(obj.CompleteBy_PersonnelId)) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (MeterId != obj.MeterId) return false;
            if (Reading != obj.Reading) return false;
            if (!ReadingType.Equals(obj.ReadingType)) return false;
            if (!RequiredDate.Equals(obj.RequiredDate)) return false;
            if (ScheduledDuration != obj.ScheduledDuration) return false;
            if (!ScheduledFinishDate.Equals(obj.ScheduledFinishDate)) return false;
            if (!ScheduledStartDate.Equals(obj.ScheduledStartDate)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!TaskNumber.Equals(obj.TaskNumber)) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_WorkOrderTask objects.
        /// </summary>
        /// <param name="obj1">b_WorkOrderTask object to use in the comparison.</param>
        /// <param name="obj2">b_WorkOrderTask object to use in the comparison.</param>
        public static bool Equals(b_WorkOrderTask obj1, b_WorkOrderTask obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
