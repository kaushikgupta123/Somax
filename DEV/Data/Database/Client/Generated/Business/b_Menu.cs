/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Menu table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Menu : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Menu ()
        {
            ClientId = 0;
            MenuId = 0;
            MenuName = String.Empty;
            ParentMenuId = 0;
            MenuLevel = 0;
            MenuUrl = String.Empty;
            MenuPosition = 0;
            ToolTip = String.Empty;
            CssClass = String.Empty;
            MenuType = String.Empty;
            InactiveFlag = false;
        }

        /// <summary>
        /// MenuId property
        /// </summary>
        public long MenuId { get; set; }

        /// <summary>
        /// MenuName property
        /// </summary>
        public string MenuName { get; set; }

        /// <summary>
        /// ParentMenuId property
        /// </summary>
        public long ParentMenuId { get; set; }

        /// <summary>
        /// MenuLevel property
        /// </summary>
        public long MenuLevel { get; set; }

        /// <summary>
        /// MenuUrl property
        /// </summary>
        public string MenuUrl { get; set; }

        /// <summary>
        /// MenuPosition property
        /// </summary>
        public int MenuPosition { get; set; }

        /// <summary>
        /// ToolTip property
        /// </summary>
        public string ToolTip { get; set; }

        /// <summary>
        /// CssClass property
        /// </summary>
        public string CssClass { get; set; }

        /// <summary>
        /// MenuType property
        /// </summary>
        public string MenuType { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Menu object.
        /// This routine should be applied to the usp_Menu_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Menu_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Menu object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_Menu obj = new b_Menu();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Menu object.
        /// This routine should be applied to the usp_Menu_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Menu_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // MenuId column, bigint, not null
                        MenuId = reader.GetInt64(i++);

                        // MenuName column, nvarchar(300), not null
                        MenuName = reader.GetString(i++);

                        // ParentMenuId column, bigint, not null
                        ParentMenuId = reader.GetInt64(i++);

                        // MenuLevel column, bigint, not null
                        MenuLevel = reader.GetInt64(i++);

                        // MenuUrl column, nvarchar(MAX), not null
                        MenuUrl = reader.GetString(i++);

                        // MenuPosition column, int, not null
                        MenuPosition = reader.GetInt32(i++);

                        // ToolTip column, nvarchar(500), not null
                        ToolTip = reader.GetString(i++);

                        // CssClass column, nvarchar(256), not null
                        CssClass = reader.GetString(i++);

                        // MenuType column, nvarchar(64), not null
                        MenuType = reader.GetString(i++);

                        // InactiveFlag column, bit, not null
                        InactiveFlag = reader.GetBoolean(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["MenuId"].ToString(); }
            catch { missing.Append("MenuId "); }
            
            try { reader["MenuName"].ToString(); }
            catch { missing.Append("MenuName "); }
            
            try { reader["ParentMenuId"].ToString(); }
            catch { missing.Append("ParentMenuId "); }
            
            try { reader["MenuLevel"].ToString(); }
            catch { missing.Append("MenuLevel "); }
            
            try { reader["MenuUrl"].ToString(); }
            catch { missing.Append("MenuUrl "); }
            
            try { reader["MenuPosition"].ToString(); }
            catch { missing.Append("MenuPosition "); }
            
            try { reader["ToolTip"].ToString(); }
            catch { missing.Append("ToolTip "); }
            
            try { reader["CssClass"].ToString(); }
            catch { missing.Append("CssClass "); }
            
            try { reader["MenuType"].ToString(); }
            catch { missing.Append("MenuType "); }
            
            try { reader["InactiveFlag"].ToString(); }
            catch { missing.Append("InactiveFlag "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a Menu table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
               Database.StoredProcedure.usp_Menu_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Menu table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Menu_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Menu table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Menu_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Menu table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Menu[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Menu[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Menu> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Menu[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Menu>(reader => { b_Menu obj = new b_Menu(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Menu_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Menu[])results.ToArray(typeof(b_Menu));
                }
                else
                {
                    data = new b_Menu[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Menu table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Menu[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Menu> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Menu>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Menu_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Menu objects.
        /// </summary>
        /// <param name="obj">b_Menu object to compare against the current object.</param>
        public bool Equals (b_Menu obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (MenuId != obj.MenuId) return false;
            if (!MenuName.Equals(obj.MenuName)) return false;
            if (ParentMenuId != obj.ParentMenuId) return false;
            if (MenuLevel != obj.MenuLevel) return false;
            if (!MenuUrl.Equals(obj.MenuUrl)) return false;
            if (MenuPosition != obj.MenuPosition) return false;
            if (!ToolTip.Equals(obj.ToolTip)) return false;
            if (!CssClass.Equals(obj.CssClass)) return false;
            if (!MenuType.Equals(obj.MenuType)) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Menu objects.
        /// </summary>
        /// <param name="obj1">b_Menu object to use in the comparison.</param>
        /// <param name="obj2">b_Menu object to use in the comparison.</param>
        public static bool Equals (b_Menu obj1, b_Menu obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
