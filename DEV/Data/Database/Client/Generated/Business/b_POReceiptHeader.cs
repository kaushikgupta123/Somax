/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the POReceiptHeader table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_POReceiptHeader : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_POReceiptHeader ()
        {
            ClientId = 0;
            POReceiptHeaderId = 0;
            PurchaseOrderId = 0;
            Carrier = String.Empty;
            Comments = String.Empty;
            FreightAmount = 0;
            FreightBill = String.Empty;
            PackingSlip = String.Empty;
            ReceiptNumber = 0;
            ReceiveBy_PersonnelID = 0;
            ReceiveDate = new System.Nullable<System.DateTime>();
            ExReceiptId = 0;
            ExReceiptNo = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// POReceiptHeaderId property
        /// </summary>
        public long POReceiptHeaderId { get; set; }

        /// <summary>
        /// PurchaseOrderId property
        /// </summary>
        public long PurchaseOrderId { get; set; }

        /// <summary>
        /// Carrier property
        /// </summary>
        public string Carrier { get; set; }

        /// <summary>
        /// Comments property
        /// </summary>
        public string Comments { get; set; }

        /// <summary>
        /// FreightAmount property
        /// </summary>
        public decimal FreightAmount { get; set; }

        /// <summary>
        /// FreightBill property
        /// </summary>
        public string FreightBill { get; set; }

        /// <summary>
        /// PackingSlip property
        /// </summary>
        public string PackingSlip { get; set; }

        /// <summary>
        /// ReceiptNumber property
        /// </summary>
        public int ReceiptNumber { get; set; }

        /// <summary>
        /// ReceiveBy_PersonnelID property
        /// </summary>
        public long ReceiveBy_PersonnelID { get; set; }

        /// <summary>
        /// ReceiveDate property
        /// </summary>
        public DateTime? ReceiveDate { get; set; }

        /// <summary>
        /// ExReceiptId property
        /// </summary>
        public long ExReceiptId { get; set; }

        /// <summary>
        /// ExReceiptNo property
        /// </summary>
        public string ExReceiptNo { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_POReceiptHeader object.
        /// This routine should be applied to the usp_POReceiptHeader_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POReceiptHeader_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_POReceiptHeader object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_POReceiptHeader obj = new b_POReceiptHeader();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_POReceiptHeader object.
        /// This routine should be applied to the usp_POReceiptHeader_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POReceiptHeader_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // POReceiptHeaderId column, bigint, not null
                        POReceiptHeaderId = reader.GetInt64(i++);

                        // PurchaseOrderId column, bigint, not null
                        PurchaseOrderId = reader.GetInt64(i++);

                        // Carrier column, nvarchar(15), not null
                        Carrier = reader.GetString(i++);

                        // Comments column, nvarchar(254), not null
                        Comments = reader.GetString(i++);

                        // FreightAmount column, decimal(12,2), not null
                        FreightAmount = reader.GetDecimal(i++);

                        // FreightBill column, nvarchar(31), not null
                        FreightBill = reader.GetString(i++);

                        // PackingSlip column, nvarchar(31), not null
                        PackingSlip = reader.GetString(i++);

                        // ReceiptNumber column, int, not null
                        ReceiptNumber = reader.GetInt32(i++);

                        // ReceiveBy_PersonnelID column, bigint, not null
                        ReceiveBy_PersonnelID = reader.GetInt64(i++);

            // ReceiveDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ReceiveDate = reader.GetDateTime(i);
            }
            else
            {
                    ReceiveDate = DateTime.MinValue;
            }
            i++;
                        // ExReceiptId column, int, not null
                        ExReceiptId = reader.GetInt64(i++);

                        // ExReceiptNo column, nvarchar(31), not null
                        ExReceiptNo = reader.GetString(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["POReceiptHeaderId"].ToString(); }
            catch { missing.Append("POReceiptHeaderId "); }
            
            try { reader["PurchaseOrderId"].ToString(); }
            catch { missing.Append("PurchaseOrderId "); }
            
            try { reader["Carrier"].ToString(); }
            catch { missing.Append("Carrier "); }
            
            try { reader["Comments"].ToString(); }
            catch { missing.Append("Comments "); }
            
            try { reader["FreightAmount"].ToString(); }
            catch { missing.Append("FreightAmount "); }
            
            try { reader["FreightBill"].ToString(); }
            catch { missing.Append("FreightBill "); }
            
            try { reader["PackingSlip"].ToString(); }
            catch { missing.Append("PackingSlip "); }
            
            try { reader["ReceiptNumber"].ToString(); }
            catch { missing.Append("ReceiptNumber "); }
            
            try { reader["ReceiveBy_PersonnelID"].ToString(); }
            catch { missing.Append("ReceiveBy_PersonnelID "); }
            
            try { reader["ReceiveDate"].ToString(); }
            catch { missing.Append("ReceiveDate "); }
            
            try { reader["ExReceiptId"].ToString(); }
            catch { missing.Append("ExReceiptId "); }
            
            try { reader["ExReceiptNo"].ToString(); }
            catch { missing.Append("ExReceiptNo "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a POReceiptHeader table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptHeader_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the POReceiptHeader table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptHeader_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the POReceiptHeader table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptHeader_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all POReceiptHeader table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_POReceiptHeader[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_POReceiptHeader[] data
        )
        {
            Database.SqlClient.ProcessRow<b_POReceiptHeader> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_POReceiptHeader[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POReceiptHeader>(reader => { b_POReceiptHeader obj = new b_POReceiptHeader(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_POReceiptHeader_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_POReceiptHeader[])results.ToArray(typeof(b_POReceiptHeader));
                }
                else
                {
                    data = new b_POReceiptHeader[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve POReceiptHeader table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_POReceiptHeader[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_POReceiptHeader> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POReceiptHeader>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_POReceiptHeader_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_POReceiptHeader objects.
        /// </summary>
        /// <param name="obj">b_POReceiptHeader object to compare against the current object.</param>
        public bool Equals (b_POReceiptHeader obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (POReceiptHeaderId != obj.POReceiptHeaderId) return false;
            if (PurchaseOrderId != obj.PurchaseOrderId) return false;
            if (!Carrier.Equals(obj.Carrier)) return false;
            if (!Comments.Equals(obj.Comments)) return false;
            if (FreightAmount != obj.FreightAmount) return false;
            if (!FreightBill.Equals(obj.FreightBill)) return false;
            if (!PackingSlip.Equals(obj.PackingSlip)) return false;
            if (ReceiptNumber != obj.ReceiptNumber) return false;
            if (ReceiveBy_PersonnelID != obj.ReceiveBy_PersonnelID) return false;
            if (!ReceiveDate.Equals(obj.ReceiveDate)) return false;
            if (ExReceiptId != obj.ExReceiptId) return false;
            if (!ExReceiptNo.Equals(obj.ExReceiptNo)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_POReceiptHeader objects.
        /// </summary>
        /// <param name="obj1">b_POReceiptHeader object to use in the comparison.</param>
        /// <param name="obj2">b_POReceiptHeader object to use in the comparison.</param>
        public static bool Equals (b_POReceiptHeader obj1, b_POReceiptHeader obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
