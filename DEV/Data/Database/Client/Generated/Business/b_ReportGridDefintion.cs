/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ReportGridDefintion table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ReportGridDefintion : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ReportGridDefintion ()
        {
            ReportGridDefintionId = 0;
            ReportListingId = 0;
            Sequence = 0;
            Columns = String.Empty;
            Heading = String.Empty;
            Alignment = String.Empty;
            IsGroupTotaled = false;
            IsGrandTotal = false;
            LocalizeDate = false;
            NumofDecPlaces = 0;
            NumericFormat = String.Empty;
            IsChildColumn = false;
            Display = false;
            Required = false;
            AvailableonFilter = false;
            FilterMethod = String.Empty;
            DateDisplay = false;
        }

        /// <summary>
        /// ReportGridDefintionId property
        /// </summary>
        public long ReportGridDefintionId { get; set; }

        /// <summary>
        /// ReportListingId property
        /// </summary>
        public long ReportListingId { get; set; }

        /// <summary>
        /// Sequence property
        /// </summary>
        public int Sequence { get; set; }

        /// <summary>
        /// Columns property
        /// </summary>
        public string Columns { get; set; }

        /// <summary>
        /// Heading property
        /// </summary>
        public string Heading { get; set; }

        /// <summary>
        /// Alignment property
        /// </summary>
        public string Alignment { get; set; }

        /// <summary>
        /// IsGroupTotaled property
        /// </summary>
        public bool IsGroupTotaled { get; set; }

        /// <summary>
        /// IsGrandTotal property
        /// </summary>
        public bool IsGrandTotal { get; set; }

        /// <summary>
        /// LocalizeDate property
        /// </summary>
        public bool LocalizeDate { get; set; }

        /// <summary>
        /// NumofDecPlaces property
        /// </summary>
        public int NumofDecPlaces { get; set; }

        /// <summary>
        /// NumericFormat property
        /// </summary>
        public string NumericFormat { get; set; }

        /// <summary>
        /// IsChildColumn property
        /// </summary>
        public bool IsChildColumn { get; set; }

        /// <summary>
        /// Display property
        /// </summary>
        public bool Display { get; set; }

        /// <summary>
        /// Required property
        /// </summary>
        public bool Required { get; set; }

        /// <summary>
        /// AvailableonFilter property
        /// </summary>
        public bool AvailableonFilter { get; set; }

        /// <summary>
        /// FilterMethod property
        /// </summary>
        public string FilterMethod { get; set; }

        /// <summary>
        /// DateDisplay property
        /// </summary>
        public bool DateDisplay { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ReportGridDefintion object.
        /// This routine should be applied to the usp_ReportGridDefintion_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ReportGridDefintion_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ReportGridDefintion object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ReportGridDefintion obj = new b_ReportGridDefintion();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ReportGridDefintion object.
        /// This routine should be applied to the usp_ReportGridDefintion_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ReportGridDefintion_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ReportGridDefintionId column, bigint, not null
                        ReportGridDefintionId = reader.GetInt64(i++);

                        // ReportListingId column, bigint, not null
                        ReportListingId = reader.GetInt64(i++);

                        // Sequence column, int, not null
                        Sequence = reader.GetInt32(i++);

                        // Columns column, nvarchar(30), not null
                        Columns = reader.GetString(i++);

                        // Heading column, nvarchar(30), not null
                        Heading = reader.GetString(i++);

                        // Alignment column, nvarchar(15), not null
                        Alignment = reader.GetString(i++);

                        // IsGroupTotaled column, bit, not null
                        IsGroupTotaled = reader.GetBoolean(i++);

                        // IsGrandTotal column, bit, not null
                        IsGrandTotal = reader.GetBoolean(i++);

                        // LocalizeDate column, bit, not null
                        LocalizeDate = reader.GetBoolean(i++);

                        // NumofDecPlaces column, int, not null
                        NumofDecPlaces = reader.GetInt32(i++);

                        // NumericFormat column, nvarchar(15), not null
                        NumericFormat = reader.GetString(i++);

                        // IsChildColumn column, bit, not null
                        IsChildColumn = reader.GetBoolean(i++);

                        // Display column, bit, not null
                        Display = reader.GetBoolean(i++);

                        // Required column, bit, not null
                        Required = reader.GetBoolean(i++);

                        // AvailableonFilter column, bit, not null
                        AvailableonFilter = reader.GetBoolean(i++);

                        // FilterMethod column, nvarchar(15), not null
                        FilterMethod = reader.GetString(i++);

                        // DateDisplay column, bit, not null
                        DateDisplay = reader.GetBoolean(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ReportGridDefintionId"].ToString(); }
            catch { missing.Append("ReportGridDefintionId "); }
            
            try { reader["ReportListingId"].ToString(); }
            catch { missing.Append("ReportListingId "); }
            
            try { reader["Sequence"].ToString(); }
            catch { missing.Append("Sequence "); }
            
            try { reader["Columns"].ToString(); }
            catch { missing.Append("Columns "); }
            
            try { reader["Heading"].ToString(); }
            catch { missing.Append("Heading "); }
            
            try { reader["Alignment"].ToString(); }
            catch { missing.Append("Alignment "); }
            
            try { reader["IsGroupTotaled"].ToString(); }
            catch { missing.Append("IsGroupTotaled "); }
            
            try { reader["IsGrandTotal"].ToString(); }
            catch { missing.Append("IsGrandTotal "); }
            
            try { reader["LocalizeDate"].ToString(); }
            catch { missing.Append("LocalizeDate "); }
            
            try { reader["NumofDecPlaces"].ToString(); }
            catch { missing.Append("NumofDecPlaces "); }
            
            try { reader["NumericFormat"].ToString(); }
            catch { missing.Append("NumericFormat "); }
            
            try { reader["IsChildColumn"].ToString(); }
            catch { missing.Append("IsChildColumn "); }
            
            try { reader["Display"].ToString(); }
            catch { missing.Append("Display "); }
            
            try { reader["Required"].ToString(); }
            catch { missing.Append("Required "); }
            
            try { reader["AvailableonFilter"].ToString(); }
            catch { missing.Append("AvailableonFilter "); }
            
            try { reader["FilterMethod"].ToString(); }
            catch { missing.Append("FilterMethod "); }
            
            try { reader["DateDisplay"].ToString(); }
            catch { missing.Append("DateDisplay "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a ReportGridDefintion table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReportGridDefintion_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ReportGridDefintion table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReportGridDefintion_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ReportGridDefintion table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReportGridDefintion_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ReportGridDefintion table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ReportGridDefintion[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ReportGridDefintion[] data
        )
        {
            Database.SqlClient.ProcessRow<b_ReportGridDefintion> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ReportGridDefintion[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReportGridDefintion>(reader => { b_ReportGridDefintion obj = new b_ReportGridDefintion(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_ReportGridDefintion_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName);

                // Extract the results
                if (null != results)
                {
                    data = (b_ReportGridDefintion[])results.ToArray(typeof(b_ReportGridDefintion));
                }
                else
                {
                    data = new b_ReportGridDefintion[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ReportGridDefintion table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ReportGridDefintion[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_ReportGridDefintion> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReportGridDefintion>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_ReportGridDefintion_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ReportGridDefintion objects.
        /// </summary>
        /// <param name="obj">b_ReportGridDefintion object to compare against the current object.</param>
        public bool Equals (b_ReportGridDefintion obj)
        {
            if (ReportGridDefintionId != obj.ReportGridDefintionId) return false;
            if (ReportListingId != obj.ReportListingId) return false;
            if (Sequence != obj.Sequence) return false;
            if (!Columns.Equals(obj.Columns)) return false;
            if (!Heading.Equals(obj.Heading)) return false;
            if (!Alignment.Equals(obj.Alignment)) return false;
            if (IsGroupTotaled != obj.IsGroupTotaled) return false;
            if (IsGrandTotal != obj.IsGrandTotal) return false;
            if (LocalizeDate != obj.LocalizeDate) return false;
            if (NumofDecPlaces != obj.NumofDecPlaces) return false;
            if (!NumericFormat.Equals(obj.NumericFormat)) return false;
            if (IsChildColumn != obj.IsChildColumn) return false;
            if (Display != obj.Display) return false;
            if (Required != obj.Required) return false;
            if (AvailableonFilter != obj.AvailableonFilter) return false;
            if (!FilterMethod.Equals(obj.FilterMethod)) return false;
            if (DateDisplay != obj.DateDisplay) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ReportGridDefintion objects.
        /// </summary>
        /// <param name="obj1">b_ReportGridDefintion object to use in the comparison.</param>
        /// <param name="obj2">b_ReportGridDefintion object to use in the comparison.</param>
        public static bool Equals (b_ReportGridDefintion obj1, b_ReportGridDefintion obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
