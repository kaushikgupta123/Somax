/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2014 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PrevMaintTask table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PrevMaintTask : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PrevMaintTask ()
        {
            ClientId = 0;
            PrevMaintTaskId = 0;
            PrevMaintMasterId = 0;
            ProcedureMasterId = 0;
            ProcedureMasterTaskId = 0;
            AssignedTo_PersonnelId = 0;
            ChargeToId = 0;
            ChargeType = String.Empty;
            Description = String.Empty;
            MeterId = 0;
            ReadingType = String.Empty;
            ScheduledDuration = 0;
            TaskNumber = String.Empty;
            Type = String.Empty;
        }

        /// <summary>
        /// PrevMaintTaskId property
        /// </summary>
        public long PrevMaintTaskId { get; set; }

        /// <summary>
        /// PrevMaintMasterId property
        /// </summary>
        public long PrevMaintMasterId { get; set; }

        /// <summary>
        /// ProcedureMasterId property
        /// </summary>
        public long ProcedureMasterId { get; set; }

        /// <summary>
        /// ProcedureMasterTaskId property
        /// </summary>
        public long ProcedureMasterTaskId { get; set; }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        public long AssignedTo_PersonnelId { get; set; }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        public long ChargeToId { get; set; }

        /// <summary>
        /// ChargeType property
        /// </summary>
        public string ChargeType { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// MeterId property
        /// </summary>
        public long MeterId { get; set; }

        /// <summary>
        /// ReadingType property
        /// </summary>
        public string ReadingType { get; set; }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        public decimal ScheduledDuration { get; set; }

        /// <summary>
        /// TaskNumber property
        /// </summary>
        public string TaskNumber { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PrevMaintTask object.
        /// This routine should be applied to the usp_PrevMaintTask_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PrevMaintTask_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PrevMaintTask object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_PrevMaintTask obj = new b_PrevMaintTask();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PrevMaintTask object.
        /// This routine should be applied to the usp_PrevMaintTask_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PrevMaintTask_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // PrevMaintTaskId column, bigint, not null
                        PrevMaintTaskId = reader.GetInt64(i++);

                        // PrevMaintMasterId column, bigint, not null
                        PrevMaintMasterId = reader.GetInt64(i++);

                        // ProcedureMasterId column, bigint, not null
                        ProcedureMasterId = reader.GetInt64(i++);

                        // ProcedureMasterTaskId column, bigint, not null
                        ProcedureMasterTaskId = reader.GetInt64(i++);

                        // AssignedTo_PersonnelId column, bigint, not null
                        AssignedTo_PersonnelId = reader.GetInt64(i++);

                        // ChargeToId column, bigint, not null
                        ChargeToId = reader.GetInt64(i++);

                        // ChargeType column, nvarchar(15), not null
                        ChargeType = reader.GetString(i++);

                        // Description column, nvarchar(MAX), not null
                        Description = reader.GetString(i++);

                        // MeterId column, bigint, not null
                        MeterId = reader.GetInt64(i++);

                        // ReadingType column, nvarchar(15), not null
                        ReadingType = reader.GetString(i++);

                        // ScheduledDuration column, decimal(8,2), not null
                        ScheduledDuration = reader.GetDecimal(i++);

                        // TaskNumber column, nvarchar(7), not null
                        TaskNumber = reader.GetString(i++);

                        // Type column, nvarchar(15), not null
                        Type = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["PrevMaintTaskId"].ToString(); }
            catch { missing.Append("PrevMaintTaskId "); }
            
            try { reader["PrevMaintMasterId"].ToString(); }
            catch { missing.Append("PrevMaintMasterId "); }
            
            try { reader["ProcedureMasterId"].ToString(); }
            catch { missing.Append("ProcedureMasterId "); }
            
            try { reader["ProcedureMasterTaskId"].ToString(); }
            catch { missing.Append("ProcedureMasterTaskId "); }
            
            try { reader["AssignedTo_PersonnelId"].ToString(); }
            catch { missing.Append("AssignedTo_PersonnelId "); }
            
            try { reader["ChargeToId"].ToString(); }
            catch { missing.Append("ChargeToId "); }
            
            try { reader["ChargeType"].ToString(); }
            catch { missing.Append("ChargeType "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["MeterId"].ToString(); }
            catch { missing.Append("MeterId "); }
            
            try { reader["ReadingType"].ToString(); }
            catch { missing.Append("ReadingType "); }
            
            try { reader["ScheduledDuration"].ToString(); }
            catch { missing.Append("ScheduledDuration "); }
            
            try { reader["TaskNumber"].ToString(); }
            catch { missing.Append("TaskNumber "); }
            
            try { reader["Type"].ToString(); }
            catch { missing.Append("Type "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a PrevMaintTask table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PrevMaintTask_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PrevMaintTask table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PrevMaintTask_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PrevMaintTask table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PrevMaintTask_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PrevMaintTask table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PrevMaintTask[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PrevMaintTask[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PrevMaintTask> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PrevMaintTask[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PrevMaintTask>(reader => { b_PrevMaintTask obj = new b_PrevMaintTask(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PrevMaintTask_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PrevMaintTask[])results.ToArray(typeof(b_PrevMaintTask));
                }
                else
                {
                    data = new b_PrevMaintTask[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PrevMaintTask table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PrevMaintTask[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PrevMaintTask> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PrevMaintTask>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PrevMaintTask_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PrevMaintTask objects.
        /// </summary>
        /// <param name="obj">b_PrevMaintTask object to compare against the current object.</param>
        public bool Equals (b_PrevMaintTask obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PrevMaintTaskId != obj.PrevMaintTaskId) return false;
            if (PrevMaintMasterId != obj.PrevMaintMasterId) return false;
            if (ProcedureMasterId != obj.ProcedureMasterId) return false;
            if (ProcedureMasterTaskId != obj.ProcedureMasterTaskId) return false;
            if (AssignedTo_PersonnelId != obj.AssignedTo_PersonnelId) return false;
            if (ChargeToId != obj.ChargeToId) return false;
            if (!ChargeType.Equals(obj.ChargeType)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (MeterId != obj.MeterId) return false;
            if (!ReadingType.Equals(obj.ReadingType)) return false;
            if (ScheduledDuration != obj.ScheduledDuration) return false;
            if (!TaskNumber.Equals(obj.TaskNumber)) return false;
            if (!Type.Equals(obj.Type)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PrevMaintTask objects.
        /// </summary>
        /// <param name="obj1">b_PrevMaintTask object to use in the comparison.</param>
        /// <param name="obj2">b_PrevMaintTask object to use in the comparison.</param>
        public static bool Equals (b_PrevMaintTask obj1, b_PrevMaintTask obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
