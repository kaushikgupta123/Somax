/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using Database;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the FormSettings table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_FormSettings : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_FormSettings()
        {
            ClientId = 0;
            FormSettingsId = 0;
            WOLaborRecording = false;
            WOUIC = false;
            WOScheduling = false;
            WOSummary = false;
            WOPhotos = false;
            WOComments = false;
            PRUIC = false;
            PRLine2 = false;
            PRLIUIC = false;
            PRComments = false;
            POUIC = false;
            POLine2 = false;
            POLIUIC = false;
            POComments = false;
            POTandC = false;
            POTandCURL = String.Empty;
            PORHeader = false;
            PORLine2 = false;
            PORPrint = false;
            PORUIC = false;
            PORComments = false;
        }

        /// <summary>
        /// FormSettingsId property
        /// </summary>
        public long FormSettingsId { get; set; }

        /// <summary>
        /// WOLaborRecording property
        /// </summary>
        public bool WOLaborRecording { get; set; }

        /// <summary>
        /// WOUIC property
        /// </summary>
        public bool WOUIC { get; set; }

        /// <summary>
        /// WOScheduling property
        /// </summary>
        public bool WOScheduling { get; set; }

        /// <summary>
        /// WOSummary property
        /// </summary>
        public bool WOSummary { get; set; }

        /// <summary>
        /// WOPhotos property
        /// </summary>
        public bool WOPhotos { get; set; }

        /// <summary>
        /// WOComments property
        /// </summary>
        public bool WOComments { get; set; }

        /// <summary>
        /// PRUIC property
        /// </summary>
        public bool PRUIC { get; set; }

        /// <summary>
        /// PRLine2 property
        /// </summary>
        public bool PRLine2 { get; set; }

        /// <summary>
        /// PRLIUIC property
        /// </summary>
        public bool PRLIUIC { get; set; }

        /// <summary>
        /// PRComments property
        /// </summary>
        public bool PRComments { get; set; }

        /// <summary>
        /// POUIC property
        /// </summary>
        public bool POUIC { get; set; }

        /// <summary>
        /// POLine2 property
        /// </summary>
        public bool POLine2 { get; set; }

        /// <summary>
        /// POLIUIC property
        /// </summary>
        public bool POLIUIC { get; set; }

        /// <summary>
        /// POComments property
        /// </summary>
        public bool POComments { get; set; }

        /// <summary>
        /// POTandC property
        /// </summary>
        public bool POTandC { get; set; }

        /// <summary>
        /// POTandCURL property
        /// </summary>
        public string POTandCURL { get; set; }

        /// <summary>
        /// PORHeader property
        /// </summary>
        public bool PORHeader { get; set; }

        /// <summary>
        /// PORLine2 property
        /// </summary>
        public bool PORLine2 { get; set; }

        /// <summary>
        /// PORPrint property
        /// </summary>
        public bool PORPrint { get; set; }

        /// <summary>
        /// PORUIC property
        /// </summary>
        public bool PORUIC { get; set; }

        /// <summary>
        /// PORComments property
        /// </summary>
        public bool PORComments { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_FormSettings object.
        /// This routine should be applied to the usp_FormSettings_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FormSettings_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_FormSettings object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_FormSettings obj = new b_FormSettings();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_FormSettings object.
        /// This routine should be applied to the usp_FormSettings_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FormSettings_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // FormSettingsId column, bigint, not null
                FormSettingsId = reader.GetInt64(i++);

                // WOLaborRecording column, bit, not null
                WOLaborRecording = reader.GetBoolean(i++);

                // WOUIC column, bit, not null
                WOUIC = reader.GetBoolean(i++);

                // WOScheduling column, bit, not null
                WOScheduling = reader.GetBoolean(i++);

                // WOSummary column, bit, not null
                WOSummary = reader.GetBoolean(i++);

                // WOPhotos column, bit, not null
                WOPhotos = reader.GetBoolean(i++);

                // WOComments column, bit, not null
                WOComments = reader.GetBoolean(i++);

                // PRUIC column, bit, not null
                PRUIC = reader.GetBoolean(i++);

                // PRLine2 column, bit, not null
                PRLine2 = reader.GetBoolean(i++);

                // PRLIUIC column, bit, not null
                PRLIUIC = reader.GetBoolean(i++);

                // PRComments column, bit, not null
                PRComments = reader.GetBoolean(i++);

                // POUIC column, bit, not null
                POUIC = reader.GetBoolean(i++);

                // POLine2 column, bit, not null
                POLine2 = reader.GetBoolean(i++);

                // POLIUIC column, bit, not null
                POLIUIC = reader.GetBoolean(i++);

                // POComments column, bit, not null
                POComments = reader.GetBoolean(i++);

                // POTandC column, bit, not null
                POTandC = reader.GetBoolean(i++);

                // POTandCURL column, nvarchar(511), not null
                POTandCURL = reader.GetString(i++);

                // PORHeader column, bit, not null
                PORHeader = reader.GetBoolean(i++);

                // PORLine2 column, bit, not null
                PORLine2 = reader.GetBoolean(i++);

                // PORPrint column, bit, not null
                PORPrint = reader.GetBoolean(i++);

                // PORUIC column, bit, not null
                PORUIC = reader.GetBoolean(i++);

                // PORComments column, bit, not null
                PORComments = reader.GetBoolean(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["FormSettingsId"].ToString(); }
                catch { missing.Append("FormSettingsId "); }

                try { reader["WOLaborRecording"].ToString(); }
                catch { missing.Append("WOLaborRecording "); }

                try { reader["WOUIC"].ToString(); }
                catch { missing.Append("WOUIC "); }

                try { reader["WOScheduling"].ToString(); }
                catch { missing.Append("WOScheduling "); }

                try { reader["WOSummary"].ToString(); }
                catch { missing.Append("WOSummary "); }

                try { reader["WOPhotos"].ToString(); }
                catch { missing.Append("WOPhotos "); }

                try { reader["WOComments"].ToString(); }
                catch { missing.Append("WOComments "); }

                try { reader["PRUIC"].ToString(); }
                catch { missing.Append("PRUIC "); }

                try { reader["PRLine2"].ToString(); }
                catch { missing.Append("PRLine2 "); }

                try { reader["PRLIUIC"].ToString(); }
                catch { missing.Append("PRLIUIC "); }

                try { reader["PRComments"].ToString(); }
                catch { missing.Append("PRComments "); }

                try { reader["POUIC"].ToString(); }
                catch { missing.Append("POUIC "); }

                try { reader["POLine2"].ToString(); }
                catch { missing.Append("POLine2 "); }

                try { reader["POLIUIC"].ToString(); }
                catch { missing.Append("POLIUIC "); }

                try { reader["POComments"].ToString(); }
                catch { missing.Append("POComments "); }

                try { reader["POTandC"].ToString(); }
                catch { missing.Append("POTandC "); }

                try { reader["POTandCURL"].ToString(); }
                catch { missing.Append("POTandCURL "); }

                try { reader["PORHeader"].ToString(); }
                catch { missing.Append("PORHeader "); }

                try { reader["PORLine2"].ToString(); }
                catch { missing.Append("PORLine2 "); }

                try { reader["PORPrint"].ToString(); }
                catch { missing.Append("PORPrint "); }

                try { reader["PORUIC"].ToString(); }
                catch { missing.Append("PORUIC "); }

                try { reader["PORComments"].ToString(); }
                catch { missing.Append("PORComments "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a FormSettings table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FormSettings_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the FormSettings table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FormSettings_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the FormSettings table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FormSettings_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all FormSettings table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_FormSettings[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_FormSettings[] data
        )
        {
            Database.SqlClient.ProcessRow<b_FormSettings> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_FormSettings[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FormSettings>(reader => { b_FormSettings obj = new b_FormSettings(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_FormSettings_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_FormSettings[])results.ToArray(typeof(b_FormSettings));
                }
                else
                {
                    data = new b_FormSettings[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve FormSettings table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_FormSettings[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_FormSettings> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FormSettings>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_FormSettings_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_FormSettings objects.
        /// </summary>
        /// <param name="obj">b_FormSettings object to compare against the current object.</param>
        public bool Equals(b_FormSettings obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (FormSettingsId != obj.FormSettingsId) return false;
            if (WOLaborRecording != obj.WOLaborRecording) return false;
            if (WOUIC != obj.WOUIC) return false;
            if (WOScheduling != obj.WOScheduling) return false;
            if (WOSummary != obj.WOSummary) return false;
            if (WOPhotos != obj.WOPhotos) return false;
            if (WOComments != obj.WOComments) return false;
            if (PRUIC != obj.PRUIC) return false;
            if (PRLine2 != obj.PRLine2) return false;
            if (PRLIUIC != obj.PRLIUIC) return false;
            if (PRComments != obj.PRComments) return false;
            if (POUIC != obj.POUIC) return false;
            if (POLine2 != obj.POLine2) return false;
            if (POLIUIC != obj.POLIUIC) return false;
            if (POComments != obj.POComments) return false;
            if (POTandC != obj.POTandC) return false;
            if (!POTandCURL.Equals(obj.POTandCURL)) return false;
            if (PORHeader != obj.PORHeader) return false;
            if (PORLine2 != obj.PORLine2) return false;
            if (PORPrint != obj.PORPrint) return false;
            if (PORUIC != obj.PORUIC) return false;
            if (PORComments != obj.PORComments) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_FormSettings objects.
        /// </summary>
        /// <param name="obj1">b_FormSettings object to use in the comparison.</param>
        /// <param name="obj2">b_FormSettings object to use in the comparison.</param>
        public static bool Equals(b_FormSettings obj1, b_FormSettings obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
