/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2016 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PrevMaintSched table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PrevMaintSched : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PrevMaintSched()
        {
            ClientId = 0;
            PrevMaintSchedId = 0;
            PrevMaintMasterId = 0;
            AssignedTo_PersonnelId = 0;
            AssociationGroup = String.Empty;
            CalendarSlack = 0;
            ChargeToId = 0;
            ChargeType = String.Empty;
            Crew = String.Empty;
            CurrentWOComplete = new System.Nullable<System.DateTime>();
            DownRequired = false;
            ExcludeDOW = String.Empty;
            Frequency = 0;
            FrequencyType = String.Empty;
            InactiveFlag = false;
            JobPlan = String.Empty;
            Last_WorkOrderId = 0;
            LastPerformed = new System.Nullable<System.DateTime>();
            LastScheduled = new System.Nullable<System.DateTime>();
            MeterHighLevel = 0;
            MeterId = 0;
            MeterInterval = 0;
            MeterLastDone = 0;
            MeterLastDue = 0;
            MeterLastReading = 0;
            MeterLowLevel = 0;
            MeterMethod = String.Empty;
            MeterOn = false;
            MeterSlack = 0;
            NextDueDate = new System.Nullable<System.DateTime>();
            OnDemandGroup = String.Empty;
            Priority = String.Empty;
            Scheduled = false;
            ScheduleMethod = String.Empty;
            ScheduleType = String.Empty;
            ScheduleType_ = String.Empty;
            ScheduleWeeks = String.Empty;
            Section = String.Empty;
            Shift = String.Empty;
            Type = String.Empty;
            RIMEWorkClass = 0;
            Category = String.Empty;
            GaugeEventType = String.Empty;
            RootCauseCode = String.Empty;
            ActionCode = String.Empty;
            FailureCode = String.Empty;
            Planner_PersonnelId = 0;
            PlanningRequired = false;
            UpdateIndex = 0;
        }

        /// <summary>
        /// PrevMaintSchedId property
        /// </summary>
        public long PrevMaintSchedId { get; set; }

        /// <summary>
        /// PrevMaintMasterId property
        /// </summary>
        public long PrevMaintMasterId { get; set; }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        public long AssignedTo_PersonnelId { get; set; }

        /// <summary>
        /// AssociationGroup property
        /// </summary>
        public string AssociationGroup { get; set; }

        /// <summary>
        /// CalendarSlack property
        /// </summary>
        public int CalendarSlack { get; set; }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        public long ChargeToId { get; set; }

        /// <summary>
        /// ChargeType property
        /// </summary>
        public string ChargeType { get; set; }

        /// <summary>
        /// Crew property
        /// </summary>
        public string Crew { get; set; }

        /// <summary>
        /// CurrentWOComplete property
        /// </summary>
        public DateTime? CurrentWOComplete { get; set; }

        /// <summary>
        /// DownRequired property
        /// </summary>
        public bool DownRequired { get; set; }

        /// <summary>
        /// ExcludeDOW property
        /// </summary>
        public string ExcludeDOW { get; set; }

        /// <summary>
        /// Frequency property
        /// </summary>
        public int Frequency { get; set; }

        /// <summary>
        /// FrequencyType property
        /// </summary>
        public string FrequencyType { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// JobPlan property
        /// </summary>
        public string JobPlan { get; set; }

        /// <summary>
        /// Last_WorkOrderId property
        /// </summary>
        public long Last_WorkOrderId { get; set; }

        /// <summary>
        /// LastPerformed property
        /// </summary>
        public DateTime? LastPerformed { get; set; }

        /// <summary>
        /// LastScheduled property
        /// </summary>
        public DateTime? LastScheduled { get; set; }

        /// <summary>
        /// MeterHighLevel property
        /// </summary>
        public decimal MeterHighLevel { get; set; }

        /// <summary>
        /// MeterId property
        /// </summary>
        public long MeterId { get; set; }

        /// <summary>
        /// MeterInterval property
        /// </summary>
        public decimal MeterInterval { get; set; }

        /// <summary>
        /// MeterLastDone property
        /// </summary>
        public decimal MeterLastDone { get; set; }

        /// <summary>
        /// MeterLastDue property
        /// </summary>
        public decimal MeterLastDue { get; set; }

        /// <summary>
        /// MeterLastReading property
        /// </summary>
        public decimal MeterLastReading { get; set; }

        /// <summary>
        /// MeterLowLevel property
        /// </summary>
        public decimal MeterLowLevel { get; set; }

        /// <summary>
        /// MeterMethod property
        /// </summary>
        public string MeterMethod { get; set; }

        /// <summary>
        /// MeterOn property
        /// </summary>
        public bool MeterOn { get; set; }

        /// <summary>
        /// MeterSlack property
        /// </summary>
        public decimal MeterSlack { get; set; }

        /// <summary>
        /// NextDueDate property
        /// </summary>
        public DateTime? NextDueDate { get; set; }

        /// <summary>
        /// OnDemandGroup property
        /// </summary>
        public string OnDemandGroup { get; set; }

        /// <summary>
        /// Priority property
        /// </summary>
        public string Priority { get; set; }

        /// <summary>
        /// Scheduled property
        /// </summary>
        public bool Scheduled { get; set; }

        /// <summary>
        /// ScheduleMethod property
        /// </summary>
        public string ScheduleMethod { get; set; }

        /// <summary>
        /// ScheduleType property
        /// </summary>
        public string ScheduleType { get; set; }

        /// <summary>
        /// ScheduleType_ property
        /// </summary>
        public string ScheduleType_ { get; set; }

        /// <summary>
        /// ScheduleWeeks property
        /// </summary>
        public string ScheduleWeeks { get; set; }

        /// <summary>
        /// Section property
        /// </summary>
        public string Section { get; set; }

        /// <summary>
        /// Shift property
        /// </summary>
        public string Shift { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// RIMEWorkClass property
        /// </summary>
        public int RIMEWorkClass { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// GaugeEventType property
        /// </summary>
        public string GaugeEventType { get; set; }

        /// <summary>
        /// RootCauseCode property
        /// </summary>
        public string RootCauseCode { get; set; }

        /// <summary>
        /// ActionCode property
        /// </summary>
        public string ActionCode { get; set; }

        /// <summary>
        /// FailureCode property
        /// </summary>
        public string FailureCode { get; set; }

        /// <summary>
        /// Planner_PersonnelId property
        /// </summary>
        public long Planner_PersonnelId { get; set; }

        /// <summary>
        /// PlanningRequired property
        /// </summary>
        public bool PlanningRequired { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PrevMaintSched object.
        /// This routine should be applied to the usp_PrevMaintSched_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PrevMaintSched_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PrevMaintSched object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_PrevMaintSched obj = new b_PrevMaintSched();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PrevMaintSched object.
        /// This routine should be applied to the usp_PrevMaintSched_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PrevMaintSched_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PrevMaintSchedId column, bigint, not null
                PrevMaintSchedId = reader.GetInt64(i++);

                // PrevMaintMasterId column, bigint, not null
                PrevMaintMasterId = reader.GetInt64(i++);

                // AssignedTo_PersonnelId column, bigint, not null
                AssignedTo_PersonnelId = reader.GetInt64(i++);

                // AssociationGroup column, nvarchar(15), not null
                AssociationGroup = reader.GetString(i++);

                // CalendarSlack column, int, not null
                CalendarSlack = reader.GetInt32(i++);

                // ChargeToId column, bigint, not null
                ChargeToId = reader.GetInt64(i++);

                // ChargeType column, nvarchar(15), not null
                ChargeType = reader.GetString(i++);

                // Crew column, nvarchar(15), not null
                Crew = reader.GetString(i++);

                // CurrentWOComplete column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CurrentWOComplete = reader.GetDateTime(i);
                }
                else
                {
                    CurrentWOComplete = DateTime.MinValue;
                }
                i++;
                // DownRequired column, bit, not null
                DownRequired = reader.GetBoolean(i++);

                // ExcludeDOW column, nvarchar(7), not null
                ExcludeDOW = reader.GetString(i++);

                // Frequency column, int, not null
                Frequency = reader.GetInt32(i++);

                // FrequencyType column, nvarchar(15), not null
                FrequencyType = reader.GetString(i++);

                // InactiveFlag column, bit, not null
                InactiveFlag = reader.GetBoolean(i++);

                // JobPlan column, nvarchar(MAX), not null
                JobPlan = reader.GetString(i++);

                // Last_WorkOrderId column, bigint, not null
                Last_WorkOrderId = reader.GetInt64(i++);

                // LastPerformed column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastPerformed = reader.GetDateTime(i);
                }
                else
                {
                    LastPerformed = DateTime.MinValue;
                }
                i++;
                // LastScheduled column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastScheduled = reader.GetDateTime(i);
                }
                else
                {
                    LastScheduled = DateTime.MinValue;
                }
                i++;
                // MeterHighLevel column, decimal(17,3), not null
                MeterHighLevel = reader.GetDecimal(i++);

                // MeterId column, bigint, not null
                MeterId = reader.GetInt64(i++);

                // MeterInterval column, decimal(17,3), not null
                MeterInterval = reader.GetDecimal(i++);

                // MeterLastDone column, decimal(17,3), not null
                MeterLastDone = reader.GetDecimal(i++);

                // MeterLastDue column, decimal(17,3), not null
                MeterLastDue = reader.GetDecimal(i++);

                // MeterLastReading column, decimal(17,3), not null
                MeterLastReading = reader.GetDecimal(i++);

                // MeterLowLevel column, decimal(17,3), not null
                MeterLowLevel = reader.GetDecimal(i++);

                // MeterMethod column, nvarchar(1), not null
                MeterMethod = reader.GetString(i++);

                // MeterOn column, bit, not null
                MeterOn = reader.GetBoolean(i++);

                // MeterSlack column, decimal(17,3), not null
                MeterSlack = reader.GetDecimal(i++);

                // NextDueDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    NextDueDate = reader.GetDateTime(i);
                }
                else
                {
                    NextDueDate = DateTime.MinValue;
                }
                i++;
                // OnDemandGroup column, nvarchar(15), not null
                OnDemandGroup = reader.GetString(i++);

                // Priority column, nvarchar(15), not null
                Priority = reader.GetString(i++);

                // Scheduled column, bit, not null
                Scheduled = reader.GetBoolean(i++);

                // ScheduleMethod column, nvarchar(15), not null
                ScheduleMethod = reader.GetString(i++);

                // ScheduleType column, nvarchar(15), not null
                ScheduleType = reader.GetString(i++);

                // ScheduleType_ column, nvarchar(15), not null
                ScheduleType_ = reader.GetString(i++);

                // ScheduleWeeks column, nvarchar(52), not null
                ScheduleWeeks = reader.GetString(i++);

                // Section column, nvarchar(15), not null
                Section = reader.GetString(i++);

                // Shift column, nvarchar(15), not null
                Shift = reader.GetString(i++);

                // Type column, nvarchar(15), not null
                Type = reader.GetString(i++);

                // RIMEWorkClass column, int, not null
                RIMEWorkClass = reader.GetInt32(i++);

                // Category column, nvarchar(15), not null
                Category = reader.GetString(i++);

                // GaugeEventType column, nvarchar(15), not null
                GaugeEventType = reader.GetString(i++);

                // RootCauseCode column, nvarchar(15), not null
                RootCauseCode = reader.GetString(i++);

                // ActionCode column, nvarchar(15), not null
                ActionCode = reader.GetString(i++);

                // FailureCode column, nvarchar(15), not null
                FailureCode = reader.GetString(i++);

                // Planner_PersonnelId column, bigint, not null
                Planner_PersonnelId = reader.GetInt64(i++);

                // PlanningRequired column, bit, not null
                PlanningRequired = reader.GetBoolean(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PrevMaintSchedId"].ToString(); }
                catch { missing.Append("PrevMaintSchedId "); }

                try { reader["PrevMaintMasterId"].ToString(); }
                catch { missing.Append("PrevMaintMasterId "); }

                try { reader["AssignedTo_PersonnelId"].ToString(); }
                catch { missing.Append("AssignedTo_PersonnelId "); }

                try { reader["AssociationGroup"].ToString(); }
                catch { missing.Append("AssociationGroup "); }

                try { reader["CalendarSlack"].ToString(); }
                catch { missing.Append("CalendarSlack "); }

                try { reader["ChargeToId"].ToString(); }
                catch { missing.Append("ChargeToId "); }

                try { reader["ChargeType"].ToString(); }
                catch { missing.Append("ChargeType "); }

                try { reader["Crew"].ToString(); }
                catch { missing.Append("Crew "); }

                try { reader["CurrentWOComplete"].ToString(); }
                catch { missing.Append("CurrentWOComplete "); }

                try { reader["DownRequired"].ToString(); }
                catch { missing.Append("DownRequired "); }

                try { reader["ExcludeDOW"].ToString(); }
                catch { missing.Append("ExcludeDOW "); }

                try { reader["Frequency"].ToString(); }
                catch { missing.Append("Frequency "); }

                try { reader["FrequencyType"].ToString(); }
                catch { missing.Append("FrequencyType "); }

                try { reader["InactiveFlag"].ToString(); }
                catch { missing.Append("InactiveFlag "); }

                try { reader["JobPlan"].ToString(); }
                catch { missing.Append("JobPlan "); }

                try { reader["Last_WorkOrderId"].ToString(); }
                catch { missing.Append("Last_WorkOrderId "); }

                try { reader["LastPerformed"].ToString(); }
                catch { missing.Append("LastPerformed "); }

                try { reader["LastScheduled"].ToString(); }
                catch { missing.Append("LastScheduled "); }

                try { reader["MeterHighLevel"].ToString(); }
                catch { missing.Append("MeterHighLevel "); }

                try { reader["MeterId"].ToString(); }
                catch { missing.Append("MeterId "); }

                try { reader["MeterInterval"].ToString(); }
                catch { missing.Append("MeterInterval "); }

                try { reader["MeterLastDone"].ToString(); }
                catch { missing.Append("MeterLastDone "); }

                try { reader["MeterLastDue"].ToString(); }
                catch { missing.Append("MeterLastDue "); }

                try { reader["MeterLastReading"].ToString(); }
                catch { missing.Append("MeterLastReading "); }

                try { reader["MeterLowLevel"].ToString(); }
                catch { missing.Append("MeterLowLevel "); }

                try { reader["MeterMethod"].ToString(); }
                catch { missing.Append("MeterMethod "); }

                try { reader["MeterOn"].ToString(); }
                catch { missing.Append("MeterOn "); }

                try { reader["MeterSlack"].ToString(); }
                catch { missing.Append("MeterSlack "); }

                try { reader["NextDueDate"].ToString(); }
                catch { missing.Append("NextDueDate "); }

                try { reader["OnDemandGroup"].ToString(); }
                catch { missing.Append("OnDemandGroup "); }

                try { reader["Priority"].ToString(); }
                catch { missing.Append("Priority "); }

                try { reader["Scheduled"].ToString(); }
                catch { missing.Append("Scheduled "); }

                try { reader["ScheduleMethod"].ToString(); }
                catch { missing.Append("ScheduleMethod "); }

                try { reader["ScheduleType"].ToString(); }
                catch { missing.Append("ScheduleType "); }

                try { reader["ScheduleType_"].ToString(); }
                catch { missing.Append("ScheduleType_ "); }

                try { reader["ScheduleWeeks"].ToString(); }
                catch { missing.Append("ScheduleWeeks "); }

                try { reader["Section"].ToString(); }
                catch { missing.Append("Section "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["RIMEWorkClass"].ToString(); }
                catch { missing.Append("RIMEWorkClass "); }

                try { reader["Category"].ToString(); }
                catch { missing.Append("Category "); }

                try { reader["GaugeEventType"].ToString(); }
                catch { missing.Append("GaugeEventType "); }

                try { reader["RootCauseCode"].ToString(); }
                catch { missing.Append("RootCauseCode "); }

                try { reader["ActionCode"].ToString(); }
                catch { missing.Append("ActionCode "); }

                try { reader["FailureCode"].ToString(); }
                catch { missing.Append("FailureCode "); }

                try { reader["Planner_PersonnelId"].ToString(); }
                catch { missing.Append("Planner_PersonnelId "); }

                try { reader["PlanningRequired"].ToString(); }
                catch { missing.Append("PlanningRequired "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a PrevMaintSched table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PrevMaintSched_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PrevMaintSched table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PrevMaintSched_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PrevMaintSched table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PrevMaintSched_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PrevMaintSched table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PrevMaintSched[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PrevMaintSched[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PrevMaintSched> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PrevMaintSched[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PrevMaintSched>(reader => { b_PrevMaintSched obj = new b_PrevMaintSched(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PrevMaintSched_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PrevMaintSched[])results.ToArray(typeof(b_PrevMaintSched));
                }
                else
                {
                    data = new b_PrevMaintSched[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PrevMaintSched table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PrevMaintSched[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PrevMaintSched> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PrevMaintSched>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PrevMaintSched_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PrevMaintSched objects.
        /// </summary>
        /// <param name="obj">b_PrevMaintSched object to compare against the current object.</param>
        public bool Equals(b_PrevMaintSched obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PrevMaintSchedId != obj.PrevMaintSchedId) return false;
            if (PrevMaintMasterId != obj.PrevMaintMasterId) return false;
            if (AssignedTo_PersonnelId != obj.AssignedTo_PersonnelId) return false;
            if (!AssociationGroup.Equals(obj.AssociationGroup)) return false;
            if (CalendarSlack != obj.CalendarSlack) return false;
            if (ChargeToId != obj.ChargeToId) return false;
            if (!ChargeType.Equals(obj.ChargeType)) return false;
            if (!Crew.Equals(obj.Crew)) return false;
            if (!CurrentWOComplete.Equals(obj.CurrentWOComplete)) return false;
            if (DownRequired != obj.DownRequired) return false;
            if (!ExcludeDOW.Equals(obj.ExcludeDOW)) return false;
            if (Frequency != obj.Frequency) return false;
            if (!FrequencyType.Equals(obj.FrequencyType)) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (!JobPlan.Equals(obj.JobPlan)) return false;
            if (Last_WorkOrderId != obj.Last_WorkOrderId) return false;
            if (!LastPerformed.Equals(obj.LastPerformed)) return false;
            if (!LastScheduled.Equals(obj.LastScheduled)) return false;
            if (MeterHighLevel != obj.MeterHighLevel) return false;
            if (MeterId != obj.MeterId) return false;
            if (MeterInterval != obj.MeterInterval) return false;
            if (MeterLastDone != obj.MeterLastDone) return false;
            if (MeterLastDue != obj.MeterLastDue) return false;
            if (MeterLastReading != obj.MeterLastReading) return false;
            if (MeterLowLevel != obj.MeterLowLevel) return false;
            if (!MeterMethod.Equals(obj.MeterMethod)) return false;
            if (MeterOn != obj.MeterOn) return false;
            if (MeterSlack != obj.MeterSlack) return false;
            if (!NextDueDate.Equals(obj.NextDueDate)) return false;
            if (!OnDemandGroup.Equals(obj.OnDemandGroup)) return false;
            if (!Priority.Equals(obj.Priority)) return false;
            if (Scheduled != obj.Scheduled) return false;
            if (!ScheduleMethod.Equals(obj.ScheduleMethod)) return false;
            if (!ScheduleType.Equals(obj.ScheduleType)) return false;
            if (!ScheduleType_.Equals(obj.ScheduleType_)) return false;
            if (!ScheduleWeeks.Equals(obj.ScheduleWeeks)) return false;
            if (!Section.Equals(obj.Section)) return false;
            if (!Shift.Equals(obj.Shift)) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (RIMEWorkClass != obj.RIMEWorkClass) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (!GaugeEventType.Equals(obj.GaugeEventType)) return false;
            if (!RootCauseCode.Equals(obj.RootCauseCode)) return false;
            if (!ActionCode.Equals(obj.ActionCode)) return false;
            if (!FailureCode.Equals(obj.FailureCode)) return false;
            if (Planner_PersonnelId != obj.Planner_PersonnelId) return false;
            if (PlanningRequired != obj.PlanningRequired) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PrevMaintSched objects.
        /// </summary>
        /// <param name="obj1">b_PrevMaintSched object to use in the comparison.</param>
        /// <param name="obj2">b_PrevMaintSched object to use in the comparison.</param>
        public static bool Equals(b_PrevMaintSched obj1, b_PrevMaintSched obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
