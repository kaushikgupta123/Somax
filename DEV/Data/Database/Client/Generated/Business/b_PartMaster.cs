/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartMaster table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PartMaster : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PartMaster ()
        {
            ClientId = 0;
            PartMasterId = 0;
            ClientLookupId = String.Empty;
            OEMPart = false;
            EXPartId = 0;
            EXAltPartId1 = String.Empty;
            EXAltPartId2 = String.Empty;
            EXAltPartId3 = String.Empty;
            ExUniqueId = System.Guid.Empty;
            InactiveFlag = false;
            LongDescription = String.Empty;
            Manufacturer = String.Empty;
            ManufacturerId = String.Empty;
            ShortDescription = String.Empty;
            UnitCost = 0;
            UnitOfMeasure = String.Empty;
            Category = String.Empty;
            UPCCode = String.Empty;
            ImageURL = String.Empty;
            SXPart = false;
            UpdateIndex = 0;
        }

        /// <summary>
        /// PartMasterId property
        /// </summary>
        public long PartMasterId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// OEMPart property
        /// </summary>
        public bool OEMPart { get; set; }

        /// <summary>
        /// EXPartId property
        /// </summary>
        public long EXPartId { get; set; }

        /// <summary>
        /// EXAltPartId1 property
        /// </summary>
        public string EXAltPartId1 { get; set; }

        /// <summary>
        /// EXAltPartId2 property
        /// </summary>
        public string EXAltPartId2 { get; set; }

        /// <summary>
        /// EXAltPartId3 property
        /// </summary>
        public string EXAltPartId3 { get; set; }

        /// <summary>
        /// ExUniqueId property
        /// </summary>
        public System.Guid ExUniqueId { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// LongDescription property
        /// </summary>
        public string LongDescription { get; set; }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        public string Manufacturer { get; set; }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        public string ManufacturerId { get; set; }

        /// <summary>
        /// ShortDescription property
        /// </summary>
        public string ShortDescription { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// UPCCode property
        /// </summary>
        public string UPCCode { get; set; }

        /// <summary>
        /// ImageURL property
        /// </summary>
        public string ImageURL { get; set; }

        /// <summary>
        /// SXPart property
        /// </summary>
        public bool SXPart { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PartMaster object.
        /// This routine should be applied to the usp_PartMaster_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartMaster_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PartMaster object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_PartMaster obj = new b_PartMaster();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PartMaster object.
        /// This routine should be applied to the usp_PartMaster_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartMaster_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // PartMasterId column, bigint, not null
                        PartMasterId = reader.GetInt64(i++);

                        // ClientLookupId column, nvarchar(31), not null
                        ClientLookupId = reader.GetString(i++);

                        // OEMPart column, bit, not null
                        OEMPart = reader.GetBoolean(i++);

                        // EXPartId column, bigint, not null
                        EXPartId = reader.GetInt64(i++);

                        // EXAltPartId1 column, nvarchar(31), not null
                        EXAltPartId1 = reader.GetString(i++);

                        // EXAltPartId2 column, nvarchar(31), not null
                        EXAltPartId2 = reader.GetString(i++);

                        // EXAltPartId3 column, nvarchar(31), not null
                        EXAltPartId3 = reader.GetString(i++);

                        // ExUniqueId column, uniqueidentifier, not null
                        if (false == reader.IsDBNull(i))
                        {
                          ExUniqueId = reader.GetGuid(i);
                        }
                        else
                        {
                           ExUniqueId = Guid.Empty;
                        }
                        i++;

                        // InactiveFlag column, bit, not null
                        InactiveFlag = reader.GetBoolean(i++);

                        // LongDescription column, nvarchar(MAX), not null
                        LongDescription = reader.GetString(i++);

                        // Manufacturer column, nvarchar(31), not null
                        Manufacturer = reader.GetString(i++);

                        // ManufacturerId column, nvarchar(63), not null
                        ManufacturerId = reader.GetString(i++);

                        // ShortDescription column, nvarchar(255), not null
                        ShortDescription = reader.GetString(i++);

                        // UnitCost column, decimal(15,5), not null
                        UnitCost = reader.GetDecimal(i++);

                        // UnitOfMeasure column, nvarchar(15), not null
                        UnitOfMeasure = reader.GetString(i++);

                        // Category column, nvarchar(31), not null
                        Category = reader.GetString(i++);

                        // UPCCode column, nvarchar(15), not null
                        UPCCode = reader.GetString(i++);

                        // ImageURL column, nvarchar(255), not null
                        ImageURL = reader.GetString(i++);

                        // SXPart column, bit, not null
                        SXPart = reader.GetBoolean(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["PartMasterId"].ToString(); }
            catch { missing.Append("PartMasterId "); }
            
            try { reader["ClientLookupId"].ToString(); }
            catch { missing.Append("ClientLookupId "); }
            
            try { reader["OEMPart"].ToString(); }
            catch { missing.Append("OEMPart "); }
            
            try { reader["EXPartId"].ToString(); }
            catch { missing.Append("EXPartId "); }
            
            try { reader["EXAltPartId1"].ToString(); }
            catch { missing.Append("EXAltPartId1 "); }
            
            try { reader["EXAltPartId2"].ToString(); }
            catch { missing.Append("EXAltPartId2 "); }
            
            try { reader["EXAltPartId3"].ToString(); }
            catch { missing.Append("EXAltPartId3 "); }
            
            try { reader["ExUniqueId"].ToString(); }
            catch { missing.Append("ExUniqueId "); }
            
            try { reader["InactiveFlag"].ToString(); }
            catch { missing.Append("InactiveFlag "); }
            
            try { reader["LongDescription"].ToString(); }
            catch { missing.Append("LongDescription "); }
            
            try { reader["Manufacturer"].ToString(); }
            catch { missing.Append("Manufacturer "); }
            
            try { reader["ManufacturerId"].ToString(); }
            catch { missing.Append("ManufacturerId "); }
            
            try { reader["ShortDescription"].ToString(); }
            catch { missing.Append("ShortDescription "); }
            
            try { reader["UnitCost"].ToString(); }
            catch { missing.Append("UnitCost "); }
            
            try { reader["UnitOfMeasure"].ToString(); }
            catch { missing.Append("UnitOfMeasure "); }
            
            try { reader["Category"].ToString(); }
            catch { missing.Append("Category "); }
            
            try { reader["UPCCode"].ToString(); }
            catch { missing.Append("UPCCode "); }
            
            try { reader["ImageURL"].ToString(); }
            catch { missing.Append("ImageURL "); }
            
            try { reader["SXPart"].ToString(); }
            catch { missing.Append("SXPart "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a PartMaster table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartMaster_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PartMaster table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartMaster_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PartMaster table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartMaster_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PartMaster table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PartMaster[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PartMaster[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PartMaster> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PartMaster[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartMaster>(reader => { b_PartMaster obj = new b_PartMaster(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PartMaster_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PartMaster[])results.ToArray(typeof(b_PartMaster));
                }
                else
                {
                    data = new b_PartMaster[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PartMaster table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PartMaster[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PartMaster> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartMaster>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PartMaster_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PartMaster objects.
        /// </summary>
        /// <param name="obj">b_PartMaster object to compare against the current object.</param>
        public bool Equals (b_PartMaster obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PartMasterId != obj.PartMasterId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (OEMPart != obj.OEMPart) return false;
            if (EXPartId != obj.EXPartId) return false;
            if (!EXAltPartId1.Equals(obj.EXAltPartId1)) return false;
            if (!EXAltPartId2.Equals(obj.EXAltPartId2)) return false;
            if (!EXAltPartId3.Equals(obj.EXAltPartId3)) return false;
            if (!ExUniqueId.Equals(obj.ExUniqueId)) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (!LongDescription.Equals(obj.LongDescription)) return false;
            if (!Manufacturer.Equals(obj.Manufacturer)) return false;
            if (!ManufacturerId.Equals(obj.ManufacturerId)) return false;
            if (!ShortDescription.Equals(obj.ShortDescription)) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (!UnitOfMeasure.Equals(obj.UnitOfMeasure)) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (!UPCCode.Equals(obj.UPCCode)) return false;
            if (!ImageURL.Equals(obj.ImageURL)) return false;
            if (SXPart != obj.SXPart) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PartMaster objects.
        /// </summary>
        /// <param name="obj1">b_PartMaster object to use in the comparison.</param>
        /// <param name="obj2">b_PartMaster object to use in the comparison.</param>
        public static bool Equals (b_PartMaster obj1, b_PartMaster obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
