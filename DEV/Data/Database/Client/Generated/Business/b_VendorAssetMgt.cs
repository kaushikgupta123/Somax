/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the VendorAssetMgt table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_VendorAssetMgt : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_VendorAssetMgt ()
        {
            ClientId = 0;
            VendorAssetMgtId = 0;
            VendorId = 0;
            Active = false;
            Company = String.Empty;
            Contact = String.Empty;
            Contract = String.Empty;
            EffectiveDate = new System.Nullable<System.DateTime>();
            ExpireDate = new System.Nullable<System.DateTime>();
            PKGContactorRecBy = new System.Nullable<System.DateTime>();
            PKGReceiveBy = new System.Nullable<System.DateTime>();
            PKGSent = new System.Nullable<System.DateTime>();
            SentVia = String.Empty;
        }

        /// <summary>
        /// VendorAssetMgtId property
        /// </summary>
        public long VendorAssetMgtId { get; set; }

        /// <summary>
        /// VendorId property
        /// </summary>
        public long VendorId { get; set; }

        /// <summary>
        /// Active property
        /// </summary>
        public bool Active { get; set; }

        /// <summary>
        /// Company property
        /// </summary>
        public string Company { get; set; }

        /// <summary>
        /// Contact property
        /// </summary>
        public string Contact { get; set; }

        /// <summary>
        /// Contract property
        /// </summary>
        public string Contract { get; set; }

        /// <summary>
        /// EffectiveDate property
        /// </summary>
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// ExpireDate property
        /// </summary>
        public DateTime? ExpireDate { get; set; }

        /// <summary>
        /// PKGContactorRecBy property
        /// </summary>
        public DateTime? PKGContactorRecBy { get; set; }

        /// <summary>
        /// PKGReceiveBy property
        /// </summary>
        public DateTime? PKGReceiveBy { get; set; }

        /// <summary>
        /// PKGSent property
        /// </summary>
        public DateTime? PKGSent { get; set; }

        /// <summary>
        /// SentVia property
        /// </summary>
        public string SentVia { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_VendorAssetMgt object.
        /// This routine should be applied to the usp_VendorAssetMgt_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorAssetMgt_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_VendorAssetMgt object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_VendorAssetMgt obj = new b_VendorAssetMgt();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_VendorAssetMgt object.
        /// This routine should be applied to the usp_VendorAssetMgt_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorAssetMgt_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // VendorAssetMgtId column, bigint, not null
                        VendorAssetMgtId = reader.GetInt64(i++);

                        // VendorId column, bigint, not null
                        VendorId = reader.GetInt64(i++);

                        // Active column, bit, not null
                        Active = reader.GetBoolean(i++);

                        // Company column, nvarchar(63), not null
                        Company = reader.GetString(i++);

                        // Contact column, nvarchar(31), not null
                        Contact = reader.GetString(i++);

                        // Contract column, nvarchar(15), not null
                        Contract = reader.GetString(i++);

            // EffectiveDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    EffectiveDate = reader.GetDateTime(i);
            }
            else
            {
                    EffectiveDate = DateTime.MinValue;
            }
            i++;
            // ExpireDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ExpireDate = reader.GetDateTime(i);
            }
            else
            {
                    ExpireDate = DateTime.MinValue;
            }
            i++;
            // PKGContactorRecBy column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    PKGContactorRecBy = reader.GetDateTime(i);
            }
            else
            {
                    PKGContactorRecBy = DateTime.MinValue;
            }
            i++;
            // PKGReceiveBy column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    PKGReceiveBy = reader.GetDateTime(i);
            }
            else
            {
                    PKGReceiveBy = DateTime.MinValue;
            }
            i++;
            // PKGSent column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    PKGSent = reader.GetDateTime(i);
            }
            else
            {
                    PKGSent = DateTime.MinValue;
            }
            i++;
                        // SentVia column, nvarchar(15), not null
                        SentVia = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["VendorAssetMgtId"].ToString(); }
            catch { missing.Append("VendorAssetMgtId "); }
            
            try { reader["VendorId"].ToString(); }
            catch { missing.Append("VendorId "); }
            
            try { reader["Active"].ToString(); }
            catch { missing.Append("Active "); }
            
            try { reader["Company"].ToString(); }
            catch { missing.Append("Company "); }
            
            try { reader["Contact"].ToString(); }
            catch { missing.Append("Contact "); }
            
            try { reader["Contract"].ToString(); }
            catch { missing.Append("Contract "); }
            
            try { reader["EffectiveDate"].ToString(); }
            catch { missing.Append("EffectiveDate "); }
            
            try { reader["ExpireDate"].ToString(); }
            catch { missing.Append("ExpireDate "); }
            
            try { reader["PKGContactorRecBy"].ToString(); }
            catch { missing.Append("PKGContactorRecBy "); }
            
            try { reader["PKGReceiveBy"].ToString(); }
            catch { missing.Append("PKGReceiveBy "); }
            
            try { reader["PKGSent"].ToString(); }
            catch { missing.Append("PKGSent "); }
            
            try { reader["SentVia"].ToString(); }
            catch { missing.Append("SentVia "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a VendorAssetMgt table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorAssetMgt_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the VendorAssetMgt table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorAssetMgt_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the VendorAssetMgt table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorAssetMgt_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all VendorAssetMgt table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_VendorAssetMgt[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_VendorAssetMgt[] data
        )
        {
            Database.SqlClient.ProcessRow<b_VendorAssetMgt> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_VendorAssetMgt[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorAssetMgt>(reader => { b_VendorAssetMgt obj = new b_VendorAssetMgt(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_VendorAssetMgt_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_VendorAssetMgt[])results.ToArray(typeof(b_VendorAssetMgt));
                }
                else
                {
                    data = new b_VendorAssetMgt[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve VendorAssetMgt table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_VendorAssetMgt[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_VendorAssetMgt> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorAssetMgt>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_VendorAssetMgt_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_VendorAssetMgt objects.
        /// </summary>
        /// <param name="obj">b_VendorAssetMgt object to compare against the current object.</param>
        public bool Equals (b_VendorAssetMgt obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (VendorAssetMgtId != obj.VendorAssetMgtId) return false;
            if (VendorId != obj.VendorId) return false;
            if (Active != obj.Active) return false;
            if (!Company.Equals(obj.Company)) return false;
            if (!Contact.Equals(obj.Contact)) return false;
            if (!Contract.Equals(obj.Contract)) return false;
            if (!EffectiveDate.Equals(obj.EffectiveDate)) return false;
            if (!ExpireDate.Equals(obj.ExpireDate)) return false;
            if (!PKGContactorRecBy.Equals(obj.PKGContactorRecBy)) return false;
            if (!PKGReceiveBy.Equals(obj.PKGReceiveBy)) return false;
            if (!PKGSent.Equals(obj.PKGSent)) return false;
            if (!SentVia.Equals(obj.SentVia)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_VendorAssetMgt objects.
        /// </summary>
        /// <param name="obj1">b_VendorAssetMgt object to use in the comparison.</param>
        /// <param name="obj2">b_VendorAssetMgt object to use in the comparison.</param>
        public static bool Equals (b_VendorAssetMgt obj1, b_VendorAssetMgt obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
