/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the WOCompletionSettings table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_WOCompletionSettings : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_WOCompletionSettings()
        {
            WOCompletionSettingsId = 0;
            ClientId = 0;
            UseWOCompletionWizard = false;
            WOCommentTab = false;
            TimecardTab = false;
            AutoAddTimecard = false;
            WOCompCriteriaTab = false;
            WOCompCriteriaTitle = String.Empty;
            WOCompCriteria = String.Empty;
        }

        /// <summary>
        /// WOCompletionSettingsId property
        /// </summary>
        public long WOCompletionSettingsId { get; set; }

        /// <summary>
        /// UseWOCompletionWizard property
        /// </summary>
        public bool UseWOCompletionWizard { get; set; }

        /// <summary>
        /// WOCommentTab property
        /// </summary>
        public bool WOCommentTab { get; set; }

        /// <summary>
        /// TimecardTab property
        /// </summary>
        public bool TimecardTab { get; set; }

        /// <summary>
        /// AutoAddTimecard property
        /// </summary>
        public bool AutoAddTimecard { get; set; }

        /// <summary>
        /// WOCompCriteriaTab property
        /// </summary>
        public bool WOCompCriteriaTab { get; set; }

        /// <summary>
        /// WOCompCriteriaTitle property
        /// </summary>
        public string WOCompCriteriaTitle { get; set; }

        /// <summary>
        /// WOCompCriteria property
        /// </summary>
        public string WOCompCriteria { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_WOCompletionSettings object.
        /// This routine should be applied to the usp_WOCompletionSettings_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_WOCompletionSettings_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_WOCompletionSettings object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_WOCompletionSettings obj = new b_WOCompletionSettings();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_WOCompletionSettings object.
        /// This routine should be applied to the usp_WOCompletionSettings_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_WOCompletionSettings_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // WOCompletionSettingsId column, bigint, not null
                WOCompletionSettingsId = reader.GetInt64(i++);

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // UseWOCompletionWizard column, bit, not null
                UseWOCompletionWizard = reader.GetBoolean(i++);

                // WOCommentTab column, bit, not null
                WOCommentTab = reader.GetBoolean(i++);

                // TimecardTab column, bit, not null
                TimecardTab = reader.GetBoolean(i++);

                // AutoAddTimecard column, bit, not null
                AutoAddTimecard = reader.GetBoolean(i++);

                // WOCompCriteriaTab column, bit, not null
                WOCompCriteriaTab = reader.GetBoolean(i++);

                // WOCompCriteriaTitle column, nvarchar(55), not null
                WOCompCriteriaTitle = reader.GetString(i++);

                // WOCompCriteria column, nvarchar(MAX), not null
                WOCompCriteria = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["WOCompletionSettingsId"].ToString(); }
                catch { missing.Append("WOCompletionSettingsId "); }

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["UseWOCompletionWizard"].ToString(); }
                catch { missing.Append("UseWOCompletionWizard "); }

                try { reader["WOCommentTab"].ToString(); }
                catch { missing.Append("WOCommentTab "); }

                try { reader["TimecardTab"].ToString(); }
                catch { missing.Append("TimecardTab "); }

                try { reader["AutoAddTimecard"].ToString(); }
                catch { missing.Append("AutoAddTimecard "); }

                try { reader["WOCompCriteriaTab"].ToString(); }
                catch { missing.Append("WOCompCriteriaTab "); }

                try { reader["WOCompCriteriaTitle"].ToString(); }
                catch { missing.Append("WOCompCriteriaTitle "); }

                try { reader["WOCompCriteria"].ToString(); }
                catch { missing.Append("WOCompCriteria "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a WOCompletionSettings table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WOCompletionSettings_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the WOCompletionSettings table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WOCompletionSettings_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the WOCompletionSettings table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WOCompletionSettings_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all WOCompletionSettings table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_WOCompletionSettings[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_WOCompletionSettings[] data
        )
        {
            Database.SqlClient.ProcessRow<b_WOCompletionSettings> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_WOCompletionSettings[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_WOCompletionSettings>(reader => { b_WOCompletionSettings obj = new b_WOCompletionSettings(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_WOCompletionSettings_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_WOCompletionSettings[])results.ToArray(typeof(b_WOCompletionSettings));
                }
                else
                {
                    data = new b_WOCompletionSettings[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve WOCompletionSettings table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_WOCompletionSettings[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_WOCompletionSettings> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_WOCompletionSettings>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_WOCompletionSettings_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_WOCompletionSettings objects.
        /// </summary>
        /// <param name="obj">b_WOCompletionSettings object to compare against the current object.</param>
        public bool Equals(b_WOCompletionSettings obj)
        {
            if (WOCompletionSettingsId != obj.WOCompletionSettingsId) return false;
            if (ClientId != obj.ClientId) return false;
            if (UseWOCompletionWizard != obj.UseWOCompletionWizard) return false;
            if (WOCommentTab != obj.WOCommentTab) return false;
            if (TimecardTab != obj.TimecardTab) return false;
            if (AutoAddTimecard != obj.AutoAddTimecard) return false;
            if (WOCompCriteriaTab != obj.WOCompCriteriaTab) return false;
            if (!WOCompCriteriaTitle.Equals(obj.WOCompCriteriaTitle)) return false;
            if (!WOCompCriteria.Equals(obj.WOCompCriteria)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_WOCompletionSettings objects.
        /// </summary>
        /// <param name="obj1">b_WOCompletionSettings object to use in the comparison.</param>
        /// <param name="obj2">b_WOCompletionSettings object to use in the comparison.</param>
        public static bool Equals(b_WOCompletionSettings obj1, b_WOCompletionSettings obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}