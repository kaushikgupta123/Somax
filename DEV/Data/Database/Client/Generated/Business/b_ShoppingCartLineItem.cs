/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ShoppingCartLineItem table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ShoppingCartLineItem : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ShoppingCartLineItem ()
        {
            ClientId = 0;
            ShoppingCartLineItemId = 0;
            ShoppingCartId = 0;
            Description = String.Empty;
            RequiredDate = new System.Nullable<System.DateTime>();
            LineNumber = 0;
            PartId = 0;
            OrderQuantity = 0;
            UnitofMeasure = String.Empty;
            UnitCost = 0;
            VendorId = 0;
            PurchaseRequestLineItemId = 0;
            PurchaseOrderLineItemId = 0;
            VendorCatalogItemId = 0;
            ChargeToId = 0;
            ChargeType = String.Empty;
            AccountId = 0;
            PurchaseQuantity = 0;
            PurchaseUOM = String.Empty;
            PurchaseCost = 0;
            UOMConversion = 0;
            Category = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// ShoppingCartLineItemId property
        /// </summary>
        public long ShoppingCartLineItemId { get; set; }

        /// <summary>
        /// ShoppingCartId property
        /// </summary>
        public long ShoppingCartId { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// RequiredDate property
        /// </summary>
        public DateTime? RequiredDate { get; set; }

        /// <summary>
        /// LineNumber property
        /// </summary>
        public int LineNumber { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// OrderQuantity property
        /// </summary>
        public decimal OrderQuantity { get; set; }

        /// <summary>
        /// UnitofMeasure property
        /// </summary>
        public string UnitofMeasure { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// VendorId property
        /// </summary>
        public long VendorId { get; set; }

        /// <summary>
        /// PurchaseRequestLineItemId property
        /// </summary>
        public long PurchaseRequestLineItemId { get; set; }

        /// <summary>
        /// PurchaseOrderLineItemId property
        /// </summary>
        public long PurchaseOrderLineItemId { get; set; }

        /// <summary>
        /// VendorCatalogItemId property
        /// </summary>
        public long VendorCatalogItemId { get; set; }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        public long ChargeToId { get; set; }

        /// <summary>
        /// ChargeType property
        /// </summary>
        public string ChargeType { get; set; }

        /// <summary>
        /// AccountId property
        /// </summary>
        public long AccountId { get; set; }

        /// <summary>
        /// PurchaseQuantity property
        /// </summary>
        public decimal PurchaseQuantity { get; set; }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        public string PurchaseUOM { get; set; }

        /// <summary>
        /// PurchaseCost property
        /// </summary>
        public decimal PurchaseCost { get; set; }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        public decimal UOMConversion { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ShoppingCartLineItem object.
        /// This routine should be applied to the usp_ShoppingCartLineItem_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ShoppingCartLineItem_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ShoppingCartLineItem object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ShoppingCartLineItem obj = new b_ShoppingCartLineItem();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ShoppingCartLineItem object.
        /// This routine should be applied to the usp_ShoppingCartLineItem_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ShoppingCartLineItem_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // ShoppingCartLineItemId column, bigint, not null
                        ShoppingCartLineItemId = reader.GetInt64(i++);

                        // ShoppingCartId column, bigint, not null
                        ShoppingCartId = reader.GetInt64(i++);

                        // Description column, nvarchar(MAX), not null
                        Description = reader.GetString(i++);

            // RequiredDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    RequiredDate = reader.GetDateTime(i);
            }
            else
            {
                    RequiredDate = DateTime.MinValue;
            }
            i++;
                        // LineNumber column, int, not null
                        LineNumber = reader.GetInt32(i++);

                        // PartId column, bigint, not null
                        PartId = reader.GetInt64(i++);

                        // OrderQuantity column, decimal(15,6), not null
                        OrderQuantity = reader.GetDecimal(i++);

                        // UnitofMeasure column, nvarchar(15), not null
                        UnitofMeasure = reader.GetString(i++);

                        // UnitCost column, decimal(15,5), not null
                        UnitCost = reader.GetDecimal(i++);

                        // VendorId column, bigint, not null
                        VendorId = reader.GetInt64(i++);

                        // PurchaseRequestLineItemId column, bigint, not null
                        PurchaseRequestLineItemId = reader.GetInt64(i++);

                        // PurchaseOrderLineItemId column, bigint, not null
                        PurchaseOrderLineItemId = reader.GetInt64(i++);

                        // VendorCatalogItemId column, bigint, not null
                        VendorCatalogItemId = reader.GetInt64(i++);

                        // ChargeToId column, bigint, not null
                        ChargeToId = reader.GetInt64(i++);

                        // ChargeType column, nvarchar(15), not null
                        ChargeType = reader.GetString(i++);

                        // AccountId column, bigint, not null
                        AccountId = reader.GetInt64(i++);

                        // PurchaseQuantity column, decimal(15,6), not null
                        PurchaseQuantity = reader.GetDecimal(i++);

                        // PurchaseUOM column, nvarchar(15), not null
                        PurchaseUOM = reader.GetString(i++);

                        // PurchaseCost column, decimal(15,5), not null
                        PurchaseCost = reader.GetDecimal(i++);

                        // UOMConversion column, decimal(15,6), not null
                        UOMConversion = reader.GetDecimal(i++);

                        // Category column, nvarchar(31), not null
                        Category = reader.GetString(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["ShoppingCartLineItemId"].ToString(); }
            catch { missing.Append("ShoppingCartLineItemId "); }
            
            try { reader["ShoppingCartId"].ToString(); }
            catch { missing.Append("ShoppingCartId "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["RequiredDate"].ToString(); }
            catch { missing.Append("RequiredDate "); }
            
            try { reader["LineNumber"].ToString(); }
            catch { missing.Append("LineNumber "); }
            
            try { reader["PartId"].ToString(); }
            catch { missing.Append("PartId "); }
            
            try { reader["OrderQuantity"].ToString(); }
            catch { missing.Append("OrderQuantity "); }
            
            try { reader["UnitofMeasure"].ToString(); }
            catch { missing.Append("UnitofMeasure "); }
            
            try { reader["UnitCost"].ToString(); }
            catch { missing.Append("UnitCost "); }
            
            try { reader["VendorId"].ToString(); }
            catch { missing.Append("VendorId "); }
            
            try { reader["PurchaseRequestLineItemId"].ToString(); }
            catch { missing.Append("PurchaseRequestLineItemId "); }
            
            try { reader["PurchaseOrderLineItemId"].ToString(); }
            catch { missing.Append("PurchaseOrderLineItemId "); }
            
            try { reader["VendorCatalogItemId"].ToString(); }
            catch { missing.Append("VendorCatalogItemId "); }
            
            try { reader["ChargeToId"].ToString(); }
            catch { missing.Append("ChargeToId "); }
            
            try { reader["ChargeType"].ToString(); }
            catch { missing.Append("ChargeType "); }
            
            try { reader["AccountId"].ToString(); }
            catch { missing.Append("AccountId "); }
            
            try { reader["PurchaseQuantity"].ToString(); }
            catch { missing.Append("PurchaseQuantity "); }
            
            try { reader["PurchaseUOM"].ToString(); }
            catch { missing.Append("PurchaseUOM "); }
            
            try { reader["PurchaseCost"].ToString(); }
            catch { missing.Append("PurchaseCost "); }
            
            try { reader["UOMConversion"].ToString(); }
            catch { missing.Append("UOMConversion "); }
            
            try { reader["Category"].ToString(); }
            catch { missing.Append("Category "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a ShoppingCartLineItem table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ShoppingCartLineItem_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ShoppingCartLineItem table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ShoppingCartLineItem_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ShoppingCartLineItem table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ShoppingCartLineItem_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ShoppingCartLineItem table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ShoppingCartLineItem[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ShoppingCartLineItem[] data
        )
        {
            Database.SqlClient.ProcessRow<b_ShoppingCartLineItem> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ShoppingCartLineItem[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ShoppingCartLineItem>(reader => { b_ShoppingCartLineItem obj = new b_ShoppingCartLineItem(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_ShoppingCartLineItem_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_ShoppingCartLineItem[])results.ToArray(typeof(b_ShoppingCartLineItem));
                }
                else
                {
                    data = new b_ShoppingCartLineItem[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ShoppingCartLineItem table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ShoppingCartLineItem[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_ShoppingCartLineItem> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ShoppingCartLineItem>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_ShoppingCartLineItem_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ShoppingCartLineItem objects.
        /// </summary>
        /// <param name="obj">b_ShoppingCartLineItem object to compare against the current object.</param>
        public bool Equals (b_ShoppingCartLineItem obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (ShoppingCartLineItemId != obj.ShoppingCartLineItemId) return false;
            if (ShoppingCartId != obj.ShoppingCartId) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!RequiredDate.Equals(obj.RequiredDate)) return false;
            if (LineNumber != obj.LineNumber) return false;
            if (PartId != obj.PartId) return false;
            if (OrderQuantity != obj.OrderQuantity) return false;
            if (!UnitofMeasure.Equals(obj.UnitofMeasure)) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (VendorId != obj.VendorId) return false;
            if (PurchaseRequestLineItemId != obj.PurchaseRequestLineItemId) return false;
            if (PurchaseOrderLineItemId != obj.PurchaseOrderLineItemId) return false;
            if (VendorCatalogItemId != obj.VendorCatalogItemId) return false;
            if (ChargeToId != obj.ChargeToId) return false;
            if (!ChargeType.Equals(obj.ChargeType)) return false;
            if (AccountId != obj.AccountId) return false;
            if (PurchaseQuantity != obj.PurchaseQuantity) return false;
            if (!PurchaseUOM.Equals(obj.PurchaseUOM)) return false;
            if (PurchaseCost != obj.PurchaseCost) return false;
            if (UOMConversion != obj.UOMConversion) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ShoppingCartLineItem objects.
        /// </summary>
        /// <param name="obj1">b_ShoppingCartLineItem object to use in the comparison.</param>
        /// <param name="obj2">b_ShoppingCartLineItem object to use in the comparison.</param>
        public static bool Equals (b_ShoppingCartLineItem obj1, b_ShoppingCartLineItem obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
