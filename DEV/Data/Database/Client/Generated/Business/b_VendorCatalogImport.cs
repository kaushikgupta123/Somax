/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the VendorCatalogImport table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_VendorCatalogImport : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_VendorCatalogImport ()
        {
            ClientId = 0;
            VendorCatalogImportId = 0;
            ExVendorId = 0;
            ExVendorNumber = String.Empty;
            ExVendorSiteId = 0;
            ExVendorSiteCode = String.Empty;
            ExSourceId = 0;
            ExSourceDocument = String.Empty;
            StartDate = new System.Nullable<System.DateTime>();
            EndDate = new System.Nullable<System.DateTime>();
            Canceled = String.Empty;
            LineNumber = 0;
            ExLineId = 0;
            ExPartId = 0;
            ExPartNumber = String.Empty;
            Category = String.Empty;
            Description = String.Empty;
            PurchaseUOM = String.Empty;
            UnitCost = 0;
            UnitOfMeasure = String.Empty;
            UOMConversion = 0;
            VendorPartNumber = String.Empty;
            LeadTime = 0;
            MinimumQuantity = 0;
            ExpirationDate = new System.Nullable<System.DateTime>();
            ErrorMessage = String.Empty;
            LastProcessed = new System.Nullable<System.DateTime>();
            UpdateIndex = 0;
        }

        /// <summary>
        /// VendorCatalogImportId property
        /// </summary>
        public long VendorCatalogImportId { get; set; }

        /// <summary>
        /// ExVendorId property
        /// </summary>
        public long ExVendorId { get; set; }

        /// <summary>
        /// ExVendorNumber property
        /// </summary>
        public string ExVendorNumber { get; set; }

        /// <summary>
        /// ExVendorSiteId property
        /// </summary>
        public long ExVendorSiteId { get; set; }

        /// <summary>
        /// ExVendorSiteCode property
        /// </summary>
        public string ExVendorSiteCode { get; set; }

        /// <summary>
        /// ExSourceId property
        /// </summary>
        public long ExSourceId { get; set; }

        /// <summary>
        /// ExSourceDocument property
        /// </summary>
        public string ExSourceDocument { get; set; }

        /// <summary>
        /// StartDate property
        /// </summary>
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// EndDate property
        /// </summary>
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Canceled property
        /// </summary>
        public string Canceled { get; set; }

        /// <summary>
        /// LineNumber property
        /// </summary>
        public int LineNumber { get; set; }

        /// <summary>
        /// ExLineId property
        /// </summary>
        public long ExLineId { get; set; }

        /// <summary>
        /// ExPartId property
        /// </summary>
        public long ExPartId { get; set; }

        /// <summary>
        /// ExPartNumber property
        /// </summary>
        public string ExPartNumber { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        public string PurchaseUOM { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        public decimal UOMConversion { get; set; }

        /// <summary>
        /// VendorPartNumber property
        /// </summary>
        public string VendorPartNumber { get; set; }

        /// <summary>
        /// LeadTime property
        /// </summary>
        public int LeadTime { get; set; }

        /// <summary>
        /// MinimumQuantity property
        /// </summary>
        public int MinimumQuantity { get; set; }

        /// <summary>
        /// ExpirationDate property
        /// </summary>
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        public string ErrorMessage { get; set; }

        /// <summary>
        /// LastProcessed property
        /// </summary>
        public DateTime? LastProcessed { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_VendorCatalogImport object.
        /// This routine should be applied to the usp_VendorCatalogImport_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorCatalogImport_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_VendorCatalogImport object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_VendorCatalogImport obj = new b_VendorCatalogImport();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_VendorCatalogImport object.
        /// This routine should be applied to the usp_VendorCatalogImport_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorCatalogImport_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // VendorCatalogImportId column, bigint, not null
                        VendorCatalogImportId = reader.GetInt64(i++);

                        // ExVendorId column, int, not null
                        ExVendorId = reader.GetInt64(i++);

                        // ExVendorNumber column, nvarchar(31), not null
                        ExVendorNumber = reader.GetString(i++);

                        // ExVendorSiteId column, int, not null
                        ExVendorSiteId = reader.GetInt64(i++);

                        // ExVendorSiteCode column, nvarchar(15), not null
                        ExVendorSiteCode = reader.GetString(i++);

                        // ExSourceId column, int, not null
                        ExSourceId = reader.GetInt64(i++);

                        // ExSourceDocument column, nvarchar(20), not null
                        ExSourceDocument = reader.GetString(i++);

            // StartDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    StartDate = reader.GetDateTime(i);
            }
            else
            {
                    StartDate = DateTime.MinValue;
            }
            i++;
            // EndDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    EndDate = reader.GetDateTime(i);
            }
            else
            {
                    EndDate = DateTime.MinValue;
            }
            i++;
                        // Canceled column, nvarchar(1), not null
                        Canceled = reader.GetString(i++);

                        // LineNumber column, int, not null
                        LineNumber = reader.GetInt32(i++);

                        // ExLineId column, int, not null
                        ExLineId = reader.GetInt64(i++);

                        // ExPartId column, int, not null
                        ExPartId = reader.GetInt64(i++);

                        // ExPartNumber column, nvarchar(63), not null
                        ExPartNumber = reader.GetString(i++);

                        // Category column, nvarchar(31), not null
                        Category = reader.GetString(i++);

                        // Description column, nvarchar(511), not null
                        Description = reader.GetString(i++);

                        // PurchaseUOM column, nvarchar(15), not null
                        PurchaseUOM = reader.GetString(i++);

                        // UnitCost column, decimal(15,5), not null
                        UnitCost = reader.GetDecimal(i++);

                        // UnitOfMeasure column, nvarchar(15), not null
                        UnitOfMeasure = reader.GetString(i++);

                        // UOMConversion column, decimal(15,5), not null
                        UOMConversion = reader.GetDecimal(i++);

                        // VendorPartNumber column, nvarchar(63), not null
                        VendorPartNumber = reader.GetString(i++);

                        // LeadTime column, int, not null
                        LeadTime = reader.GetInt32(i++);

                        // MinimumQuantity column, int, not null
                        MinimumQuantity = reader.GetInt32(i++);

            // ExpirationDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ExpirationDate = reader.GetDateTime(i);
            }
            else
            {
                    ExpirationDate = DateTime.MinValue;
            }
            i++;
                        // ErrorMessage column, nvarchar(511), not null
                        ErrorMessage = reader.GetString(i++);

            // LastProcessed column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastProcessed = reader.GetDateTime(i);
            }
            else
            {
                    LastProcessed = DateTime.MinValue;
            }
            i++;
                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["VendorCatalogImportId"].ToString(); }
            catch { missing.Append("VendorCatalogImportId "); }
            
            try { reader["ExVendorId"].ToString(); }
            catch { missing.Append("ExVendorId "); }
            
            try { reader["ExVendorNumber"].ToString(); }
            catch { missing.Append("ExVendorNumber "); }
            
            try { reader["ExVendorSiteId"].ToString(); }
            catch { missing.Append("ExVendorSiteId "); }
            
            try { reader["ExVendorSiteCode"].ToString(); }
            catch { missing.Append("ExVendorSiteCode "); }
            
            try { reader["ExSourceId"].ToString(); }
            catch { missing.Append("ExSourceId "); }
            
            try { reader["ExSourceDocument"].ToString(); }
            catch { missing.Append("ExSourceDocument "); }
            
            try { reader["StartDate"].ToString(); }
            catch { missing.Append("StartDate "); }
            
            try { reader["EndDate"].ToString(); }
            catch { missing.Append("EndDate "); }
            
            try { reader["Canceled"].ToString(); }
            catch { missing.Append("Canceled "); }
            
            try { reader["LineNumber"].ToString(); }
            catch { missing.Append("LineNumber "); }
            
            try { reader["ExLineId"].ToString(); }
            catch { missing.Append("ExLineId "); }
            
            try { reader["ExPartId"].ToString(); }
            catch { missing.Append("ExPartId "); }
            
            try { reader["ExPartNumber"].ToString(); }
            catch { missing.Append("ExPartNumber "); }
            
            try { reader["Category"].ToString(); }
            catch { missing.Append("Category "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["PurchaseUOM"].ToString(); }
            catch { missing.Append("PurchaseUOM "); }
            
            try { reader["UnitCost"].ToString(); }
            catch { missing.Append("UnitCost "); }
            
            try { reader["UnitOfMeasure"].ToString(); }
            catch { missing.Append("UnitOfMeasure "); }
            
            try { reader["UOMConversion"].ToString(); }
            catch { missing.Append("UOMConversion "); }
            
            try { reader["VendorPartNumber"].ToString(); }
            catch { missing.Append("VendorPartNumber "); }
            
            try { reader["LeadTime"].ToString(); }
            catch { missing.Append("LeadTime "); }
            
            try { reader["MinimumQuantity"].ToString(); }
            catch { missing.Append("MinimumQuantity "); }
            
            try { reader["ExpirationDate"].ToString(); }
            catch { missing.Append("ExpirationDate "); }
            
            try { reader["ErrorMessage"].ToString(); }
            catch { missing.Append("ErrorMessage "); }
            
            try { reader["LastProcessed"].ToString(); }
            catch { missing.Append("LastProcessed "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a VendorCatalogImport table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalogImport_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the VendorCatalogImport table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalogImport_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the VendorCatalogImport table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalogImport_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all VendorCatalogImport table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_VendorCatalogImport[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_VendorCatalogImport[] data
        )
        {
            Database.SqlClient.ProcessRow<b_VendorCatalogImport> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_VendorCatalogImport[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorCatalogImport>(reader => { b_VendorCatalogImport obj = new b_VendorCatalogImport(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_VendorCatalogImport_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_VendorCatalogImport[])results.ToArray(typeof(b_VendorCatalogImport));
                }
                else
                {
                    data = new b_VendorCatalogImport[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve VendorCatalogImport table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_VendorCatalogImport[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_VendorCatalogImport> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorCatalogImport>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_VendorCatalogImport_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_VendorCatalogImport objects.
        /// </summary>
        /// <param name="obj">b_VendorCatalogImport object to compare against the current object.</param>
        public bool Equals (b_VendorCatalogImport obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (VendorCatalogImportId != obj.VendorCatalogImportId) return false;
            if (ExVendorId != obj.ExVendorId) return false;
            if (!ExVendorNumber.Equals(obj.ExVendorNumber)) return false;
            if (ExVendorSiteId != obj.ExVendorSiteId) return false;
            if (!ExVendorSiteCode.Equals(obj.ExVendorSiteCode)) return false;
            if (ExSourceId != obj.ExSourceId) return false;
            if (!ExSourceDocument.Equals(obj.ExSourceDocument)) return false;
            if (!StartDate.Equals(obj.StartDate)) return false;
            if (!EndDate.Equals(obj.EndDate)) return false;
            if (!Canceled.Equals(obj.Canceled)) return false;
            if (LineNumber != obj.LineNumber) return false;
            if (ExLineId != obj.ExLineId) return false;
            if (ExPartId != obj.ExPartId) return false;
            if (!ExPartNumber.Equals(obj.ExPartNumber)) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!PurchaseUOM.Equals(obj.PurchaseUOM)) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (!UnitOfMeasure.Equals(obj.UnitOfMeasure)) return false;
            if (UOMConversion != obj.UOMConversion) return false;
            if (!VendorPartNumber.Equals(obj.VendorPartNumber)) return false;
            if (LeadTime != obj.LeadTime) return false;
            if (MinimumQuantity != obj.MinimumQuantity) return false;
            if (!ExpirationDate.Equals(obj.ExpirationDate)) return false;
            if (!ErrorMessage.Equals(obj.ErrorMessage)) return false;
            if (!LastProcessed.Equals(obj.LastProcessed)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_VendorCatalogImport objects.
        /// </summary>
        /// <param name="obj1">b_VendorCatalogImport object to use in the comparison.</param>
        /// <param name="obj2">b_VendorCatalogImport object to use in the comparison.</param>
        public static bool Equals (b_VendorCatalogImport obj1, b_VendorCatalogImport obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
