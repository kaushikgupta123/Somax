/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Project table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Project : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Project ()
        {
            ProjectId = 0;
            ClientId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            ActualFinish = new System.Nullable<System.DateTime>();
            ActualStart = new System.Nullable<System.DateTime>();
            Budget = 0;
            CancelDate = new System.Nullable<System.DateTime>();
            CancelBy_PersonnelId = 0;
            CancelReason = String.Empty;
            CloseDate = new System.Nullable<System.DateTime>();
            CloseBy_PersonnelId = 0;
            CompleteDate = new System.Nullable<System.DateTime>();
            CompleteBy_PersonnelId = 0;
            Coordinator_PersonnelId = 0;
            Description = String.Empty;
            FiscalYear = 0;
            HoldDate = new System.Nullable<System.DateTime>();
            HoldBy_PersonnelId = 0;
            Owner_PersonnelId = 0;
            ReturnFunds = 0;
            ScheduleFinish = new System.Nullable<System.DateTime>();
            ScheduleStart = new System.Nullable<System.DateTime>();
            Status = String.Empty;
            Type = String.Empty;
            Category = String.Empty;
            AssignedAssetGroup1 = 0;
            AssignedAssetGroup2 = 0;
            AssignedAssetGroup3 = 0;
        }

        /// <summary>
        /// ProjectId property
        /// </summary>
        public long ProjectId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// ActualFinish property
        /// </summary>
        public DateTime? ActualFinish { get; set; }

        /// <summary>
        /// ActualStart property
        /// </summary>
        public DateTime? ActualStart { get; set; }

        /// <summary>
        /// Budget property
        /// </summary>
        public decimal Budget { get; set; }

        /// <summary>
        /// CancelDate property
        /// </summary>
        public DateTime? CancelDate { get; set; }

        /// <summary>
        /// CancelBy_PersonnelId property
        /// </summary>
        public long CancelBy_PersonnelId { get; set; }

        /// <summary>
        /// CancelReason property
        /// </summary>
        public string CancelReason { get; set; }

        /// <summary>
        /// CloseDate property
        /// </summary>
        public DateTime? CloseDate { get; set; }

        /// <summary>
        /// CloseBy_PersonnelId property
        /// </summary>
        public long CloseBy_PersonnelId { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        public long CompleteBy_PersonnelId { get; set; }

        /// <summary>
        /// Coordinator_PersonnelId property
        /// </summary>
        public long Coordinator_PersonnelId { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// FiscalYear property
        /// </summary>
        public int FiscalYear { get; set; }

        /// <summary>
        /// HoldDate property
        /// </summary>
        public DateTime? HoldDate { get; set; }

        /// <summary>
        /// HoldBy_PersonnelId property
        /// </summary>
        public long HoldBy_PersonnelId { get; set; }

        /// <summary>
        /// Owner_PersonnelId property
        /// </summary>
        public long Owner_PersonnelId { get; set; }

        /// <summary>
        /// ReturnFunds property
        /// </summary>
        public decimal ReturnFunds { get; set; }

        /// <summary>
        /// ScheduleFinish property
        /// </summary>
        public DateTime? ScheduleFinish { get; set; }

        /// <summary>
        /// ScheduleStart property
        /// </summary>
        public DateTime? ScheduleStart { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// AssignedAssetGroup1 property
        /// </summary>
        public long AssignedAssetGroup1 { get; set; }

        /// <summary>
        /// AssignedAssetGroup2 property
        /// </summary>
        public long AssignedAssetGroup2 { get; set; }

        /// <summary>
        /// AssignedAssetGroup3 property
        /// </summary>
        public long AssignedAssetGroup3 { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Project object.
        /// This routine should be applied to the usp_Project_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Project_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Project object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_Project obj = new b_Project();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Project object.
        /// This routine should be applied to the usp_Project_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Project_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ProjectId column, bigint, not null
                ProjectId = reader.GetInt64(i++);

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(31), not null
                ClientLookupId = reader.GetString(i++);

                // ActualFinish column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ActualFinish = reader.GetDateTime(i);
                }
                else
                {
                    ActualFinish = DateTime.MinValue;
                }
                i++;
                // ActualStart column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ActualStart = reader.GetDateTime(i);
                }
                else
                {
                    ActualStart = DateTime.MinValue;
                }
                i++;
                // Budget column, decimal(15,3), not null
                Budget = reader.GetDecimal(i++);

                // CancelDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CancelDate = reader.GetDateTime(i);
                }
                else
                {
                    CancelDate = DateTime.MinValue;
                }
                i++;
                // CancelBy_PersonnelId column, bigint, not null
                CancelBy_PersonnelId = reader.GetInt64(i++);

                // CancelReason column, nvarchar(15), not null
                CancelReason = reader.GetString(i++);

                // CloseDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CloseDate = reader.GetDateTime(i);
                }
                else
                {
                    CloseDate = DateTime.MinValue;
                }
                i++;
                // CloseBy_PersonnelId column, bigint, not null
                CloseBy_PersonnelId = reader.GetInt64(i++);

                // CompleteDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CompleteDate = reader.GetDateTime(i);
                }
                else
                {
                    CompleteDate = DateTime.MinValue;
                }
                i++;
                // CompleteBy_PersonnelId column, bigint, not null
                CompleteBy_PersonnelId = reader.GetInt64(i++);

                // Coordinator_PersonnelId column, bigint, not null
                Coordinator_PersonnelId = reader.GetInt64(i++);

                // Description column, nvarchar(MAX), not null
                Description = reader.GetString(i++);

                // FiscalYear column, int, not null
                FiscalYear = reader.GetInt32(i++);

                // HoldDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    HoldDate = reader.GetDateTime(i);
                }
                else
                {
                    HoldDate = DateTime.MinValue;
                }
                i++;
                // HoldBy_PersonnelId column, bigint, not null
                HoldBy_PersonnelId = reader.GetInt64(i++);

                // Owner_PersonnelId column, bigint, not null
                Owner_PersonnelId = reader.GetInt64(i++);

                // ReturnFunds column, decimal(15,3), not null
                ReturnFunds = reader.GetDecimal(i++);

                // ScheduleFinish column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ScheduleFinish = reader.GetDateTime(i);
                }
                else
                {
                    ScheduleFinish = DateTime.MinValue;
                }
                i++;
                // ScheduleStart column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ScheduleStart = reader.GetDateTime(i);
                }
                else
                {
                    ScheduleStart = DateTime.MinValue;
                }
                i++;
                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // Type column, nvarchar(15), not null
                Type = reader.GetString(i++);

                // Category column, nvarchar(15), not null
                Category = reader.GetString(i++);

                // AssignedAssetGroup1 column, bigint, not null
                AssignedAssetGroup1 = reader.GetInt64(i++);

                // AssignedAssetGroup2 column, bigint, not null
                AssignedAssetGroup2 = reader.GetInt64(i++);

                // AssignedAssetGroup3 column, bigint, not null
                AssignedAssetGroup3 = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ProjectId"].ToString(); }
                catch { missing.Append("ProjectId "); }

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["ActualFinish"].ToString(); }
                catch { missing.Append("ActualFinish "); }

                try { reader["ActualStart"].ToString(); }
                catch { missing.Append("ActualStart "); }

                try { reader["Budget"].ToString(); }
                catch { missing.Append("Budget "); }

                try { reader["CancelDate"].ToString(); }
                catch { missing.Append("CancelDate "); }

                try { reader["CancelBy_PersonnelId"].ToString(); }
                catch { missing.Append("CancelBy_PersonnelId "); }

                try { reader["CancelReason"].ToString(); }
                catch { missing.Append("CancelReason "); }

                try { reader["CloseDate"].ToString(); }
                catch { missing.Append("CloseDate "); }

                try { reader["CloseBy_PersonnelId"].ToString(); }
                catch { missing.Append("CloseBy_PersonnelId "); }

                try { reader["CompleteDate"].ToString(); }
                catch { missing.Append("CompleteDate "); }

                try { reader["CompleteBy_PersonnelId"].ToString(); }
                catch { missing.Append("CompleteBy_PersonnelId "); }

                try { reader["Coordinator_PersonnelId"].ToString(); }
                catch { missing.Append("Coordinator_PersonnelId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["FiscalYear"].ToString(); }
                catch { missing.Append("FiscalYear "); }

                try { reader["HoldDate"].ToString(); }
                catch { missing.Append("HoldDate "); }

                try { reader["HoldBy_PersonnelId"].ToString(); }
                catch { missing.Append("HoldBy_PersonnelId "); }

                try { reader["Owner_PersonnelId"].ToString(); }
                catch { missing.Append("Owner_PersonnelId "); }

                try { reader["ReturnFunds"].ToString(); }
                catch { missing.Append("ReturnFunds "); }

                try { reader["ScheduleFinish"].ToString(); }
                catch { missing.Append("ScheduleFinish "); }

                try { reader["ScheduleStart"].ToString(); }
                catch { missing.Append("ScheduleStart "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["Category"].ToString(); }
                catch { missing.Append("Category "); }

                try { reader["AssignedAssetGroup1"].ToString(); }
                catch { missing.Append("AssignedAssetGroup1 "); }

                try { reader["AssignedAssetGroup2"].ToString(); }
                catch { missing.Append("AssignedAssetGroup2 "); }

                try { reader["AssignedAssetGroup3"].ToString(); }
                catch { missing.Append("AssignedAssetGroup3 "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Project table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Project_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Project table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Project_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Project table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Project_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Project table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Project[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Project[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Project> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Project[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Project>(reader => { b_Project obj = new b_Project(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Project_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Project[])results.ToArray(typeof(b_Project));
                }
                else
                {
                    data = new b_Project[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Project table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Project[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Project> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Project>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Project_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Project objects.
        /// </summary>
        /// <param name="obj">b_Project object to compare against the current object.</param>
        public bool Equals (b_Project obj)
        {
            if (ProjectId != obj.ProjectId) return false;
            if (ClientId != obj.ClientId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!ActualFinish.Equals(obj.ActualFinish)) return false;
            if (!ActualStart.Equals(obj.ActualStart)) return false;
            if (Budget != obj.Budget) return false;
            if (!CancelDate.Equals(obj.CancelDate)) return false;
            if (CancelBy_PersonnelId != obj.CancelBy_PersonnelId) return false;
            if (!CancelReason.Equals(obj.CancelReason)) return false;
            if (!CloseDate.Equals(obj.CloseDate)) return false;
            if (CloseBy_PersonnelId != obj.CloseBy_PersonnelId) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (CompleteBy_PersonnelId != obj.CompleteBy_PersonnelId) return false;
            if (Coordinator_PersonnelId != obj.Coordinator_PersonnelId) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (FiscalYear != obj.FiscalYear) return false;
            if (!HoldDate.Equals(obj.HoldDate)) return false;
            if (HoldBy_PersonnelId != obj.HoldBy_PersonnelId) return false;
            if (Owner_PersonnelId != obj.Owner_PersonnelId) return false;
            if (ReturnFunds != obj.ReturnFunds) return false;
            if (!ScheduleFinish.Equals(obj.ScheduleFinish)) return false;
            if (!ScheduleStart.Equals(obj.ScheduleStart)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (AssignedAssetGroup1 != obj.AssignedAssetGroup1) return false;
            if (AssignedAssetGroup2 != obj.AssignedAssetGroup2) return false;
            if (AssignedAssetGroup3 != obj.AssignedAssetGroup3) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Project objects.
        /// </summary>
        /// <param name="obj1">b_Project object to use in the comparison.</param>
        /// <param name="obj2">b_Project object to use in the comparison.</param>
        public static bool Equals (b_Project obj1, b_Project obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
