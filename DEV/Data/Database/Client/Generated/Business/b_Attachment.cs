/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;


namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Attachment table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Attachment : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Attachment()
        {
            ClientId = 0;
            AttachmentId = 0;
            ObjectName = String.Empty;
            ObjectId = 0;
            AttachmentURL = String.Empty;
            UploadedBy_PersonnelId = 0;
            Description = String.Empty;
            FileName = String.Empty;
            FileType = String.Empty;
            Image = false;
            Profile = false;
            External = false;
            Reference = false;
            ContentType = String.Empty;
            FileSize = 0;
            PrintwithForm = false;
            UpdateIndex = 0;
        }

        /// <summary>
        /// AttachmentId property
        /// </summary>
        public long AttachmentId { get; set; }

        /// <summary>
        /// ObjectName property
        /// </summary>
        public string ObjectName { get; set; }

        /// <summary>
        /// ObjectId property
        /// </summary>
        public long ObjectId { get; set; }

        /// <summary>
        /// AttachmentURL property
        /// </summary>
        public string AttachmentURL { get; set; }

        /// <summary>
        /// UploadedBy_PersonnelId property
        /// </summary>
        public long UploadedBy_PersonnelId { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// FileName property
        /// </summary>
        public string FileName { get; set; }

        /// <summary>
        /// FileType property
        /// </summary>
        public string FileType { get; set; }

        /// <summary>
        /// Image property
        /// </summary>
        public bool Image { get; set; }

        /// <summary>
        /// Profile property
        /// </summary>
        public bool Profile { get; set; }

        /// <summary>
        /// External property
        /// </summary>
        public bool External { get; set; }

        /// <summary>
        /// Reference property
        /// </summary>
        public bool Reference { get; set; }

        /// <summary>
        /// ContentType property
        /// </summary>
        public string ContentType { get; set; }

        /// <summary>
        /// FileSize property
        /// </summary>
        public int FileSize { get; set; }

        /// <summary>
        /// PrintwithForm property
        /// </summary>
        public bool PrintwithForm { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Attachment object.
        /// This routine should be applied to the usp_Attachment_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Attachment_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Attachment object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_Attachment obj = new b_Attachment();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Attachment object.
        /// This routine should be applied to the usp_Attachment_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Attachment_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // AttachmentId column, bigint, not null
                AttachmentId = reader.GetInt64(i++);

                // ObjectName column, nvarchar(31), not null
                ObjectName = reader.GetString(i++);

                // ObjectId column, bigint, not null
                ObjectId = reader.GetInt64(i++);

                // AttachmentURL column, nvarchar(511), not null
                AttachmentURL = reader.GetString(i++);

                // UploadedBy_PersonnelId column, bigint, not null
                UploadedBy_PersonnelId = reader.GetInt64(i++);

                // Description column, nvarchar(254), not null
                Description = reader.GetString(i++);

                // FileName column, nvarchar(511), not null
                FileName = reader.GetString(i++);

                // FileType column, nvarchar(15), not null
                FileType = reader.GetString(i++);

                // Image column, bit, not null
                Image = reader.GetBoolean(i++);

                // Profile column, bit, not null
                Profile = reader.GetBoolean(i++);

                // External column, bit, not null
                External = reader.GetBoolean(i++);

                // Reference column, bit, not null
                Reference = reader.GetBoolean(i++);

                // ContentType column, nvarchar(127), not null
                ContentType = reader.GetString(i++);

                // FileSize column, int, not null
                FileSize = reader.GetInt32(i++);

                // PrintwithForm column, bit, not null
                PrintwithForm = reader.GetBoolean(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["AttachmentId"].ToString(); }
                catch { missing.Append("AttachmentId "); }

                try { reader["ObjectName"].ToString(); }
                catch { missing.Append("ObjectName "); }

                try { reader["ObjectId"].ToString(); }
                catch { missing.Append("ObjectId "); }

                try { reader["AttachmentURL"].ToString(); }
                catch { missing.Append("AttachmentURL "); }

                try { reader["UploadedBy_PersonnelId"].ToString(); }
                catch { missing.Append("UploadedBy_PersonnelId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["FileName"].ToString(); }
                catch { missing.Append("FileName "); }

                try { reader["FileType"].ToString(); }
                catch { missing.Append("FileType "); }

                try { reader["Image"].ToString(); }
                catch { missing.Append("Image "); }

                try { reader["Profile"].ToString(); }
                catch { missing.Append("Profile "); }

                try { reader["External"].ToString(); }
                catch { missing.Append("External "); }

                try { reader["Reference"].ToString(); }
                catch { missing.Append("Reference "); }

                try { reader["ContentType"].ToString(); }
                catch { missing.Append("ContentType "); }

                try { reader["FileSize"].ToString(); }
                catch { missing.Append("FileSize "); }

                try { reader["PrintwithForm"].ToString(); }
                catch { missing.Append("PrintwithForm "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Attachment table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
               Database.StoredProcedure.usp_Attachment_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Attachment table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Attachment_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Attachment table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Attachment_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Attachment table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Attachment[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Attachment[] data
        )
        {
           Database.SqlClient.ProcessRow<b_Attachment> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Attachment[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Attachment>(reader => { b_Attachment obj = new b_Attachment(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Attachment_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Attachment[])results.ToArray(typeof(b_Attachment));
                }
                else
                {
                    data = new b_Attachment[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Attachment table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Attachment[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Attachment> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Attachment>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Attachment_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Attachment objects.
        /// </summary>
        /// <param name="obj">b_Attachment object to compare against the current object.</param>
        public bool Equals(b_Attachment obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (AttachmentId != obj.AttachmentId) return false;
            if (!ObjectName.Equals(obj.ObjectName)) return false;
            if (ObjectId != obj.ObjectId) return false;
            if (!AttachmentURL.Equals(obj.AttachmentURL)) return false;
            if (UploadedBy_PersonnelId != obj.UploadedBy_PersonnelId) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!FileName.Equals(obj.FileName)) return false;
            if (!FileType.Equals(obj.FileType)) return false;
            if (Image != obj.Image) return false;
            if (Profile != obj.Profile) return false;
            if (External != obj.External) return false;
            if (Reference != obj.Reference) return false;
            if (!ContentType.Equals(obj.ContentType)) return false;
            if (FileSize != obj.FileSize) return false;
            if (PrintwithForm != obj.PrintwithForm) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Attachment objects.
        /// </summary>
        /// <param name="obj1">b_Attachment object to use in the comparison.</param>
        /// <param name="obj2">b_Attachment object to use in the comparison.</param>
        public static bool Equals(b_Attachment obj1, b_Attachment obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
