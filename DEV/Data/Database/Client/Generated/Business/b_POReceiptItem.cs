/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the POReceiptItem table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_POReceiptItem : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_POReceiptItem ()
        {
            ClientId = 0;
            POReceiptItemId = 0;
            POReceiptHeaderId = 0;
            PurchaseOrderLineItemId = 0;
            AccountId = 0;
            Invoiced = false;
            QuantityReceived = 0;
            Reversed = false;
            ReversedBy_PersonnelId = 0;
            ReversedComments = String.Empty;
            ReversedDate = new System.Nullable<System.DateTime>();
            UnitCost = 0;
            UnitOfMeasure = String.Empty;
            PurchaseUOM = String.Empty;
            PurchaseCost = 0;
            UOMConversion = 0;
            PurchaseQuantityReceived = 0;
            ExReceiptTxnId = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// POReceiptItemId property
        /// </summary>
        public long POReceiptItemId { get; set; }

        /// <summary>
        /// POReceiptHeaderId property
        /// </summary>
        public long POReceiptHeaderId { get; set; }

        /// <summary>
        /// PurchaseOrderLineItemId property
        /// </summary>
        public long PurchaseOrderLineItemId { get; set; }

        /// <summary>
        /// AccountId property
        /// </summary>
        public long AccountId { get; set; }

        /// <summary>
        /// Invoiced property
        /// </summary>
        public bool Invoiced { get; set; }

        /// <summary>
        /// QuantityReceived property
        /// </summary>
        public decimal QuantityReceived { get; set; }

        /// <summary>
        /// Reversed property
        /// </summary>
        public bool Reversed { get; set; }

        /// <summary>
        /// ReversedBy_PersonnelId property
        /// </summary>
        public long ReversedBy_PersonnelId { get; set; }

        /// <summary>
        /// ReversedComments property
        /// </summary>
        public string ReversedComments { get; set; }

        /// <summary>
        /// ReversedDate property
        /// </summary>
        public DateTime? ReversedDate { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        public string PurchaseUOM { get; set; }

        /// <summary>
        /// PurchaseCost property
        /// </summary>
        public decimal PurchaseCost { get; set; }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        public decimal UOMConversion { get; set; }

        /// <summary>
        /// PurchaseQuantityReceived property
        /// </summary>
        public decimal PurchaseQuantityReceived { get; set; }

        /// <summary>
        /// ExReceiptTxnId property
        /// </summary>
        public long ExReceiptTxnId { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_POReceiptItem object.
        /// This routine should be applied to the usp_POReceiptItem_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POReceiptItem_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_POReceiptItem object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_POReceiptItem obj = new b_POReceiptItem();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_POReceiptItem object.
        /// This routine should be applied to the usp_POReceiptItem_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POReceiptItem_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // POReceiptItemId column, bigint, not null
                        POReceiptItemId = reader.GetInt64(i++);

                        // POReceiptHeaderId column, bigint, not null
                        POReceiptHeaderId = reader.GetInt64(i++);

                        // PurchaseOrderLineItemId column, bigint, not null
                        PurchaseOrderLineItemId = reader.GetInt64(i++);

                        // AccountId column, bigint, not null
                        AccountId = reader.GetInt64(i++);

                        // Invoiced column, bit, not null
                        Invoiced = reader.GetBoolean(i++);

                        // QuantityReceived column, decimal(15,6), not null
                        QuantityReceived = reader.GetDecimal(i++);

                        // Reversed column, bit, not null
                        Reversed = reader.GetBoolean(i++);

                        // ReversedBy_PersonnelId column, bigint, not null
                        ReversedBy_PersonnelId = reader.GetInt64(i++);

                        // ReversedComments column, nvarchar(254), not null
                        ReversedComments = reader.GetString(i++);

            // ReversedDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ReversedDate = reader.GetDateTime(i);
            }
            else
            {
                    ReversedDate = DateTime.MinValue;
            }
            i++;
                        // UnitCost column, decimal(15,5), not null
                        UnitCost = reader.GetDecimal(i++);

                        // UnitOfMeasure column, nvarchar(15), not null
                        UnitOfMeasure = reader.GetString(i++);

                        // PurchaseUOM column, nvarchar(15), not null
                        PurchaseUOM = reader.GetString(i++);

                        // PurchaseCost column, decimal(15,6), not null
                        PurchaseCost = reader.GetDecimal(i++);

                        // UOMConversion column, decimal(15,6), not null
                        UOMConversion = reader.GetDecimal(i++);

                        // PurchaseQuantityReceived column, decimal(15,6), not null
                        PurchaseQuantityReceived = reader.GetDecimal(i++);

                        // ExReceiptTxnId column, int, not null
                        ExReceiptTxnId = reader.GetInt64(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["POReceiptItemId"].ToString(); }
            catch { missing.Append("POReceiptItemId "); }
            
            try { reader["POReceiptHeaderId"].ToString(); }
            catch { missing.Append("POReceiptHeaderId "); }
            
            try { reader["PurchaseOrderLineItemId"].ToString(); }
            catch { missing.Append("PurchaseOrderLineItemId "); }
            
            try { reader["AccountId"].ToString(); }
            catch { missing.Append("AccountId "); }
            
            try { reader["Invoiced"].ToString(); }
            catch { missing.Append("Invoiced "); }
            
            try { reader["QuantityReceived"].ToString(); }
            catch { missing.Append("QuantityReceived "); }
            
            try { reader["Reversed"].ToString(); }
            catch { missing.Append("Reversed "); }
            
            try { reader["ReversedBy_PersonnelId"].ToString(); }
            catch { missing.Append("ReversedBy_PersonnelId "); }
            
            try { reader["ReversedComments"].ToString(); }
            catch { missing.Append("ReversedComments "); }
            
            try { reader["ReversedDate"].ToString(); }
            catch { missing.Append("ReversedDate "); }
            
            try { reader["UnitCost"].ToString(); }
            catch { missing.Append("UnitCost "); }
            
            try { reader["UnitOfMeasure"].ToString(); }
            catch { missing.Append("UnitOfMeasure "); }
            
            try { reader["PurchaseUOM"].ToString(); }
            catch { missing.Append("PurchaseUOM "); }
            
            try { reader["PurchaseCost"].ToString(); }
            catch { missing.Append("PurchaseCost "); }
            
            try { reader["UOMConversion"].ToString(); }
            catch { missing.Append("UOMConversion "); }
            
            try { reader["PurchaseQuantityReceived"].ToString(); }
            catch { missing.Append("PurchaseQuantityReceived "); }
            
            try { reader["ExReceiptTxnId"].ToString(); }
            catch { missing.Append("ExReceiptTxnId "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a POReceiptItem table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptItem_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the POReceiptItem table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptItem_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the POReceiptItem table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptItem_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all POReceiptItem table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_POReceiptItem[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_POReceiptItem[] data
        )
        {
            Database.SqlClient.ProcessRow<b_POReceiptItem> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_POReceiptItem[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POReceiptItem>(reader => { b_POReceiptItem obj = new b_POReceiptItem(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_POReceiptItem_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_POReceiptItem[])results.ToArray(typeof(b_POReceiptItem));
                }
                else
                {
                    data = new b_POReceiptItem[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve POReceiptItem table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_POReceiptItem[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_POReceiptItem> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POReceiptItem>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_POReceiptItem_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_POReceiptItem objects.
        /// </summary>
        /// <param name="obj">b_POReceiptItem object to compare against the current object.</param>
        public bool Equals (b_POReceiptItem obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (POReceiptItemId != obj.POReceiptItemId) return false;
            if (POReceiptHeaderId != obj.POReceiptHeaderId) return false;
            if (PurchaseOrderLineItemId != obj.PurchaseOrderLineItemId) return false;
            if (AccountId != obj.AccountId) return false;
            if (Invoiced != obj.Invoiced) return false;
            if (QuantityReceived != obj.QuantityReceived) return false;
            if (Reversed != obj.Reversed) return false;
            if (ReversedBy_PersonnelId != obj.ReversedBy_PersonnelId) return false;
            if (!ReversedComments.Equals(obj.ReversedComments)) return false;
            if (!ReversedDate.Equals(obj.ReversedDate)) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (!UnitOfMeasure.Equals(obj.UnitOfMeasure)) return false;
            if (!PurchaseUOM.Equals(obj.PurchaseUOM)) return false;
            if (PurchaseCost != obj.PurchaseCost) return false;
            if (UOMConversion != obj.UOMConversion) return false;
            if (PurchaseQuantityReceived != obj.PurchaseQuantityReceived) return false;
            if (ExReceiptTxnId != obj.ExReceiptTxnId) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_POReceiptItem objects.
        /// </summary>
        /// <param name="obj1">b_POReceiptItem object to use in the comparison.</param>
        /// <param name="obj2">b_POReceiptItem object to use in the comparison.</param>
        public static bool Equals (b_POReceiptItem obj1, b_POReceiptItem obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
