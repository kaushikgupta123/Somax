/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the BBUKPI table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_BBUKPI : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_BBUKPI()
        {
            ClientId = 0;
            BBUKPIId = 0;
            SiteId = 0;
            PMWOCompleted = 0;
            WOBacklogCount = 0;
            RCACount = 0;
            TTRCount = 0;
            InvValueOverMax = 0;
            PhyInvAccuracy = 0;
            EVTrainingHrs = 0;
            DownDaySched = false;
            OptPMPlansCompleted = 0;
            OptPMPlansAdopted = 0;
            MLT = 0;
            TrainingPlanImp = false;
            SubmitDate = new System.Nullable<System.DateTime>();
            SubmitBy_PersonnelId = 0;
            Status = String.Empty;
            Week = String.Empty;
            Year = String.Empty;
            CycleCountProgress = 0;
            PMFollowUpComp = 0;
            ActiveMechUsers = 0;
            WeekStart = new System.Nullable<System.DateTime>();
            WeekEnd = new System.Nullable<System.DateTime>();
        }

        /// <summary>
        /// BBUKPIId property
        /// </summary>
        public long BBUKPIId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// PMWOCompleted property
        /// </summary>
        public decimal PMWOCompleted { get; set; }

        /// <summary>
        /// WOBacklogCount property
        /// </summary>
        public int WOBacklogCount { get; set; }

        /// <summary>
        /// RCACount property
        /// </summary>
        public int RCACount { get; set; }

        /// <summary>
        /// TTRCount property
        /// </summary>
        public int TTRCount { get; set; }

        /// <summary>
        /// InvValueOverMax property
        /// </summary>
        public decimal InvValueOverMax { get; set; }

        /// <summary>
        /// PhyInvAccuracy property
        /// </summary>
        public decimal PhyInvAccuracy { get; set; }

        /// <summary>
        /// EVTrainingHrs property
        /// </summary>
        public decimal EVTrainingHrs { get; set; }

        /// <summary>
        /// DownDaySched property
        /// </summary>
        public bool DownDaySched { get; set; }

        /// <summary>
        /// OptPMPlansCompleted property
        /// </summary>
        public int OptPMPlansCompleted { get; set; }

        /// <summary>
        /// OptPMPlansAdopted property
        /// </summary>
        public int OptPMPlansAdopted { get; set; }

        /// <summary>
        /// MLT property
        /// </summary>
        public decimal MLT { get; set; }

        /// <summary>
        /// TrainingPlanImp property
        /// </summary>
        public bool TrainingPlanImp { get; set; }

        /// <summary>
        /// SubmitDate property
        /// </summary>
        public DateTime? SubmitDate { get; set; }

        /// <summary>
        /// SubmitBy_PersonnelId property
        /// </summary>
        public long SubmitBy_PersonnelId { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Week property
        /// </summary>
        public string Week { get; set; }

        /// <summary>
        /// Year property
        /// </summary>
        public string Year { get; set; }

        /// <summary>
        /// CycleCountProgress property
        /// </summary>
        public decimal CycleCountProgress { get; set; }

        /// <summary>
        /// PMFollowUpComp property
        /// </summary>
        public int PMFollowUpComp { get; set; }

        /// <summary>
        /// ActiveMechUsers property
        /// </summary>
        public int ActiveMechUsers { get; set; }

        /// <summary>
        /// WeekStart property
        /// </summary>
        public DateTime? WeekStart { get; set; }

        /// <summary>
        /// WeekEnd property
        /// </summary>
        public DateTime? WeekEnd { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_BBUKPI object.
        /// This routine should be applied to the usp_BBUKPI_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_BBUKPI_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_BBUKPI object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_BBUKPI obj = new b_BBUKPI();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_BBUKPI object.
        /// This routine should be applied to the usp_BBUKPI_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_BBUKPI_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // BBUKPIId column, bigint, not null
                BBUKPIId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // PMWOCompleted column, decimal(6,3), not null
                PMWOCompleted = reader.GetDecimal(i++);

                // WOBacklogCount column, int, not null
                WOBacklogCount = reader.GetInt32(i++);

                // RCACount column, int, not null
                RCACount = reader.GetInt32(i++);

                // TTRCount column, int, not null
                TTRCount = reader.GetInt32(i++);

                // InvValueOverMax column, decimal(18,2), not null
                InvValueOverMax = reader.GetDecimal(i++);

                // PhyInvAccuracy column, decimal(6,3), not null
                PhyInvAccuracy = reader.GetDecimal(i++);

                // EVTrainingHrs column, decimal(8,2), not null
                EVTrainingHrs = reader.GetDecimal(i++);

                // DownDaySched column, bit, not null
                DownDaySched = reader.GetBoolean(i++);

                // OptPMPlansCompleted column, int, not null
                OptPMPlansCompleted = reader.GetInt32(i++);

                // OptPMPlansAdopted column, int, not null
                OptPMPlansAdopted = reader.GetInt32(i++);

                // MLT column, decimal(6,3), not null
                MLT = reader.GetDecimal(i++);

                // TrainingPlanImp column, bit, not null
                TrainingPlanImp = reader.GetBoolean(i++);

                // SubmitDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    SubmitDate = reader.GetDateTime(i);
                }
                else
                {
                    SubmitDate = DateTime.MinValue;
                }
                i++;
                // SubmitBy_PersonnelId column, bigint, not null
                SubmitBy_PersonnelId = reader.GetInt64(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // Week column, nvarchar(2), not null
                Week = reader.GetString(i++);

                // Year column, nvarchar(4), not null
                Year = reader.GetString(i++);

                // CycleCountProgress column, decimal(6,3), not null
                CycleCountProgress = reader.GetDecimal(i++);

                // PMFollowUpComp column, int, not null
                PMFollowUpComp = reader.GetInt32(i++);

                // ActiveMechUsers column, int, not null
                ActiveMechUsers = reader.GetInt32(i++);

                // WeekStart column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    WeekStart = reader.GetDateTime(i);
                }
                else
                {
                    WeekStart = DateTime.MinValue;
                }
                i++;
                // WeekEnd column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    WeekEnd = reader.GetDateTime(i);
                }
                else
                {
                    WeekEnd = DateTime.MinValue;
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["BBUKPIId"].ToString(); }
                catch { missing.Append("BBUKPIId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["PMWOCompleted"].ToString(); }
                catch { missing.Append("PMWOCompleted "); }

                try { reader["WOBacklogCount"].ToString(); }
                catch { missing.Append("WOBacklogCount "); }

                try { reader["RCACount"].ToString(); }
                catch { missing.Append("RCACount "); }

                try { reader["TTRCount"].ToString(); }
                catch { missing.Append("TTRCount "); }

                try { reader["InvValueOverMax"].ToString(); }
                catch { missing.Append("InvValueOverMax "); }

                try { reader["PhyInvAccuracy"].ToString(); }
                catch { missing.Append("PhyInvAccuracy "); }

                try { reader["EVTrainingHrs"].ToString(); }
                catch { missing.Append("EVTrainingHrs "); }

                try { reader["DownDaySched"].ToString(); }
                catch { missing.Append("DownDaySched "); }

                try { reader["OptPMPlansCompleted"].ToString(); }
                catch { missing.Append("OptPMPlansCompleted "); }

                try { reader["OptPMPlansAdopted"].ToString(); }
                catch { missing.Append("OptPMPlansAdopted "); }

                try { reader["MLT"].ToString(); }
                catch { missing.Append("MLT "); }

                try { reader["TrainingPlanImp"].ToString(); }
                catch { missing.Append("TrainingPlanImp "); }

                try { reader["SubmitDate"].ToString(); }
                catch { missing.Append("SubmitDate "); }

                try { reader["SubmitBy_PersonnelId"].ToString(); }
                catch { missing.Append("SubmitBy_PersonnelId "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["Week"].ToString(); }
                catch { missing.Append("Week "); }

                try { reader["Year"].ToString(); }
                catch { missing.Append("Year "); }

                try { reader["CycleCountProgress"].ToString(); }
                catch { missing.Append("CycleCountProgress "); }

                try { reader["PMFollowUpComp"].ToString(); }
                catch { missing.Append("PMFollowUpComp "); }

                try { reader["ActiveMechUsers"].ToString(); }
                catch { missing.Append("ActiveMechUsers "); }

                try { reader["WeekStart"].ToString(); }
                catch { missing.Append("WeekStart "); }

                try { reader["WeekEnd"].ToString(); }
                catch { missing.Append("WeekEnd "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a BBUKPI table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_BBUKPI_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the BBUKPI table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_BBUKPI_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the BBUKPI table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_BBUKPI_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all BBUKPI table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_BBUKPI[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_BBUKPI[] data
        )
        {
            Database.SqlClient.ProcessRow<b_BBUKPI> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_BBUKPI[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_BBUKPI>(reader => { b_BBUKPI obj = new b_BBUKPI(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_BBUKPI_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_BBUKPI[])results.ToArray(typeof(b_BBUKPI));
                }
                else
                {
                    data = new b_BBUKPI[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve BBUKPI table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_BBUKPI[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_BBUKPI> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_BBUKPI>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_BBUKPI_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_BBUKPI objects.
        /// </summary>
        /// <param name="obj">b_BBUKPI object to compare against the current object.</param>
        public bool Equals(b_BBUKPI obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (BBUKPIId != obj.BBUKPIId) return false;
            if (SiteId != obj.SiteId) return false;
            if (PMWOCompleted != obj.PMWOCompleted) return false;
            if (WOBacklogCount != obj.WOBacklogCount) return false;
            if (RCACount != obj.RCACount) return false;
            if (TTRCount != obj.TTRCount) return false;
            if (InvValueOverMax != obj.InvValueOverMax) return false;
            if (PhyInvAccuracy != obj.PhyInvAccuracy) return false;
            if (EVTrainingHrs != obj.EVTrainingHrs) return false;
            if (DownDaySched != obj.DownDaySched) return false;
            if (OptPMPlansCompleted != obj.OptPMPlansCompleted) return false;
            if (OptPMPlansAdopted != obj.OptPMPlansAdopted) return false;
            if (MLT != obj.MLT) return false;
            if (TrainingPlanImp != obj.TrainingPlanImp) return false;
            if (!SubmitDate.Equals(obj.SubmitDate)) return false;
            if (SubmitBy_PersonnelId != obj.SubmitBy_PersonnelId) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!Week.Equals(obj.Week)) return false;
            if (!Year.Equals(obj.Year)) return false;
            if (CycleCountProgress != obj.CycleCountProgress) return false;
            if (PMFollowUpComp != obj.PMFollowUpComp) return false;
            if (ActiveMechUsers != obj.ActiveMechUsers) return false;
            if (!WeekStart.Equals(obj.WeekStart)) return false;
            if (!WeekEnd.Equals(obj.WeekEnd)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_BBUKPI objects.
        /// </summary>
        /// <param name="obj1">b_BBUKPI object to use in the comparison.</param>
        /// <param name="obj2">b_BBUKPI object to use in the comparison.</param>
        public static bool Equals(b_BBUKPI obj1, b_BBUKPI obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
