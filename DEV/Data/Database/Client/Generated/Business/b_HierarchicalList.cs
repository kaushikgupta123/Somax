/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the HierarchicalList table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_HierarchicalList : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_HierarchicalList ()
        {
            HierarchicalListId = 0;
            ClientId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ListName = String.Empty;
            Level1Value = String.Empty;
            Level1Description = String.Empty;
            Level2Value = String.Empty;
            Level2Description = String.Empty;
            Level3Value = String.Empty;
            Level3Description = String.Empty;
            Level4Value = String.Empty;
            Level4Description = String.Empty;
            InactiveFlag = false;
            Language = String.Empty;
            Culture = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// HierarchicalListId property
        /// </summary>
        public long HierarchicalListId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ListName property
        /// </summary>
        public string ListName { get; set; }

        /// <summary>
        /// Level1Value property
        /// </summary>
        public string Level1Value { get; set; }

        /// <summary>
        /// Level1Description property
        /// </summary>
        public string Level1Description { get; set; }

        /// <summary>
        /// Level2Value property
        /// </summary>
        public string Level2Value { get; set; }

        /// <summary>
        /// Level2Description property
        /// </summary>
        public string Level2Description { get; set; }

        /// <summary>
        /// Level3Value property
        /// </summary>
        public string Level3Value { get; set; }

        /// <summary>
        /// Level3Description property
        /// </summary>
        public string Level3Description { get; set; }

        /// <summary>
        /// Level4Value property
        /// </summary>
        public string Level4Value { get; set; }

        /// <summary>
        /// Level4Description property
        /// </summary>
        public string Level4Description { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// Language property
        /// </summary>
        public string Language { get; set; }

        /// <summary>
        /// Culture property
        /// </summary>
        public string Culture { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_HierarchicalList object.
        /// This routine should be applied to the usp_HierarchicalList_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_HierarchicalList_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_HierarchicalList object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_HierarchicalList obj = new b_HierarchicalList();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_HierarchicalList object.
        /// This routine should be applied to the usp_HierarchicalList_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_HierarchicalList_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // HierarchicalListId column, bigint, not null
                        HierarchicalListId = reader.GetInt64(i++);

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // AreaId column, bigint, not null
                        AreaId = reader.GetInt64(i++);

                        // DepartmentId column, bigint, not null
                        DepartmentId = reader.GetInt64(i++);

                        // StoreroomId column, bigint, not null
                        StoreroomId = reader.GetInt64(i++);

                        // ListName column, nvarchar(15), not null
                        ListName = reader.GetString(i++);

                        // Level1Value column, nvarchar(15), not null
                        Level1Value = reader.GetString(i++);

                        // Level1Description column, nvarchar(63), not null
                        Level1Description = reader.GetString(i++);

                        // Level2Value column, nvarchar(15), not null
                        Level2Value = reader.GetString(i++);

                        // Level2Description column, nvarchar(63), not null
                        Level2Description = reader.GetString(i++);

                        // Level3Value column, nvarchar(15), not null
                        Level3Value = reader.GetString(i++);

                        // Level3Description column, nvarchar(63), not null
                        Level3Description = reader.GetString(i++);

                        // Level4Value column, nvarchar(15), not null
                        Level4Value = reader.GetString(i++);

                        // Level4Description column, nvarchar(63), not null
                        Level4Description = reader.GetString(i++);

                        // InactiveFlag column, bit, not null
                        InactiveFlag = reader.GetBoolean(i++);

                        // Language column, nvarchar(256), not null
                        Language = reader.GetString(i++);

                        // Culture column, nvarchar(256), not null
                        Culture = reader.GetString(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["HierarchicalListId"].ToString(); }
            catch { missing.Append("HierarchicalListId "); }
            
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["AreaId"].ToString(); }
            catch { missing.Append("AreaId "); }
            
            try { reader["DepartmentId"].ToString(); }
            catch { missing.Append("DepartmentId "); }
            
            try { reader["StoreroomId"].ToString(); }
            catch { missing.Append("StoreroomId "); }
            
            try { reader["ListName"].ToString(); }
            catch { missing.Append("ListName "); }
            
            try { reader["Level1Value"].ToString(); }
            catch { missing.Append("Level1Value "); }
            
            try { reader["Level1Description"].ToString(); }
            catch { missing.Append("Level1Description "); }
            
            try { reader["Level2Value"].ToString(); }
            catch { missing.Append("Level2Value "); }
            
            try { reader["Level2Description"].ToString(); }
            catch { missing.Append("Level2Description "); }
            
            try { reader["Level3Value"].ToString(); }
            catch { missing.Append("Level3Value "); }
            
            try { reader["Level3Description"].ToString(); }
            catch { missing.Append("Level3Description "); }
            
            try { reader["Level4Value"].ToString(); }
            catch { missing.Append("Level4Value "); }
            
            try { reader["Level4Description"].ToString(); }
            catch { missing.Append("Level4Description "); }
            
            try { reader["InactiveFlag"].ToString(); }
            catch { missing.Append("InactiveFlag "); }
            
            try { reader["Language"].ToString(); }
            catch { missing.Append("Language "); }
            
            try { reader["Culture"].ToString(); }
            catch { missing.Append("Culture "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a HierarchicalList table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_HierarchicalList_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the HierarchicalList table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_HierarchicalList_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the HierarchicalList table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_HierarchicalList_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all HierarchicalList table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_HierarchicalList[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_HierarchicalList[] data
        )
        {
            Database.SqlClient.ProcessRow<b_HierarchicalList> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_HierarchicalList[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_HierarchicalList>(reader => { b_HierarchicalList obj = new b_HierarchicalList(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_HierarchicalList_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_HierarchicalList[])results.ToArray(typeof(b_HierarchicalList));
                }
                else
                {
                    data = new b_HierarchicalList[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve HierarchicalList table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_HierarchicalList[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_HierarchicalList> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_HierarchicalList>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_HierarchicalList_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_HierarchicalList objects.
        /// </summary>
        /// <param name="obj">b_HierarchicalList object to compare against the current object.</param>
        public bool Equals (b_HierarchicalList obj)
        {
            if (HierarchicalListId != obj.HierarchicalListId) return false;
            if (ClientId != obj.ClientId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ListName.Equals(obj.ListName)) return false;
            if (!Level1Value.Equals(obj.Level1Value)) return false;
            if (!Level1Description.Equals(obj.Level1Description)) return false;
            if (!Level2Value.Equals(obj.Level2Value)) return false;
            if (!Level2Description.Equals(obj.Level2Description)) return false;
            if (!Level3Value.Equals(obj.Level3Value)) return false;
            if (!Level3Description.Equals(obj.Level3Description)) return false;
            if (!Level4Value.Equals(obj.Level4Value)) return false;
            if (!Level4Description.Equals(obj.Level4Description)) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (!Language.Equals(obj.Language)) return false;
            if (!Culture.Equals(obj.Culture)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_HierarchicalList objects.
        /// </summary>
        /// <param name="obj1">b_HierarchicalList object to use in the comparison.</param>
        /// <param name="obj2">b_HierarchicalList object to use in the comparison.</param>
        public static bool Equals (b_HierarchicalList obj1, b_HierarchicalList obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
