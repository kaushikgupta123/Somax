/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartStoreroom table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PartStoreroom : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PartStoreroom()
        {
            ClientId = 0;
            PartStoreroomId = 0;
            PartId = 0;
            StoreroomId = 0;
            CountFrequency = 0;
            LastCounted = new System.Nullable<System.DateTime>();
            Location1_1 = String.Empty;
            Location1_2 = String.Empty;
            Location1_3 = String.Empty;
            Location1_4 = String.Empty;
            Location1_5 = String.Empty;
            QtyMaximum = 0;
            QtyOnHand = 0;
            QtyReorderLevel = 0;
            ReorderMethod = String.Empty;
            LastIssueDate = new System.Nullable<System.DateTime>();
            LastPurchasePrice = 0;
            LastPurchaseDate = new System.Nullable<System.DateTime>();
            Location2_1 = String.Empty;
            Location2_2 = String.Empty;
            Location2_3 = String.Empty;
            Location2_4 = String.Empty;
            Location2_5 = String.Empty;
            Critical = false;
            AutoPurchase = false;
            PartVendorId = 0;
            AutoTransfer = 0;
            AutoTransferIssueStoreroom = 0;
            AutoTransferMaxQty = 0;
            AutoTransferMinQty = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// PartStoreroomId property
        /// </summary>
        public long PartStoreroomId { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// CountFrequency property
        /// </summary>
        public int CountFrequency { get; set; }

        /// <summary>
        /// LastCounted property
        /// </summary>
        public DateTime? LastCounted { get; set; }

        /// <summary>
        /// Location1_1 property
        /// </summary>
        public string Location1_1 { get; set; }

        /// <summary>
        /// Location1_2 property
        /// </summary>
        public string Location1_2 { get; set; }

        /// <summary>
        /// Location1_3 property
        /// </summary>
        public string Location1_3 { get; set; }

        /// <summary>
        /// Location1_4 property
        /// </summary>
        public string Location1_4 { get; set; }

        /// <summary>
        /// Location1_5 property
        /// </summary>
        public string Location1_5 { get; set; }

        /// <summary>
        /// QtyMaximum property
        /// </summary>
        public decimal QtyMaximum { get; set; }

        /// <summary>
        /// QtyOnHand property
        /// </summary>
        public decimal QtyOnHand { get; set; }

        /// <summary>
        /// QtyReorderLevel property
        /// </summary>
        public decimal QtyReorderLevel { get; set; }

        /// <summary>
        /// ReorderMethod property
        /// </summary>
        public string ReorderMethod { get; set; }

        /// <summary>
        /// LastIssueDate property
        /// </summary>
        public DateTime? LastIssueDate { get; set; }

        /// <summary>
        /// LastPurchasePrice property
        /// </summary>
        public decimal LastPurchasePrice { get; set; }

        /// <summary>
        /// LastPurchaseDate property
        /// </summary>
        public DateTime? LastPurchaseDate { get; set; }

        /// <summary>
        /// Location2_1 property
        /// </summary>
        public string Location2_1 { get; set; }

        /// <summary>
        /// Location2_2 property
        /// </summary>
        public string Location2_2 { get; set; }

        /// <summary>
        /// Location2_3 property
        /// </summary>
        public string Location2_3 { get; set; }

        /// <summary>
        /// Location2_4 property
        /// </summary>
        public string Location2_4 { get; set; }

        /// <summary>
        /// Location2_5 property
        /// </summary>
        public string Location2_5 { get; set; }

        /// <summary>
        /// Critical property
        /// </summary>
        public bool Critical { get; set; }

        /// <summary>
        /// AutoPurchase property
        /// </summary>
        public bool AutoPurchase { get; set; }

        /// <summary>
        /// PartVendorId property
        /// </summary>
        public long PartVendorId { get; set; }

        /// <summary>
        /// AutoTransfer property
        /// </summary>
        public long AutoTransfer { get; set; }

        /// <summary>
        /// AutoTransferIssueStoreroom property
        /// </summary>
        public long AutoTransferIssueStoreroom { get; set; }

        /// <summary>
        /// AutoTransferMaxQty property
        /// </summary>
        public decimal AutoTransferMaxQty { get; set; }

        /// <summary>
        /// AutoTransferMinQty property
        /// </summary>
        public decimal AutoTransferMinQty { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PartStoreroom object.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PartStoreroom object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_PartStoreroom obj = new b_PartStoreroom();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PartStoreroom object.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PartStoreroomId column, bigint, not null
                PartStoreroomId = reader.GetInt64(i++);

                // PartId column, bigint, not null
                PartId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // CountFrequency column, int, not null
                CountFrequency = reader.GetInt32(i++);

                // LastCounted column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastCounted = reader.GetDateTime(i);
                }
                else
                {
                    LastCounted = DateTime.MinValue;
                }
                i++;
                // Location1_1 column, nvarchar(31), not null
                Location1_1 = reader.GetString(i++);

                // Location1_2 column, nvarchar(31), not null
                Location1_2 = reader.GetString(i++);

                // Location1_3 column, nvarchar(31), not null
                Location1_3 = reader.GetString(i++);

                // Location1_4 column, nvarchar(31), not null
                Location1_4 = reader.GetString(i++);

                // Location1_5 column, nvarchar(31), not null
                Location1_5 = reader.GetString(i++);

                // QtyMaximum column, decimal(15,6), not null
                QtyMaximum = reader.GetDecimal(i++);

                // QtyOnHand column, decimal(15,6), not null
                QtyOnHand = reader.GetDecimal(i++);

                // QtyReorderLevel column, decimal(15,6), not null
                QtyReorderLevel = reader.GetDecimal(i++);

                // ReorderMethod column, nvarchar(15), not null
                ReorderMethod = reader.GetString(i++);

                // LastIssueDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastIssueDate = reader.GetDateTime(i);
                }
                else
                {
                    LastIssueDate = DateTime.MinValue;
                }
                i++;
                // LastPurchasePrice column, decimal(15,5), not null
                LastPurchasePrice = reader.GetDecimal(i++);

                // LastPurchaseDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastPurchaseDate = reader.GetDateTime(i);
                }
                else
                {
                    LastPurchaseDate = DateTime.MinValue;
                }
                i++;
                // Location2_1 column, nvarchar(31), not null
                Location2_1 = reader.GetString(i++);

                // Location2_2 column, nvarchar(31), not null
                Location2_2 = reader.GetString(i++);

                // Location2_3 column, nvarchar(31), not null
                Location2_3 = reader.GetString(i++);

                // Location2_4 column, nvarchar(31), not null
                Location2_4 = reader.GetString(i++);

                // Location2_5 column, nvarchar(31), not null
                Location2_5 = reader.GetString(i++);

                // Critical column, bit, not null
                Critical = reader.GetBoolean(i++);

                // AutoPurchase column, bit, not null
                AutoPurchase = reader.GetBoolean(i++);

                // PartVendorId column, bigint, not null
                PartVendorId = reader.GetInt64(i++);

                // AutoTransfer column, bigint, not null
                AutoTransfer = reader.GetInt64(i++);

                // AutoTransferIssueStoreroom column, bigint, not null
                AutoTransferIssueStoreroom = reader.GetInt64(i++);

                // AutoTransferMaxQty column, decimal(15,6), not null
                AutoTransferMaxQty = reader.GetDecimal(i++);

                // AutoTransferMinQty column, decimal(15,6), not null
                AutoTransferMinQty = reader.GetDecimal(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["CountFrequency"].ToString(); }
                catch { missing.Append("CountFrequency "); }

                try { reader["LastCounted"].ToString(); }
                catch { missing.Append("LastCounted "); }

                try { reader["Location1_1"].ToString(); }
                catch { missing.Append("Location1_1 "); }

                try { reader["Location1_2"].ToString(); }
                catch { missing.Append("Location1_2 "); }

                try { reader["Location1_3"].ToString(); }
                catch { missing.Append("Location1_3 "); }

                try { reader["Location1_4"].ToString(); }
                catch { missing.Append("Location1_4 "); }

                try { reader["Location1_5"].ToString(); }
                catch { missing.Append("Location1_5 "); }

                try { reader["QtyMaximum"].ToString(); }
                catch { missing.Append("QtyMaximum "); }

                try { reader["QtyOnHand"].ToString(); }
                catch { missing.Append("QtyOnHand "); }

                try { reader["QtyReorderLevel"].ToString(); }
                catch { missing.Append("QtyReorderLevel "); }

                try { reader["ReorderMethod"].ToString(); }
                catch { missing.Append("ReorderMethod "); }

                try { reader["LastIssueDate"].ToString(); }
                catch { missing.Append("LastIssueDate "); }

                try { reader["LastPurchasePrice"].ToString(); }
                catch { missing.Append("LastPurchasePrice "); }

                try { reader["LastPurchaseDate"].ToString(); }
                catch { missing.Append("LastPurchaseDate "); }

                try { reader["Location2_1"].ToString(); }
                catch { missing.Append("Location2_1 "); }

                try { reader["Location2_2"].ToString(); }
                catch { missing.Append("Location2_2 "); }

                try { reader["Location2_3"].ToString(); }
                catch { missing.Append("Location2_3 "); }

                try { reader["Location2_4"].ToString(); }
                catch { missing.Append("Location2_4 "); }

                try { reader["Location2_5"].ToString(); }
                catch { missing.Append("Location2_5 "); }

                try { reader["Critical"].ToString(); }
                catch { missing.Append("Critical "); }

                try { reader["AutoPurchase"].ToString(); }
                catch { missing.Append("AutoPurchase "); }

                try { reader["PartVendorId"].ToString(); }
                catch { missing.Append("PartVendorId "); }

                try { reader["AutoTransfer"].ToString(); }
                catch { missing.Append("AutoTransfer "); }

                try { reader["AutoTransferIssueStoreroom"].ToString(); }
                catch { missing.Append("AutoTransferIssueStoreroom "); }

                try { reader["AutoTransferMaxQty"].ToString(); }
                catch { missing.Append("AutoTransferMaxQty "); }

                try { reader["AutoTransferMinQty"].ToString(); }
                catch { missing.Append("AutoTransferMinQty "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a PartStoreroom table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartStoreroom_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PartStoreroom table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartStoreroom_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PartStoreroom table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartStoreroom_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PartStoreroom table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PartStoreroom[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PartStoreroom[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PartStoreroom> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PartStoreroom[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartStoreroom>(reader => { b_PartStoreroom obj = new b_PartStoreroom(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PartStoreroom_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PartStoreroom[])results.ToArray(typeof(b_PartStoreroom));
                }
                else
                {
                    data = new b_PartStoreroom[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PartStoreroom table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PartStoreroom[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PartStoreroom> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartStoreroom>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PartStoreroom_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PartStoreroom objects.
        /// </summary>
        /// <param name="obj">b_PartStoreroom object to compare against the current object.</param>
        public bool Equals(b_PartStoreroom obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PartStoreroomId != obj.PartStoreroomId) return false;
            if (PartId != obj.PartId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (CountFrequency != obj.CountFrequency) return false;
            if (!LastCounted.Equals(obj.LastCounted)) return false;
            if (!Location1_1.Equals(obj.Location1_1)) return false;
            if (!Location1_2.Equals(obj.Location1_2)) return false;
            if (!Location1_3.Equals(obj.Location1_3)) return false;
            if (!Location1_4.Equals(obj.Location1_4)) return false;
            if (!Location1_5.Equals(obj.Location1_5)) return false;
            if (QtyMaximum != obj.QtyMaximum) return false;
            if (QtyOnHand != obj.QtyOnHand) return false;
            if (QtyReorderLevel != obj.QtyReorderLevel) return false;
            if (!ReorderMethod.Equals(obj.ReorderMethod)) return false;
            if (!LastIssueDate.Equals(obj.LastIssueDate)) return false;
            if (LastPurchasePrice != obj.LastPurchasePrice) return false;
            if (!LastPurchaseDate.Equals(obj.LastPurchaseDate)) return false;
            if (!Location2_1.Equals(obj.Location2_1)) return false;
            if (!Location2_2.Equals(obj.Location2_2)) return false;
            if (!Location2_3.Equals(obj.Location2_3)) return false;
            if (!Location2_4.Equals(obj.Location2_4)) return false;
            if (!Location2_5.Equals(obj.Location2_5)) return false;
            if (Critical != obj.Critical) return false;
            if (AutoPurchase != obj.AutoPurchase) return false;
            if (PartVendorId != obj.PartVendorId) return false;
            if (AutoTransfer != obj.AutoTransfer) return false;
            if (AutoTransferIssueStoreroom != obj.AutoTransferIssueStoreroom) return false;
            if (AutoTransferMaxQty != obj.AutoTransferMaxQty) return false;
            if (AutoTransferMinQty != obj.AutoTransferMinQty) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PartStoreroom objects.
        /// </summary>
        /// <param name="obj1">b_PartStoreroom object to use in the comparison.</param>
        /// <param name="obj2">b_PartStoreroom object to use in the comparison.</param>
        public static bool Equals(b_PartStoreroom obj1, b_PartStoreroom obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
