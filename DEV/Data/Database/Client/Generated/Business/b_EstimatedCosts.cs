/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using DevExpress.Data.Linq.Helpers;


namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the EstimatedCosts table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_EstimatedCosts : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_EstimatedCosts()
        {
            ClientId = 0;
            EstimatedCostsId = 0;
            ObjectType = String.Empty;
            ObjectId = 0;
            Category = String.Empty;
            CategoryId = 0;
            Description = String.Empty;
            Duration = 0;
            UnitCost = 0;
            Quantity = 0;
            Source = String.Empty;
            VendorId = 0;
            UNSPSC = 0;
            Status = String.Empty;
            StoreroomId = 0;
            PartStoreroomId = 0;
            AccountId = 0;
            UnitOfMeasure = String.Empty;
            PurchaseRequestId = 0;
            PurchaseRequestLineItemId = 0;
            PartHistoryId = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// EstimatedCostsId property
        /// </summary>
        public long EstimatedCostsId { get; set; }

        /// <summary>
        /// ObjectType property
        /// </summary>
        public string ObjectType { get; set; }

        /// <summary>
        /// ObjectId property
        /// </summary>
        public long ObjectId { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// CategoryId property
        /// </summary>
        public long CategoryId { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Duration property
        /// </summary>
        public decimal Duration { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// Quantity property
        /// </summary>
        public decimal Quantity { get; set; }

        /// <summary>
        /// Source property
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// VendorId property
        /// </summary>
        public long VendorId { get; set; }

        /// <summary>
        /// UNSPSC property
        /// </summary>
        public long UNSPSC { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// PartStoreroomId property
        /// </summary>
        public long PartStoreroomId { get; set; }

        /// <summary>
        /// AccountId property
        /// </summary>
        public long AccountId { get; set; }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// PurchaseRequestId property
        /// </summary>
        public long PurchaseRequestId { get; set; }

        /// <summary>
        /// PurchaseRequestLineItemId property
        /// </summary>
        public long PurchaseRequestLineItemId { get; set; }

        /// <summary>
        /// PartHistoryId property
        /// </summary>
        public long PartHistoryId { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_EstimatedCosts object.
        /// This routine should be applied to the usp_EstimatedCosts_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_EstimatedCosts_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_EstimatedCosts object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_EstimatedCosts obj = new b_EstimatedCosts();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_EstimatedCosts object.
        /// This routine should be applied to the usp_EstimatedCosts_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_EstimatedCosts_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // EstimatedCostsId column, bigint, not null
                EstimatedCostsId = reader.GetInt64(i++);

                // ObjectType column, nvarchar(15), not null
                ObjectType = reader.GetString(i++);

                // ObjectId column, bigint, not null
                ObjectId = reader.GetInt64(i++);

                // Category column, nvarchar(15), not null
                Category = reader.GetString(i++);

                // CategoryId column, bigint, not null
                CategoryId = reader.GetInt64(i++);

                // Description column, nvarchar(127), not null
                Description = reader.GetString(i++);

                // Duration column, decimal(8,2), not null
                Duration = reader.GetDecimal(i++);

                // UnitCost column, decimal(15,5), not null
                UnitCost = reader.GetDecimal(i++);

                // Quantity column, decimal(10,2), not null
                Quantity = reader.GetDecimal(i++);

                // Source column, nvarchar(15), not null
                Source = reader.GetString(i++);

                // VendorId column, bigint, not null
                VendorId = reader.GetInt64(i++);

                // UNSPSC column, bigint, not null
                UNSPSC = reader.GetInt64(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // PartStoreroomId column, bigint, not null
                PartStoreroomId = reader.GetInt64(i++);

                // AccountId column, bigint, not null
                AccountId = reader.GetInt64(i++);

                // UnitOfMeasure column, nvarchar(15), not null
                UnitOfMeasure = reader.GetString(i++);

                // PurchaseRequestId column, bigint, not null
                PurchaseRequestId = reader.GetInt64(i++);

                // PurchaseRequestLineItemId column, bigint, not null
                PurchaseRequestLineItemId = reader.GetInt64(i++);

                // PartHistoryId column, bigint, not null
                PartHistoryId = reader.GetInt64(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["EstimatedCostsId"].ToString(); }
                catch { missing.Append("EstimatedCostsId "); }

                try { reader["ObjectType"].ToString(); }
                catch { missing.Append("ObjectType "); }

                try { reader["ObjectId"].ToString(); }
                catch { missing.Append("ObjectId "); }

                try { reader["Category"].ToString(); }
                catch { missing.Append("Category "); }

                try { reader["CategoryId"].ToString(); }
                catch { missing.Append("CategoryId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["Duration"].ToString(); }
                catch { missing.Append("Duration "); }

                try { reader["UnitCost"].ToString(); }
                catch { missing.Append("UnitCost "); }

                try { reader["Quantity"].ToString(); }
                catch { missing.Append("Quantity "); }

                try { reader["Source"].ToString(); }
                catch { missing.Append("Source "); }

                try { reader["VendorId"].ToString(); }
                catch { missing.Append("VendorId "); }

                try { reader["UNSPSC"].ToString(); }
                catch { missing.Append("UNSPSC "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["AccountId"].ToString(); }
                catch { missing.Append("AccountId "); }

                try { reader["UnitOfMeasure"].ToString(); }
                catch { missing.Append("UnitOfMeasure "); }

                try { reader["PurchaseRequestId"].ToString(); }
                catch { missing.Append("PurchaseRequestId "); }

                try { reader["PurchaseRequestLineItemId"].ToString(); }
                catch { missing.Append("PurchaseRequestLineItemId "); }

                try { reader["PartHistoryId"].ToString(); }
                catch { missing.Append("PartHistoryId "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a EstimatedCosts table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_EstimatedCosts_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the EstimatedCosts table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_EstimatedCosts_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the EstimatedCosts table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_EstimatedCosts_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all EstimatedCosts table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_EstimatedCosts[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_EstimatedCosts[] data
        )
        {
            Database.SqlClient.ProcessRow<b_EstimatedCosts> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_EstimatedCosts[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_EstimatedCosts>(reader => { b_EstimatedCosts obj = new b_EstimatedCosts(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_EstimatedCosts_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_EstimatedCosts[])results.ToArray(typeof(b_EstimatedCosts));
                }
                else
                {
                    data = new b_EstimatedCosts[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve EstimatedCosts table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_EstimatedCosts[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_EstimatedCosts> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_EstimatedCosts>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_EstimatedCosts_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_EstimatedCosts objects.
        /// </summary>
        /// <param name="obj">b_EstimatedCosts object to compare against the current object.</param>
        public bool Equals(b_EstimatedCosts obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (EstimatedCostsId != obj.EstimatedCostsId) return false;
            if (!ObjectType.Equals(obj.ObjectType)) return false;
            if (ObjectId != obj.ObjectId) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (CategoryId != obj.CategoryId) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (Duration != obj.Duration) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (Quantity != obj.Quantity) return false;
            if (!Source.Equals(obj.Source)) return false;
            if (VendorId != obj.VendorId) return false;
            if (UNSPSC != obj.UNSPSC) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (PartStoreroomId != obj.PartStoreroomId) return false;
            if (AccountId != obj.AccountId) return false;
            if (!UnitOfMeasure.Equals(obj.UnitOfMeasure)) return false;
            if (PurchaseRequestId != obj.PurchaseRequestId) return false;
            if (PurchaseRequestLineItemId != obj.PurchaseRequestLineItemId) return false;
            if (PartHistoryId != obj.PartHistoryId) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_EstimatedCosts objects.
        /// </summary>
        /// <param name="obj1">b_EstimatedCosts object to use in the comparison.</param>
        /// <param name="obj2">b_EstimatedCosts object to use in the comparison.</param>
        public static bool Equals(b_EstimatedCosts obj1, b_EstimatedCosts obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
