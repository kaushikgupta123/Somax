/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ReceiptImpLineHist table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ReceiptImpLineHist : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ReceiptImpLineHist ()
        {
            ClientId = 0;
            ReceiptImpLineHistId = 0;
            ReceiptImpLineId = 0;
            EXReceiptId = 0;
            EXReceiptTxnId = 0;
            EXPOLineID = 0;
            Quantity = 0;
            UnitCost = 0;
            UnitOfMeasure = String.Empty;
            DateProcessed = new System.Nullable<System.DateTime>();
            ReceiptStatus = string.Empty;
        }

        /// <summary>
        /// ReceiptImpLineHistId property
        /// </summary>
        public long ReceiptImpLineHistId { get; set; }

        /// <summary>
        /// ReceiptImpLineId property
        /// </summary>
        public long ReceiptImpLineId { get; set; }

        /// <summary>
        /// EXReceiptId property
        /// </summary>
        public long EXReceiptId { get; set; }

        /// <summary>
        /// EXReceiptTxnId property
        /// </summary>
        public long EXReceiptTxnId { get; set; }

        /// <summary>
        /// EXPOLineID property
        /// </summary>
        public long EXPOLineID { get; set; }

        /// <summary>
        /// Quantity property
        /// </summary>
        public decimal Quantity { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// DateProcessed property
        /// </summary>
        public DateTime? DateProcessed { get; set; }

        /// <summary>
        /// ReceiptStatus property
        /// </summary>
        public string ReceiptStatus { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ReceiptImpLineHist object.
        /// This routine should be applied to the usp_ReceiptImpLineHist_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ReceiptImpLineHist_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ReceiptImpLineHist object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ReceiptImpLineHist obj = new b_ReceiptImpLineHist();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ReceiptImpLineHist object.
        /// This routine should be applied to the usp_ReceiptImpLineHist_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ReceiptImpLineHist_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // ReceiptImpLineHistId column, bigint, not null
                        ReceiptImpLineHistId = reader.GetInt64(i++);

                        // ReceiptImpLineId column, bigint, not null
                        ReceiptImpLineId = reader.GetInt64(i++);

                        // EXReceiptId column, bigint, not null
                        EXReceiptId = reader.GetInt64(i++);

                        // EXReceiptTxnId column, bigint, not null
                        EXReceiptTxnId = reader.GetInt64(i++);

                        // EXPOLineID column, bigint, not null
                        EXPOLineID = reader.GetInt64(i++);

                        // Quantity column, decimal(15,6), not null
                        Quantity = reader.GetDecimal(i++);

                        // UnitCost column, decimal(15,5), not null
                        UnitCost = reader.GetDecimal(i++);

                        // UnitOfMeasure column, nvarchar(15), not null
                        UnitOfMeasure = reader.GetString(i++);

            // DateProcessed column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    DateProcessed = reader.GetDateTime(i);
            }
            else
            {
                    DateProcessed = DateTime.MinValue;
            }
            i++;
                        // ReceiptStatus column, nvarchar(15), not null
                        ReceiptStatus = reader.GetString(i++);

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["ReceiptImpLineHistId"].ToString(); }
            catch { missing.Append("ReceiptImpLineHistId "); }
            
            try { reader["ReceiptImpLineId"].ToString(); }
            catch { missing.Append("ReceiptImpLineId "); }
            
            try { reader["EXReceiptId"].ToString(); }
            catch { missing.Append("EXReceiptId "); }
            
            try { reader["EXReceiptTxnId"].ToString(); }
            catch { missing.Append("EXReceiptTxnId "); }
            
            try { reader["EXPOLineID"].ToString(); }
            catch { missing.Append("EXPOLineID "); }
            
            try { reader["Quantity"].ToString(); }
            catch { missing.Append("Quantity "); }
            
            try { reader["UnitCost"].ToString(); }
            catch { missing.Append("UnitCost "); }
            
            try { reader["UnitOfMeasure"].ToString(); }
            catch { missing.Append("UnitOfMeasure "); }
            
            try { reader["DateProcessed"].ToString(); }
            catch { missing.Append("DateProcessed "); }
            
            try { reader["ReceiptStatus"].ToString(); }
            catch { missing.Append("ReceiptStatus "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a ReceiptImpLineHist table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReceiptImpLineHist_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ReceiptImpLineHist table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReceiptImpLineHist_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ReceiptImpLineHist table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ReceiptImpLineHist_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ReceiptImpLineHist table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ReceiptImpLineHist[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ReceiptImpLineHist[] data
        )
        {
            Database.SqlClient.ProcessRow<b_ReceiptImpLineHist> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ReceiptImpLineHist[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReceiptImpLineHist>(reader => { b_ReceiptImpLineHist obj = new b_ReceiptImpLineHist(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_ReceiptImpLineHist_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_ReceiptImpLineHist[])results.ToArray(typeof(b_ReceiptImpLineHist));
                }
                else
                {
                    data = new b_ReceiptImpLineHist[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ReceiptImpLineHist table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ReceiptImpLineHist[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_ReceiptImpLineHist> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReceiptImpLineHist>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_ReceiptImpLineHist_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ReceiptImpLineHist objects.
        /// </summary>
        /// <param name="obj">b_ReceiptImpLineHist object to compare against the current object.</param>
        public bool Equals (b_ReceiptImpLineHist obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (ReceiptImpLineHistId != obj.ReceiptImpLineHistId) return false;
            if (ReceiptImpLineId != obj.ReceiptImpLineId) return false;
            if (EXReceiptId != obj.EXReceiptId) return false;
            if (EXReceiptTxnId != obj.EXReceiptTxnId) return false;
            if (EXPOLineID != obj.EXPOLineID) return false;
            if (Quantity != obj.Quantity) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (!UnitOfMeasure.Equals(obj.UnitOfMeasure)) return false;
            if (!DateProcessed.Equals(obj.DateProcessed)) return false;
            if (!ReceiptStatus.Equals(obj.ReceiptStatus)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ReceiptImpLineHist objects.
        /// </summary>
        /// <param name="obj1">b_ReceiptImpLineHist object to use in the comparison.</param>
        /// <param name="obj2">b_ReceiptImpLineHist object to use in the comparison.</param>
        public static bool Equals (b_ReceiptImpLineHist obj1, b_ReceiptImpLineHist obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
