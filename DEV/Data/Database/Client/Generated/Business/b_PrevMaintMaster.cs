/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
  /// <summary>
  /// Business object that stores a record from the PrevMaintMaster table.InsertIntoDatabase
  /// </summary>
  [Serializable()]
  public partial class b_PrevMaintMaster : DataBusinessBase
  {
    /// <summary>
    /// Default constructor.
    /// </summary>
    public b_PrevMaintMaster ()
    {
      ClientId = 0;
      PrevMaintMasterId = 0;
      SiteId = 0;
      AreaId = 0;
      DepartmentId = 0;
      StoreroomId = 0;
      ClientLookupId = String.Empty;
      Description = String.Empty;
      InactiveFlag = false;
      JobDuration = 0;
      ScheduleType = String.Empty;
      Type = String.Empty;
      PrevMaintLibraryId = 0;
      PMLibSourceId = 0;
      UpdateIndex = 0;
    }

    /// <summary>
    /// PrevMaintMasterId property
    /// </summary>
    public long PrevMaintMasterId { get; set; }

    /// <summary>
    /// SiteId property
    /// </summary>
    public long SiteId { get; set; }

    /// <summary>
    /// AreaId property
    /// </summary>
    public long AreaId { get; set; }

    /// <summary>
    /// DepartmentId property
    /// </summary>
    public long DepartmentId { get; set; }

    /// <summary>
    /// StoreroomId property
    /// </summary>
    public long StoreroomId { get; set; }

    /// <summary>
    /// ClientLookupId property
    /// </summary>
    public string ClientLookupId { get; set; }

    /// <summary>
    /// Description property
    /// </summary>
    public string Description { get; set; }

    /// <summary>
    /// InactiveFlag property
    /// </summary>
    public bool InactiveFlag { get; set; }

    /// <summary>
    /// JobDuration property
    /// </summary>
    public decimal JobDuration { get; set; }

    /// <summary>
    /// ScheduleType property
    /// </summary>
    public string ScheduleType { get; set; }

    /// <summary>
    /// Type property
    /// </summary>
    public string Type { get; set; }

    /// <summary>
    /// PrevMaintLibraryId property
    /// </summary>
    public long PrevMaintLibraryId { get; set; }

    /// <summary>
    /// PMLibSourceId property
    /// </summary>
    public long PMLibSourceId { get; set; }

    /// <summary>
    /// UpdateIndex property
    /// </summary>
    public int UpdateIndex { get; set; }

    /// <summary>
    /// Process the current row in the input SqlDataReader into a b_PrevMaintMaster object.
    /// This routine should be applied to the usp_PrevMaintMaster_RetrieveByPK stored procedure.
    /// This routine should be applied to the usp_PrevMaintMaster_RetrieveAll. stored procedure.
    /// </summary>
    /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
    /// <returns>object cast of the b_PrevMaintMaster object</returns>
    public static object ProcessRow (SqlDataReader reader)
    {
      // Create instance of object
      b_PrevMaintMaster obj = new b_PrevMaintMaster();

      // Load the object from the database
      obj.LoadFromDatabase(reader);

      // Return result
      return (object) obj;
    }

    /// <summary>
    /// Load the current row in the input SqlDataReader into a b_PrevMaintMaster object.
    /// This routine should be applied to the usp_PrevMaintMaster_RetrieveByPK stored procedure.
    /// This routine should be applied to the usp_PrevMaintMaster_RetrieveAll. stored procedure.
    /// </summary>
    /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
    public int LoadFromDatabase (SqlDataReader reader)
    {
      int i = 0;
      try
      {

        // ClientId column, bigint, not null
        ClientId = reader.GetInt64(i++);

        // PrevMaintMasterId column, bigint, not null
        PrevMaintMasterId = reader.GetInt64(i++);

        // SiteId column, bigint, not null
        SiteId = reader.GetInt64(i++);

        // AreaId column, bigint, not null
        AreaId = reader.GetInt64(i++);

        // DepartmentId column, bigint, not null
        DepartmentId = reader.GetInt64(i++);

        // StoreroomId column, bigint, not null
        StoreroomId = reader.GetInt64(i++);

        // ClientLookupId column, nvarchar(31), not null
        ClientLookupId = reader.GetString(i++);

        // Description column, nvarchar(255), not null
        Description = reader.GetString(i++);

        // InactiveFlag column, bit, not null
        InactiveFlag = reader.GetBoolean(i++);

        // JobDuration column, decimal(8,2), not null
        JobDuration = reader.GetDecimal(i++);

        // ScheduleType column, nvarchar(15), not null
        ScheduleType = reader.GetString(i++);

        // Type column, nvarchar(15), not null
        Type = reader.GetString(i++);

        // PrevMaintLibraryId column, bigint, not null
        PrevMaintLibraryId = reader.GetInt64(i++);

        // PMLibSourceId column, bigint, not null
        PMLibSourceId = reader.GetInt64(i++);

        // UpdateIndex column, int, not null
        UpdateIndex = reader.GetInt32(i++);
      }
      catch (Exception ex)
      {
        // Diagnostics
        StringBuilder missing = new StringBuilder();


        try { reader["ClientId"].ToString(); }
        catch { missing.Append("ClientId "); }

        try { reader["PrevMaintMasterId"].ToString(); }
        catch { missing.Append("PrevMaintMasterId "); }

        try { reader["SiteId"].ToString(); }
        catch { missing.Append("SiteId "); }

        try { reader["AreaId"].ToString(); }
        catch { missing.Append("AreaId "); }

        try { reader["DepartmentId"].ToString(); }
        catch { missing.Append("DepartmentId "); }

        try { reader["StoreroomId"].ToString(); }
        catch { missing.Append("StoreroomId "); }

        try { reader["ClientLookupId"].ToString(); }
        catch { missing.Append("ClientLookupId "); }

        try { reader["Description"].ToString(); }
        catch { missing.Append("Description "); }

        try { reader["InactiveFlag"].ToString(); }
        catch { missing.Append("InactiveFlag "); }

        try { reader["JobDuration"].ToString(); }
        catch { missing.Append("JobDuration "); }

        try { reader["ScheduleType"].ToString(); }
        catch { missing.Append("ScheduleType "); }

        try { reader["Type"].ToString(); }
        catch { missing.Append("Type "); }

        try { reader["PrevMaintLibraryId"].ToString(); }
        catch { missing.Append("PrevMaintLibraryId "); }

        try { reader["PMLibSourceId"].ToString(); }
        catch { missing.Append("PMLibSourceId "); }

        try { reader["UpdateIndex"].ToString(); }
        catch { missing.Append("UpdateIndex "); }


        StringBuilder msg = new StringBuilder();
        msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
        if (missing.Length > 0)
        {
          msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
        }

        throw new Exception(msg.ToString(), ex);
      }
      return i;
    }

    /// <summary>
    /// Insert this object into the database as a PrevMaintMaster table record.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void InsertIntoDatabase (
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
    string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_PrevMaintMaster_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Update the PrevMaintMaster table record represented by this object in the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void UpdateInDatabase (
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
        string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_PrevMaintMaster_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Delete the PrevMaintMaster table record represented by this object from the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void DeleteFromDatabase (
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_PrevMaintMaster_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Retrieve all PrevMaintMaster table records represented by this object in the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    /// <param name="data">b_PrevMaintMaster[] that contains the results</param>
    public void RetrieveAllFromDatabase (
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName,
        ref b_PrevMaintMaster[] data
    )
    {
      Database.SqlClient.ProcessRow<b_PrevMaintMaster> processRow = null;
      ArrayList results = null;
      SqlCommand command = null;
      string message = String.Empty;

      // Initialize the results
      data = new b_PrevMaintMaster[0];

      try
      {
        // Create the command to use in calling the stored procedures
        command = new SqlCommand();
        command.Connection = connection;
        command.Transaction = transaction;

        // Call the stored procedure to retrieve the data
        processRow = new Database.SqlClient.ProcessRow<b_PrevMaintMaster>(reader => { b_PrevMaintMaster obj = new b_PrevMaintMaster(); obj.LoadFromDatabase(reader); return obj; });
        results = Database.StoredProcedure.usp_PrevMaintMaster_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

        // Extract the results
        if (null != results)
        {
          data = (b_PrevMaintMaster[])results.ToArray(typeof(b_PrevMaintMaster));
        }
        else
        {
          data = new b_PrevMaintMaster[0];
        }

        // Clear the results collection
        if (null != results)
        {
          results.Clear();
          results = null;
        }
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
        processRow = null;
        results = null;
        message = String.Empty;
        callerUserInfoId = 0;
        callerUserName = String.Empty;
      }
    }

    /// <summary>
    /// Retrieve PrevMaintMaster table records with specified primary key from the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    /// <param name="key">System.Guid that contains the key to use in the lookup</param>
    /// <param name="data">b_PrevMaintMaster[] that contains the results</param>
    public override void RetrieveByPKFromDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName
    )
    {
      Database.SqlClient.ProcessRow<b_PrevMaintMaster> processRow = null;
      SqlCommand command = null;
      string message = String.Empty;

      try
      {
        // Create the command to use in calling the stored procedures
        command = new SqlCommand();
        command.Connection = connection;
        command.Transaction = transaction;

        // Call the stored procedure to retrieve the data
        processRow = new Database.SqlClient.ProcessRow<b_PrevMaintMaster>(reader => { this.LoadFromDatabase(reader); return this; });
        Database.StoredProcedure.usp_PrevMaintMaster_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
        processRow = null;
        message = String.Empty;
        callerUserInfoId = 0;
        callerUserName = String.Empty;
      }
    }

    /// <summary>
    /// Test equality of two b_PrevMaintMaster objects.
    /// </summary>
    /// <param name="obj">b_PrevMaintMaster object to compare against the current object.</param>
    public bool Equals (b_PrevMaintMaster obj)
    {
      if (ClientId != obj.ClientId) return false;
      if (PrevMaintMasterId != obj.PrevMaintMasterId) return false;
      if (SiteId != obj.SiteId) return false;
      if (AreaId != obj.AreaId) return false;
      if (DepartmentId != obj.DepartmentId) return false;
      if (StoreroomId != obj.StoreroomId) return false;
      if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
      if (!Description.Equals(obj.Description)) return false;
      if (InactiveFlag != obj.InactiveFlag) return false;
      if (JobDuration != obj.JobDuration) return false;
      if (!ScheduleType.Equals(obj.ScheduleType)) return false;
      if (!Type.Equals(obj.Type)) return false;
      if (PrevMaintLibraryId != obj.PrevMaintLibraryId) return false;
      if (PMLibSourceId != obj.PMLibSourceId) return false;
      if (UpdateIndex != obj.UpdateIndex) return false;
      return true;
    }

    /// <summary>
    /// Test equality of two b_PrevMaintMaster objects.
    /// </summary>
    /// <param name="obj1">b_PrevMaintMaster object to use in the comparison.</param>
    /// <param name="obj2">b_PrevMaintMaster object to use in the comparison.</param>
    public static bool Equals (b_PrevMaintMaster obj1, b_PrevMaintMaster obj2)
    {
      if ((null == obj1) && (null == obj2)) return true;
      if ((null == obj1) && (null != obj2)) return false;
      if ((null != obj1) && (null == obj2)) return false;
      return obj1.Equals(obj2);
    }
  }
}
