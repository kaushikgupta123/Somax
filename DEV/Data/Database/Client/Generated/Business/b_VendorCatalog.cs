/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the VendorCatalog table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_VendorCatalog : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_VendorCatalog ()
        {
            ClientId = 0;
            VendorCatalogId = 0;
            VendorMasterId = 0;
            ExSourceId = 0;
            ExSourceDocument = String.Empty;
            StartDate = new System.Nullable<System.DateTime>();
            EndDate = new System.Nullable<System.DateTime>();
            Inactive = false;
            //ExVendorId = 0;
            //ExVendorSiteId = 0;
            //ExLineId = 0;
            //ExPartId = 0;
            //Category = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// VendorCatalogId property
        /// </summary>
        public long VendorCatalogId { get; set; }

        /// <summary>
        /// VendorMasterId property
        /// </summary>
        public long VendorMasterId { get; set; }

        /// <summary>
        /// ExSourceId property
        /// </summary>
        public long ExSourceId { get; set; }

        /// <summary>
        /// ExSourceDocument property
        /// </summary>
        public string ExSourceDocument { get; set; }

        /// <summary>
        /// StartDate property
        /// </summary>
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// EndDate property
        /// </summary>
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Inactive property
        /// </summary>
        public bool Inactive { get; set; }
/*
        /// <summary>
        /// ExVendorId property
        /// </summary>
        public long ExVendorId { get; set; }

        /// <summary>
        /// ExVendorSiteId property
        /// </summary>
        public long ExVendorSiteId { get; set; }

        /// <summary>
        /// ExLineId property
        /// </summary>
        public long ExLineId { get; set; }

        /// <summary>
        /// ExPartId property
        /// </summary>
        public long ExPartId { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }
*/
        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_VendorCatalog object.
        /// This routine should be applied to the usp_VendorCatalog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorCatalog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_VendorCatalog object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_VendorCatalog obj = new b_VendorCatalog();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_VendorCatalog object.
        /// This routine should be applied to the usp_VendorCatalog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorCatalog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // VendorCatalogId column, bigint, not null
                        VendorCatalogId = reader.GetInt64(i++);

                        // VendorMasterId column, bigint, not null
                        VendorMasterId = reader.GetInt64(i++);

                        // ExSourceId column, bigint, not null
                        ExSourceId = reader.GetInt64(i++);

                        // ExSourceDocument column, nvarchar(31), not null
                        ExSourceDocument = reader.GetString(i++);

            // StartDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    StartDate = reader.GetDateTime(i);
            }
            else
            {
                    StartDate = DateTime.MinValue;
            }
            i++;
            // EndDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    EndDate = reader.GetDateTime(i);
            }
            else
            {
                    EndDate = DateTime.MinValue;
            }
            i++;
                        // Inactive column, bit, not null
                        Inactive = reader.GetBoolean(i++);
/*
                        // ExVendorId column, bigint, not null
                        ExVendorId = reader.GetInt64(i++);

                        // ExVendorSiteId column, bigint, not null
                        ExVendorSiteId = reader.GetInt64(i++);

                        // ExLineId column, bigint, not null
                        ExLineId = reader.GetInt64(i++);

                        // ExPartId column, bigint, not null
                        ExPartId = reader.GetInt64(i++);

                        // Category column, nvarchar(255), not null
                        Category = reader.GetString(i++);
*/
                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["VendorCatalogId"].ToString(); }
            catch { missing.Append("VendorCatalogId "); }
            
            try { reader["VendorMasterId"].ToString(); }
            catch { missing.Append("VendorMasterId "); }
            
            try { reader["ExSourceId"].ToString(); }
            catch { missing.Append("ExSourceId "); }
            
            try { reader["ExSourceDocument"].ToString(); }
            catch { missing.Append("ExSourceDocument "); }
            
            try { reader["StartDate"].ToString(); }
            catch { missing.Append("StartDate "); }
            
            try { reader["EndDate"].ToString(); }
            catch { missing.Append("EndDate "); }
            
            try { reader["Inactive"].ToString(); }
            catch { missing.Append("Inactive "); }
/*            
            try { reader["ExVendorId"].ToString(); }
            catch { missing.Append("ExVendorId "); }
            
            try { reader["ExVendorSiteId"].ToString(); }
            catch { missing.Append("ExVendorSiteId "); }
            
            try { reader["ExLineId"].ToString(); }
            catch { missing.Append("ExLineId "); }
            
            try { reader["ExPartId"].ToString(); }
            catch { missing.Append("ExPartId "); }
            
            try { reader["Category"].ToString(); }
            catch { missing.Append("Category "); }
*/            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a VendorCatalog table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalog_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the VendorCatalog table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalog_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the VendorCatalog table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalog_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all VendorCatalog table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_VendorCatalog[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_VendorCatalog[] data
        )
        {
            Database.SqlClient.ProcessRow<b_VendorCatalog> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_VendorCatalog[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorCatalog>(reader => { b_VendorCatalog obj = new b_VendorCatalog(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_VendorCatalog_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_VendorCatalog[])results.ToArray(typeof(b_VendorCatalog));
                }
                else
                {
                    data = new b_VendorCatalog[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve VendorCatalog table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_VendorCatalog[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_VendorCatalog> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorCatalog>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_VendorCatalog_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_VendorCatalog objects.
        /// </summary>
        /// <param name="obj">b_VendorCatalog object to compare against the current object.</param>
        public bool Equals (b_VendorCatalog obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (VendorCatalogId != obj.VendorCatalogId) return false;
            if (VendorMasterId != obj.VendorMasterId) return false;
            if (ExSourceId != obj.ExSourceId) return false;
            if (!ExSourceDocument.Equals(obj.ExSourceDocument)) return false;
            if (!StartDate.Equals(obj.StartDate)) return false;
            if (!EndDate.Equals(obj.EndDate)) return false;
            if (Inactive != obj.Inactive) return false;
            //if (ExVendorId != obj.ExVendorId) return false;
            //if (ExVendorSiteId != obj.ExVendorSiteId) return false;
            //if (ExLineId != obj.ExLineId) return false;
            //if (ExPartId != obj.ExPartId) return false;
            //if (!Category.Equals(obj.Category)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_VendorCatalog objects.
        /// </summary>
        /// <param name="obj1">b_VendorCatalog object to use in the comparison.</param>
        /// <param name="obj2">b_VendorCatalog object to use in the comparison.</param>
        public static bool Equals (b_VendorCatalog obj1, b_VendorCatalog obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
