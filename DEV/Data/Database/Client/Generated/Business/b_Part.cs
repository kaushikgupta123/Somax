/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using Database;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Part table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Part : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Part()
        {
            ClientId = 0;
            PartId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            ABCCode = String.Empty;
            ABCStoreCost = String.Empty;
            AccountId = 0;
            AltPartId1 = 0;
            AltPartId2 = 0;
            AltPartId3 = 0;
            AppliedCost = 0;
            AverageCost = 0;
            Consignment = false;
            CostCalcMethod = String.Empty;
            CostMultiplier = 0;
            Critical = false;
            Description = String.Empty;
            InactiveFlag = false;
            IssueUnit = String.Empty;
            Manufacturer = String.Empty;
            ManufacturerId = String.Empty;
            MSDSContainerCode = String.Empty;
            MSDSPressureCode = String.Empty;
            MSDSReference = String.Empty;
            MSDSRequired = false;
            MSDSTemperatureCode = String.Empty;
            NoEquipXref = false;
            PrintNoLabel = false;
            PurchaseText = String.Empty;
            RepairablePart = false;
            StockType = String.Empty;
            TaxLevel1 = 0;
            TaxLevel2 = 0;
            Taxable = false;
            Tool = false;
            Type = 0;
            UPCCode = String.Empty;
            UseCostMultiplier = false;
            Chemical = false;
            AutoPurch = false;
            PartMasterId = 0;
            PrevClientLookupId = String.Empty;
            DefaultStoreroom = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// ABCCode property
        /// </summary>
        public string ABCCode { get; set; }

        /// <summary>
        /// ABCStoreCost property
        /// </summary>
        public string ABCStoreCost { get; set; }

        /// <summary>
        /// AccountId property
        /// </summary>
        public long AccountId { get; set; }

        /// <summary>
        /// AltPartId1 property
        /// </summary>
        public long AltPartId1 { get; set; }

        /// <summary>
        /// AltPartId2 property
        /// </summary>
        public long AltPartId2 { get; set; }

        /// <summary>
        /// AltPartId3 property
        /// </summary>
        public long AltPartId3 { get; set; }

        /// <summary>
        /// AppliedCost property
        /// </summary>
        public decimal AppliedCost { get; set; }

        /// <summary>
        /// AverageCost property
        /// </summary>
        public decimal AverageCost { get; set; }

        /// <summary>
        /// Consignment property
        /// </summary>
        public bool Consignment { get; set; }

        /// <summary>
        /// CostCalcMethod property
        /// </summary>
        public string CostCalcMethod { get; set; }

        /// <summary>
        /// CostMultiplier property
        /// </summary>
        public decimal CostMultiplier { get; set; }

        /// <summary>
        /// Critical property
        /// </summary>
        public bool Critical { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// IssueUnit property
        /// </summary>
        public string IssueUnit { get; set; }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        public string Manufacturer { get; set; }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        public string ManufacturerId { get; set; }

        /// <summary>
        /// MSDSContainerCode property
        /// </summary>
        public string MSDSContainerCode { get; set; }

        /// <summary>
        /// MSDSPressureCode property
        /// </summary>
        public string MSDSPressureCode { get; set; }

        /// <summary>
        /// MSDSReference property
        /// </summary>
        public string MSDSReference { get; set; }

        /// <summary>
        /// MSDSRequired property
        /// </summary>
        public bool MSDSRequired { get; set; }

        /// <summary>
        /// MSDSTemperatureCode property
        /// </summary>
        public string MSDSTemperatureCode { get; set; }

        /// <summary>
        /// NoEquipXref property
        /// </summary>
        public bool NoEquipXref { get; set; }

        /// <summary>
        /// PrintNoLabel property
        /// </summary>
        public bool PrintNoLabel { get; set; }

        /// <summary>
        /// PurchaseText property
        /// </summary>
        public string PurchaseText { get; set; }

        /// <summary>
        /// RepairablePart property
        /// </summary>
        public bool RepairablePart { get; set; }

        /// <summary>
        /// StockType property
        /// </summary>
        public string StockType { get; set; }

        /// <summary>
        /// TaxLevel1 property
        /// </summary>
        public decimal TaxLevel1 { get; set; }

        /// <summary>
        /// TaxLevel2 property
        /// </summary>
        public decimal TaxLevel2 { get; set; }

        /// <summary>
        /// Taxable property
        /// </summary>
        public bool Taxable { get; set; }

        /// <summary>
        /// Tool property
        /// </summary>
        public bool Tool { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public int Type { get; set; }

        /// <summary>
        /// UPCCode property
        /// </summary>
        public string UPCCode { get; set; }

        /// <summary>
        /// UseCostMultiplier property
        /// </summary>
        public bool UseCostMultiplier { get; set; }

        /// <summary>
        /// Chemical property
        /// </summary>
        public bool Chemical { get; set; }

        /// <summary>
        /// AutoPurch property
        /// </summary>
        public bool AutoPurch { get; set; }

        /// <summary>
        /// PartMasterId property
        /// </summary>
        public long PartMasterId { get; set; }

        /// <summary>
        /// PrevClientLookupId property
        /// </summary>
        public string PrevClientLookupId { get; set; }

        /// <summary>
        /// DefaultStoreroom property
        /// </summary>
        public long DefaultStoreroom { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Part object.
        /// This routine should be applied to the usp_Part_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Part_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Part object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_Part obj = new b_Part();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Part object.
        /// This routine should be applied to the usp_Part_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Part_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PartId column, bigint, not null
                PartId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(70), not null
                ClientLookupId = reader.GetString(i++);

                // ABCCode column, nvarchar(7), not null
                ABCCode = reader.GetString(i++);

                // ABCStoreCost column, nvarchar(7), not null
                ABCStoreCost = reader.GetString(i++);

                // AccountId column, bigint, not null
                AccountId = reader.GetInt64(i++);

                // AltPartId1 column, bigint, not null
                AltPartId1 = reader.GetInt64(i++);

                // AltPartId2 column, bigint, not null
                AltPartId2 = reader.GetInt64(i++);

                // AltPartId3 column, bigint, not null
                AltPartId3 = reader.GetInt64(i++);

                // AppliedCost column, decimal(15,5), not null
                AppliedCost = reader.GetDecimal(i++);

                // AverageCost column, decimal(15,5), not null
                AverageCost = reader.GetDecimal(i++);

                // Consignment column, bit, not null
                Consignment = reader.GetBoolean(i++);

                // CostCalcMethod column, nvarchar(15), not null
                CostCalcMethod = reader.GetString(i++);

                // CostMultiplier column, decimal(6,2), not null
                CostMultiplier = reader.GetDecimal(i++);

                // Critical column, bit, not null
                Critical = reader.GetBoolean(i++);

                // Description column, nvarchar(127), not null
                Description = reader.GetString(i++);

                // InactiveFlag column, bit, not null
                InactiveFlag = reader.GetBoolean(i++);

                // IssueUnit column, nvarchar(15), not null
                IssueUnit = reader.GetString(i++);

                // Manufacturer column, nvarchar(31), not null
                Manufacturer = reader.GetString(i++);

                // ManufacturerId column, nvarchar(63), not null
                ManufacturerId = reader.GetString(i++);

                // MSDSContainerCode column, nvarchar(7), not null
                MSDSContainerCode = reader.GetString(i++);

                // MSDSPressureCode column, nvarchar(7), not null
                MSDSPressureCode = reader.GetString(i++);

                // MSDSReference column, nvarchar(31), not null
                MSDSReference = reader.GetString(i++);

                // MSDSRequired column, bit, not null
                MSDSRequired = reader.GetBoolean(i++);

                // MSDSTemperatureCode column, nvarchar(7), not null
                MSDSTemperatureCode = reader.GetString(i++);

                // NoEquipXref column, bit, not null
                NoEquipXref = reader.GetBoolean(i++);

                // PrintNoLabel column, bit, not null
                PrintNoLabel = reader.GetBoolean(i++);

                // PurchaseText column, nvarchar(MAX), not null
                PurchaseText = reader.GetString(i++);

                // RepairablePart column, bit, not null
                RepairablePart = reader.GetBoolean(i++);

                // StockType column, nvarchar(15), not null
                StockType = reader.GetString(i++);

                // TaxLevel1 column, decimal(7,3), not null
                TaxLevel1 = reader.GetDecimal(i++);

                // TaxLevel2 column, decimal(7,3), not null
                TaxLevel2 = reader.GetDecimal(i++);

                // Taxable column, bit, not null
                Taxable = reader.GetBoolean(i++);

                // Tool column, bit, not null
                Tool = reader.GetBoolean(i++);

                // Type column, int, not null
                Type = reader.GetInt32(i++);

                // UPCCode column, nvarchar(31), not null
                UPCCode = reader.GetString(i++);

                // UseCostMultiplier column, bit, not null
                UseCostMultiplier = reader.GetBoolean(i++);

                // Chemical column, bit, not null
                Chemical = reader.GetBoolean(i++);

                // AutoPurch column, bit, not null
                AutoPurch = reader.GetBoolean(i++);

                // PartMasterId column, bigint, not null
                PartMasterId = reader.GetInt64(i++);

                // PrevClientLookupId column, nvarchar(70), not null
                PrevClientLookupId = reader.GetString(i++);

                // DefaultStoreroom column, bigint, not null
                DefaultStoreroom = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["ABCCode"].ToString(); }
                catch { missing.Append("ABCCode "); }

                try { reader["ABCStoreCost"].ToString(); }
                catch { missing.Append("ABCStoreCost "); }

                try { reader["AccountId"].ToString(); }
                catch { missing.Append("AccountId "); }

                try { reader["AltPartId1"].ToString(); }
                catch { missing.Append("AltPartId1 "); }

                try { reader["AltPartId2"].ToString(); }
                catch { missing.Append("AltPartId2 "); }

                try { reader["AltPartId3"].ToString(); }
                catch { missing.Append("AltPartId3 "); }

                try { reader["AppliedCost"].ToString(); }
                catch { missing.Append("AppliedCost "); }

                try { reader["AverageCost"].ToString(); }
                catch { missing.Append("AverageCost "); }

                try { reader["Consignment"].ToString(); }
                catch { missing.Append("Consignment "); }

                try { reader["CostCalcMethod"].ToString(); }
                catch { missing.Append("CostCalcMethod "); }

                try { reader["CostMultiplier"].ToString(); }
                catch { missing.Append("CostMultiplier "); }

                try { reader["Critical"].ToString(); }
                catch { missing.Append("Critical "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["InactiveFlag"].ToString(); }
                catch { missing.Append("InactiveFlag "); }

                try { reader["IssueUnit"].ToString(); }
                catch { missing.Append("IssueUnit "); }

                try { reader["Manufacturer"].ToString(); }
                catch { missing.Append("Manufacturer "); }

                try { reader["ManufacturerId"].ToString(); }
                catch { missing.Append("ManufacturerId "); }

                try { reader["MSDSContainerCode"].ToString(); }
                catch { missing.Append("MSDSContainerCode "); }

                try { reader["MSDSPressureCode"].ToString(); }
                catch { missing.Append("MSDSPressureCode "); }

                try { reader["MSDSReference"].ToString(); }
                catch { missing.Append("MSDSReference "); }

                try { reader["MSDSRequired"].ToString(); }
                catch { missing.Append("MSDSRequired "); }

                try { reader["MSDSTemperatureCode"].ToString(); }
                catch { missing.Append("MSDSTemperatureCode "); }

                try { reader["NoEquipXref"].ToString(); }
                catch { missing.Append("NoEquipXref "); }

                try { reader["PrintNoLabel"].ToString(); }
                catch { missing.Append("PrintNoLabel "); }

                try { reader["PurchaseText"].ToString(); }
                catch { missing.Append("PurchaseText "); }

                try { reader["RepairablePart"].ToString(); }
                catch { missing.Append("RepairablePart "); }

                try { reader["StockType"].ToString(); }
                catch { missing.Append("StockType "); }

                try { reader["TaxLevel1"].ToString(); }
                catch { missing.Append("TaxLevel1 "); }

                try { reader["TaxLevel2"].ToString(); }
                catch { missing.Append("TaxLevel2 "); }

                try { reader["Taxable"].ToString(); }
                catch { missing.Append("Taxable "); }

                try { reader["Tool"].ToString(); }
                catch { missing.Append("Tool "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["UPCCode"].ToString(); }
                catch { missing.Append("UPCCode "); }

                try { reader["UseCostMultiplier"].ToString(); }
                catch { missing.Append("UseCostMultiplier "); }

                try { reader["Chemical"].ToString(); }
                catch { missing.Append("Chemical "); }

                try { reader["AutoPurch"].ToString(); }
                catch { missing.Append("AutoPurch "); }

                try { reader["PartMasterId"].ToString(); }
                catch { missing.Append("PartMasterId "); }

                try { reader["PrevClientLookupId"].ToString(); }
                catch { missing.Append("PrevClientLookupId "); }

                try { reader["DefaultStoreroom"].ToString(); }
                catch { missing.Append("DefaultStoreroom "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Part table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Part_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Part table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Part_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Part table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Part_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Part table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Part[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Part[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Part> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Part[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Part>(reader => { b_Part obj = new b_Part(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Part_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Part[])results.ToArray(typeof(b_Part));
                }
                else
                {
                    data = new b_Part[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Part table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Part[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Part> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Part>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Part_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Part objects.
        /// </summary>
        /// <param name="obj">b_Part object to compare against the current object.</param>
        public bool Equals(b_Part obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PartId != obj.PartId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!ABCCode.Equals(obj.ABCCode)) return false;
            if (!ABCStoreCost.Equals(obj.ABCStoreCost)) return false;
            if (AccountId != obj.AccountId) return false;
            if (AltPartId1 != obj.AltPartId1) return false;
            if (AltPartId2 != obj.AltPartId2) return false;
            if (AltPartId3 != obj.AltPartId3) return false;
            if (AppliedCost != obj.AppliedCost) return false;
            if (AverageCost != obj.AverageCost) return false;
            if (Consignment != obj.Consignment) return false;
            if (!CostCalcMethod.Equals(obj.CostCalcMethod)) return false;
            if (CostMultiplier != obj.CostMultiplier) return false;
            if (Critical != obj.Critical) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (!IssueUnit.Equals(obj.IssueUnit)) return false;
            if (!Manufacturer.Equals(obj.Manufacturer)) return false;
            if (!ManufacturerId.Equals(obj.ManufacturerId)) return false;
            if (!MSDSContainerCode.Equals(obj.MSDSContainerCode)) return false;
            if (!MSDSPressureCode.Equals(obj.MSDSPressureCode)) return false;
            if (!MSDSReference.Equals(obj.MSDSReference)) return false;
            if (MSDSRequired != obj.MSDSRequired) return false;
            if (!MSDSTemperatureCode.Equals(obj.MSDSTemperatureCode)) return false;
            if (NoEquipXref != obj.NoEquipXref) return false;
            if (PrintNoLabel != obj.PrintNoLabel) return false;
            if (!PurchaseText.Equals(obj.PurchaseText)) return false;
            if (RepairablePart != obj.RepairablePart) return false;
            if (!StockType.Equals(obj.StockType)) return false;
            if (TaxLevel1 != obj.TaxLevel1) return false;
            if (TaxLevel2 != obj.TaxLevel2) return false;
            if (Taxable != obj.Taxable) return false;
            if (Tool != obj.Tool) return false;
            if (Type != obj.Type) return false;
            if (!UPCCode.Equals(obj.UPCCode)) return false;
            if (UseCostMultiplier != obj.UseCostMultiplier) return false;
            if (Chemical != obj.Chemical) return false;
            if (AutoPurch != obj.AutoPurch) return false;
            if (PartMasterId != obj.PartMasterId) return false;
            if (!PrevClientLookupId.Equals(obj.PrevClientLookupId)) return false;
            if (DefaultStoreroom != obj.DefaultStoreroom) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Part objects.
        /// </summary>
        /// <param name="obj1">b_Part object to use in the comparison.</param>
        /// <param name="obj2">b_Part object to use in the comparison.</param>
        public static bool Equals(b_Part obj1, b_Part obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
