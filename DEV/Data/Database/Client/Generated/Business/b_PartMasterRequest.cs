/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartMasterRequest table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PartMasterRequest : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PartMasterRequest ()
        {
            ClientId = 0;
            PartMasterRequestId = 0;
            SiteId = 0;
            Critical = false;
            PurchaseFreq = String.Empty;
            PurchaseLeadTime = String.Empty;
            PurchaseCost = String.Empty;
            Justification = String.Empty;
            Description = String.Empty;
            Manufacturer = String.Empty;
            ManufacturerId = String.Empty;
            UnitOfMeasure = String.Empty;
            Status = String.Empty;
            PartMasterId = 0;
            CompleteBy_PersonnelId = 0;
            CompleteDate = new System.Nullable<System.DateTime>();
            CreatedBy_PersonnelId = 0;
            ApproveDenyBy_PersonnelId = 0;
            ApproveDeny_Date = new System.Nullable<System.DateTime>();
            LastReviewedBy_PersonnelId = 0;
            LastReviewed_Date = new System.Nullable<System.DateTime>();
            ImageURL = String.Empty;
            ApproveDenyBy2_PersonnelId = 0;
            ApproveDeny2_Date = new System.Nullable<System.DateTime>();
            CreatedBy = String.Empty;
            CreatedDate = new System.Nullable<System.DateTime>();
            RequestType = String.Empty;
            SourceId = 0;
            PartId = 0;
            ExportLogId = 0;
            UnitCost = 0;
            Location = String.Empty;
            QtyMinimum = 0;
            QtyMaximum = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// PartMasterRequestId property
        /// </summary>
        public long PartMasterRequestId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// Critical property
        /// </summary>
        public bool Critical { get; set; }

        /// <summary>
        /// PurchaseFreq property
        /// </summary>
        public string PurchaseFreq { get; set; }

        /// <summary>
        /// PurchaseLeadTime property
        /// </summary>
        public string PurchaseLeadTime { get; set; }

        /// <summary>
        /// PurchaseCost property
        /// </summary>
        public string PurchaseCost { get; set; }

        /// <summary>
        /// Justification property
        /// </summary>
        public string Justification { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        public string Manufacturer { get; set; }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        public string ManufacturerId { get; set; }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// PartMasterId property
        /// </summary>
        public long PartMasterId { get; set; }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        public long CompleteBy_PersonnelId { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// CreatedBy_PersonnelId property
        /// </summary>
        public long CreatedBy_PersonnelId { get; set; }

        /// <summary>
        /// ApproveDenyBy_PersonnelId property
        /// </summary>
        public long ApproveDenyBy_PersonnelId { get; set; }

        /// <summary>
        /// ApproveDeny_Date property
        /// </summary>
        public DateTime? ApproveDeny_Date { get; set; }

        /// <summary>
        /// LastReviewedBy_PersonnelId property
        /// </summary>
        public long LastReviewedBy_PersonnelId { get; set; }

        /// <summary>
        /// LastReviewed_Date property
        /// </summary>
        public DateTime? LastReviewed_Date { get; set; }

        /// <summary>
        /// ImageURL property
        /// </summary>
        public string ImageURL { get; set; }

        /// <summary>
        /// ApproveDenyBy2_PersonnelId property
        /// </summary>
        public long ApproveDenyBy2_PersonnelId { get; set; }

        /// <summary>
        /// ApproveDeny2_Date property
        /// </summary>
        public DateTime? ApproveDeny2_Date { get; set; }

        /// <summary>
        /// CreatedBy property
        /// </summary>
        public string CreatedBy { get; set; }

        /// <summary>
        /// CreatedDate property
        /// </summary>
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// RequestType property
        /// </summary>
        public string RequestType { get; set; }

        /// <summary>
        /// SourceId property
        /// </summary>
        public long SourceId { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// ExportLogId property
        /// </summary>
        public long ExportLogId { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// Location property
        /// </summary>
        public string Location { get; set; }

        /// <summary>
        /// QtyMinimum property
        /// </summary>
        public decimal QtyMinimum { get; set; }

        /// <summary>
        /// QtyMaximum property
        /// </summary>
        public decimal QtyMaximum { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PartMasterRequest object.
        /// This routine should be applied to the usp_PartMasterRequest_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartMasterRequest_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PartMasterRequest object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_PartMasterRequest obj = new b_PartMasterRequest();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PartMasterRequest object.
        /// This routine should be applied to the usp_PartMasterRequest_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartMasterRequest_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // PartMasterRequestId column, bigint, not null
                        PartMasterRequestId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // Critical column, bit, not null
                        Critical = reader.GetBoolean(i++);

                        // PurchaseFreq column, nvarchar(15), not null
                        PurchaseFreq = reader.GetString(i++);

                        // PurchaseLeadTime column, nvarchar(15), not null
                        PurchaseLeadTime = reader.GetString(i++);

                        // PurchaseCost column, nvarchar(15), not null
                        PurchaseCost = reader.GetString(i++);

                        // Justification column, nvarchar(MAX), not null
                        Justification = reader.GetString(i++);

                        // Description column, nvarchar(MAX), not null
                        Description = reader.GetString(i++);

                        // Manufacturer column, nvarchar(31), not null
                        Manufacturer = reader.GetString(i++);

                        // ManufacturerId column, nvarchar(63), not null
                        ManufacturerId = reader.GetString(i++);

                        // UnitOfMeasure column, nvarchar(15), not null
                        UnitOfMeasure = reader.GetString(i++);

                        // Status column, nvarchar(15), not null
                        Status = reader.GetString(i++);

                        // PartMasterId column, bigint, not null
                        PartMasterId = reader.GetInt64(i++);

                        // CompleteBy_PersonnelId column, bigint, not null
                        CompleteBy_PersonnelId = reader.GetInt64(i++);

            // CompleteDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    CompleteDate = reader.GetDateTime(i);
            }
            else
            {
                    CompleteDate = DateTime.MinValue;
            }
            i++;
                        // CreatedBy_PersonnelId column, bigint, not null
                        CreatedBy_PersonnelId = reader.GetInt64(i++);

                        // ApproveDenyBy_PersonnelId column, bigint, not null
                        ApproveDenyBy_PersonnelId = reader.GetInt64(i++);

            // ApproveDeny_Date column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ApproveDeny_Date = reader.GetDateTime(i);
            }
            else
            {
                    ApproveDeny_Date = DateTime.MinValue;
            }
            i++;
                        // LastReviewedBy_PersonnelId column, bigint, not null
                        LastReviewedBy_PersonnelId = reader.GetInt64(i++);

            // LastReviewed_Date column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastReviewed_Date = reader.GetDateTime(i);
            }
            else
            {
                    LastReviewed_Date = DateTime.MinValue;
            }
            i++;
                        // ImageURL column, nvarchar(255), not null
                        ImageURL = reader.GetString(i++);

                        // ApproveDenyBy2_PersonnelId column, bigint, not null
                        ApproveDenyBy2_PersonnelId = reader.GetInt64(i++);

            // ApproveDeny2_Date column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ApproveDeny2_Date = reader.GetDateTime(i);
            }
            else
            {
                    ApproveDeny2_Date = DateTime.MinValue;
            }
            i++;
                        // CreatedBy column, nvarchar(255), not null
                        CreatedBy = reader.GetString(i++);

            // CreatedDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    CreatedDate = reader.GetDateTime(i);
            }
            else
            {
                    CreatedDate = DateTime.MinValue;
            }
            i++;
                        // RequestType column, nvarchar(15), not null
                        RequestType = reader.GetString(i++);

                        // SourceId column, bigint, not null
                        SourceId = reader.GetInt64(i++);

                        // PartId column, bigint, not null
                        PartId = reader.GetInt64(i++);

                        // ExportLogId column, bigint, not null
                        ExportLogId = reader.GetInt64(i++);

                        // UnitCost column, decimal(15,5), not null
                        UnitCost = reader.GetDecimal(i++);

                        // Location column, nvarchar(31), not null
                        Location = reader.GetString(i++);

                        // QtyMinimum column, decimal(15,6), not null
                        QtyMinimum = reader.GetDecimal(i++);

                        // QtyMaximum column, decimal(15,6), not null
                        QtyMaximum = reader.GetDecimal(i++);

                        // UpdateIndex column, bigint, not null
                        UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["PartMasterRequestId"].ToString(); }
            catch { missing.Append("PartMasterRequestId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["Critical"].ToString(); }
            catch { missing.Append("Critical "); }
            
            try { reader["PurchaseFreq"].ToString(); }
            catch { missing.Append("PurchaseFreq "); }
            
            try { reader["PurchaseLeadTime"].ToString(); }
            catch { missing.Append("PurchaseLeadTime "); }
            
            try { reader["PurchaseCost"].ToString(); }
            catch { missing.Append("PurchaseCost "); }
            
            try { reader["Justification"].ToString(); }
            catch { missing.Append("Justification "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["Manufacturer"].ToString(); }
            catch { missing.Append("Manufacturer "); }
            
            try { reader["ManufacturerId"].ToString(); }
            catch { missing.Append("ManufacturerId "); }
            
            try { reader["UnitOfMeasure"].ToString(); }
            catch { missing.Append("UnitOfMeasure "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
            try { reader["PartMasterId"].ToString(); }
            catch { missing.Append("PartMasterId "); }
            
            try { reader["CompleteBy_PersonnelId"].ToString(); }
            catch { missing.Append("CompleteBy_PersonnelId "); }
            
            try { reader["CompleteDate"].ToString(); }
            catch { missing.Append("CompleteDate "); }
            
            try { reader["CreatedBy_PersonnelId"].ToString(); }
            catch { missing.Append("CreatedBy_PersonnelId "); }
            
            try { reader["ApproveDenyBy_PersonnelId"].ToString(); }
            catch { missing.Append("ApproveDenyBy_PersonnelId "); }
            
            try { reader["ApproveDeny_Date"].ToString(); }
            catch { missing.Append("ApproveDeny_Date "); }
            
            try { reader["LastReviewedBy_PersonnelId"].ToString(); }
            catch { missing.Append("LastReviewedBy_PersonnelId "); }
            
            try { reader["LastReviewed_Date"].ToString(); }
            catch { missing.Append("LastReviewed_Date "); }
            
            try { reader["ImageURL"].ToString(); }
            catch { missing.Append("ImageURL "); }
            
            try { reader["ApproveDenyBy2_PersonnelId"].ToString(); }
            catch { missing.Append("ApproveDenyBy2_PersonnelId "); }
            
            try { reader["ApproveDeny2_Date"].ToString(); }
            catch { missing.Append("ApproveDeny2_Date "); }
            
            try { reader["CreatedBy"].ToString(); }
            catch { missing.Append("CreatedBy "); }
            
            try { reader["CreatedDate"].ToString(); }
            catch { missing.Append("CreatedDate "); }
            
            try { reader["RequestType"].ToString(); }
            catch { missing.Append("RequestType "); }
            
            try { reader["SourceId"].ToString(); }
            catch { missing.Append("SourceId "); }
            
            try { reader["PartId"].ToString(); }
            catch { missing.Append("PartId "); }
            
            try { reader["ExportLogId"].ToString(); }
            catch { missing.Append("ExportLogId "); }
            
            try { reader["UnitCost"].ToString(); }
            catch { missing.Append("UnitCost "); }
            
            try { reader["Location"].ToString(); }
            catch { missing.Append("Location "); }
            
            try { reader["QtyMinimum"].ToString(); }
            catch { missing.Append("QtyMinimum "); }
            
            try { reader["QtyMaximum"].ToString(); }
            catch { missing.Append("QtyMaximum "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a PartMasterRequest table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartMasterRequest_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PartMasterRequest table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartMasterRequest_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PartMasterRequest table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartMasterRequest_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PartMasterRequest table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PartMasterRequest[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PartMasterRequest[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PartMasterRequest> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PartMasterRequest[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartMasterRequest>(reader => { b_PartMasterRequest obj = new b_PartMasterRequest(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PartMasterRequest_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PartMasterRequest[])results.ToArray(typeof(b_PartMasterRequest));
                }
                else
                {
                    data = new b_PartMasterRequest[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PartMasterRequest table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PartMasterRequest[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PartMasterRequest> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartMasterRequest>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PartMasterRequest_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PartMasterRequest objects.
        /// </summary>
        /// <param name="obj">b_PartMasterRequest object to compare against the current object.</param>
        public bool Equals (b_PartMasterRequest obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PartMasterRequestId != obj.PartMasterRequestId) return false;
            if (SiteId != obj.SiteId) return false;
            if (Critical != obj.Critical) return false;
            if (!PurchaseFreq.Equals(obj.PurchaseFreq)) return false;
            if (!PurchaseLeadTime.Equals(obj.PurchaseLeadTime)) return false;
            if (!PurchaseCost.Equals(obj.PurchaseCost)) return false;
            if (!Justification.Equals(obj.Justification)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!Manufacturer.Equals(obj.Manufacturer)) return false;
            if (!ManufacturerId.Equals(obj.ManufacturerId)) return false;
            if (!UnitOfMeasure.Equals(obj.UnitOfMeasure)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (PartMasterId != obj.PartMasterId) return false;
            if (CompleteBy_PersonnelId != obj.CompleteBy_PersonnelId) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (CreatedBy_PersonnelId != obj.CreatedBy_PersonnelId) return false;
            if (ApproveDenyBy_PersonnelId != obj.ApproveDenyBy_PersonnelId) return false;
            if (!ApproveDeny_Date.Equals(obj.ApproveDeny_Date)) return false;
            if (LastReviewedBy_PersonnelId != obj.LastReviewedBy_PersonnelId) return false;
            if (!LastReviewed_Date.Equals(obj.LastReviewed_Date)) return false;
            if (!ImageURL.Equals(obj.ImageURL)) return false;
            if (ApproveDenyBy2_PersonnelId != obj.ApproveDenyBy2_PersonnelId) return false;
            if (!ApproveDeny2_Date.Equals(obj.ApproveDeny2_Date)) return false;
            if (!CreatedBy.Equals(obj.CreatedBy)) return false;
            if (!CreatedDate.Equals(obj.CreatedDate)) return false;
            if (!RequestType.Equals(obj.RequestType)) return false;
            if (SourceId != obj.SourceId) return false;
            if (PartId != obj.PartId) return false;
            if (ExportLogId != obj.ExportLogId) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (!Location.Equals(obj.Location)) return false;
            if (QtyMinimum != obj.QtyMinimum) return false;
            if (QtyMaximum != obj.QtyMaximum) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PartMasterRequest objects.
        /// </summary>
        /// <param name="obj1">b_PartMasterRequest object to use in the comparison.</param>
        /// <param name="obj2">b_PartMasterRequest object to use in the comparison.</param>
        public static bool Equals (b_PartMasterRequest obj1, b_PartMasterRequest obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
