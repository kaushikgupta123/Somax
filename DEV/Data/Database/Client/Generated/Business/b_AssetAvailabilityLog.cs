/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the AssetAvailabilityLog table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_AssetAvailabilityLog : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_AssetAvailabilityLog()
        {
            ClientId = 0;
            SiteId = 0;
            AssetAvailabilityLogId = 0;
            ObjectId = 0;
            TransactionDate = new System.Nullable<System.DateTime>();
            Event = String.Empty;
            PersonnelId = 0;
            ReturnToService = new System.Nullable<System.DateTime>();
            Reason = String.Empty;
            SourceId = 0;
            ReasonCode = String.Empty;
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AssetAvailabilityLogId property
        /// </summary>
        public long AssetAvailabilityLogId { get; set; }

        /// <summary>
        /// ObjectId property
        /// </summary>
        public long ObjectId { get; set; }

        /// <summary>
        /// TransactionDate property
        /// </summary>
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Event property
        /// </summary>
        public string Event { get; set; }

        /// <summary>
        /// PersonnelId property
        /// </summary>
        public long PersonnelId { get; set; }

        /// <summary>
        /// ReturnToService property
        /// </summary>
        public DateTime? ReturnToService { get; set; }

        /// <summary>
        /// Reason property
        /// </summary>
        public string Reason { get; set; }

        /// <summary>
        /// SourceId property
        /// </summary>
        public long SourceId { get; set; }

        /// <summary>
        /// ReasonCode property
        /// </summary>
        public string ReasonCode { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_AssetAvailabilityLog object.
        /// This routine should be applied to the usp_AssetAvailabilityLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_AssetAvailabilityLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_AssetAvailabilityLog object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_AssetAvailabilityLog obj = new b_AssetAvailabilityLog();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_AssetAvailabilityLog object.
        /// This routine should be applied to the usp_AssetAvailabilityLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_AssetAvailabilityLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AssetAvailabilityLogId column, bigint, not null
                AssetAvailabilityLogId = reader.GetInt64(i++);

                // ObjectId column, bigint, not null
                ObjectId = reader.GetInt64(i++);

                // TransactionDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    TransactionDate = reader.GetDateTime(i);
                }
                else
                {
                    TransactionDate = DateTime.MinValue;
                }
                i++;
                // Event column, nvarchar(15), not null
                Event = reader.GetString(i++);

                // PersonnelId column, bigint, not null
                PersonnelId = reader.GetInt64(i++);

                // ReturnToService column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ReturnToService = reader.GetDateTime(i);
                }
                else
                {
                    ReturnToService = DateTime.MinValue;
                }
                i++;
                // Reason column, nvarchar(MAX), not null
                Reason = reader.GetString(i++);

                // SourceId column, bigint, not null
                SourceId = reader.GetInt64(i++);

                // ReasonCode column, nvarchar(15), not null
                ReasonCode = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AssetAvailabilityLogId"].ToString(); }
                catch { missing.Append("AssetAvailabilityLogId "); }

                try { reader["ObjectId"].ToString(); }
                catch { missing.Append("ObjectId "); }

                try { reader["TransactionDate"].ToString(); }
                catch { missing.Append("TransactionDate "); }

                try { reader["Event"].ToString(); }
                catch { missing.Append("Event "); }

                try { reader["PersonnelId"].ToString(); }
                catch { missing.Append("PersonnelId "); }

                try { reader["ReturnToService"].ToString(); }
                catch { missing.Append("ReturnToService "); }

                try { reader["Reason"].ToString(); }
                catch { missing.Append("Reason "); }

                try { reader["SourceId"].ToString(); }
                catch { missing.Append("SourceId "); }

                try { reader["ReasonCode"].ToString(); }
                catch { missing.Append("ReasonCode "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a AssetAvailabilityLog table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_AssetAvailabilityLog_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the AssetAvailabilityLog table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_AssetAvailabilityLog_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the AssetAvailabilityLog table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_AssetAvailabilityLog_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all AssetAvailabilityLog table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_AssetAvailabilityLog[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_AssetAvailabilityLog[] data
        )
        {
            Database.SqlClient.ProcessRow<b_AssetAvailabilityLog> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_AssetAvailabilityLog[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_AssetAvailabilityLog>(reader => { b_AssetAvailabilityLog obj = new b_AssetAvailabilityLog(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_AssetAvailabilityLog_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_AssetAvailabilityLog[])results.ToArray(typeof(b_AssetAvailabilityLog));
                }
                else
                {
                    data = new b_AssetAvailabilityLog[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve AssetAvailabilityLog table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_AssetAvailabilityLog[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_AssetAvailabilityLog> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_AssetAvailabilityLog>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_AssetAvailabilityLog_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_AssetAvailabilityLog objects.
        /// </summary>
        /// <param name="obj">b_AssetAvailabilityLog object to compare against the current object.</param>
        public bool Equals(b_AssetAvailabilityLog obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AssetAvailabilityLogId != obj.AssetAvailabilityLogId) return false;
            if (ObjectId != obj.ObjectId) return false;
            if (!TransactionDate.Equals(obj.TransactionDate)) return false;
            if (!Event.Equals(obj.Event)) return false;
            if (PersonnelId != obj.PersonnelId) return false;
            if (!ReturnToService.Equals(obj.ReturnToService)) return false;
            if (!Reason.Equals(obj.Reason)) return false;
            if (SourceId != obj.SourceId) return false;
            if (!ReasonCode.Equals(obj.ReasonCode)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_AssetAvailabilityLog objects.
        /// </summary>
        /// <param name="obj1">b_AssetAvailabilityLog object to use in the comparison.</param>
        /// <param name="obj2">b_AssetAvailabilityLog object to use in the comparison.</param>
        public static bool Equals(b_AssetAvailabilityLog obj1, b_AssetAvailabilityLog obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
