/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2014 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the CustomQueryDisplay table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_CustomQueryDisplay : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_CustomQueryDisplay ()
        {
            ClientId = 0;
            CustomQueryDisplayId = 0;
            TableName = String.Empty;
            Language = String.Empty;
            Culture = String.Empty;
            Key = String.Empty;
            DisplayText = String.Empty;
            CaseNo = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// CustomQueryDisplayId property
        /// </summary>
        public long CustomQueryDisplayId { get; set; }

        /// <summary>
        /// TableName property
        /// </summary>
        public string TableName { get; set; }

        /// <summary>
        /// Language property
        /// </summary>
        public string Language { get; set; }

        /// <summary>
        /// Culture property
        /// </summary>
        public string Culture { get; set; }

        /// <summary>
        /// Key property
        /// </summary>
        public string Key { get; set; }

        /// <summary>
        /// DisplayText property
        /// </summary>
        public string DisplayText { get; set; }

        /// <summary>
        /// CaseNo property
        /// </summary>
        public int CaseNo { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_CustomQueryDisplay object.
        /// This routine should be applied to the usp_CustomQueryDisplay_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_CustomQueryDisplay_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_CustomQueryDisplay object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_CustomQueryDisplay obj = new b_CustomQueryDisplay();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_CustomQueryDisplay object.
        /// This routine should be applied to the usp_CustomQueryDisplay_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_CustomQueryDisplay_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // CustomQueryDisplayId column, bigint, not null
                        CustomQueryDisplayId = reader.GetInt64(i++);

                        // TableName column, nvarchar(63), not null
                        TableName = reader.GetString(i++);

                        // Language column, nvarchar(16), not null
                        Language = reader.GetString(i++);

                        // Culture column, nvarchar(16), not null
                        Culture = reader.GetString(i++);

                        // Key column, nvarchar(16), not null
                        Key = reader.GetString(i++);

                        // DisplayText column, nvarchar(127), not null
                        DisplayText = reader.GetString(i++);

                        // CaseNo column, int, not null
                        CaseNo = reader.GetInt32(i++);

                        // UpdateIndex column, bigint, not null
                        UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["CustomQueryDisplayId"].ToString(); }
            catch { missing.Append("CustomQueryDisplayId "); }
            
            try { reader["TableName"].ToString(); }
            catch { missing.Append("TableName "); }
            
            try { reader["Language"].ToString(); }
            catch { missing.Append("Language "); }
            
            try { reader["Culture"].ToString(); }
            catch { missing.Append("Culture "); }
            
            try { reader["Key"].ToString(); }
            catch { missing.Append("Key "); }
            
            try { reader["DisplayText"].ToString(); }
            catch { missing.Append("DisplayText "); }
            
            try { reader["CaseNo"].ToString(); }
            catch { missing.Append("CaseNo "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a CustomQueryDisplay table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_CustomQueryDisplay_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the CustomQueryDisplay table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_CustomQueryDisplay_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the CustomQueryDisplay table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_CustomQueryDisplay_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all CustomQueryDisplay table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_CustomQueryDisplay[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_CustomQueryDisplay[] data
        )
        {
            Database.SqlClient.ProcessRow<b_CustomQueryDisplay> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_CustomQueryDisplay[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_CustomQueryDisplay>(reader => { b_CustomQueryDisplay obj = new b_CustomQueryDisplay(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_CustomQueryDisplay_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_CustomQueryDisplay[])results.ToArray(typeof(b_CustomQueryDisplay));
                }
                else
                {
                    data = new b_CustomQueryDisplay[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve CustomQueryDisplay table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_CustomQueryDisplay[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_CustomQueryDisplay> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_CustomQueryDisplay>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_CustomQueryDisplay_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_CustomQueryDisplay objects.
        /// </summary>
        /// <param name="obj">b_CustomQueryDisplay object to compare against the current object.</param>
        public bool Equals (b_CustomQueryDisplay obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (CustomQueryDisplayId != obj.CustomQueryDisplayId) return false;
            if (!TableName.Equals(obj.TableName)) return false;
            if (!Language.Equals(obj.Language)) return false;
            if (!Culture.Equals(obj.Culture)) return false;
            if (!Key.Equals(obj.Key)) return false;
            if (!DisplayText.Equals(obj.DisplayText)) return false;
            if (CaseNo != obj.CaseNo) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_CustomQueryDisplay objects.
        /// </summary>
        /// <param name="obj1">b_CustomQueryDisplay object to use in the comparison.</param>
        /// <param name="obj2">b_CustomQueryDisplay object to use in the comparison.</param>
        public static bool Equals (b_CustomQueryDisplay obj1, b_CustomQueryDisplay obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
