/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the EventInfo table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_EventInfo : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_EventInfo ()
        {
            ClientId = 0;
            EventInfoId = 0;
            EquipmentId = 0;
            SourceType = String.Empty;
            EventType = String.Empty;
            Description = String.Empty;
            Status = String.Empty;
            ProcessBy_PersonnelId = 0;
            ProcessDate = new System.Nullable<System.DateTime>();
            Disposition = String.Empty;
            DismissReason = String.Empty;
            WorkOrderId = 0;
            FaultCode = String.Empty;
            Comments = String.Empty;
            SensorId = String.Empty;
            CreatedBy = String.Empty;
            SiteId = 0;
        }

        /// <summary>
        /// EventInfoId property
        /// </summary>
        public long EventInfoId { get; set; }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        public long EquipmentId { get; set; }

        /// <summary>
        /// SourceType property
        /// </summary>
        public string SourceType { get; set; }

        /// <summary>
        /// EventType property
        /// </summary>
        public string EventType { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// ProcessBy_PersonnelId property
        /// </summary>
        public long ProcessBy_PersonnelId { get; set; }

        /// <summary>
        /// ProcessDate property
        /// </summary>
        public DateTime? ProcessDate { get; set; }

        /// <summary>
        /// Disposition property
        /// </summary>
        public string Disposition { get; set; }

        /// <summary>
        /// DismissReason property
        /// </summary>
        public string DismissReason { get; set; }

        /// <summary>
        /// WorkOrderId property
        /// </summary>
        public long WorkOrderId { get; set; }

        /// <summary>
        /// FaultCode property
        /// </summary>
        public string FaultCode { get; set; }

        /// <summary>
        /// Comments property
        /// </summary>
        public string Comments { get; set; }

        /// <summary>
        /// SensorId property
        /// </summary>
        public string SensorId { get; set; }

        /// <summary>
        /// CreatedBy property
        /// </summary>
        public string CreatedBy { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_EventInfo object.
        /// This routine should be applied to the usp_EventInfo_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_EventInfo_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_EventInfo object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_EventInfo obj = new b_EventInfo();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_EventInfo object.
        /// This routine should be applied to the usp_EventInfo_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_EventInfo_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // EventInfoId column, bigint, not null
                        EventInfoId = reader.GetInt64(i++);

                        // EquipmentId column, bigint, not null
                        EquipmentId = reader.GetInt64(i++);

                        // SourceType column, nvarchar(15), not null
                        SourceType = reader.GetString(i++);

                        // EventType column, nvarchar(15), not null
                        EventType = reader.GetString(i++);

                        // Description column, nvarchar(511), not null
                        Description = reader.GetString(i++);

                        // Status column, nvarchar(15), not null
                        Status = reader.GetString(i++);

                        // ProcessBy_PersonnelId column, bigint, not null
                        ProcessBy_PersonnelId = reader.GetInt64(i++);

            // ProcessDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ProcessDate = reader.GetDateTime(i);
            }
            else
            {
                    ProcessDate = DateTime.MinValue;
            }
            i++;
                        // Disposition column, nvarchar(15), not null
                        Disposition = reader.GetString(i++);

                        // DismissReason column, nvarchar(15), not null
                        DismissReason = reader.GetString(i++);

                        // WorkOrderId column, bigint, not null
                        WorkOrderId = reader.GetInt64(i++);

                        // FaultCode column, nvarchar(15), not null
                        FaultCode = reader.GetString(i++);

                        // Comments column, nvarchar(MAX), not null
                        Comments = reader.GetString(i++);

                        // SensorId column, nvarchar(31), not null
                        SensorId = reader.GetString(i++);

                        // CreatedBy column, nvarchar(255), not null
                        CreatedBy = reader.GetString(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["EventInfoId"].ToString(); }
            catch { missing.Append("EventInfoId "); }
            
            try { reader["EquipmentId"].ToString(); }
            catch { missing.Append("EquipmentId "); }
            
            try { reader["SourceType"].ToString(); }
            catch { missing.Append("SourceType "); }
            
            try { reader["EventType"].ToString(); }
            catch { missing.Append("EventType "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
            try { reader["ProcessBy_PersonnelId"].ToString(); }
            catch { missing.Append("ProcessBy_PersonnelId "); }
            
            try { reader["ProcessDate"].ToString(); }
            catch { missing.Append("ProcessDate "); }
            
            try { reader["Disposition"].ToString(); }
            catch { missing.Append("Disposition "); }
            
            try { reader["DismissReason"].ToString(); }
            catch { missing.Append("DismissReason "); }
            
            try { reader["WorkOrderId"].ToString(); }
            catch { missing.Append("WorkOrderId "); }
            
            try { reader["FaultCode"].ToString(); }
            catch { missing.Append("FaultCode "); }
            
            try { reader["Comments"].ToString(); }
            catch { missing.Append("Comments "); }
            
            try { reader["SensorId"].ToString(); }
            catch { missing.Append("SensorId "); }
            
            try { reader["CreatedBy"].ToString(); }
            catch { missing.Append("CreatedBy "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a EventInfo table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_EventInfo_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the EventInfo table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_EventInfo_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the EventInfo table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_EventInfo_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all EventInfo table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_EventInfo[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_EventInfo[] data
        )
        {
            Database.SqlClient.ProcessRow<b_EventInfo> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_EventInfo[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_EventInfo>(reader => { b_EventInfo obj = new b_EventInfo(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_EventInfo_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_EventInfo[])results.ToArray(typeof(b_EventInfo));
                }
                else
                {
                    data = new b_EventInfo[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve EventInfo table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_EventInfo[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_EventInfo> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_EventInfo>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_EventInfo_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_EventInfo objects.
        /// </summary>
        /// <param name="obj">b_EventInfo object to compare against the current object.</param>
        public bool Equals (b_EventInfo obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (EventInfoId != obj.EventInfoId) return false;
            if (EquipmentId != obj.EquipmentId) return false;
            if (!SourceType.Equals(obj.SourceType)) return false;
            if (!EventType.Equals(obj.EventType)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (ProcessBy_PersonnelId != obj.ProcessBy_PersonnelId) return false;
            if (!ProcessDate.Equals(obj.ProcessDate)) return false;
            if (!Disposition.Equals(obj.Disposition)) return false;
            if (!DismissReason.Equals(obj.DismissReason)) return false;
            if (WorkOrderId != obj.WorkOrderId) return false;
            if (!FaultCode.Equals(obj.FaultCode)) return false;
            if (!Comments.Equals(obj.Comments)) return false;
            if (!SensorId.Equals(obj.SensorId)) return false;
            if (!CreatedBy.Equals(obj.CreatedBy)) return false;
            if (SiteId != obj.SiteId) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_EventInfo objects.
        /// </summary>
        /// <param name="obj1">b_EventInfo object to use in the comparison.</param>
        /// <param name="obj2">b_EventInfo object to use in the comparison.</param>
        public static bool Equals (b_EventInfo obj1, b_EventInfo obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
