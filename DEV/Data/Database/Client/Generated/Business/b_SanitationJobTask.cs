/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the SanitationJobTask table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_SanitationJobTask : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_SanitationJobTask()
        {
            ClientId = 0;
            SanitationJobTaskId = 0;
            SanitationJobId = 0;
            SanitationMasterTaskId = 0;
            CancelReason = String.Empty;
            CompleteBy_PersonnelId = 0;
            CompleteComments = String.Empty;
            CompleteDate = new System.Nullable<System.DateTime>();
            Description = String.Empty;
            Status = String.Empty;
            TaskId = String.Empty;
            RecordedValue = String.Empty;
            PerformTime = String.Empty;
            SanOnDemandMasterTaskId = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// SanitationJobTaskId property
        /// </summary>
        public long SanitationJobTaskId { get; set; }

        /// <summary>
        /// SanitationJobId property
        /// </summary>
        public long SanitationJobId { get; set; }

        /// <summary>
        /// SanitationMasterTaskId property
        /// </summary>
        public long SanitationMasterTaskId { get; set; }

        /// <summary>
        /// CancelReason property
        /// </summary>
        public string CancelReason { get; set; }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        public long CompleteBy_PersonnelId { get; set; }

        /// <summary>
        /// CompleteComments property
        /// </summary>
        public string CompleteComments { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// TaskId property
        /// </summary>
        public string TaskId { get; set; }

        /// <summary>
        /// RecordedValue property
        /// </summary>
        public string RecordedValue { get; set; }

        /// <summary>
        /// PerformTime property
        /// </summary>
        public string PerformTime { get; set; }

        /// <summary>
        /// SanOnDemandMasterTaskId property
        /// </summary>
        public long SanOnDemandMasterTaskId { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_SanitationJobTask object.
        /// This routine should be applied to the usp_SanitationJobTask_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_SanitationJobTask_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_SanitationJobTask object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_SanitationJobTask obj = new b_SanitationJobTask();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_SanitationJobTask object.
        /// This routine should be applied to the usp_SanitationJobTask_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_SanitationJobTask_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // SanitationJobTaskId column, bigint, not null
                SanitationJobTaskId = reader.GetInt64(i++);

                // SanitationJobId column, bigint, not null
                SanitationJobId = reader.GetInt64(i++);

                // SanitationMasterTaskId column, bigint, not null
                SanitationMasterTaskId = reader.GetInt64(i++);

                // CancelReason column, nvarchar(15), not null
                CancelReason = reader.GetString(i++);

                // CompleteBy_PersonnelId column, bigint, not null
                CompleteBy_PersonnelId = reader.GetInt64(i++);

                // CompleteComments column, nvarchar(MAX), not null
                CompleteComments = reader.GetString(i++);

                // CompleteDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CompleteDate = reader.GetDateTime(i);
                }
                else
                {
                    CompleteDate = DateTime.MinValue;
                }
                i++;
                // Description column, nvarchar(MAX), not null
                Description = reader.GetString(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // TaskId column, nvarchar(3), not null
                TaskId = reader.GetString(i++);

                // RecordedValue column, nvarchar(31), not null
                RecordedValue = reader.GetString(i++);

                // PerformTime column, nvarchar(10), not null
                PerformTime = reader.GetString(i++);

                // SanOnDemandMasterTaskId column, bigint, not null
                SanOnDemandMasterTaskId = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["SanitationJobTaskId"].ToString(); }
                catch { missing.Append("SanitationJobTaskId "); }

                try { reader["SanitationJobId"].ToString(); }
                catch { missing.Append("SanitationJobId "); }

                try { reader["SanitationMasterTaskId"].ToString(); }
                catch { missing.Append("SanitationMasterTaskId "); }

                try { reader["CancelReason"].ToString(); }
                catch { missing.Append("CancelReason "); }

                try { reader["CompleteBy_PersonnelId"].ToString(); }
                catch { missing.Append("CompleteBy_PersonnelId "); }

                try { reader["CompleteComments"].ToString(); }
                catch { missing.Append("CompleteComments "); }

                try { reader["CompleteDate"].ToString(); }
                catch { missing.Append("CompleteDate "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["TaskId"].ToString(); }
                catch { missing.Append("TaskId "); }

                try { reader["RecordedValue"].ToString(); }
                catch { missing.Append("RecordedValue "); }

                try { reader["PerformTime"].ToString(); }
                catch { missing.Append("PerformTime "); }

                try { reader["SanOnDemandMasterTaskId"].ToString(); }
                catch { missing.Append("SanOnDemandMasterTaskId "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a SanitationJobTask table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SanitationJobTask_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the SanitationJobTask table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SanitationJobTask_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the SanitationJobTask table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SanitationJobTask_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all SanitationJobTask table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_SanitationJobTask[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_SanitationJobTask[] data
        )
        {
            Database.SqlClient.ProcessRow<b_SanitationJobTask> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_SanitationJobTask[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SanitationJobTask>(reader => { b_SanitationJobTask obj = new b_SanitationJobTask(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_SanitationJobTask_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_SanitationJobTask[])results.ToArray(typeof(b_SanitationJobTask));
                }
                else
                {
                    data = new b_SanitationJobTask[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve SanitationJobTask table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_SanitationJobTask[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_SanitationJobTask> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SanitationJobTask>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_SanitationJobTask_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_SanitationJobTask objects.
        /// </summary>
        /// <param name="obj">b_SanitationJobTask object to compare against the current object.</param>
        public bool Equals(b_SanitationJobTask obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (SanitationJobTaskId != obj.SanitationJobTaskId) return false;
            if (SanitationJobId != obj.SanitationJobId) return false;
            if (SanitationMasterTaskId != obj.SanitationMasterTaskId) return false;
            if (!CancelReason.Equals(obj.CancelReason)) return false;
            if (CompleteBy_PersonnelId != obj.CompleteBy_PersonnelId) return false;
            if (!CompleteComments.Equals(obj.CompleteComments)) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!TaskId.Equals(obj.TaskId)) return false;
            if (!RecordedValue.Equals(obj.RecordedValue)) return false;
            if (!PerformTime.Equals(obj.PerformTime)) return false;
            if (SanOnDemandMasterTaskId != obj.SanOnDemandMasterTaskId) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_SanitationJobTask objects.
        /// </summary>
        /// <param name="obj1">b_SanitationJobTask object to use in the comparison.</param>
        /// <param name="obj2">b_SanitationJobTask object to use in the comparison.</param>
        public static bool Equals(b_SanitationJobTask obj1, b_SanitationJobTask obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
