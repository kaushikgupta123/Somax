/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the StoreroomTransfer table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_StoreroomTransfer : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_StoreroomTransfer()
        {
            ClientId = 0;
            SiteId = 0;
            StoreroomTransferId = 0;
            RequestPTStoreroomID = 0;
            RequestStoreroomId = 0;
            RequestPartId = 0;
            IssuePTStoreroomID = 0;
            IssueStoreroomId = 0;
            IssuePartId = 0;
            Creator_PersonnelId = 0;
            RequestQuantity = 0;
            Reason = String.Empty;
            Status = String.Empty;
            QuantityIssued = 0;
            QuantityReceived = 0;
            CreatedBy = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// StoreroomTransferId property
        /// </summary>
        public long StoreroomTransferId { get; set; }

        /// <summary>
        /// RequestPTStoreroomID property
        /// </summary>
        public long RequestPTStoreroomID { get; set; }

        /// <summary>
        /// RequestStoreroomId property
        /// </summary>
        public long RequestStoreroomId { get; set; }

        /// <summary>
        /// RequestPartId property
        /// </summary>
        public long RequestPartId { get; set; }

        /// <summary>
        /// IssuePTStoreroomID property
        /// </summary>
        public long IssuePTStoreroomID { get; set; }

        /// <summary>
        /// IssueStoreroomId property
        /// </summary>
        public long IssueStoreroomId { get; set; }

        /// <summary>
        /// IssuePartId property
        /// </summary>
        public long IssuePartId { get; set; }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        public long Creator_PersonnelId { get; set; }

        /// <summary>
        /// RequestQuantity property
        /// </summary>
        public decimal RequestQuantity { get; set; }

        /// <summary>
        /// Reason property
        /// </summary>
        public string Reason { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// QuantityIssued property
        /// </summary>
        public decimal QuantityIssued { get; set; }

        /// <summary>
        /// QuantityReceived property
        /// </summary>
        public decimal QuantityReceived { get; set; }

        /// <summary>
        /// CreatedBy property
        /// </summary>
        public string CreatedBy { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_StoreroomTransfer object.
        /// This routine should be applied to the usp_StoreroomTransfer_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_StoreroomTransfer_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_StoreroomTransfer object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_StoreroomTransfer obj = new b_StoreroomTransfer();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_StoreroomTransfer object.
        /// This routine should be applied to the usp_StoreroomTransfer_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_StoreroomTransfer_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // StoreroomTransferId column, bigint, not null
                StoreroomTransferId = reader.GetInt64(i++);

                // RequestPTStoreroomID column, bigint, not null
                RequestPTStoreroomID = reader.GetInt64(i++);

                // RequestStoreroomId column, bigint, not null
                RequestStoreroomId = reader.GetInt64(i++);

                // RequestPartId column, bigint, not null
                RequestPartId = reader.GetInt64(i++);

                // IssuePTStoreroomID column, bigint, not null
                IssuePTStoreroomID = reader.GetInt64(i++);

                // IssueStoreroomId column, bigint, not null
                IssueStoreroomId = reader.GetInt64(i++);

                // IssuePartId column, bigint, not null
                IssuePartId = reader.GetInt64(i++);

                // Creator_PersonnelId column, bigint, not null
                Creator_PersonnelId = reader.GetInt64(i++);

                // RequestQuantity column, decimal(15,6), not null
                RequestQuantity = reader.GetDecimal(i++);

                // Reason column, nvarchar(511), not null
                Reason = reader.GetString(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // QuantityIssued column, decimal(15,6), not null
                QuantityIssued = reader.GetDecimal(i++);

                // QuantityReceived column, decimal(15,6), not null
                QuantityReceived = reader.GetDecimal(i++);

                // CreatedBy column, nvarchar(255), not null
                CreatedBy = reader.GetString(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["StoreroomTransferId"].ToString(); }
                catch { missing.Append("StoreroomTransferId "); }

                try { reader["RequestPTStoreroomID"].ToString(); }
                catch { missing.Append("RequestPTStoreroomID "); }

                try { reader["RequestStoreroomId"].ToString(); }
                catch { missing.Append("RequestStoreroomId "); }

                try { reader["RequestPartId"].ToString(); }
                catch { missing.Append("RequestPartId "); }

                try { reader["IssuePTStoreroomID"].ToString(); }
                catch { missing.Append("IssuePTStoreroomID "); }

                try { reader["IssueStoreroomId"].ToString(); }
                catch { missing.Append("IssueStoreroomId "); }

                try { reader["IssuePartId"].ToString(); }
                catch { missing.Append("IssuePartId "); }

                try { reader["Creator_PersonnelId"].ToString(); }
                catch { missing.Append("Creator_PersonnelId "); }

                try { reader["RequestQuantity"].ToString(); }
                catch { missing.Append("RequestQuantity "); }

                try { reader["Reason"].ToString(); }
                catch { missing.Append("Reason "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["QuantityIssued"].ToString(); }
                catch { missing.Append("QuantityIssued "); }

                try { reader["QuantityReceived"].ToString(); }
                catch { missing.Append("QuantityReceived "); }

                try { reader["CreatedBy"].ToString(); }
                catch { missing.Append("CreatedBy "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a StoreroomTransfer table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_StoreroomTransfer_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the StoreroomTransfer table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_StoreroomTransfer_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the StoreroomTransfer table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_StoreroomTransfer_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all StoreroomTransfer table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_StoreroomTransfer[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_StoreroomTransfer[] data
        )
        {
            Database.SqlClient.ProcessRow<b_StoreroomTransfer> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_StoreroomTransfer[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_StoreroomTransfer>(reader => { b_StoreroomTransfer obj = new b_StoreroomTransfer(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_StoreroomTransfer_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_StoreroomTransfer[])results.ToArray(typeof(b_StoreroomTransfer));
                }
                else
                {
                    data = new b_StoreroomTransfer[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve StoreroomTransfer table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_StoreroomTransfer[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_StoreroomTransfer> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_StoreroomTransfer>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_StoreroomTransfer_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_StoreroomTransfer objects.
        /// </summary>
        /// <param name="obj">b_StoreroomTransfer object to compare against the current object.</param>
        public bool Equals(b_StoreroomTransfer obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (SiteId != obj.SiteId) return false;
            if (StoreroomTransferId != obj.StoreroomTransferId) return false;
            if (RequestPTStoreroomID != obj.RequestPTStoreroomID) return false;
            if (RequestStoreroomId != obj.RequestStoreroomId) return false;
            if (RequestPartId != obj.RequestPartId) return false;
            if (IssuePTStoreroomID != obj.IssuePTStoreroomID) return false;
            if (IssueStoreroomId != obj.IssueStoreroomId) return false;
            if (IssuePartId != obj.IssuePartId) return false;
            if (Creator_PersonnelId != obj.Creator_PersonnelId) return false;
            if (RequestQuantity != obj.RequestQuantity) return false;
            if (!Reason.Equals(obj.Reason)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (QuantityIssued != obj.QuantityIssued) return false;
            if (QuantityReceived != obj.QuantityReceived) return false;
            if (!CreatedBy.Equals(obj.CreatedBy)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_StoreroomTransfer objects.
        /// </summary>
        /// <param name="obj1">b_StoreroomTransfer object to use in the comparison.</param>
        /// <param name="obj2">b_StoreroomTransfer object to use in the comparison.</param>
        public static bool Equals(b_StoreroomTransfer obj1, b_StoreroomTransfer obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
