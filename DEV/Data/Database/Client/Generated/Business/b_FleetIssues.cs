/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the FleetIssues table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_FleetIssues : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_FleetIssues ()
        {
            FleetIssuesId = 0;
            ClientId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            CompleteDate = new System.Nullable<System.DateTime>();
            Defects = String.Empty;
            Description = String.Empty;
            DriverName = String.Empty;
            EquipmentId = 0;
            RecordDate = new System.Nullable<System.DateTime>();
            ServiceOrderId = 0;
            Status = String.Empty;
        }

        /// <summary>
        /// FleetIssuesId property
        /// </summary>
        public long FleetIssuesId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// Defects property
        /// </summary>
        public string Defects { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// DriverName property
        /// </summary>
        public string DriverName { get; set; }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        public long EquipmentId { get; set; }

        /// <summary>
        /// RecordDate property
        /// </summary>
        public DateTime? RecordDate { get; set; }

        /// <summary>
        /// ServiceOrderId property
        /// </summary>
        public long ServiceOrderId { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_FleetIssues object.
        /// This routine should be applied to the usp_FleetIssues_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FleetIssues_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_FleetIssues object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_FleetIssues obj = new b_FleetIssues();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_FleetIssues object.
        /// This routine should be applied to the usp_FleetIssues_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FleetIssues_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // FleetIssuesId column, bigint, not null
                        FleetIssuesId = reader.GetInt64(i++);

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // AreaId column, bigint, not null
                        AreaId = reader.GetInt64(i++);

                        // DepartmentId column, bigint, not null
                        DepartmentId = reader.GetInt64(i++);

                        // StoreroomId column, bigint, not null
                        StoreroomId = reader.GetInt64(i++);

            // CompleteDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    CompleteDate = reader.GetDateTime(i);
            }
            else
            {
                    CompleteDate = DateTime.MinValue;
            }
            i++;
                        // Defects column, nvarchar(MAX), not null
                        Defects = reader.GetString(i++);

                        // Description column, nvarchar(MAX), not null
                        Description = reader.GetString(i++);

                        // DriverName column, nvarchar(255), not null
                        DriverName = reader.GetString(i++);

                        // EquipmentId column, bigint, not null
                        EquipmentId = reader.GetInt64(i++);

            // RecordDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    RecordDate = reader.GetDateTime(i);
            }
            else
            {
                    RecordDate = DateTime.MinValue;
            }
            i++;
                        // ServiceOrderId column, bigint, not null
                        ServiceOrderId = reader.GetInt64(i++);

                        // Status column, nvarchar(15), not null
                        Status = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["FleetIssuesId"].ToString(); }
            catch { missing.Append("FleetIssuesId "); }
            
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["AreaId"].ToString(); }
            catch { missing.Append("AreaId "); }
            
            try { reader["DepartmentId"].ToString(); }
            catch { missing.Append("DepartmentId "); }
            
            try { reader["StoreroomId"].ToString(); }
            catch { missing.Append("StoreroomId "); }
            
            try { reader["CompleteDate"].ToString(); }
            catch { missing.Append("CompleteDate "); }
            
            try { reader["Defects"].ToString(); }
            catch { missing.Append("Defects "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["DriverName"].ToString(); }
            catch { missing.Append("DriverName "); }
            
            try { reader["EquipmentId"].ToString(); }
            catch { missing.Append("EquipmentId "); }
            
            try { reader["RecordDate"].ToString(); }
            catch { missing.Append("RecordDate "); }
            
            try { reader["ServiceOrderId"].ToString(); }
            catch { missing.Append("ServiceOrderId "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a FleetIssues table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetIssues_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the FleetIssues table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetIssues_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the FleetIssues table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetIssues_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all FleetIssues table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_FleetIssues[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_FleetIssues[] data
        )
        {
            Database.SqlClient.ProcessRow<b_FleetIssues> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_FleetIssues[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FleetIssues>(reader => { b_FleetIssues obj = new b_FleetIssues(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_FleetIssues_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_FleetIssues[])results.ToArray(typeof(b_FleetIssues));
                }
                else
                {
                    data = new b_FleetIssues[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve FleetIssues table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_FleetIssues[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_FleetIssues> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FleetIssues>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_FleetIssues_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_FleetIssues objects.
        /// </summary>
        /// <param name="obj">b_FleetIssues object to compare against the current object.</param>
        public bool Equals (b_FleetIssues obj)
        {
            if (FleetIssuesId != obj.FleetIssuesId) return false;
            if (ClientId != obj.ClientId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (!Defects.Equals(obj.Defects)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!DriverName.Equals(obj.DriverName)) return false;
            if (EquipmentId != obj.EquipmentId) return false;
            if (!RecordDate.Equals(obj.RecordDate)) return false;
            if (ServiceOrderId != obj.ServiceOrderId) return false;
            if (!Status.Equals(obj.Status)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_FleetIssues objects.
        /// </summary>
        /// <param name="obj1">b_FleetIssues object to use in the comparison.</param>
        /// <param name="obj2">b_FleetIssues object to use in the comparison.</param>
        public static bool Equals (b_FleetIssues obj1, b_FleetIssues obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
