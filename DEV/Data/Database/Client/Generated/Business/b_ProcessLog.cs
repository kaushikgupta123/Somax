/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ProcessLog table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ProcessLog : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ProcessLog ()
        {
            ClientId = 0;
            ProcessLogId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            PersonnelId = 0;
            Type = String.Empty;
            StartDate = new System.Nullable<System.DateTime>();
            FinishDate = new System.Nullable<System.DateTime>();
            ItemsReviewed = 0;
            HeadersCreated = 0;
            DetailsCreated = 0;
            Message = String.Empty;
            GenListDateStart = new System.Nullable<System.DateTime>();
            GenListDateFinish = new System.Nullable<System.DateTime>();
        }

        /// <summary>
        /// ProcessLogId property
        /// </summary>
        public long ProcessLogId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// PersonnelId property
        /// </summary>
        public long PersonnelId { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// StartDate property
        /// </summary>
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// FinishDate property
        /// </summary>
        public DateTime? FinishDate { get; set; }

        /// <summary>
        /// ItemsReviewed property
        /// </summary>
        public int ItemsReviewed { get; set; }

        /// <summary>
        /// HeadersCreated property
        /// </summary>
        public int HeadersCreated { get; set; }

        /// <summary>
        /// DetailsCreated property
        /// </summary>
        public int DetailsCreated { get; set; }

        /// <summary>
        /// Message property
        /// </summary>
        public string Message { get; set; }

        /// <summary>
        /// GenListDateStart property
        /// </summary>
        public DateTime? GenListDateStart { get; set; }

        /// <summary>
        /// GenListDateFinish property
        /// </summary>
        public DateTime? GenListDateFinish { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ProcessLog object.
        /// This routine should be applied to the usp_ProcessLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ProcessLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ProcessLog object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ProcessLog obj = new b_ProcessLog();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ProcessLog object.
        /// This routine should be applied to the usp_ProcessLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ProcessLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // ProcessLogId column, bigint, not null
                        ProcessLogId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // AreaId column, bigint, not null
                        AreaId = reader.GetInt64(i++);

                        // DepartmentId column, bigint, not null
                        DepartmentId = reader.GetInt64(i++);

                        // StoreroomId column, bigint, not null
                        StoreroomId = reader.GetInt64(i++);

                        // PersonnelId column, bigint, not null
                        PersonnelId = reader.GetInt64(i++);

                        // Type column, nvarchar(50), not null
                        Type = reader.GetString(i++);

            // StartDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    StartDate = reader.GetDateTime(i);
            }
            else
            {
                    StartDate = DateTime.MinValue;
            }
            i++;
            // FinishDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    FinishDate = reader.GetDateTime(i);
            }
            else
            {
                    FinishDate = DateTime.MinValue;
            }
            i++;
                        // ItemsReviewed column, int, not null
                        ItemsReviewed = reader.GetInt32(i++);

                        // HeadersCreated column, int, not null
                        HeadersCreated = reader.GetInt32(i++);

                        // DetailsCreated column, int, not null
                        DetailsCreated = reader.GetInt32(i++);

                        // Message column, nvarchar(255), not null
                        Message = reader.GetString(i++);

            // GenListDateStart column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    GenListDateStart = reader.GetDateTime(i);
            }
            else
            {
                    GenListDateStart = DateTime.MinValue;
            }
            i++;
            // GenListDateFinish column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    GenListDateFinish = reader.GetDateTime(i);
            }
            else
            {
                    GenListDateFinish = DateTime.MinValue;
            }
            i++;            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["ProcessLogId"].ToString(); }
            catch { missing.Append("ProcessLogId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["AreaId"].ToString(); }
            catch { missing.Append("AreaId "); }
            
            try { reader["DepartmentId"].ToString(); }
            catch { missing.Append("DepartmentId "); }
            
            try { reader["StoreroomId"].ToString(); }
            catch { missing.Append("StoreroomId "); }
            
            try { reader["PersonnelId"].ToString(); }
            catch { missing.Append("PersonnelId "); }
            
            try { reader["Type"].ToString(); }
            catch { missing.Append("Type "); }
            
            try { reader["StartDate"].ToString(); }
            catch { missing.Append("StartDate "); }
            
            try { reader["FinishDate"].ToString(); }
            catch { missing.Append("FinishDate "); }
            
            try { reader["ItemsReviewed"].ToString(); }
            catch { missing.Append("ItemsReviewed "); }
            
            try { reader["HeadersCreated"].ToString(); }
            catch { missing.Append("HeadersCreated "); }
            
            try { reader["DetailsCreated"].ToString(); }
            catch { missing.Append("DetailsCreated "); }
            
            try { reader["Message"].ToString(); }
            catch { missing.Append("Message "); }
            
            try { reader["GenListDateStart"].ToString(); }
            catch { missing.Append("GenListDateStart "); }
            
            try { reader["GenListDateFinish"].ToString(); }
            catch { missing.Append("GenListDateFinish "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a ProcessLog table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ProcessLog_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ProcessLog table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ProcessLog_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ProcessLog table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ProcessLog_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ProcessLog table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ProcessLog[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ProcessLog[] data
        )
        {
            Database.SqlClient.ProcessRow<b_ProcessLog> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ProcessLog[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ProcessLog>(reader => { b_ProcessLog obj = new b_ProcessLog(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_ProcessLog_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_ProcessLog[])results.ToArray(typeof(b_ProcessLog));
                }
                else
                {
                    data = new b_ProcessLog[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ProcessLog table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ProcessLog[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_ProcessLog> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ProcessLog>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_ProcessLog_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ProcessLog objects.
        /// </summary>
        /// <param name="obj">b_ProcessLog object to compare against the current object.</param>
        public bool Equals (b_ProcessLog obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (ProcessLogId != obj.ProcessLogId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (PersonnelId != obj.PersonnelId) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (!StartDate.Equals(obj.StartDate)) return false;
            if (!FinishDate.Equals(obj.FinishDate)) return false;
            if (ItemsReviewed != obj.ItemsReviewed) return false;
            if (HeadersCreated != obj.HeadersCreated) return false;
            if (DetailsCreated != obj.DetailsCreated) return false;
            if (!Message.Equals(obj.Message)) return false;
            if (!GenListDateStart.Equals(obj.GenListDateStart)) return false;
            if (!GenListDateFinish.Equals(obj.GenListDateFinish)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ProcessLog objects.
        /// </summary>
        /// <param name="obj1">b_ProcessLog object to use in the comparison.</param>
        /// <param name="obj2">b_ProcessLog object to use in the comparison.</param>
        public static bool Equals (b_ProcessLog obj1, b_ProcessLog obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
