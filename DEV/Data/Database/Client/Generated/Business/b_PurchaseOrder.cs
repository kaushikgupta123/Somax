/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PurchaseOrder table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PurchaseOrder : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PurchaseOrder()
        {
            ClientId = 0;
            PurchaseOrderId = 0;
            SiteId = 0;
            DepartmentId = 0;
            AreaId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            Attention = String.Empty;
            Buyer_PersonnelId = 0;
            Carrier = String.Empty;
            CompleteBy_PersonnelId = 0;
            Required = new System.Nullable<System.DateTime>();
            CompleteDate = new System.Nullable<System.DateTime>();
            Creator_PersonnelId = 0;
            FOB = String.Empty;
            Status = String.Empty;
            Terms = String.Empty;
            VendorId = 0;
            VoidBy_PersonnelId = 0;
            VoidDate = new System.Nullable<System.DateTime>();
            VoidReason = String.Empty;
            Reason = String.Empty;
            MessageToVendor = String.Empty;
            ExPurchaseOrderId = 0;
            ExPurchaseRequest = String.Empty;
            Currency = String.Empty;
            Revision = 0;
            PaymentTerms = String.Empty;
            IsExternal = false;
            IsPunchout = false;
            SentOrderRequest = false;
            Shipto = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// PurchaseOrderId property
        /// </summary>
        public long PurchaseOrderId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// Attention property
        /// </summary>
        public string Attention { get; set; }

        /// <summary>
        /// Buyer_PersonnelId property
        /// </summary>
        public long Buyer_PersonnelId { get; set; }

        /// <summary>
        /// Carrier property
        /// </summary>
        public string Carrier { get; set; }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        public long CompleteBy_PersonnelId { get; set; }

        /// <summary>
        /// Required property
        /// </summary>
        public DateTime? Required { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        public long Creator_PersonnelId { get; set; }

        /// <summary>
        /// FOB property
        /// </summary>
        public string FOB { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Terms property
        /// </summary>
        public string Terms { get; set; }

        /// <summary>
        /// VendorId property
        /// </summary>
        public long VendorId { get; set; }

        /// <summary>
        /// VoidBy_PersonnelId property
        /// </summary>
        public long VoidBy_PersonnelId { get; set; }

        /// <summary>
        /// VoidDate property
        /// </summary>
        public DateTime? VoidDate { get; set; }

        /// <summary>
        /// VoidReason property
        /// </summary>
        public string VoidReason { get; set; }

        /// <summary>
        /// Reason property
        /// </summary>
        public string Reason { get; set; }

        /// <summary>
        /// MessageToVendor property
        /// </summary>
        public string MessageToVendor { get; set; }

        /// <summary>
        /// ExPurchaseOrderId property
        /// </summary>
        public long ExPurchaseOrderId { get; set; }

        /// <summary>
        /// ExPurchaseRequest property
        /// </summary>
        public string ExPurchaseRequest { get; set; }

        /// <summary>
        /// Currency property
        /// </summary>
        public string Currency { get; set; }

        /// <summary>
        /// Revision property
        /// </summary>
        public int Revision { get; set; }

        /// <summary>
        /// PaymentTerms property
        /// </summary>
        public string PaymentTerms { get; set; }

        /// <summary>
        /// IsExternal property
        /// </summary>
        public bool IsExternal { get; set; }

        /// <summary>
        /// IsPunchout property
        /// </summary>
        public bool IsPunchout { get; set; }

        /// <summary>
        /// SentOrderRequest property
        /// </summary>
        public bool SentOrderRequest { get; set; }

        /// <summary>
        /// Shipto property
        /// </summary>
        public long Shipto { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PurchaseOrder object.
        /// This routine should be applied to the usp_PurchaseOrder_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PurchaseOrder_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PurchaseOrder object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_PurchaseOrder obj = new b_PurchaseOrder();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PurchaseOrder object.
        /// This routine should be applied to the usp_PurchaseOrder_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PurchaseOrder_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PurchaseOrderId column, bigint, not null
                PurchaseOrderId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(31), not null
                ClientLookupId = reader.GetString(i++);

                // Attention column, nvarchar(63), not null
                Attention = reader.GetString(i++);

                // Buyer_PersonnelId column, bigint, not null
                Buyer_PersonnelId = reader.GetInt64(i++);

                // Carrier column, nvarchar(15), not null
                Carrier = reader.GetString(i++);

                // CompleteBy_PersonnelId column, bigint, not null
                CompleteBy_PersonnelId = reader.GetInt64(i++);

                // Required column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    Required = reader.GetDateTime(i);
                }
                else
                {
                    Required = DateTime.MinValue;
                }
                i++;
                // CompleteDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CompleteDate = reader.GetDateTime(i);
                }
                else
                {
                    CompleteDate = DateTime.MinValue;
                }
                i++;
                // Creator_PersonnelId column, bigint, not null
                Creator_PersonnelId = reader.GetInt64(i++);

                // FOB column, nvarchar(15), not null
                FOB = reader.GetString(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // Terms column, nvarchar(15), not null
                Terms = reader.GetString(i++);

                // VendorId column, bigint, not null
                VendorId = reader.GetInt64(i++);

                // VoidBy_PersonnelId column, bigint, not null
                VoidBy_PersonnelId = reader.GetInt64(i++);

                // VoidDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    VoidDate = reader.GetDateTime(i);
                }
                else
                {
                    VoidDate = DateTime.MinValue;
                }
                i++;
                // VoidReason column, nvarchar(15), not null
                VoidReason = reader.GetString(i++);

                // Reason column, nvarchar(255), not null
                Reason = reader.GetString(i++);

                // MessageToVendor column, nvarchar(255), not null
                MessageToVendor = reader.GetString(i++);

                // ExPurchaseOrderId column, bigint, not null
                ExPurchaseOrderId = reader.GetInt64(i++);

                // ExPurchaseRequest column, nvarchar(31), not null
                ExPurchaseRequest = reader.GetString(i++);

                // Currency column, nvarchar(15), not null
                Currency = reader.GetString(i++);

                // Revision column, int, not null
                Revision = reader.GetInt32(i++);

                // PaymentTerms column, nvarchar(50), not null
                PaymentTerms = reader.GetString(i++);

                // IsExternal column, bit, not null
                IsExternal = reader.GetBoolean(i++);

                // IsPunchout column, bit, not null
                IsPunchout = reader.GetBoolean(i++);

                // SentOrderRequest column, bit, not null
                SentOrderRequest = reader.GetBoolean(i++);

                // Shipto column, bigint, not null
                Shipto = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PurchaseOrderId"].ToString(); }
                catch { missing.Append("PurchaseOrderId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["Attention"].ToString(); }
                catch { missing.Append("Attention "); }

                try { reader["Buyer_PersonnelId"].ToString(); }
                catch { missing.Append("Buyer_PersonnelId "); }

                try { reader["Carrier"].ToString(); }
                catch { missing.Append("Carrier "); }

                try { reader["CompleteBy_PersonnelId"].ToString(); }
                catch { missing.Append("CompleteBy_PersonnelId "); }

                try { reader["Required"].ToString(); }
                catch { missing.Append("Required "); }

                try { reader["CompleteDate"].ToString(); }
                catch { missing.Append("CompleteDate "); }

                try { reader["Creator_PersonnelId"].ToString(); }
                catch { missing.Append("Creator_PersonnelId "); }

                try { reader["FOB"].ToString(); }
                catch { missing.Append("FOB "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["Terms"].ToString(); }
                catch { missing.Append("Terms "); }

                try { reader["VendorId"].ToString(); }
                catch { missing.Append("VendorId "); }

                try { reader["VoidBy_PersonnelId"].ToString(); }
                catch { missing.Append("VoidBy_PersonnelId "); }

                try { reader["VoidDate"].ToString(); }
                catch { missing.Append("VoidDate "); }

                try { reader["VoidReason"].ToString(); }
                catch { missing.Append("VoidReason "); }

                try { reader["Reason"].ToString(); }
                catch { missing.Append("Reason "); }

                try { reader["MessageToVendor"].ToString(); }
                catch { missing.Append("MessageToVendor "); }

                try { reader["ExPurchaseOrderId"].ToString(); }
                catch { missing.Append("ExPurchaseOrderId "); }

                try { reader["ExPurchaseRequest"].ToString(); }
                catch { missing.Append("ExPurchaseRequest "); }

                try { reader["Currency"].ToString(); }
                catch { missing.Append("Currency "); }

                try { reader["Revision"].ToString(); }
                catch { missing.Append("Revision "); }

                try { reader["PaymentTerms"].ToString(); }
                catch { missing.Append("PaymentTerms "); }

                try { reader["IsExternal"].ToString(); }
                catch { missing.Append("IsExternal "); }

                try { reader["IsPunchout"].ToString(); }
                catch { missing.Append("IsPunchout "); }

                try { reader["SentOrderRequest"].ToString(); }
                catch { missing.Append("SentOrderRequest "); }

                try { reader["Shipto"].ToString(); }
                catch { missing.Append("Shipto "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a PurchaseOrder table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PurchaseOrder_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PurchaseOrder table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PurchaseOrder_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PurchaseOrder table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PurchaseOrder_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PurchaseOrder table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PurchaseOrder[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PurchaseOrder[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PurchaseOrder> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PurchaseOrder[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PurchaseOrder>(reader => { b_PurchaseOrder obj = new b_PurchaseOrder(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PurchaseOrder_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PurchaseOrder[])results.ToArray(typeof(b_PurchaseOrder));
                }
                else
                {
                    data = new b_PurchaseOrder[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PurchaseOrder table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PurchaseOrder[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PurchaseOrder> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PurchaseOrder>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PurchaseOrder_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PurchaseOrder objects.
        /// </summary>
        /// <param name="obj">b_PurchaseOrder object to compare against the current object.</param>
        public bool Equals(b_PurchaseOrder obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PurchaseOrderId != obj.PurchaseOrderId) return false;
            if (SiteId != obj.SiteId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (AreaId != obj.AreaId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!Attention.Equals(obj.Attention)) return false;
            if (Buyer_PersonnelId != obj.Buyer_PersonnelId) return false;
            if (!Carrier.Equals(obj.Carrier)) return false;
            if (CompleteBy_PersonnelId != obj.CompleteBy_PersonnelId) return false;
            if (!Required.Equals(obj.Required)) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (Creator_PersonnelId != obj.Creator_PersonnelId) return false;
            if (!FOB.Equals(obj.FOB)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!Terms.Equals(obj.Terms)) return false;
            if (VendorId != obj.VendorId) return false;
            if (VoidBy_PersonnelId != obj.VoidBy_PersonnelId) return false;
            if (!VoidDate.Equals(obj.VoidDate)) return false;
            if (!VoidReason.Equals(obj.VoidReason)) return false;
            if (!Reason.Equals(obj.Reason)) return false;
            if (!MessageToVendor.Equals(obj.MessageToVendor)) return false;
            if (ExPurchaseOrderId != obj.ExPurchaseOrderId) return false;
            if (!ExPurchaseRequest.Equals(obj.ExPurchaseRequest)) return false;
            if (!Currency.Equals(obj.Currency)) return false;
            if (Revision != obj.Revision) return false;
            if (!PaymentTerms.Equals(obj.PaymentTerms)) return false;
            if (IsExternal != obj.IsExternal) return false;
            if (IsPunchout != obj.IsPunchout) return false;
            if (SentOrderRequest != obj.SentOrderRequest) return false;
            if (Shipto != obj.Shipto) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PurchaseOrder objects.
        /// </summary>
        /// <param name="obj1">b_PurchaseOrder object to use in the comparison.</param>
        /// <param name="obj2">b_PurchaseOrder object to use in the comparison.</param>
        public static bool Equals(b_PurchaseOrder obj1, b_PurchaseOrder obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
