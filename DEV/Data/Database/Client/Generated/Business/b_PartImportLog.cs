/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartImportLog table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PartImportLog : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PartImportLog ()
        {
            ClientId = 0;
            PartImportLogId = 0;
            PartId = 0;
            SiteId = 0;
            DataImportLogId = 0;
            ClientLookupId = String.Empty;
            AverageCost = 0;
            Description = String.Empty;
            InactiveFlag = false;
            IssueUnit = String.Empty;
            Manufacturer = String.Empty;
            ManufacturerId = String.Empty;
            StockType = String.Empty;
            UPCCode = String.Empty;
            CountFrequency = 0;
            QtyMaximum = 0;
            QtyOnHand = 0;
            QtyReorderLevel = 0;
        }

        /// <summary>
        /// PartImportLogId property
        /// </summary>
        public long PartImportLogId { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// DataImportLogId property
        /// </summary>
        public long DataImportLogId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// AverageCost property
        /// </summary>
        public decimal AverageCost { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// IssueUnit property
        /// </summary>
        public string IssueUnit { get; set; }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        public string Manufacturer { get; set; }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        public string ManufacturerId { get; set; }

        /// <summary>
        /// StockType property
        /// </summary>
        public string StockType { get; set; }

        /// <summary>
        /// UPCCode property
        /// </summary>
        public string UPCCode { get; set; }

        /// <summary>
        /// CountFrequency property
        /// </summary>
        public int CountFrequency { get; set; }

        /// <summary>
        /// QtyMaximum property
        /// </summary>
        public decimal QtyMaximum { get; set; }

        /// <summary>
        /// QtyOnHand property
        /// </summary>
        public decimal QtyOnHand { get; set; }

        /// <summary>
        /// QtyReorderLevel property
        /// </summary>
        public decimal QtyReorderLevel { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PartImportLog object.
        /// This routine should be applied to the usp_PartImportLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartImportLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PartImportLog object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_PartImportLog obj = new b_PartImportLog();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PartImportLog object.
        /// This routine should be applied to the usp_PartImportLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartImportLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // PartImportLogId column, bigint, not null
                        PartImportLogId = reader.GetInt64(i++);

                        // PartId column, bigint, not null
                        PartId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // DataImportLogId column, bigint, not null
                        DataImportLogId = reader.GetInt64(i++);

                        // ClientLookupId column, nvarchar(31), not null
                        ClientLookupId = reader.GetString(i++);

                        // AverageCost column, decimal(15,5), not null
                        AverageCost = reader.GetDecimal(i++);

                        // Description column, nvarchar(127), not null
                        Description = reader.GetString(i++);

                        // InactiveFlag column, bit, not null
                        InactiveFlag = reader.GetBoolean(i++);

                        // IssueUnit column, nvarchar(15), not null
                        IssueUnit = reader.GetString(i++);

                        // Manufacturer column, nvarchar(31), not null
                        Manufacturer = reader.GetString(i++);

                        // ManufacturerId column, nvarchar(63), not null
                        ManufacturerId = reader.GetString(i++);

                        // StockType column, nvarchar(15), not null
                        StockType = reader.GetString(i++);

                        // UPCCode column, nvarchar(31), not null
                        UPCCode = reader.GetString(i++);

                        // CountFrequency column, int, not null
                        CountFrequency = reader.GetInt32(i++);

                        // QtyMaximum column, decimal(15,6), not null
                        QtyMaximum = reader.GetDecimal(i++);

                        // QtyOnHand column, decimal(15,6), not null
                        QtyOnHand = reader.GetDecimal(i++);

                        // QtyReorderLevel column, decimal(15,6), not null
                        QtyReorderLevel = reader.GetDecimal(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["PartImportLogId"].ToString(); }
            catch { missing.Append("PartImportLogId "); }
            
            try { reader["PartId"].ToString(); }
            catch { missing.Append("PartId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["DataImportLogId"].ToString(); }
            catch { missing.Append("DataImportLogId "); }
            
            try { reader["ClientLookupId"].ToString(); }
            catch { missing.Append("ClientLookupId "); }
            
            try { reader["AverageCost"].ToString(); }
            catch { missing.Append("AverageCost "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["InactiveFlag"].ToString(); }
            catch { missing.Append("InactiveFlag "); }
            
            try { reader["IssueUnit"].ToString(); }
            catch { missing.Append("IssueUnit "); }
            
            try { reader["Manufacturer"].ToString(); }
            catch { missing.Append("Manufacturer "); }
            
            try { reader["ManufacturerId"].ToString(); }
            catch { missing.Append("ManufacturerId "); }
            
            try { reader["StockType"].ToString(); }
            catch { missing.Append("StockType "); }
            
            try { reader["UPCCode"].ToString(); }
            catch { missing.Append("UPCCode "); }
            
            try { reader["CountFrequency"].ToString(); }
            catch { missing.Append("CountFrequency "); }
            
            try { reader["QtyMaximum"].ToString(); }
            catch { missing.Append("QtyMaximum "); }
            
            try { reader["QtyOnHand"].ToString(); }
            catch { missing.Append("QtyOnHand "); }
            
            try { reader["QtyReorderLevel"].ToString(); }
            catch { missing.Append("QtyReorderLevel "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a PartImportLog table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartImportLog_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PartImportLog table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartImportLog_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PartImportLog table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartImportLog_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PartImportLog table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PartImportLog[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PartImportLog[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PartImportLog> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PartImportLog[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartImportLog>(reader => { b_PartImportLog obj = new b_PartImportLog(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PartImportLog_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PartImportLog[])results.ToArray(typeof(b_PartImportLog));
                }
                else
                {
                    data = new b_PartImportLog[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PartImportLog table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PartImportLog[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PartImportLog> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartImportLog>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PartImportLog_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PartImportLog objects.
        /// </summary>
        /// <param name="obj">b_PartImportLog object to compare against the current object.</param>
        public bool Equals (b_PartImportLog obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PartImportLogId != obj.PartImportLogId) return false;
            if (PartId != obj.PartId) return false;
            if (SiteId != obj.SiteId) return false;
            if (DataImportLogId != obj.DataImportLogId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (AverageCost != obj.AverageCost) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (!IssueUnit.Equals(obj.IssueUnit)) return false;
            if (!Manufacturer.Equals(obj.Manufacturer)) return false;
            if (!ManufacturerId.Equals(obj.ManufacturerId)) return false;
            if (!StockType.Equals(obj.StockType)) return false;
            if (!UPCCode.Equals(obj.UPCCode)) return false;
            if (CountFrequency != obj.CountFrequency) return false;
            if (QtyMaximum != obj.QtyMaximum) return false;
            if (QtyOnHand != obj.QtyOnHand) return false;
            if (QtyReorderLevel != obj.QtyReorderLevel) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PartImportLog objects.
        /// </summary>
        /// <param name="obj1">b_PartImportLog object to use in the comparison.</param>
        /// <param name="obj2">b_PartImportLog object to use in the comparison.</param>
        public static bool Equals (b_PartImportLog obj1, b_PartImportLog obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
