/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartUDF table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PartUDF : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PartUDF ()
        {
            ClientId = 0;
            PartUDFId = 0;
            PartId = 0;
            Text1 = String.Empty;
            Text2 = String.Empty;
            Text3 = String.Empty;
            Text4 = String.Empty;
            Date1 = new System.Nullable<System.DateTime>();
            Date2 = new System.Nullable<System.DateTime>();
            Date3 = new System.Nullable<System.DateTime>();
            Date4 = new System.Nullable<System.DateTime>();
            Bit1 = false;
            Bit2 = false;
            Bit3 = false;
            Bit4 = false;
            Numeric1 = 0;
            Numeric2 = 0;
            Numeric3 = 0;
            Numeric4 = 0;
            Select1 = String.Empty;
            Select2 = String.Empty;
            Select3 = String.Empty;
            Select4 = String.Empty;
        }

        /// <summary>
        /// PartUDFId property
        /// </summary>
        public long PartUDFId { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// Text1 property
        /// </summary>
        public string Text1 { get; set; }

        /// <summary>
        /// Text2 property
        /// </summary>
        public string Text2 { get; set; }

        /// <summary>
        /// Text3 property
        /// </summary>
        public string Text3 { get; set; }

        /// <summary>
        /// Text4 property
        /// </summary>
        public string Text4 { get; set; }

        /// <summary>
        /// Date1 property
        /// </summary>
        public DateTime? Date1 { get; set; }

        /// <summary>
        /// Date2 property
        /// </summary>
        public DateTime? Date2 { get; set; }

        /// <summary>
        /// Date3 property
        /// </summary>
        public DateTime? Date3 { get; set; }

        /// <summary>
        /// Date4 property
        /// </summary>
        public DateTime? Date4 { get; set; }

        /// <summary>
        /// Bit1 property
        /// </summary>
        public bool Bit1 { get; set; }

        /// <summary>
        /// Bit2 property
        /// </summary>
        public bool Bit2 { get; set; }

        /// <summary>
        /// Bit3 property
        /// </summary>
        public bool Bit3 { get; set; }

        /// <summary>
        /// Bit4 property
        /// </summary>
        public bool Bit4 { get; set; }

        /// <summary>
        /// Numeric1 property
        /// </summary>
        public decimal Numeric1 { get; set; }

        /// <summary>
        /// Numeric2 property
        /// </summary>
        public decimal Numeric2 { get; set; }

        /// <summary>
        /// Numeric3 property
        /// </summary>
        public decimal Numeric3 { get; set; }

        /// <summary>
        /// Numeric4 property
        /// </summary>
        public decimal Numeric4 { get; set; }

        /// <summary>
        /// Select1 property
        /// </summary>
        public string Select1 { get; set; }

        /// <summary>
        /// Select2 property
        /// </summary>
        public string Select2 { get; set; }

        /// <summary>
        /// Select3 property
        /// </summary>
        public string Select3 { get; set; }

        /// <summary>
        /// Select4 property
        /// </summary>
        public string Select4 { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PartUDF object.
        /// This routine should be applied to the usp_PartUDF_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartUDF_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PartUDF object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_PartUDF obj = new b_PartUDF();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PartUDF object.
        /// This routine should be applied to the usp_PartUDF_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartUDF_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // PartUDFId column, bigint, not null
                        PartUDFId = reader.GetInt64(i++);

                        // PartId column, bigint, not null
                        PartId = reader.GetInt64(i++);

                        // Text1 column, nvarchar(67), not null
                        Text1 = reader.GetString(i++);

                        // Text2 column, nvarchar(67), not null
                        Text2 = reader.GetString(i++);

                        // Text3 column, nvarchar(67), not null
                        Text3 = reader.GetString(i++);

                        // Text4 column, nvarchar(67), not null
                        Text4 = reader.GetString(i++);

            // Date1 column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    Date1 = reader.GetDateTime(i);
            }
            else
            {
                    Date1 = DateTime.MinValue;
            }
            i++;
            // Date2 column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    Date2 = reader.GetDateTime(i);
            }
            else
            {
                    Date2 = DateTime.MinValue;
            }
            i++;
            // Date3 column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    Date3 = reader.GetDateTime(i);
            }
            else
            {
                    Date3 = DateTime.MinValue;
            }
            i++;
            // Date4 column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    Date4 = reader.GetDateTime(i);
            }
            else
            {
                    Date4 = DateTime.MinValue;
            }
            i++;
                        // Bit1 column, bit, not null
                        Bit1 = reader.GetBoolean(i++);

                        // Bit2 column, bit, not null
                        Bit2 = reader.GetBoolean(i++);

                        // Bit3 column, bit, not null
                        Bit3 = reader.GetBoolean(i++);

                        // Bit4 column, bit, not null
                        Bit4 = reader.GetBoolean(i++);

                        // Numeric1 column, decimal(9,2), not null
                        Numeric1 = reader.GetDecimal(i++);

                        // Numeric2 column, decimal(9,2), not null
                        Numeric2 = reader.GetDecimal(i++);

                        // Numeric3 column, decimal(9,2), not null
                        Numeric3 = reader.GetDecimal(i++);

                        // Numeric4 column, decimal(9,2), not null
                        Numeric4 = reader.GetDecimal(i++);

                        // Select1 column, nvarchar(15), not null
                        Select1 = reader.GetString(i++);

                        // Select2 column, nvarchar(15), not null
                        Select2 = reader.GetString(i++);

                        // Select3 column, nvarchar(15), not null
                        Select3 = reader.GetString(i++);

                        // Select4 column, nvarchar(15), not null
                        Select4 = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["PartUDFId"].ToString(); }
            catch { missing.Append("PartUDFId "); }
            
            try { reader["PartId"].ToString(); }
            catch { missing.Append("PartId "); }
            
            try { reader["Text1"].ToString(); }
            catch { missing.Append("Text1 "); }
            
            try { reader["Text2"].ToString(); }
            catch { missing.Append("Text2 "); }
            
            try { reader["Text3"].ToString(); }
            catch { missing.Append("Text3 "); }
            
            try { reader["Text4"].ToString(); }
            catch { missing.Append("Text4 "); }
            
            try { reader["Date1"].ToString(); }
            catch { missing.Append("Date1 "); }
            
            try { reader["Date2"].ToString(); }
            catch { missing.Append("Date2 "); }
            
            try { reader["Date3"].ToString(); }
            catch { missing.Append("Date3 "); }
            
            try { reader["Date4"].ToString(); }
            catch { missing.Append("Date4 "); }
            
            try { reader["Bit1"].ToString(); }
            catch { missing.Append("Bit1 "); }
            
            try { reader["Bit2"].ToString(); }
            catch { missing.Append("Bit2 "); }
            
            try { reader["Bit3"].ToString(); }
            catch { missing.Append("Bit3 "); }
            
            try { reader["Bit4"].ToString(); }
            catch { missing.Append("Bit4 "); }
            
            try { reader["Numeric1"].ToString(); }
            catch { missing.Append("Numeric1 "); }
            
            try { reader["Numeric2"].ToString(); }
            catch { missing.Append("Numeric2 "); }
            
            try { reader["Numeric3"].ToString(); }
            catch { missing.Append("Numeric3 "); }
            
            try { reader["Numeric4"].ToString(); }
            catch { missing.Append("Numeric4 "); }
            
            try { reader["Select1"].ToString(); }
            catch { missing.Append("Select1 "); }
            
            try { reader["Select2"].ToString(); }
            catch { missing.Append("Select2 "); }
            
            try { reader["Select3"].ToString(); }
            catch { missing.Append("Select3 "); }
            
            try { reader["Select4"].ToString(); }
            catch { missing.Append("Select4 "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a PartUDF table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartUDF_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PartUDF table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartUDF_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PartUDF table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartUDF_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PartUDF table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PartUDF[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PartUDF[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PartUDF> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PartUDF[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartUDF>(reader => { b_PartUDF obj = new b_PartUDF(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PartUDF_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PartUDF[])results.ToArray(typeof(b_PartUDF));
                }
                else
                {
                    data = new b_PartUDF[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PartUDF table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PartUDF[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PartUDF> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartUDF>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PartUDF_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PartUDF objects.
        /// </summary>
        /// <param name="obj">b_PartUDF object to compare against the current object.</param>
        public bool Equals (b_PartUDF obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PartUDFId != obj.PartUDFId) return false;
            if (PartId != obj.PartId) return false;
            if (!Text1.Equals(obj.Text1)) return false;
            if (!Text2.Equals(obj.Text2)) return false;
            if (!Text3.Equals(obj.Text3)) return false;
            if (!Text4.Equals(obj.Text4)) return false;
            if (!Date1.Equals(obj.Date1)) return false;
            if (!Date2.Equals(obj.Date2)) return false;
            if (!Date3.Equals(obj.Date3)) return false;
            if (!Date4.Equals(obj.Date4)) return false;
            if (Bit1 != obj.Bit1) return false;
            if (Bit2 != obj.Bit2) return false;
            if (Bit3 != obj.Bit3) return false;
            if (Bit4 != obj.Bit4) return false;
            if (Numeric1 != obj.Numeric1) return false;
            if (Numeric2 != obj.Numeric2) return false;
            if (Numeric3 != obj.Numeric3) return false;
            if (Numeric4 != obj.Numeric4) return false;
            if (!Select1.Equals(obj.Select1)) return false;
            if (!Select2.Equals(obj.Select2)) return false;
            if (!Select3.Equals(obj.Select3)) return false;
            if (!Select4.Equals(obj.Select4)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PartUDF objects.
        /// </summary>
        /// <param name="obj1">b_PartUDF object to use in the comparison.</param>
        /// <param name="obj2">b_PartUDF object to use in the comparison.</param>
        public static bool Equals (b_PartUDF obj1, b_PartUDF obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
