/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Vendor table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Vendor : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Vendor()
        {
            ClientId = 0;
            VendorId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            Address1 = String.Empty;
            Address2 = String.Empty;
            Address3 = String.Empty;
            AddressCity = String.Empty;
            AddressCountry = String.Empty;
            AddressPostCode = String.Empty;
            AddressState = String.Empty;
            CustomerAccount = String.Empty;
            EmailAddress = String.Empty;
            FaxNumber = String.Empty;
            FOBCode = String.Empty;
            InactiveFlag = false;
            Name = String.Empty;
            PhoneNumber = String.Empty;
            RemitAddress1 = String.Empty;
            RemitAddress2 = String.Empty;
            RemitAddress3 = String.Empty;
            RemitCity = String.Empty;
            RemitCountry = String.Empty;
            RemitPostCode = String.Empty;
            RemitState = String.Empty;
            RemitUseBusiness = false;
            Terms = String.Empty;
            Type = String.Empty;
            Website = String.Empty;
            VendorMasterId = 0;
            AutoEmailPO = false;
            IsExternal = false;
            PunchoutIndicator = false;
            VendorDomain = String.Empty;
            VendorIdentity = String.Empty;
            SharedSecret = String.Empty;
            SenderDomain = String.Empty;
            SenderIdentity = String.Empty;
            PunchoutURL = String.Empty;
            AutoSendPunchOutPO = false;
            SendPunchoutPOURL = String.Empty;
            SendPunchoutPOEmail = String.Empty;
            SourceId = 0;
            InsuranceOverride = false;
            InsuranceOverrideDate = new System.Nullable<System.DateTime>();
            InsuranceRequired = false;
            InsuranceSource = 0;
            InsuranceExpireDate = new System.Nullable<System.DateTime>();
            ContractorOwner = 0;
            SICCode = String.Empty;
            OSHARate = 0;
            ExpModRate = 0;
            NAICSCode = String.Empty;
            ClassCode = String.Empty;
            AssetMgtOverride = false;
            AssetMgtOverrideDate = new System.Nullable<System.DateTime>();
            AssetMgtRequired = false;
            AssetMgtSource = 0;
            AssetMgtExpireDate = new System.Nullable<System.DateTime>();
            AssetMgtOwner = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// VendorId property
        /// </summary>
        public long VendorId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// Address1 property
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Address2 property
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Address3 property
        /// </summary>
        public string Address3 { get; set; }

        /// <summary>
        /// AddressCity property
        /// </summary>
        public string AddressCity { get; set; }

        /// <summary>
        /// AddressCountry property
        /// </summary>
        public string AddressCountry { get; set; }

        /// <summary>
        /// AddressPostCode property
        /// </summary>
        public string AddressPostCode { get; set; }

        /// <summary>
        /// AddressState property
        /// </summary>
        public string AddressState { get; set; }

        /// <summary>
        /// CustomerAccount property
        /// </summary>
        public string CustomerAccount { get; set; }

        /// <summary>
        /// EmailAddress property
        /// </summary>
        public string EmailAddress { get; set; }

        /// <summary>
        /// FaxNumber property
        /// </summary>
        public string FaxNumber { get; set; }

        /// <summary>
        /// FOBCode property
        /// </summary>
        public string FOBCode { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// Name property
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// PhoneNumber property
        /// </summary>
        public string PhoneNumber { get; set; }

        /// <summary>
        /// RemitAddress1 property
        /// </summary>
        public string RemitAddress1 { get; set; }

        /// <summary>
        /// RemitAddress2 property
        /// </summary>
        public string RemitAddress2 { get; set; }

        /// <summary>
        /// RemitAddress3 property
        /// </summary>
        public string RemitAddress3 { get; set; }

        /// <summary>
        /// RemitCity property
        /// </summary>
        public string RemitCity { get; set; }

        /// <summary>
        /// RemitCountry property
        /// </summary>
        public string RemitCountry { get; set; }

        /// <summary>
        /// RemitPostCode property
        /// </summary>
        public string RemitPostCode { get; set; }

        /// <summary>
        /// RemitState property
        /// </summary>
        public string RemitState { get; set; }

        /// <summary>
        /// RemitUseBusiness property
        /// </summary>
        public bool RemitUseBusiness { get; set; }

        /// <summary>
        /// Terms property
        /// </summary>
        public string Terms { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Website property
        /// </summary>
        public string Website { get; set; }

        /// <summary>
        /// VendorMasterId property
        /// </summary>
        public long VendorMasterId { get; set; }

        /// <summary>
        /// AutoEmailPO property
        /// </summary>
        public bool AutoEmailPO { get; set; }

        /// <summary>
        /// IsExternal property
        /// </summary>
        public bool IsExternal { get; set; }

        /// <summary>
        /// PunchoutIndicator property
        /// </summary>
        public bool PunchoutIndicator { get; set; }

        /// <summary>
        /// VendorDomain property
        /// </summary>
        public string VendorDomain { get; set; }

        /// <summary>
        /// VendorIdentity property
        /// </summary>
        public string VendorIdentity { get; set; }

        /// <summary>
        /// SharedSecret property
        /// </summary>
        public string SharedSecret { get; set; }

        /// <summary>
        /// SenderDomain property
        /// </summary>
        public string SenderDomain { get; set; }

        /// <summary>
        /// SenderIdentity property
        /// </summary>
        public string SenderIdentity { get; set; }

        /// <summary>
        /// PunchoutURL property
        /// </summary>
        public string PunchoutURL { get; set; }

        /// <summary>
        /// AutoSendPunchOutPO property
        /// </summary>
        public bool AutoSendPunchOutPO { get; set; }

        /// <summary>
        /// SendPunchoutPOURL property
        /// </summary>
        public string SendPunchoutPOURL { get; set; }

        /// <summary>
        /// SendPunchoutPOEmail property
        /// </summary>
        public string SendPunchoutPOEmail { get; set; }

        /// <summary>
        /// SourceId property
        /// </summary>
        public long SourceId { get; set; }

        /// <summary>
        /// InsuranceOverride property
        /// </summary>
        public bool InsuranceOverride { get; set; }

        /// <summary>
        /// InsuranceOverrideDate property
        /// </summary>
        public DateTime? InsuranceOverrideDate { get; set; }

        /// <summary>
        /// InsuranceRequired property
        /// </summary>
        public bool InsuranceRequired { get; set; }

        /// <summary>
        /// InsuranceSource property
        /// </summary>
        public long InsuranceSource { get; set; }

        /// <summary>
        /// InsuranceExpireDate property
        /// </summary>
        public DateTime? InsuranceExpireDate { get; set; }

        /// <summary>
        /// ContractorOwner property
        /// </summary>
        public long ContractorOwner { get; set; }

        /// <summary>
        /// SICCode property
        /// </summary>
        public string SICCode { get; set; }

        /// <summary>
        /// OSHARate property
        /// </summary>
        public decimal OSHARate { get; set; }

        /// <summary>
        /// ExpModRate property
        /// </summary>
        public decimal ExpModRate { get; set; }

        /// <summary>
        /// NAICSCode property
        /// </summary>
        public string NAICSCode { get; set; }

        /// <summary>
        /// ClassCode property
        /// </summary>
        public string ClassCode { get; set; }

        /// <summary>
        /// AssetMgtOverride property
        /// </summary>
        public bool AssetMgtOverride { get; set; }

        /// <summary>
        /// AssetMgtOverrideDate property
        /// </summary>
        public DateTime? AssetMgtOverrideDate { get; set; }

        /// <summary>
        /// AssetMgtRequired property
        /// </summary>
        public bool AssetMgtRequired { get; set; }

        /// <summary>
        /// AssetMgtSource property
        /// </summary>
        public long AssetMgtSource { get; set; }

        /// <summary>
        /// AssetMgtExpireDate property
        /// </summary>
        public DateTime? AssetMgtExpireDate { get; set; }

        /// <summary>
        /// AssetMgtOwner property
        /// </summary>
        public long AssetMgtOwner { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Vendor object.
        /// This routine should be applied to the usp_Vendor_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Vendor_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Vendor object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_Vendor obj = new b_Vendor();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Vendor object.
        /// This routine should be applied to the usp_Vendor_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Vendor_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // VendorId column, bigint, not null
                VendorId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(31), not null
                ClientLookupId = reader.GetString(i++);

                // Address1 column, nvarchar(63), not null
                Address1 = reader.GetString(i++);

                // Address2 column, nvarchar(63), not null
                Address2 = reader.GetString(i++);

                // Address3 column, nvarchar(63), not null
                Address3 = reader.GetString(i++);

                // AddressCity column, nvarchar(63), not null
                AddressCity = reader.GetString(i++);

                // AddressCountry column, nvarchar(63), not null
                AddressCountry = reader.GetString(i++);

                // AddressPostCode column, nvarchar(31), not null
                AddressPostCode = reader.GetString(i++);

                // AddressState column, nvarchar(63), not null
                AddressState = reader.GetString(i++);

                // CustomerAccount column, nvarchar(31), not null
                CustomerAccount = reader.GetString(i++);

                // EmailAddress column, nvarchar(63), not null
                EmailAddress = reader.GetString(i++);

                // FaxNumber column, nvarchar(31), not null
                FaxNumber = reader.GetString(i++);

                // FOBCode column, nvarchar(15), not null
                FOBCode = reader.GetString(i++);

                // InactiveFlag column, bit, not null
                InactiveFlag = reader.GetBoolean(i++);

                // Name column, nvarchar(63), not null
                Name = reader.GetString(i++);

                // PhoneNumber column, nvarchar(31), not null
                PhoneNumber = reader.GetString(i++);

                // RemitAddress1 column, nvarchar(63), not null
                RemitAddress1 = reader.GetString(i++);

                // RemitAddress2 column, nvarchar(63), not null
                RemitAddress2 = reader.GetString(i++);

                // RemitAddress3 column, nvarchar(63), not null
                RemitAddress3 = reader.GetString(i++);

                // RemitCity column, nvarchar(63), not null
                RemitCity = reader.GetString(i++);

                // RemitCountry column, nvarchar(63), not null
                RemitCountry = reader.GetString(i++);

                // RemitPostCode column, nvarchar(31), not null
                RemitPostCode = reader.GetString(i++);

                // RemitState column, nvarchar(63), not null
                RemitState = reader.GetString(i++);

                // RemitUseBusiness column, bit, not null
                RemitUseBusiness = reader.GetBoolean(i++);

                // Terms column, nvarchar(15), not null
                Terms = reader.GetString(i++);

                // Type column, nvarchar(15), not null
                Type = reader.GetString(i++);

                // Website column, nvarchar(127), not null
                Website = reader.GetString(i++);

                // VendorMasterId column, bigint, not null
                VendorMasterId = reader.GetInt64(i++);

                // AutoEmailPO column, bit, not null
                AutoEmailPO = reader.GetBoolean(i++);

                // IsExternal column, bit, not null
                IsExternal = reader.GetBoolean(i++);

                // PunchoutIndicator column, bit, not null
                PunchoutIndicator = reader.GetBoolean(i++);

                // VendorDomain column, nvarchar(15), not null
                VendorDomain = reader.GetString(i++);

                // VendorIdentity column, nvarchar(31), not null
                VendorIdentity = reader.GetString(i++);

                // SharedSecret column, nvarchar(15), not null
                SharedSecret = reader.GetString(i++);

                // SenderDomain column, nvarchar(15), not null
                SenderDomain = reader.GetString(i++);

                // SenderIdentity column, nvarchar(31), not null
                SenderIdentity = reader.GetString(i++);

                // PunchoutURL column, nvarchar(MAX), not null
                PunchoutURL = reader.GetString(i++);

                // AutoSendPunchOutPO column, bit, not null
                AutoSendPunchOutPO = reader.GetBoolean(i++);

                // SendPunchoutPOURL column, nvarchar(MAX), not null
                SendPunchoutPOURL = reader.GetString(i++);

                // SendPunchoutPOEmail column, nvarchar(63), not null
                SendPunchoutPOEmail = reader.GetString(i++);

                // SourceId column, bigint, not null
                SourceId = reader.GetInt64(i++);

                // InsuranceOverride column, bit, not null
                InsuranceOverride = reader.GetBoolean(i++);

                // InsuranceOverrideDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    InsuranceOverrideDate = reader.GetDateTime(i);
                }
                else
                {
                    InsuranceOverrideDate = DateTime.MinValue;
                }
                i++;
                // InsuranceRequired column, bit, not null
                InsuranceRequired = reader.GetBoolean(i++);

                // InsuranceSource column, bigint, not null
                InsuranceSource = reader.GetInt64(i++);

                // InsuranceExpireDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    InsuranceExpireDate = reader.GetDateTime(i);
                }
                else
                {
                    InsuranceExpireDate = DateTime.MinValue;
                }
                i++;
                // ContractorOwner column, bigint, not null
                ContractorOwner = reader.GetInt64(i++);

                // SICCode column, nvarchar(31), not null
                SICCode = reader.GetString(i++);

                // OSHARate column, decimal(10,3), not null
                OSHARate = reader.GetDecimal(i++);

                // ExpModRate column, decimal(10,4), not null
                ExpModRate = reader.GetDecimal(i++);

                // NAICSCode column, nvarchar(31), not null
                NAICSCode = reader.GetString(i++);

                // ClassCode column, nvarchar(15), not null
                ClassCode = reader.GetString(i++);

                // AssetMgtOverride column, bit, not null
                AssetMgtOverride = reader.GetBoolean(i++);

                // AssetMgtOverrideDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    AssetMgtOverrideDate = reader.GetDateTime(i);
                }
                else
                {
                    AssetMgtOverrideDate = DateTime.MinValue;
                }
                i++;
                // AssetMgtRequired column, bit, not null
                AssetMgtRequired = reader.GetBoolean(i++);

                // AssetMgtSource column, bigint, not null
                AssetMgtSource = reader.GetInt64(i++);

                // AssetMgtExpireDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    AssetMgtExpireDate = reader.GetDateTime(i);
                }
                else
                {
                    AssetMgtExpireDate = DateTime.MinValue;
                }
                i++;
                // AssetMgtOwner column, bigint, not null
                AssetMgtOwner = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["VendorId"].ToString(); }
                catch { missing.Append("VendorId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["Address1"].ToString(); }
                catch { missing.Append("Address1 "); }

                try { reader["Address2"].ToString(); }
                catch { missing.Append("Address2 "); }

                try { reader["Address3"].ToString(); }
                catch { missing.Append("Address3 "); }

                try { reader["AddressCity"].ToString(); }
                catch { missing.Append("AddressCity "); }

                try { reader["AddressCountry"].ToString(); }
                catch { missing.Append("AddressCountry "); }

                try { reader["AddressPostCode"].ToString(); }
                catch { missing.Append("AddressPostCode "); }

                try { reader["AddressState"].ToString(); }
                catch { missing.Append("AddressState "); }

                try { reader["CustomerAccount"].ToString(); }
                catch { missing.Append("CustomerAccount "); }

                try { reader["EmailAddress"].ToString(); }
                catch { missing.Append("EmailAddress "); }

                try { reader["FaxNumber"].ToString(); }
                catch { missing.Append("FaxNumber "); }

                try { reader["FOBCode"].ToString(); }
                catch { missing.Append("FOBCode "); }

                try { reader["InactiveFlag"].ToString(); }
                catch { missing.Append("InactiveFlag "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["PhoneNumber"].ToString(); }
                catch { missing.Append("PhoneNumber "); }

                try { reader["RemitAddress1"].ToString(); }
                catch { missing.Append("RemitAddress1 "); }

                try { reader["RemitAddress2"].ToString(); }
                catch { missing.Append("RemitAddress2 "); }

                try { reader["RemitAddress3"].ToString(); }
                catch { missing.Append("RemitAddress3 "); }

                try { reader["RemitCity"].ToString(); }
                catch { missing.Append("RemitCity "); }

                try { reader["RemitCountry"].ToString(); }
                catch { missing.Append("RemitCountry "); }

                try { reader["RemitPostCode"].ToString(); }
                catch { missing.Append("RemitPostCode "); }

                try { reader["RemitState"].ToString(); }
                catch { missing.Append("RemitState "); }

                try { reader["RemitUseBusiness"].ToString(); }
                catch { missing.Append("RemitUseBusiness "); }

                try { reader["Terms"].ToString(); }
                catch { missing.Append("Terms "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["Website"].ToString(); }
                catch { missing.Append("Website "); }

                try { reader["VendorMasterId"].ToString(); }
                catch { missing.Append("VendorMasterId "); }

                try { reader["AutoEmailPO"].ToString(); }
                catch { missing.Append("AutoEmailPO "); }

                try { reader["IsExternal"].ToString(); }
                catch { missing.Append("IsExternal "); }

                try { reader["PunchoutIndicator"].ToString(); }
                catch { missing.Append("PunchoutIndicator "); }

                try { reader["VendorDomain"].ToString(); }
                catch { missing.Append("VendorDomain "); }

                try { reader["VendorIdentity"].ToString(); }
                catch { missing.Append("VendorIdentity "); }

                try { reader["SharedSecret"].ToString(); }
                catch { missing.Append("SharedSecret "); }

                try { reader["SenderDomain"].ToString(); }
                catch { missing.Append("SenderDomain "); }

                try { reader["SenderIdentity"].ToString(); }
                catch { missing.Append("SenderIdentity "); }

                try { reader["PunchoutURL"].ToString(); }
                catch { missing.Append("PunchoutURL "); }

                try { reader["AutoSendPunchOutPO"].ToString(); }
                catch { missing.Append("AutoSendPunchOutPO "); }

                try { reader["SendPunchoutPOURL"].ToString(); }
                catch { missing.Append("SendPunchoutPOURL "); }

                try { reader["SendPunchoutPOEmail"].ToString(); }
                catch { missing.Append("SendPunchoutPOEmail "); }

                try { reader["SourceId"].ToString(); }
                catch { missing.Append("SourceId "); }

                try { reader["InsuranceOverride"].ToString(); }
                catch { missing.Append("InsuranceOverride "); }

                try { reader["InsuranceOverrideDate"].ToString(); }
                catch { missing.Append("InsuranceOverrideDate "); }

                try { reader["InsuranceRequired"].ToString(); }
                catch { missing.Append("InsuranceRequired "); }

                try { reader["InsuranceSource"].ToString(); }
                catch { missing.Append("InsuranceSource "); }

                try { reader["InsuranceExpireDate"].ToString(); }
                catch { missing.Append("InsuranceExpireDate "); }

                try { reader["ContractorOwner"].ToString(); }
                catch { missing.Append("ContractorOwner "); }

                try { reader["SICCode"].ToString(); }
                catch { missing.Append("SICCode "); }

                try { reader["OSHARate"].ToString(); }
                catch { missing.Append("OSHARate "); }

                try { reader["ExpModRate"].ToString(); }
                catch { missing.Append("ExpModRate "); }

                try { reader["NAICSCode"].ToString(); }
                catch { missing.Append("NAICSCode "); }

                try { reader["ClassCode"].ToString(); }
                catch { missing.Append("ClassCode "); }

                try { reader["AssetMgtOverride"].ToString(); }
                catch { missing.Append("AssetMgtOverride "); }

                try { reader["AssetMgtOverrideDate"].ToString(); }
                catch { missing.Append("AssetMgtOverrideDate "); }

                try { reader["AssetMgtRequired"].ToString(); }
                catch { missing.Append("AssetMgtRequired "); }

                try { reader["AssetMgtSource"].ToString(); }
                catch { missing.Append("AssetMgtSource "); }

                try { reader["AssetMgtExpireDate"].ToString(); }
                catch { missing.Append("AssetMgtExpireDate "); }

                try { reader["AssetMgtOwner"].ToString(); }
                catch { missing.Append("AssetMgtOwner "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Vendor table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Vendor_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Vendor table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Vendor_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Vendor table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Vendor_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Vendor table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Vendor[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Vendor[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Vendor> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Vendor[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Vendor>(reader => { b_Vendor obj = new b_Vendor(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Vendor_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Vendor[])results.ToArray(typeof(b_Vendor));
                }
                else
                {
                    data = new b_Vendor[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Vendor table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Vendor[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Vendor> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Vendor>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Vendor_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Vendor objects.
        /// </summary>
        /// <param name="obj">b_Vendor object to compare against the current object.</param>
        public bool Equals(b_Vendor obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (VendorId != obj.VendorId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!Address1.Equals(obj.Address1)) return false;
            if (!Address2.Equals(obj.Address2)) return false;
            if (!Address3.Equals(obj.Address3)) return false;
            if (!AddressCity.Equals(obj.AddressCity)) return false;
            if (!AddressCountry.Equals(obj.AddressCountry)) return false;
            if (!AddressPostCode.Equals(obj.AddressPostCode)) return false;
            if (!AddressState.Equals(obj.AddressState)) return false;
            if (!CustomerAccount.Equals(obj.CustomerAccount)) return false;
            if (!EmailAddress.Equals(obj.EmailAddress)) return false;
            if (!FaxNumber.Equals(obj.FaxNumber)) return false;
            if (!FOBCode.Equals(obj.FOBCode)) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (!Name.Equals(obj.Name)) return false;
            if (!PhoneNumber.Equals(obj.PhoneNumber)) return false;
            if (!RemitAddress1.Equals(obj.RemitAddress1)) return false;
            if (!RemitAddress2.Equals(obj.RemitAddress2)) return false;
            if (!RemitAddress3.Equals(obj.RemitAddress3)) return false;
            if (!RemitCity.Equals(obj.RemitCity)) return false;
            if (!RemitCountry.Equals(obj.RemitCountry)) return false;
            if (!RemitPostCode.Equals(obj.RemitPostCode)) return false;
            if (!RemitState.Equals(obj.RemitState)) return false;
            if (RemitUseBusiness != obj.RemitUseBusiness) return false;
            if (!Terms.Equals(obj.Terms)) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (!Website.Equals(obj.Website)) return false;
            if (VendorMasterId != obj.VendorMasterId) return false;
            if (AutoEmailPO != obj.AutoEmailPO) return false;
            if (IsExternal != obj.IsExternal) return false;
            if (PunchoutIndicator != obj.PunchoutIndicator) return false;
            if (!VendorDomain.Equals(obj.VendorDomain)) return false;
            if (!VendorIdentity.Equals(obj.VendorIdentity)) return false;
            if (!SharedSecret.Equals(obj.SharedSecret)) return false;
            if (!SenderDomain.Equals(obj.SenderDomain)) return false;
            if (!SenderIdentity.Equals(obj.SenderIdentity)) return false;
            if (!PunchoutURL.Equals(obj.PunchoutURL)) return false;
            if (AutoSendPunchOutPO != obj.AutoSendPunchOutPO) return false;
            if (!SendPunchoutPOURL.Equals(obj.SendPunchoutPOURL)) return false;
            if (!SendPunchoutPOEmail.Equals(obj.SendPunchoutPOEmail)) return false;
            if (SourceId != obj.SourceId) return false;
            if (InsuranceOverride != obj.InsuranceOverride) return false;
            if (!InsuranceOverrideDate.Equals(obj.InsuranceOverrideDate)) return false;
            if (InsuranceRequired != obj.InsuranceRequired) return false;
            if (InsuranceSource != obj.InsuranceSource) return false;
            if (!InsuranceExpireDate.Equals(obj.InsuranceExpireDate)) return false;
            if (ContractorOwner != obj.ContractorOwner) return false;
            if (!SICCode.Equals(obj.SICCode)) return false;
            if (OSHARate != obj.OSHARate) return false;
            if (ExpModRate != obj.ExpModRate) return false;
            if (!NAICSCode.Equals(obj.NAICSCode)) return false;
            if (!ClassCode.Equals(obj.ClassCode)) return false;
            if (AssetMgtOverride != obj.AssetMgtOverride) return false;
            if (!AssetMgtOverrideDate.Equals(obj.AssetMgtOverrideDate)) return false;
            if (AssetMgtRequired != obj.AssetMgtRequired) return false;
            if (AssetMgtSource != obj.AssetMgtSource) return false;
            if (!AssetMgtExpireDate.Equals(obj.AssetMgtExpireDate)) return false;
            if (AssetMgtOwner != obj.AssetMgtOwner) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Vendor objects.
        /// </summary>
        /// <param name="obj1">b_Vendor object to use in the comparison.</param>
        /// <param name="obj2">b_Vendor object to use in the comparison.</param>
        public static bool Equals(b_Vendor obj1, b_Vendor obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
