/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the POImpHdr table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_POImpHdr : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_POImpHdr ()
        {
            ClientId = 0;
            POImpHdrId = 0;
            SiteId = 0;
            PONumber = String.Empty;
            Revision = 0;
            EXPOID = 0;
            EXPRID = 0;
            SOMAXPRNumber = String.Empty;
            SOMAXPRID = 0;
            POCreateDate = new System.Nullable<System.DateTime>();
            Currency = String.Empty;
            EXVendor = String.Empty;
            EXVendorId = new System.Nullable<long>();
            RequiredDate = new System.Nullable<System.DateTime>();
            PaymentTerms = String.Empty;
            Status = String.Empty;
            ErrorCodes = String.Empty;
            ErrorMessage = String.Empty;
            LastProcess = new System.Nullable<System.DateTime>();
            UpdateIndex = 0;
        }

        /// <summary>
        /// POImpHdrId property
        /// </summary>
        public long POImpHdrId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// PONumber property
        /// </summary>
        public string PONumber { get; set; }

        /// <summary>
        /// Revision property
        /// </summary>
        public int Revision { get; set; }

        /// <summary>
        /// EXPOID property
        /// </summary>
        public long EXPOID { get; set; }

        /// <summary>
        /// EXPRID property
        /// </summary>
        public long EXPRID { get; set; }

        /// <summary>
        /// SOMAXPRNumber property
        /// </summary>
        public string SOMAXPRNumber { get; set; }

        /// <summary>
        /// SOMAXPRID property
        /// </summary>
        public long SOMAXPRID { get; set; }

        /// <summary>
        /// POCreateDate property
        /// </summary>
        public DateTime? POCreateDate { get; set; }

        /// <summary>
        /// Currency property
        /// </summary>
        public string Currency { get; set; }

        /// <summary>
        /// EXVendor property
        /// </summary>
        public string EXVendor { get; set; }

        /// <summary>
        /// EXVendorId property
        /// </summary>
        public long? EXVendorId { get; set; }

        /// <summary>
        /// RequiredDate property
        /// </summary>
        public DateTime? RequiredDate { get; set; }

        /// <summary>
        /// PaymentTerms property
        /// </summary>
        public string PaymentTerms { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// ErrorCodes property
        /// </summary>
        public string ErrorCodes { get; set; }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        public string ErrorMessage { get; set; }

        /// <summary>
        /// LastProcess property
        /// </summary>
        public DateTime? LastProcess { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_POImpHdr object.
        /// This routine should be applied to the usp_POImpHdr_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POImpHdr_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_POImpHdr object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_POImpHdr obj = new b_POImpHdr();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_POImpHdr object.
        /// This routine should be applied to the usp_POImpHdr_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POImpHdr_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // POImpHdrId column, bigint, not null
                        POImpHdrId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // PONumber column, nvarchar(15), not null
                        PONumber = reader.GetString(i++);

                        // Revision column, int, not null
                        Revision = reader.GetInt32(i++);

                        // EXPOID column, bigint, not null
                        EXPOID = reader.GetInt64(i++);

                        // EXPRID column, bigint, not null
                        EXPRID = reader.GetInt64(i++);

                        // SOMAXPRNumber column, nvarchar(15), not null
                        SOMAXPRNumber = reader.GetString(i++);

                        // SOMAXPRID column, bigint, not null
                        SOMAXPRID = reader.GetInt64(i++);

            // POCreateDate column, datetime, not null
            if (false == reader.IsDBNull(i))
            {
                    POCreateDate = reader.GetDateTime(i);
            }
            else
            {
                    POCreateDate = DateTime.MinValue;
            }
            i++;
                        // Currency column, nvarchar(15), not null
                        Currency = reader.GetString(i++);

                        // EXVendor column, nvarchar(31), not null
                        EXVendor = reader.GetString(i++);

                        // EXVendorId column, bigint, null
                        if (false == reader.IsDBNull(i))
                        {
                        EXVendorId = reader.GetInt64(i);
                        }
                        i++;

            // RequiredDate column, datetime, not null
            if (false == reader.IsDBNull(i))
            {
                    RequiredDate = reader.GetDateTime(i);
            }
            else
            {
                    RequiredDate = DateTime.MinValue;
            }
            i++;
                        // PaymentTerms column, nvarchar(50), not null
                        PaymentTerms = reader.GetString(i++);

                        // Status column, nvarchar(31), not null
                        Status = reader.GetString(i++);

                        // ErrorCodes column, nvarchar(127), not null
                        ErrorCodes = reader.GetString(i++);

                        // ErrorMessage column, nvarchar(511), not null
                        ErrorMessage = reader.GetString(i++);

            // LastProcess column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastProcess = reader.GetDateTime(i);
            }
            else
            {
                    LastProcess = DateTime.MinValue;
            }
            i++;
                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["POImpHdrId"].ToString(); }
            catch { missing.Append("POImpHdrId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["PONumber"].ToString(); }
            catch { missing.Append("PONumber "); }
            
            try { reader["Revision"].ToString(); }
            catch { missing.Append("Revision "); }
            
            try { reader["EXPOID"].ToString(); }
            catch { missing.Append("EXPOID "); }
            
            try { reader["EXPRID"].ToString(); }
            catch { missing.Append("EXPRID "); }
            
            try { reader["SOMAXPRNumber"].ToString(); }
            catch { missing.Append("SOMAXPRNumber "); }
            
            try { reader["SOMAXPRID"].ToString(); }
            catch { missing.Append("SOMAXPRID "); }
            
            try { reader["POCreateDate"].ToString(); }
            catch { missing.Append("POCreateDate "); }
            
            try { reader["Currency"].ToString(); }
            catch { missing.Append("Currency "); }
            
            try { reader["EXVendor"].ToString(); }
            catch { missing.Append("EXVendor "); }
            
            try { reader["EXVendorId"].ToString(); }
            catch { missing.Append("EXVendorId "); }
            
            try { reader["RequiredDate"].ToString(); }
            catch { missing.Append("RequiredDate "); }
            
            try { reader["PaymentTerms"].ToString(); }
            catch { missing.Append("PaymentTerms "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
            try { reader["ErrorCodes"].ToString(); }
            catch { missing.Append("ErrorCodes "); }
            
            try { reader["ErrorMessage"].ToString(); }
            catch { missing.Append("ErrorMessage "); }
            
            try { reader["LastProcess"].ToString(); }
            catch { missing.Append("LastProcess "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a POImpHdr table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POImpHdr_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the POImpHdr table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POImpHdr_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the POImpHdr table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POImpHdr_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all POImpHdr table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_POImpHdr[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_POImpHdr[] data
        )
        {
            Database.SqlClient.ProcessRow<b_POImpHdr> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_POImpHdr[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POImpHdr>(reader => { b_POImpHdr obj = new b_POImpHdr(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_POImpHdr_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_POImpHdr[])results.ToArray(typeof(b_POImpHdr));
                }
                else
                {
                    data = new b_POImpHdr[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve POImpHdr table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_POImpHdr[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_POImpHdr> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POImpHdr>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_POImpHdr_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_POImpHdr objects.
        /// </summary>
        /// <param name="obj">b_POImpHdr object to compare against the current object.</param>
        public bool Equals (b_POImpHdr obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (POImpHdrId != obj.POImpHdrId) return false;
            if (SiteId != obj.SiteId) return false;
            if (!PONumber.Equals(obj.PONumber)) return false;
            if (Revision != obj.Revision) return false;
            if (EXPOID != obj.EXPOID) return false;
            if (EXPRID != obj.EXPRID) return false;
            if (!SOMAXPRNumber.Equals(obj.SOMAXPRNumber)) return false;
            if (SOMAXPRID != obj.SOMAXPRID) return false;
            if (!POCreateDate.Equals(obj.POCreateDate)) return false;
            if (!Currency.Equals(obj.Currency)) return false;
            if (!EXVendor.Equals(obj.EXVendor)) return false;
            if (!EXVendorId.Equals(obj.EXVendorId)) return false;
            if (!RequiredDate.Equals(obj.RequiredDate)) return false;
            if (!PaymentTerms.Equals(obj.PaymentTerms)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!ErrorCodes.Equals(obj.ErrorCodes)) return false;
            if (!ErrorMessage.Equals(obj.ErrorMessage)) return false;
            if (!LastProcess.Equals(obj.LastProcess)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_POImpHdr objects.
        /// </summary>
        /// <param name="obj1">b_POImpHdr object to use in the comparison.</param>
        /// <param name="obj2">b_POImpHdr object to use in the comparison.</param>
        public static bool Equals (b_POImpHdr obj1, b_POImpHdr obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
