/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the VendorCatalogItem table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_VendorCatalogItem : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_VendorCatalogItem()
        {
            ClientId = 0;
            VendorCatalogItemId = 0;
            VendorCatalogId = 0;
            PartMasterId = 0;
            ExSourceId = 0;
            LineNumber = 0;
            Description = String.Empty;
            IssueUOM = String.Empty;
            PurchaseUOM = String.Empty;
            UOMConversion = 0;
            UnitCost = 0;
            PartNumber = String.Empty;
            LeadTime = 0;
            MinimumQuantity = 0;
            Inactive = false;
            UpdateIndex = 0;
        }

        /// <summary>
        /// VendorCatalogItemId property
        /// </summary>
        public long VendorCatalogItemId { get; set; }

        /// <summary>
        /// VendorCatalogId property
        /// </summary>
        public long VendorCatalogId { get; set; }

        /// <summary>
        /// PartMasterId property
        /// </summary>
        public long PartMasterId { get; set; }

        /// <summary>
        /// ExSourceId property
        /// </summary>
        public long ExSourceId { get; set; }

        /// <summary>
        /// LineNumber property
        /// </summary>
        public int LineNumber { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// IssueUOM property
        /// </summary>
        public string IssueUOM { get; set; }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        public string PurchaseUOM { get; set; }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        public decimal UOMConversion { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// PartNumber property
        /// </summary>
        public string PartNumber { get; set; }

        /// <summary>
        /// LeadTime property
        /// </summary>
        public int LeadTime { get; set; }

        /// <summary>
        /// MinimumQuantity property
        /// </summary>
        public int MinimumQuantity { get; set; }

        /// <summary>
        /// Inactive property
        /// </summary>
        public bool Inactive { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_VendorCatalogItem object.
        /// This routine should be applied to the usp_VendorCatalogItem_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorCatalogItem_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_VendorCatalogItem object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_VendorCatalogItem obj = new b_VendorCatalogItem();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_VendorCatalogItem object.
        /// This routine should be applied to the usp_VendorCatalogItem_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorCatalogItem_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // VendorCatalogItemId column, bigint, not null
                VendorCatalogItemId = reader.GetInt64(i++);

                // VendorCatalogId column, bigint, not null
                VendorCatalogId = reader.GetInt64(i++);

                // PartMasterId column, bigint, not null
                PartMasterId = reader.GetInt64(i++);

                // ExSourceId column, bigint, not null
                ExSourceId = reader.GetInt64(i++);

                // LineNumber column, int, not null
                LineNumber = reader.GetInt32(i++);

                // Description column, nvarchar(511), not null
                Description = reader.GetString(i++);

                // IssueUOM column, nvarchar(15), not null
                IssueUOM = reader.GetString(i++);

                // PurchaseUOM column, nvarchar(15), not null
                PurchaseUOM = reader.GetString(i++);

                // UOMConversion column, decimal(17,5), not null
                UOMConversion = reader.GetDecimal(i++);

                // UnitCost column, decimal(17,5), not null
                UnitCost = reader.GetDecimal(i++);

                // PartNumber column, nvarchar(63), not null
                PartNumber = reader.GetString(i++);

                // LeadTime column, int, not null
                LeadTime = reader.GetInt32(i++);

                // MinimumQuantity column, int, not null
                MinimumQuantity = reader.GetInt32(i++);

                // Inactive column, bit, not null
                Inactive = reader.GetBoolean(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["VendorCatalogItemId"].ToString(); }
                catch { missing.Append("VendorCatalogItemId "); }

                try { reader["VendorCatalogId"].ToString(); }
                catch { missing.Append("VendorCatalogId "); }

                try { reader["PartMasterId"].ToString(); }
                catch { missing.Append("PartMasterId "); }

                try { reader["ExSourceId"].ToString(); }
                catch { missing.Append("ExSourceId "); }

                try { reader["LineNumber"].ToString(); }
                catch { missing.Append("LineNumber "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["IssueUOM"].ToString(); }
                catch { missing.Append("IssueUOM "); }

                try { reader["PurchaseUOM"].ToString(); }
                catch { missing.Append("PurchaseUOM "); }

                try { reader["UOMConversion"].ToString(); }
                catch { missing.Append("UOMConversion "); }

                try { reader["UnitCost"].ToString(); }
                catch { missing.Append("UnitCost "); }

                try { reader["PartNumber"].ToString(); }
                catch { missing.Append("PartNumber "); }

                try { reader["LeadTime"].ToString(); }
                catch { missing.Append("LeadTime "); }

                try { reader["MinimumQuantity"].ToString(); }
                catch { missing.Append("MinimumQuantity "); }

                try { reader["Inactive"].ToString(); }
                catch { missing.Append("Inactive "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a VendorCatalogItem table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalogItem_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the VendorCatalogItem table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalogItem_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the VendorCatalogItem table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorCatalogItem_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all VendorCatalogItem table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_VendorCatalogItem[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_VendorCatalogItem[] data
        )
        {
            Database.SqlClient.ProcessRow<b_VendorCatalogItem> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_VendorCatalogItem[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorCatalogItem>(reader => { b_VendorCatalogItem obj = new b_VendorCatalogItem(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_VendorCatalogItem_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_VendorCatalogItem[])results.ToArray(typeof(b_VendorCatalogItem));
                }
                else
                {
                    data = new b_VendorCatalogItem[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve VendorCatalogItem table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_VendorCatalogItem[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_VendorCatalogItem> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorCatalogItem>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_VendorCatalogItem_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_VendorCatalogItem objects.
        /// </summary>
        /// <param name="obj">b_VendorCatalogItem object to compare against the current object.</param>
        public bool Equals(b_VendorCatalogItem obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (VendorCatalogItemId != obj.VendorCatalogItemId) return false;
            if (VendorCatalogId != obj.VendorCatalogId) return false;
            if (PartMasterId != obj.PartMasterId) return false;
            if (ExSourceId != obj.ExSourceId) return false;
            if (LineNumber != obj.LineNumber) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!IssueUOM.Equals(obj.IssueUOM)) return false;
            if (!PurchaseUOM.Equals(obj.PurchaseUOM)) return false;
            if (UOMConversion != obj.UOMConversion) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (!PartNumber.Equals(obj.PartNumber)) return false;
            if (LeadTime != obj.LeadTime) return false;
            if (MinimumQuantity != obj.MinimumQuantity) return false;
            if (Inactive != obj.Inactive) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_VendorCatalogItem objects.
        /// </summary>
        /// <param name="obj1">b_VendorCatalogItem object to use in the comparison.</param>
        /// <param name="obj2">b_VendorCatalogItem object to use in the comparison.</param>
        public static bool Equals(b_VendorCatalogItem obj1, b_VendorCatalogItem obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
