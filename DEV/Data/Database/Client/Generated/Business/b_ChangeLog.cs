/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ChangeLog table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ChangeLog : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ChangeLog ()
        {
            ClientId = 0;
            ChangeLogId = 0;
            TableName = String.Empty;
            ObjectId = 0;
            UserName = String.Empty;
            UserInfoId = 0;
            History = String.Empty;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// ChangeLogId property
        /// </summary>
        public long ChangeLogId { get; set; }

        /// <summary>
        /// TableName property
        /// </summary>
        public string TableName { get; set; }

        /// <summary>
        /// ObjectId property
        /// </summary>
        public long ObjectId { get; set; }

        /// <summary>
        /// UserName property
        /// </summary>
        public string UserName { get; set; }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        public long UserInfoId { get; set; }

        /// <summary>
        /// History property
        /// </summary>
        public string History { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ChangeLog object.
        /// This routine should be applied to the usp_ChangeLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ChangeLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ChangeLog object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ChangeLog obj = new b_ChangeLog();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ChangeLog object.
        /// This routine should be applied to the usp_ChangeLog_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ChangeLog_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // ChangeLogId column, bigint, not null
                        ChangeLogId = reader.GetInt64(i++);

                        // TableName column, nvarchar(63), not null
                        TableName = reader.GetString(i++);

                        // ObjectId column, bigint, not null
                        ObjectId = reader.GetInt64(i++);

                        // UserName column, nvarchar(63), not null
                        UserName = reader.GetString(i++);

                        // UserInfoId column, bigint, not null
                        UserInfoId = reader.GetInt64(i++);

                        // History column, xml, not null
                        History = reader.GetSqlXml(i++).Value;

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // AreaId column, bigint, not null
                        AreaId = reader.GetInt64(i++);

                        // DepartmentId column, bigint, not null
                        DepartmentId = reader.GetInt64(i++);

                        // StoreroomId column, bigint, not null
                        StoreroomId = reader.GetInt64(i++);

                        // UpdateIndex column, bigint, not null
                        UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["ChangeLogId"].ToString(); }
            catch { missing.Append("ChangeLogId "); }
            
            try { reader["TableName"].ToString(); }
            catch { missing.Append("TableName "); }
            
            try { reader["ObjectId"].ToString(); }
            catch { missing.Append("ObjectId "); }
            
            try { reader["UserName"].ToString(); }
            catch { missing.Append("UserName "); }
            
            try { reader["UserInfoId"].ToString(); }
            catch { missing.Append("UserInfoId "); }
            
            try { reader["History"].ToString(); }
            catch { missing.Append("History "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["AreaId"].ToString(); }
            catch { missing.Append("AreaId "); }
            
            try { reader["DepartmentId"].ToString(); }
            catch { missing.Append("DepartmentId "); }
            
            try { reader["StoreroomId"].ToString(); }
            catch { missing.Append("StoreroomId "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
}

        /// <summary>
        /// Insert this object into the database as a ChangeLog table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ChangeLog_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ChangeLog table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ChangeLog_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ChangeLog table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ChangeLog_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ChangeLog table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ChangeLog[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ChangeLog[] data
        )
        {
            ProcessRow<b_ChangeLog> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ChangeLog[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new ProcessRow<b_ChangeLog>(reader => { b_ChangeLog obj = new b_ChangeLog(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_ChangeLog_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_ChangeLog[])results.ToArray(typeof(b_ChangeLog));
                }
                else
                {
                    data = new b_ChangeLog[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ChangeLog table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ChangeLog[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            ProcessRow<b_ChangeLog> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new ProcessRow<b_ChangeLog>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_ChangeLog_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ChangeLog objects.
        /// </summary>
        /// <param name="obj">b_ChangeLog object to compare against the current object.</param>
        public bool Equals (b_ChangeLog obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (ChangeLogId != obj.ChangeLogId) return false;
            if (!TableName.Equals(obj.TableName)) return false;
            if (ObjectId != obj.ObjectId) return false;
            if (!UserName.Equals(obj.UserName)) return false;
            if (UserInfoId != obj.UserInfoId) return false;
            if (!History.Equals(obj.History)) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ChangeLog objects.
        /// </summary>
        /// <param name="obj1">b_ChangeLog object to use in the comparison.</param>
        /// <param name="obj2">b_ChangeLog object to use in the comparison.</param>
        public static bool Equals (b_ChangeLog obj1, b_ChangeLog obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
