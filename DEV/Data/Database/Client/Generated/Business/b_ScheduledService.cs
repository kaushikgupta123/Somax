/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ScheduledService table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_ScheduledService : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_ScheduledService ()
        {
            ScheduledServiceId = 0;
            ClientId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ServiceTaskId = 0;
            EquipmentId = 0;
            InactiveFlag = false;
            Last_ServiceOrderId = 0;
            LastPerformedDate = new System.Nullable<System.DateTime>();
            LastPerformedMeter1 = 0;
            LastPerformedMeter2 = 0;
            Meter1Interval = 0;
            Meter1Threshold = 0;
            Meter2Interval = 0;
            Meter2Threshold = 0;
            NextDueDate = new System.Nullable<System.DateTime>();
            NextDueMeter1 = 0;
            NextDueMeter2 = 0;
            TimeInterval = 0;
            TimeIntervalType = String.Empty;
            TimeThreshold = 0;
            TimeThresoldType = String.Empty;
            RepairReason = String.Empty;
            VMRSSystem = String.Empty;
            VMRSAssembly = String.Empty;
        }

        /// <summary>
        /// ScheduledServiceId property
        /// </summary>
        public long ScheduledServiceId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ServiceTaskId property
        /// </summary>
        public long ServiceTaskId { get; set; }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        public long EquipmentId { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// Last_ServiceOrderId property
        /// </summary>
        public long Last_ServiceOrderId { get; set; }

        /// <summary>
        /// LastPerformedDate property
        /// </summary>
        public DateTime? LastPerformedDate { get; set; }

        /// <summary>
        /// LastPerformedMeter1 property
        /// </summary>
        public decimal LastPerformedMeter1 { get; set; }

        /// <summary>
        /// LastPerformedMeter2 property
        /// </summary>
        public decimal LastPerformedMeter2 { get; set; }

        /// <summary>
        /// Meter1Interval property
        /// </summary>
        public decimal Meter1Interval { get; set; }

        /// <summary>
        /// Meter1Threshold property
        /// </summary>
        public decimal Meter1Threshold { get; set; }

        /// <summary>
        /// Meter2Interval property
        /// </summary>
        public decimal Meter2Interval { get; set; }

        /// <summary>
        /// Meter2Threshold property
        /// </summary>
        public decimal Meter2Threshold { get; set; }

        /// <summary>
        /// NextDueDate property
        /// </summary>
        public DateTime? NextDueDate { get; set; }

        /// <summary>
        /// NextDueMeter1 property
        /// </summary>
        public decimal NextDueMeter1 { get; set; }

        /// <summary>
        /// NextDueMeter2 property
        /// </summary>
        public decimal NextDueMeter2 { get; set; }

        /// <summary>
        /// TimeInterval property
        /// </summary>
        public int TimeInterval { get; set; }

        /// <summary>
        /// TimeIntervalType property
        /// </summary>
        public string TimeIntervalType { get; set; }

        /// <summary>
        /// TimeThreshold property
        /// </summary>
        public int TimeThreshold { get; set; }

        /// <summary>
        /// TimeThresoldType property
        /// </summary>
        public string TimeThresoldType { get; set; }

        /// <summary>
        /// RepairReason property
        /// </summary>
        public string RepairReason { get; set; }

        /// <summary>
        /// VMRSSystem property
        /// </summary>
        public string VMRSSystem { get; set; }

        /// <summary>
        /// VMRSAssembly property
        /// </summary>
        public string VMRSAssembly { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_ScheduledService object.
        /// This routine should be applied to the usp_ScheduledService_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ScheduledService_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_ScheduledService object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_ScheduledService obj = new b_ScheduledService();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ScheduledService object.
        /// This routine should be applied to the usp_ScheduledService_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ScheduledService_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ScheduledServiceId column, bigint, not null
                        ScheduledServiceId = reader.GetInt64(i++);

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // AreaId column, bigint, not null
                        AreaId = reader.GetInt64(i++);

                        // DepartmentId column, bigint, not null
                        DepartmentId = reader.GetInt64(i++);

                        // StoreroomId column, bigint, not null
                        StoreroomId = reader.GetInt64(i++);

                        // ServiceTaskId column, bigint, not null
                        ServiceTaskId = reader.GetInt64(i++);

                        // EquipmentId column, bigint, not null
                        EquipmentId = reader.GetInt64(i++);

                        // InactiveFlag column, bit, not null
                        InactiveFlag = reader.GetBoolean(i++);

                        // Last_ServiceOrderId column, bigint, not null
                        Last_ServiceOrderId = reader.GetInt64(i++);

            // LastPerformedDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastPerformedDate = reader.GetDateTime(i);
            }
            else
            {
                    LastPerformedDate = DateTime.MinValue;
            }
            i++;
                        // LastPerformedMeter1 column, decimal(9,1), not null
                        LastPerformedMeter1 = reader.GetDecimal(i++);

                        // LastPerformedMeter2 column, decimal(9,1), not null
                        LastPerformedMeter2 = reader.GetDecimal(i++);

                        // Meter1Interval column, decimal(9,1), not null
                        Meter1Interval = reader.GetDecimal(i++);

                        // Meter1Threshold column, decimal(9,1), not null
                        Meter1Threshold = reader.GetDecimal(i++);

                        // Meter2Interval column, decimal(9,1), not null
                        Meter2Interval = reader.GetDecimal(i++);

                        // Meter2Threshold column, decimal(9,1), not null
                        Meter2Threshold = reader.GetDecimal(i++);

            // NextDueDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    NextDueDate = reader.GetDateTime(i);
            }
            else
            {
                    NextDueDate = DateTime.MinValue;
            }
            i++;
                        // NextDueMeter1 column, decimal(10,1), not null
                        NextDueMeter1 = reader.GetDecimal(i++);

                        // NextDueMeter2 column, decimal(10,1), not null
                        NextDueMeter2 = reader.GetDecimal(i++);

                        // TimeInterval column, int, not null
                        TimeInterval = reader.GetInt32(i++);

                        // TimeIntervalType column, nvarchar(9), not null
                        TimeIntervalType = reader.GetString(i++);

                        // TimeThreshold column, int, not null
                        TimeThreshold = reader.GetInt32(i++);

                        // TimeThresoldType column, nvarchar(9), not null
                        TimeThresoldType = reader.GetString(i++);

                        // RepairReason column, nvarchar(15), not null
                        RepairReason = reader.GetString(i++);

                        // VMRSSystem column, nvarchar(3), not null
                        VMRSSystem = reader.GetString(i++);

                        // VMRSAssembly column, nvarchar(3), not null
                        VMRSAssembly = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ScheduledServiceId"].ToString(); }
            catch { missing.Append("ScheduledServiceId "); }
            
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["AreaId"].ToString(); }
            catch { missing.Append("AreaId "); }
            
            try { reader["DepartmentId"].ToString(); }
            catch { missing.Append("DepartmentId "); }
            
            try { reader["StoreroomId"].ToString(); }
            catch { missing.Append("StoreroomId "); }
            
            try { reader["ServiceTaskId"].ToString(); }
            catch { missing.Append("ServiceTaskId "); }
            
            try { reader["EquipmentId"].ToString(); }
            catch { missing.Append("EquipmentId "); }
            
            try { reader["InactiveFlag"].ToString(); }
            catch { missing.Append("InactiveFlag "); }
            
            try { reader["Last_ServiceOrderId"].ToString(); }
            catch { missing.Append("Last_ServiceOrderId "); }
            
            try { reader["LastPerformedDate"].ToString(); }
            catch { missing.Append("LastPerformedDate "); }
            
            try { reader["LastPerformedMeter1"].ToString(); }
            catch { missing.Append("LastPerformedMeter1 "); }
            
            try { reader["LastPerformedMeter2"].ToString(); }
            catch { missing.Append("LastPerformedMeter2 "); }
            
            try { reader["Meter1Interval"].ToString(); }
            catch { missing.Append("Meter1Interval "); }
            
            try { reader["Meter1Threshold"].ToString(); }
            catch { missing.Append("Meter1Threshold "); }
            
            try { reader["Meter2Interval"].ToString(); }
            catch { missing.Append("Meter2Interval "); }
            
            try { reader["Meter2Threshold"].ToString(); }
            catch { missing.Append("Meter2Threshold "); }
            
            try { reader["NextDueDate"].ToString(); }
            catch { missing.Append("NextDueDate "); }
            
            try { reader["NextDueMeter1"].ToString(); }
            catch { missing.Append("NextDueMeter1 "); }
            
            try { reader["NextDueMeter2"].ToString(); }
            catch { missing.Append("NextDueMeter2 "); }
            
            try { reader["TimeInterval"].ToString(); }
            catch { missing.Append("TimeInterval "); }
            
            try { reader["TimeIntervalType"].ToString(); }
            catch { missing.Append("TimeIntervalType "); }
            
            try { reader["TimeThreshold"].ToString(); }
            catch { missing.Append("TimeThreshold "); }
            
            try { reader["TimeThresoldType"].ToString(); }
            catch { missing.Append("TimeThresoldType "); }
            
            try { reader["RepairReason"].ToString(); }
            catch { missing.Append("RepairReason "); }
            
            try { reader["VMRSSystem"].ToString(); }
            catch { missing.Append("VMRSSystem "); }
            
            try { reader["VMRSAssembly"].ToString(); }
            catch { missing.Append("VMRSAssembly "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a ScheduledService table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ScheduledService_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the ScheduledService table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ScheduledService_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the ScheduledService table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ScheduledService_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all ScheduledService table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_ScheduledService[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_ScheduledService[] data
        )
        {
            Database.SqlClient.ProcessRow<b_ScheduledService> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_ScheduledService[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ScheduledService>(reader => { b_ScheduledService obj = new b_ScheduledService(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_ScheduledService_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_ScheduledService[])results.ToArray(typeof(b_ScheduledService));
                }
                else
                {
                    data = new b_ScheduledService[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve ScheduledService table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_ScheduledService[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_ScheduledService> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ScheduledService>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_ScheduledService_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_ScheduledService objects.
        /// </summary>
        /// <param name="obj">b_ScheduledService object to compare against the current object.</param>
        public bool Equals (b_ScheduledService obj)
        {
            if (ScheduledServiceId != obj.ScheduledServiceId) return false;
            if (ClientId != obj.ClientId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (ServiceTaskId != obj.ServiceTaskId) return false;
            if (EquipmentId != obj.EquipmentId) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (Last_ServiceOrderId != obj.Last_ServiceOrderId) return false;
            if (!LastPerformedDate.Equals(obj.LastPerformedDate)) return false;
            if (LastPerformedMeter1 != obj.LastPerformedMeter1) return false;
            if (LastPerformedMeter2 != obj.LastPerformedMeter2) return false;
            if (Meter1Interval != obj.Meter1Interval) return false;
            if (Meter1Threshold != obj.Meter1Threshold) return false;
            if (Meter2Interval != obj.Meter2Interval) return false;
            if (Meter2Threshold != obj.Meter2Threshold) return false;
            if (!NextDueDate.Equals(obj.NextDueDate)) return false;
            if (NextDueMeter1 != obj.NextDueMeter1) return false;
            if (NextDueMeter2 != obj.NextDueMeter2) return false;
            if (TimeInterval != obj.TimeInterval) return false;
            if (!TimeIntervalType.Equals(obj.TimeIntervalType)) return false;
            if (TimeThreshold != obj.TimeThreshold) return false;
            if (!TimeThresoldType.Equals(obj.TimeThresoldType)) return false;
            if (!RepairReason.Equals(obj.RepairReason)) return false;
            if (!VMRSSystem.Equals(obj.VMRSSystem)) return false;
            if (!VMRSAssembly.Equals(obj.VMRSAssembly)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_ScheduledService objects.
        /// </summary>
        /// <param name="obj1">b_ScheduledService object to use in the comparison.</param>
        /// <param name="obj2">b_ScheduledService object to use in the comparison.</param>
        public static bool Equals (b_ScheduledService obj1, b_ScheduledService obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
