/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the POReceiptImport2 table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_POReceiptImport2 : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_POReceiptImport2 ()
        {
            ClientId = 0;
            POReceiptImport2Id = 0;
            SiteId = 0;
            ExReceipt = String.Empty;
            ExReceiptId = 0;
            ExReceiptTxnId = 0;
            ExVendorId = 0;
            ExVendor = String.Empty;
            ReceiptDate = new System.Nullable<System.DateTime>();
            TransactionDate = new System.Nullable<System.DateTime>();
            ExPurchaseOrderId = 0;
            ExPurchaseOrder = String.Empty;
            ExPurchaseOrderLineId = 0;
            POLineNumber = 0;
            ExPartId = 0;
            ExPart = String.Empty;
            Description = String.Empty;
            ReceiptQuantity = 0;
            PurchaseUOM = String.Empty;
            UnitOfMeasure = String.Empty;
            UOMConversion = 0;
            Reason = String.Empty;
            ErrorMessage = String.Empty;
            LastProcess = new System.Nullable<System.DateTime>();
            UpdateIndex = 0;
        }

        /// <summary>
        /// POReceiptImport2Id property
        /// </summary>
        public long POReceiptImport2Id { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// ExReceipt property
        /// </summary>
        public string ExReceipt { get; set; }

        /// <summary>
        /// ExReceiptId property
        /// </summary>
        public long ExReceiptId { get; set; }

        /// <summary>
        /// ExReceiptTxnId property
        /// </summary>
        public long ExReceiptTxnId { get; set; }

        /// <summary>
        /// ExVendorId property
        /// </summary>
        public long ExVendorId { get; set; }

        /// <summary>
        /// ExVendor property
        /// </summary>
        public string ExVendor { get; set; }

        /// <summary>
        /// ReceiptDate property
        /// </summary>
        public DateTime? ReceiptDate { get; set; }

        /// <summary>
        /// TransactionDate property
        /// </summary>
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// ExPurchaseOrderId property
        /// </summary>
        public long ExPurchaseOrderId { get; set; }

        /// <summary>
        /// ExPurchaseOrder property
        /// </summary>
        public string ExPurchaseOrder { get; set; }

        /// <summary>
        /// ExPurchaseOrderLineId property
        /// </summary>
        public long ExPurchaseOrderLineId { get; set; }

        /// <summary>
        /// POLineNumber property
        /// </summary>
        public int POLineNumber { get; set; }

        /// <summary>
        /// ExPartId property
        /// </summary>
        public long ExPartId { get; set; }

        /// <summary>
        /// ExPart property
        /// </summary>
        public string ExPart { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// ReceiptQuantity property
        /// </summary>
        public decimal ReceiptQuantity { get; set; }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        public string PurchaseUOM { get; set; }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        public decimal UOMConversion { get; set; }

        /// <summary>
        /// Reason property
        /// </summary>
        public string Reason { get; set; }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        public string ErrorMessage { get; set; }

        /// <summary>
        /// LastProcess property
        /// </summary>
        public DateTime? LastProcess { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_POReceiptImport2 object.
        /// This routine should be applied to the usp_POReceiptImport2_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POReceiptImport2_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_POReceiptImport2 object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_POReceiptImport2 obj = new b_POReceiptImport2();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_POReceiptImport2 object.
        /// This routine should be applied to the usp_POReceiptImport2_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POReceiptImport2_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // POReceiptImport2Id column, bigint, not null
                        POReceiptImport2Id = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // ExReceipt column, nvarchar(30), not null
                        ExReceipt = reader.GetString(i++);

                        // ExReceiptId column, int, not null
                        ExReceiptId = reader.GetInt64(i++);

                        // ExReceiptTxnId column, int, not null
                        ExReceiptTxnId = reader.GetInt64(i++);

                        // ExVendorId column, int, not null
                        ExVendorId = reader.GetInt64(i++);

                        // ExVendor column, nvarchar(30), not null
                        ExVendor = reader.GetString(i++);

            // ReceiptDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ReceiptDate = reader.GetDateTime(i);
            }
            else
            {
                    ReceiptDate = DateTime.MinValue;
            }
            i++;
            // TransactionDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    TransactionDate = reader.GetDateTime(i);
            }
            else
            {
                    TransactionDate = DateTime.MinValue;
            }
            i++;
                        // ExPurchaseOrderId column, int, not null
                        ExPurchaseOrderId = reader.GetInt64(i++);

                        // ExPurchaseOrder column, nvarchar(15), not null
                        ExPurchaseOrder = reader.GetString(i++);

                        // ExPurchaseOrderLineId column, int, not null
                        ExPurchaseOrderLineId = reader.GetInt64(i++);

                        // POLineNumber column, int, not null
                        POLineNumber = reader.GetInt32(i++);

                        // ExPartId column, int, not null
                        ExPartId = reader.GetInt64(i++);

                        // ExPart column, nvarchar(31), not null
                        ExPart = reader.GetString(i++);

                        // Description column, nvarchar(255), not null
                        Description = reader.GetString(i++);

                        // ReceiptQuantity column, decimal(15,6), not null
                        ReceiptQuantity = reader.GetDecimal(i++);

                        // PurchaseUOM column, nvarchar(15), not null
                        PurchaseUOM = reader.GetString(i++);

                        // UnitOfMeasure column, nvarchar(15), not null
                        UnitOfMeasure = reader.GetString(i++);

                        // UOMConversion column, decimal(15,6), not null
                        UOMConversion = reader.GetDecimal(i++);

                        // Reason column, nvarchar(255), not null
                        Reason = reader.GetString(i++);

                        // ErrorMessage column, nvarchar(511), not null
                        ErrorMessage = reader.GetString(i++);

            // LastProcess column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastProcess = reader.GetDateTime(i);
            }
            else
            {
                    LastProcess = DateTime.MinValue;
            }
            i++;
                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["POReceiptImport2Id"].ToString(); }
            catch { missing.Append("POReceiptImport2Id "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["ExReceipt"].ToString(); }
            catch { missing.Append("ExReceipt "); }
            
            try { reader["ExReceiptId"].ToString(); }
            catch { missing.Append("ExReceiptId "); }
            
            try { reader["ExReceiptTxnId"].ToString(); }
            catch { missing.Append("ExReceiptTxnId "); }
            
            try { reader["ExVendorId"].ToString(); }
            catch { missing.Append("ExVendorId "); }
            
            try { reader["ExVendor"].ToString(); }
            catch { missing.Append("ExVendor "); }
            
            try { reader["ReceiptDate"].ToString(); }
            catch { missing.Append("ReceiptDate "); }
            
            try { reader["TransactionDate"].ToString(); }
            catch { missing.Append("TransactionDate "); }
            
            try { reader["ExPurchaseOrderId"].ToString(); }
            catch { missing.Append("ExPurchaseOrderId "); }
            
            try { reader["ExPurchaseOrder"].ToString(); }
            catch { missing.Append("ExPurchaseOrder "); }
            
            try { reader["ExPurchaseOrderLineId"].ToString(); }
            catch { missing.Append("ExPurchaseOrderLineId "); }
            
            try { reader["POLineNumber"].ToString(); }
            catch { missing.Append("POLineNumber "); }
            
            try { reader["ExPartId"].ToString(); }
            catch { missing.Append("ExPartId "); }
            
            try { reader["ExPart"].ToString(); }
            catch { missing.Append("ExPart "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["ReceiptQuantity"].ToString(); }
            catch { missing.Append("ReceiptQuantity "); }
            
            try { reader["PurchaseUOM"].ToString(); }
            catch { missing.Append("PurchaseUOM "); }
            
            try { reader["UnitOfMeasure"].ToString(); }
            catch { missing.Append("UnitOfMeasure "); }
            
            try { reader["UOMConversion"].ToString(); }
            catch { missing.Append("UOMConversion "); }
            
            try { reader["Reason"].ToString(); }
            catch { missing.Append("Reason "); }
            
            try { reader["ErrorMessage"].ToString(); }
            catch { missing.Append("ErrorMessage "); }
            
            try { reader["LastProcess"].ToString(); }
            catch { missing.Append("LastProcess "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a POReceiptImport2 table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptImport2_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the POReceiptImport2 table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptImport2_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the POReceiptImport2 table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptImport2_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all POReceiptImport2 table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_POReceiptImport2[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_POReceiptImport2[] data
        )
        {
            Database.SqlClient.ProcessRow<b_POReceiptImport2> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_POReceiptImport2[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POReceiptImport2>(reader => { b_POReceiptImport2 obj = new b_POReceiptImport2(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_POReceiptImport2_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_POReceiptImport2[])results.ToArray(typeof(b_POReceiptImport2));
                }
                else
                {
                    data = new b_POReceiptImport2[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve POReceiptImport2 table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_POReceiptImport2[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_POReceiptImport2> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POReceiptImport2>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_POReceiptImport2_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_POReceiptImport2 objects.
        /// </summary>
        /// <param name="obj">b_POReceiptImport2 object to compare against the current object.</param>
        public bool Equals (b_POReceiptImport2 obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (POReceiptImport2Id != obj.POReceiptImport2Id) return false;
            if (SiteId != obj.SiteId) return false;
            if (!ExReceipt.Equals(obj.ExReceipt)) return false;
            if (ExReceiptId != obj.ExReceiptId) return false;
            if (ExReceiptTxnId != obj.ExReceiptTxnId) return false;
            if (ExVendorId != obj.ExVendorId) return false;
            if (!ExVendor.Equals(obj.ExVendor)) return false;
            if (!ReceiptDate.Equals(obj.ReceiptDate)) return false;
            if (!TransactionDate.Equals(obj.TransactionDate)) return false;
            if (ExPurchaseOrderId != obj.ExPurchaseOrderId) return false;
            if (!ExPurchaseOrder.Equals(obj.ExPurchaseOrder)) return false;
            if (ExPurchaseOrderLineId != obj.ExPurchaseOrderLineId) return false;
            if (POLineNumber != obj.POLineNumber) return false;
            if (ExPartId != obj.ExPartId) return false;
            if (!ExPart.Equals(obj.ExPart)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (ReceiptQuantity != obj.ReceiptQuantity) return false;
            if (!PurchaseUOM.Equals(obj.PurchaseUOM)) return false;
            if (!UnitOfMeasure.Equals(obj.UnitOfMeasure)) return false;
            if (UOMConversion != obj.UOMConversion) return false;
            if (!Reason.Equals(obj.Reason)) return false;
            if (!ErrorMessage.Equals(obj.ErrorMessage)) return false;
            if (!LastProcess.Equals(obj.LastProcess)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_POReceiptImport2 objects.
        /// </summary>
        /// <param name="obj1">b_POReceiptImport2 object to use in the comparison.</param>
        /// <param name="obj2">b_POReceiptImport2 object to use in the comparison.</param>
        public static bool Equals (b_POReceiptImport2 obj1, b_POReceiptImport2 obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
