/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PasswordSettings table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PasswordSettings : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PasswordSettings ()
        {
            PasswordSettingsId = 0;
            ClientId = 0;
            PWReqMinLength = false;
            PWMinLength = 0;
            PWReqExpiration = false;
            PWExpiresDays = 0;
            PWRequireNumber = false;
            PWRequireAlpha = false;
            PWRequireMixedCase = false;
            PWRequireSpecialChar = false;
            PWNoRepeatChar = false;
            PWNotEqualUserName = false;
            AllowAdminReset = false;
        }

        /// <summary>
        /// PasswordSettingsId property
        /// </summary>
        public long PasswordSettingsId { get; set; }

        /// <summary>
        /// PWReqMinLength property
        /// </summary>
        public bool PWReqMinLength { get; set; }

        /// <summary>
        /// PWMinLength property
        /// </summary>
        public int PWMinLength { get; set; }

        /// <summary>
        /// PWReqExpiration property
        /// </summary>
        public bool PWReqExpiration { get; set; }

        /// <summary>
        /// PWExpiresDays property
        /// </summary>
        public int PWExpiresDays { get; set; }

        /// <summary>
        /// PWRequireNumber property
        /// </summary>
        public bool PWRequireNumber { get; set; }

        /// <summary>
        /// PWRequireAlpha property
        /// </summary>
        public bool PWRequireAlpha { get; set; }

        /// <summary>
        /// PWRequireMixedCase property
        /// </summary>
        public bool PWRequireMixedCase { get; set; }

        /// <summary>
        /// PWRequireSpecialChar property
        /// </summary>
        public bool PWRequireSpecialChar { get; set; }

        /// <summary>
        /// PWNoRepeatChar property
        /// </summary>
        public bool PWNoRepeatChar { get; set; }

        /// <summary>
        /// PWNotEqualUserName property
        /// </summary>
        public bool PWNotEqualUserName { get; set; }

        /// <summary>
        /// AllowAdminReset property
        /// </summary>
        public bool AllowAdminReset { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PasswordSettings object.
        /// This routine should be applied to the usp_PasswordSettings_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PasswordSettings_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PasswordSettings object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_PasswordSettings obj = new b_PasswordSettings();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PasswordSettings object.
        /// This routine should be applied to the usp_PasswordSettings_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PasswordSettings_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // PasswordSettingsId column, bigint, not null
                        PasswordSettingsId = reader.GetInt64(i++);

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // PWReqMinLength column, bit, not null
                        PWReqMinLength = reader.GetBoolean(i++);

                        // PWMinLength column, int, not null
                        PWMinLength = reader.GetInt32(i++);

                        // PWReqExpiration column, bit, not null
                        PWReqExpiration = reader.GetBoolean(i++);

                        // PWExpiresDays column, int, not null
                        PWExpiresDays = reader.GetInt32(i++);

                        // PWRequireNumber column, bit, not null
                        PWRequireNumber = reader.GetBoolean(i++);

                        // PWRequireAlpha column, bit, not null
                        PWRequireAlpha = reader.GetBoolean(i++);

                        // PWRequireMixedCase column, bit, not null
                        PWRequireMixedCase = reader.GetBoolean(i++);

                        // PWRequireSpecialChar column, bit, not null
                        PWRequireSpecialChar = reader.GetBoolean(i++);

                        // PWNoRepeatChar column, bit, not null
                        PWNoRepeatChar = reader.GetBoolean(i++);

                        // PWNotEqualUserName column, bit, not null
                        PWNotEqualUserName = reader.GetBoolean(i++);

                        // AllowAdminReset column, bit, not null
                        AllowAdminReset = reader.GetBoolean(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["PasswordSettingsId"].ToString(); }
            catch { missing.Append("PasswordSettingsId "); }
            
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["PWReqMinLength"].ToString(); }
            catch { missing.Append("PWReqMinLength "); }
            
            try { reader["PWMinLength"].ToString(); }
            catch { missing.Append("PWMinLength "); }
            
            try { reader["PWReqExpiration"].ToString(); }
            catch { missing.Append("PWReqExpiration "); }
            
            try { reader["PWExpiresDays"].ToString(); }
            catch { missing.Append("PWExpiresDays "); }
            
            try { reader["PWRequireNumber"].ToString(); }
            catch { missing.Append("PWRequireNumber "); }
            
            try { reader["PWRequireAlpha"].ToString(); }
            catch { missing.Append("PWRequireAlpha "); }
            
            try { reader["PWRequireMixedCase"].ToString(); }
            catch { missing.Append("PWRequireMixedCase "); }
            
            try { reader["PWRequireSpecialChar"].ToString(); }
            catch { missing.Append("PWRequireSpecialChar "); }
            
            try { reader["PWNoRepeatChar"].ToString(); }
            catch { missing.Append("PWNoRepeatChar "); }
            
            try { reader["PWNotEqualUserName"].ToString(); }
            catch { missing.Append("PWNotEqualUserName "); }
            
            try { reader["AllowAdminReset"].ToString(); }
            catch { missing.Append("AllowAdminReset "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a PasswordSettings table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PasswordSettings_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PasswordSettings table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PasswordSettings_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PasswordSettings table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PasswordSettings_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PasswordSettings table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PasswordSettings[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PasswordSettings[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PasswordSettings> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PasswordSettings[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PasswordSettings>(reader => { b_PasswordSettings obj = new b_PasswordSettings(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PasswordSettings_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PasswordSettings[])results.ToArray(typeof(b_PasswordSettings));
                }
                else
                {
                    data = new b_PasswordSettings[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PasswordSettings table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PasswordSettings[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PasswordSettings> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PasswordSettings>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PasswordSettings_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PasswordSettings objects.
        /// </summary>
        /// <param name="obj">b_PasswordSettings object to compare against the current object.</param>
        public bool Equals (b_PasswordSettings obj)
        {
            if (PasswordSettingsId != obj.PasswordSettingsId) return false;
            if (ClientId != obj.ClientId) return false;
            if (PWReqMinLength != obj.PWReqMinLength) return false;
            if (PWMinLength != obj.PWMinLength) return false;
            if (PWReqExpiration != obj.PWReqExpiration) return false;
            if (PWExpiresDays != obj.PWExpiresDays) return false;
            if (PWRequireNumber != obj.PWRequireNumber) return false;
            if (PWRequireAlpha != obj.PWRequireAlpha) return false;
            if (PWRequireMixedCase != obj.PWRequireMixedCase) return false;
            if (PWRequireSpecialChar != obj.PWRequireSpecialChar) return false;
            if (PWNoRepeatChar != obj.PWNoRepeatChar) return false;
            if (PWNotEqualUserName != obj.PWNotEqualUserName) return false;
            if (AllowAdminReset != obj.AllowAdminReset) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PasswordSettings objects.
        /// </summary>
        /// <param name="obj1">b_PasswordSettings object to use in the comparison.</param>
        /// <param name="obj2">b_PasswordSettings object to use in the comparison.</param>
        public static bool Equals (b_PasswordSettings obj1, b_PasswordSettings obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
