/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Equipment table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Equipment : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Equipment()
        {
            ClientId = 0;
            EquipmentId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            AcquiredCost = 0;
            AcquiredDate = new System.Nullable<System.DateTime>();
            BIMIdentifier = new System.Nullable<Guid>();
            BookValue = 0;
            BusinessGroup = String.Empty;
            CatalogNumber = String.Empty;
            Category = String.Empty;
            CostCenter = String.Empty;
            DeprCode = String.Empty;
            DeprLifeToDate = 0;
            DeprPercent = 0;
            DeprYearToDate = 0;
            ElectricalParent = 0;
            InactiveFlag = false;
            CriticalFlag = false;
            InstallDate = new System.Nullable<System.DateTime>();
            Labor_AccountId = 0;
            LifeinMonths = 0;
            LifeinYears = 0;
            Location = String.Empty;
            LocationId = 0;
            Maint_VendorId = 0;
            Maint_WarrantyDesc = String.Empty;
            Maint_WarrantyExpire = new System.Nullable<System.DateTime>();
            Make = String.Empty;
            Material_AccountId = 0;
            Model = String.Empty;
            Name = String.Empty;
            NoCostRollUp = false;
            NoPartXRef = false;
            OriginalValue = 0;
            OutofService = new System.Nullable<System.DateTime>();
            ParentId = 0;
            PartId = 0;
            Purch_VendorId = 0;
            Purch_WarrantyDesc = String.Empty;
            Purch_WarrantyExpire = new System.Nullable<System.DateTime>();
            RIMEClass = 0;
            SalvageValue = 0;
            SerialNumber = String.Empty;
            Size = 0;
            SizeUnits = String.Empty;
            Status = String.Empty;
            Type = String.Empty;
            AssetNumber = String.Empty;
            ProcessSystemId = 0;
            PlantLocationId = 0;
            EquipmentMasterId = 0;
            LineId = 0;
            SystemInfoId = 0;
            AssetCategory = String.Empty;
            SubType = String.Empty;
            AssetGroup1 = 0;
            AssetGroup2 = 0;
            AssetGroup3 = 0;
            VIN = String.Empty;
            VehicleType = String.Empty;
            License = String.Empty;
            RegistrationLoc = String.Empty;
            VehicleYear = 0;
            CurrentReading = 0;
            CurrentReadingDate = new System.Nullable<System.DateTime>();
            FuelUnits = String.Empty;
            Meter1CurrentReading = 0;
            Meter1CurrentReadingDate = new System.Nullable<System.DateTime>();
            Meter1Type = String.Empty;
            Meter1Units = String.Empty;
            Meter2CurrentReading = 0;
            Meter2CurrentReadingDate = new System.Nullable<System.DateTime>();
            Meter2Type = String.Empty;
            Meter2Units = String.Empty;
            RemoveFromService = false;
            RemoveFromServiceDate = new System.Nullable<System.DateTime>();
            ExpectedReturnToService = new System.Nullable<System.DateTime>();
            RemoveFromServiceReason = String.Empty;
            RemoveFromServiceReasonCode = String.Empty;
            Assigned = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        public long EquipmentId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// AcquiredCost property
        /// </summary>
        public decimal AcquiredCost { get; set; }

        /// <summary>
        /// AcquiredDate property
        /// </summary>
        public DateTime? AcquiredDate { get; set; }

        /// <summary>
        /// BIMIdentifier property
        /// </summary>
        public Guid? BIMIdentifier { get; set; }

        /// <summary>
        /// BookValue property
        /// </summary>
        public decimal BookValue { get; set; }

        /// <summary>
        /// BusinessGroup property
        /// </summary>
        public string BusinessGroup { get; set; }

        /// <summary>
        /// CatalogNumber property
        /// </summary>
        public string CatalogNumber { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// CostCenter property
        /// </summary>
        public string CostCenter { get; set; }

        /// <summary>
        /// DeprCode property
        /// </summary>
        public string DeprCode { get; set; }

        /// <summary>
        /// DeprLifeToDate property
        /// </summary>
        public decimal DeprLifeToDate { get; set; }

        /// <summary>
        /// DeprPercent property
        /// </summary>
        public decimal DeprPercent { get; set; }

        /// <summary>
        /// DeprYearToDate property
        /// </summary>
        public decimal DeprYearToDate { get; set; }

        /// <summary>
        /// ElectricalParent property
        /// </summary>
        public long ElectricalParent { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// CriticalFlag property
        /// </summary>
        public bool CriticalFlag { get; set; }

        /// <summary>
        /// InstallDate property
        /// </summary>
        public DateTime? InstallDate { get; set; }

        /// <summary>
        /// Labor_AccountId property
        /// </summary>
        public long Labor_AccountId { get; set; }

        /// <summary>
        /// LifeinMonths property
        /// </summary>
        public int LifeinMonths { get; set; }

        /// <summary>
        /// LifeinYears property
        /// </summary>
        public int LifeinYears { get; set; }

        /// <summary>
        /// Location property
        /// </summary>
        public string Location { get; set; }

        /// <summary>
        /// LocationId property
        /// </summary>
        public long LocationId { get; set; }

        /// <summary>
        /// Maint_VendorId property
        /// </summary>
        public long Maint_VendorId { get; set; }

        /// <summary>
        /// Maint_WarrantyDesc property
        /// </summary>
        public string Maint_WarrantyDesc { get; set; }

        /// <summary>
        /// Maint_WarrantyExpire property
        /// </summary>
        public DateTime? Maint_WarrantyExpire { get; set; }

        /// <summary>
        /// Make property
        /// </summary>
        public string Make { get; set; }

        /// <summary>
        /// Material_AccountId property
        /// </summary>
        public long Material_AccountId { get; set; }

        /// <summary>
        /// Model property
        /// </summary>
        public string Model { get; set; }

        /// <summary>
        /// Name property
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// NoCostRollUp property
        /// </summary>
        public bool NoCostRollUp { get; set; }

        /// <summary>
        /// NoPartXRef property
        /// </summary>
        public bool NoPartXRef { get; set; }

        /// <summary>
        /// OriginalValue property
        /// </summary>
        public decimal OriginalValue { get; set; }

        /// <summary>
        /// OutofService property
        /// </summary>
        public DateTime? OutofService { get; set; }

        /// <summary>
        /// ParentId property
        /// </summary>
        public long ParentId { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// Purch_VendorId property
        /// </summary>
        public long Purch_VendorId { get; set; }

        /// <summary>
        /// Purch_WarrantyDesc property
        /// </summary>
        public string Purch_WarrantyDesc { get; set; }

        /// <summary>
        /// Purch_WarrantyExpire property
        /// </summary>
        public DateTime? Purch_WarrantyExpire { get; set; }

        /// <summary>
        /// RIMEClass property
        /// </summary>
        public int RIMEClass { get; set; }

        /// <summary>
        /// SalvageValue property
        /// </summary>
        public decimal SalvageValue { get; set; }

        /// <summary>
        /// SerialNumber property
        /// </summary>
        public string SerialNumber { get; set; }

        /// <summary>
        /// Size property
        /// </summary>
        public int Size { get; set; }

        /// <summary>
        /// SizeUnits property
        /// </summary>
        public string SizeUnits { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// AssetNumber property
        /// </summary>
        public string AssetNumber { get; set; }

        /// <summary>
        /// ProcessSystemId property
        /// </summary>
        public long ProcessSystemId { get; set; }

        /// <summary>
        /// PlantLocationId property
        /// </summary>
        public long PlantLocationId { get; set; }

        /// <summary>
        /// EquipmentMasterId property
        /// </summary>
        public long EquipmentMasterId { get; set; }

        /// <summary>
        /// LineId property
        /// </summary>
        public long LineId { get; set; }

        /// <summary>
        /// SystemInfoId property
        /// </summary>
        public long SystemInfoId { get; set; }

        /// <summary>
        /// AssetCategory property
        /// </summary>
        public string AssetCategory { get; set; }

        /// <summary>
        /// SubType property
        /// </summary>
        public string SubType { get; set; }

        /// <summary>
        /// AssetGroup1 property
        /// </summary>
        public long AssetGroup1 { get; set; }

        /// <summary>
        /// AssetGroup2 property
        /// </summary>
        public long AssetGroup2 { get; set; }

        /// <summary>
        /// AssetGroup3 property
        /// </summary>
        public long AssetGroup3 { get; set; }

        /// <summary>
        /// VIN property
        /// </summary>
        public string VIN { get; set; }

        /// <summary>
        /// VehicleType property
        /// </summary>
        public string VehicleType { get; set; }

        /// <summary>
        /// License property
        /// </summary>
        public string License { get; set; }

        /// <summary>
        /// RegistrationLoc property
        /// </summary>
        public string RegistrationLoc { get; set; }

        /// <summary>
        /// VehicleYear property
        /// </summary>
        public int VehicleYear { get; set; }

        /// <summary>
        /// CurrentReading property
        /// </summary>
        public decimal CurrentReading { get; set; }

        /// <summary>
        /// CurrentReadingDate property
        /// </summary>
        public DateTime? CurrentReadingDate { get; set; }

        /// <summary>
        /// FuelUnits property
        /// </summary>
        public string FuelUnits { get; set; }

        /// <summary>
        /// Meter1CurrentReading property
        /// </summary>
        public decimal Meter1CurrentReading { get; set; }

        /// <summary>
        /// Meter1CurrentReadingDate property
        /// </summary>
        public DateTime? Meter1CurrentReadingDate { get; set; }

        /// <summary>
        /// Meter1Type property
        /// </summary>
        public string Meter1Type { get; set; }

        /// <summary>
        /// Meter1Units property
        /// </summary>
        public string Meter1Units { get; set; }

        /// <summary>
        /// Meter2CurrentReading property
        /// </summary>
        public decimal Meter2CurrentReading { get; set; }

        /// <summary>
        /// Meter2CurrentReadingDate property
        /// </summary>
        public DateTime? Meter2CurrentReadingDate { get; set; }

        /// <summary>
        /// Meter2Type property
        /// </summary>
        public string Meter2Type { get; set; }

        /// <summary>
        /// Meter2Units property
        /// </summary>
        public string Meter2Units { get; set; }

        /// <summary>
        /// RemoveFromService property
        /// </summary>
        public bool RemoveFromService { get; set; }

        /// <summary>
        /// RemoveFromServiceDate property
        /// </summary>
        public DateTime? RemoveFromServiceDate { get; set; }

        /// <summary>
        /// ExpectedReturnToService property
        /// </summary>
        public DateTime? ExpectedReturnToService { get; set; }

        /// <summary>
        /// RemoveFromServiceReason property
        /// </summary>
        public string RemoveFromServiceReason { get; set; }

        /// <summary>
        /// RemoveFromServiceReasonCode property
        /// </summary>
        public string RemoveFromServiceReasonCode { get; set; }

        /// <summary>
        /// Assigned property
        /// </summary>
        public long Assigned { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Equipment object.
        /// This routine should be applied to the usp_Equipment_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Equipment_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Equipment object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_Equipment obj = new b_Equipment();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Equipment object.
        /// This routine should be applied to the usp_Equipment_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Equipment_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // EquipmentId column, bigint, not null
                EquipmentId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(31), not null
                ClientLookupId = reader.GetString(i++);

                // AcquiredCost column, decimal(15,2), not null
                AcquiredCost = reader.GetDecimal(i++);

                // AcquiredDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    AcquiredDate = reader.GetDateTime(i);
                }
                else
                {
                    AcquiredDate = DateTime.MinValue;
                }
                i++;
                // BIMIdentifier column, uniqueidentifier, not null
                if (false == reader.IsDBNull(i))
                {
                    BIMIdentifier = reader.GetGuid(i);
                }
                else
                {
                    BIMIdentifier = Guid.Empty;
                }
                i++;

                // BookValue column, decimal(15,2), not null
                BookValue = reader.GetDecimal(i++);

                // BusinessGroup column, nvarchar(15), not null
                BusinessGroup = reader.GetString(i++);

                // CatalogNumber column, nvarchar(63), not null
                CatalogNumber = reader.GetString(i++);

                // Category column, nvarchar(15), not null
                Category = reader.GetString(i++);

                // CostCenter column, nvarchar(15), not null
                CostCenter = reader.GetString(i++);

                // DeprCode column, nvarchar(15), not null
                DeprCode = reader.GetString(i++);

                // DeprLifeToDate column, decimal(15,3), not null
                DeprLifeToDate = reader.GetDecimal(i++);

                // DeprPercent column, decimal(6,3), not null
                DeprPercent = reader.GetDecimal(i++);

                // DeprYearToDate column, decimal(15,3), not null
                DeprYearToDate = reader.GetDecimal(i++);

                // ElectricalParent column, bigint, not null
                ElectricalParent = reader.GetInt64(i++);

                // InactiveFlag column, bit, not null
                InactiveFlag = reader.GetBoolean(i++);

                // CriticalFlag column, bit, not null
                CriticalFlag = reader.GetBoolean(i++);

                // InstallDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    InstallDate = reader.GetDateTime(i);
                }
                else
                {
                    InstallDate = DateTime.MinValue;
                }
                i++;
                // Labor_AccountId column, bigint, not null
                Labor_AccountId = reader.GetInt64(i++);

                // LifeinMonths column, int, not null
                LifeinMonths = reader.GetInt32(i++);

                // LifeinYears column, int, not null
                LifeinYears = reader.GetInt32(i++);

                // Location column, nvarchar(63), not null
                Location = reader.GetString(i++);

                // LocationId column, bigint, not null
                LocationId = reader.GetInt64(i++);

                // Maint_VendorId column, bigint, not null
                Maint_VendorId = reader.GetInt64(i++);

                // Maint_WarrantyDesc column, nvarchar(127), not null
                Maint_WarrantyDesc = reader.GetString(i++);

                // Maint_WarrantyExpire column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    Maint_WarrantyExpire = reader.GetDateTime(i);
                }
                else
                {
                    Maint_WarrantyExpire = DateTime.MinValue;
                }
                i++;
                // Make column, nvarchar(31), not null
                Make = reader.GetString(i++);

                // Material_AccountId column, bigint, not null
                Material_AccountId = reader.GetInt64(i++);

                // Model column, nvarchar(63), not null
                Model = reader.GetString(i++);

                // Name column, nvarchar(63), not null
                Name = reader.GetString(i++);

                // NoCostRollUp column, bit, not null
                NoCostRollUp = reader.GetBoolean(i++);

                // NoPartXRef column, bit, not null
                NoPartXRef = reader.GetBoolean(i++);

                // OriginalValue column, decimal(15,3), not null
                OriginalValue = reader.GetDecimal(i++);

                // OutofService column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    OutofService = reader.GetDateTime(i);
                }
                else
                {
                    OutofService = DateTime.MinValue;
                }
                i++;
                // ParentId column, bigint, not null
                ParentId = reader.GetInt64(i++);

                // PartId column, bigint, not null
                PartId = reader.GetInt64(i++);

                // Purch_VendorId column, bigint, not null
                Purch_VendorId = reader.GetInt64(i++);

                // Purch_WarrantyDesc column, nvarchar(127), not null
                Purch_WarrantyDesc = reader.GetString(i++);

                // Purch_WarrantyExpire column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    Purch_WarrantyExpire = reader.GetDateTime(i);
                }
                else
                {
                    Purch_WarrantyExpire = DateTime.MinValue;
                }
                i++;
                // RIMEClass column, int, not null
                RIMEClass = reader.GetInt32(i++);

                // SalvageValue column, decimal(15,3), not null
                SalvageValue = reader.GetDecimal(i++);

                // SerialNumber column, nvarchar(63), not null
                SerialNumber = reader.GetString(i++);

                // Size column, int, not null
                Size = reader.GetInt32(i++);

                // SizeUnits column, nvarchar(15), not null
                SizeUnits = reader.GetString(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // Type column, nvarchar(15), not null
                Type = reader.GetString(i++);

                // AssetNumber column, nvarchar(31), not null
                AssetNumber = reader.GetString(i++);

                // ProcessSystemId column, bigint, not null
                ProcessSystemId = reader.GetInt64(i++);

                // PlantLocationId column, bigint, not null
                PlantLocationId = reader.GetInt64(i++);

                // EquipmentMasterId column, bigint, not null
                EquipmentMasterId = reader.GetInt64(i++);

                // LineId column, bigint, not null
                LineId = reader.GetInt64(i++);

                // SystemInfoId column, bigint, not null
                SystemInfoId = reader.GetInt64(i++);

                // AssetCategory column, nvarchar(15), not null
                AssetCategory = reader.GetString(i++);

                // SubType column, nvarchar(15), not null
                SubType = reader.GetString(i++);

                // AssetGroup1 column, bigint, not null
                AssetGroup1 = reader.GetInt64(i++);

                // AssetGroup2 column, bigint, not null
                AssetGroup2 = reader.GetInt64(i++);

                // AssetGroup3 column, bigint, not null
                AssetGroup3 = reader.GetInt64(i++);

                // VIN column, nvarchar(30), not null
                VIN = reader.GetString(i++);

                // VehicleType column, nvarchar(15), not null
                VehicleType = reader.GetString(i++);

                // License column, nvarchar(15), not null
                License = reader.GetString(i++);

                // RegistrationLoc column, nvarchar(15), not null
                RegistrationLoc = reader.GetString(i++);

                // VehicleYear column, int, not null
                VehicleYear = reader.GetInt32(i++);

                // CurrentReading column, decimal(10,2), not null
                CurrentReading = reader.GetDecimal(i++);

                // CurrentReadingDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CurrentReadingDate = reader.GetDateTime(i);
                }
                else
                {
                    CurrentReadingDate = DateTime.MinValue;
                }
                i++;
                // FuelUnits column, nvarchar(15), not null
                FuelUnits = reader.GetString(i++);

                // Meter1CurrentReading column, decimal(9,1), not null
                Meter1CurrentReading = reader.GetDecimal(i++);

                // Meter1CurrentReadingDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    Meter1CurrentReadingDate = reader.GetDateTime(i);
                }
                else
                {
                    Meter1CurrentReadingDate = DateTime.MinValue;
                }
                i++;
                // Meter1Type column, nvarchar(15), not null
                Meter1Type = reader.GetString(i++);

                // Meter1Units column, nvarchar(15), not null
                Meter1Units = reader.GetString(i++);

                // Meter2CurrentReading column, decimal(9,1), not null
                Meter2CurrentReading = reader.GetDecimal(i++);

                // Meter2CurrentReadingDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    Meter2CurrentReadingDate = reader.GetDateTime(i);
                }
                else
                {
                    Meter2CurrentReadingDate = DateTime.MinValue;
                }
                i++;
                // Meter2Type column, nvarchar(15), not null
                Meter2Type = reader.GetString(i++);

                // Meter2Units column, nvarchar(15), not null
                Meter2Units = reader.GetString(i++);

                // RemoveFromService column, bit, not null
                RemoveFromService = reader.GetBoolean(i++);

                // RemoveFromServiceDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    RemoveFromServiceDate = reader.GetDateTime(i);
                }
                else
                {
                    RemoveFromServiceDate = DateTime.MinValue;
                }
                i++;
                // ExpectedReturnToService column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ExpectedReturnToService = reader.GetDateTime(i);
                }
                else
                {
                    ExpectedReturnToService = DateTime.MinValue;
                }
                i++;
                // RemoveFromServiceReason column, nvarchar(MAX), not null
                RemoveFromServiceReason = reader.GetString(i++);

                // RemoveFromServiceReasonCode column, nvarchar(15), not null
                RemoveFromServiceReasonCode = reader.GetString(i++);

                // Assigned column, bigint, not null
                Assigned = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["EquipmentId"].ToString(); }
                catch { missing.Append("EquipmentId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["AcquiredCost"].ToString(); }
                catch { missing.Append("AcquiredCost "); }

                try { reader["AcquiredDate"].ToString(); }
                catch { missing.Append("AcquiredDate "); }

                try { reader["BIMIdentifier"].ToString(); }
                catch { missing.Append("BIMIdentifier "); }

                try { reader["BookValue"].ToString(); }
                catch { missing.Append("BookValue "); }

                try { reader["BusinessGroup"].ToString(); }
                catch { missing.Append("BusinessGroup "); }

                try { reader["CatalogNumber"].ToString(); }
                catch { missing.Append("CatalogNumber "); }

                try { reader["Category"].ToString(); }
                catch { missing.Append("Category "); }

                try { reader["CostCenter"].ToString(); }
                catch { missing.Append("CostCenter "); }

                try { reader["DeprCode"].ToString(); }
                catch { missing.Append("DeprCode "); }

                try { reader["DeprLifeToDate"].ToString(); }
                catch { missing.Append("DeprLifeToDate "); }

                try { reader["DeprPercent"].ToString(); }
                catch { missing.Append("DeprPercent "); }

                try { reader["DeprYearToDate"].ToString(); }
                catch { missing.Append("DeprYearToDate "); }

                try { reader["ElectricalParent"].ToString(); }
                catch { missing.Append("ElectricalParent "); }

                try { reader["InactiveFlag"].ToString(); }
                catch { missing.Append("InactiveFlag "); }

                try { reader["CriticalFlag"].ToString(); }
                catch { missing.Append("CriticalFlag "); }

                try { reader["InstallDate"].ToString(); }
                catch { missing.Append("InstallDate "); }

                try { reader["Labor_AccountId"].ToString(); }
                catch { missing.Append("Labor_AccountId "); }

                try { reader["LifeinMonths"].ToString(); }
                catch { missing.Append("LifeinMonths "); }

                try { reader["LifeinYears"].ToString(); }
                catch { missing.Append("LifeinYears "); }

                try { reader["Location"].ToString(); }
                catch { missing.Append("Location "); }

                try { reader["LocationId"].ToString(); }
                catch { missing.Append("LocationId "); }

                try { reader["Maint_VendorId"].ToString(); }
                catch { missing.Append("Maint_VendorId "); }

                try { reader["Maint_WarrantyDesc"].ToString(); }
                catch { missing.Append("Maint_WarrantyDesc "); }

                try { reader["Maint_WarrantyExpire"].ToString(); }
                catch { missing.Append("Maint_WarrantyExpire "); }

                try { reader["Make"].ToString(); }
                catch { missing.Append("Make "); }

                try { reader["Material_AccountId"].ToString(); }
                catch { missing.Append("Material_AccountId "); }

                try { reader["Model"].ToString(); }
                catch { missing.Append("Model "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["NoCostRollUp"].ToString(); }
                catch { missing.Append("NoCostRollUp "); }

                try { reader["NoPartXRef"].ToString(); }
                catch { missing.Append("NoPartXRef "); }

                try { reader["OriginalValue"].ToString(); }
                catch { missing.Append("OriginalValue "); }

                try { reader["OutofService"].ToString(); }
                catch { missing.Append("OutofService "); }

                try { reader["ParentId"].ToString(); }
                catch { missing.Append("ParentId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["Purch_VendorId"].ToString(); }
                catch { missing.Append("Purch_VendorId "); }

                try { reader["Purch_WarrantyDesc"].ToString(); }
                catch { missing.Append("Purch_WarrantyDesc "); }

                try { reader["Purch_WarrantyExpire"].ToString(); }
                catch { missing.Append("Purch_WarrantyExpire "); }

                try { reader["RIMEClass"].ToString(); }
                catch { missing.Append("RIMEClass "); }

                try { reader["SalvageValue"].ToString(); }
                catch { missing.Append("SalvageValue "); }

                try { reader["SerialNumber"].ToString(); }
                catch { missing.Append("SerialNumber "); }

                try { reader["Size"].ToString(); }
                catch { missing.Append("Size "); }

                try { reader["SizeUnits"].ToString(); }
                catch { missing.Append("SizeUnits "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["AssetNumber"].ToString(); }
                catch { missing.Append("AssetNumber "); }

                try { reader["ProcessSystemId"].ToString(); }
                catch { missing.Append("ProcessSystemId "); }

                try { reader["PlantLocationId"].ToString(); }
                catch { missing.Append("PlantLocationId "); }

                try { reader["EquipmentMasterId"].ToString(); }
                catch { missing.Append("EquipmentMasterId "); }

                try { reader["LineId"].ToString(); }
                catch { missing.Append("LineId "); }

                try { reader["SystemInfoId"].ToString(); }
                catch { missing.Append("SystemInfoId "); }

                try { reader["AssetCategory"].ToString(); }
                catch { missing.Append("AssetCategory "); }

                try { reader["SubType"].ToString(); }
                catch { missing.Append("SubType "); }

                try { reader["AssetGroup1"].ToString(); }
                catch { missing.Append("AssetGroup1 "); }

                try { reader["AssetGroup2"].ToString(); }
                catch { missing.Append("AssetGroup2 "); }

                try { reader["AssetGroup3"].ToString(); }
                catch { missing.Append("AssetGroup3 "); }

                try { reader["VIN"].ToString(); }
                catch { missing.Append("VIN "); }

                try { reader["VehicleType"].ToString(); }
                catch { missing.Append("VehicleType "); }

                try { reader["License"].ToString(); }
                catch { missing.Append("License "); }

                try { reader["RegistrationLoc"].ToString(); }
                catch { missing.Append("RegistrationLoc "); }

                try { reader["VehicleYear"].ToString(); }
                catch { missing.Append("VehicleYear "); }

                try { reader["CurrentReading"].ToString(); }
                catch { missing.Append("CurrentReading "); }

                try { reader["CurrentReadingDate"].ToString(); }
                catch { missing.Append("CurrentReadingDate "); }

                try { reader["FuelUnits"].ToString(); }
                catch { missing.Append("FuelUnits "); }

                try { reader["Meter1CurrentReading"].ToString(); }
                catch { missing.Append("Meter1CurrentReading "); }

                try { reader["Meter1CurrentReadingDate"].ToString(); }
                catch { missing.Append("Meter1CurrentReadingDate "); }

                try { reader["Meter1Type"].ToString(); }
                catch { missing.Append("Meter1Type "); }

                try { reader["Meter1Units"].ToString(); }
                catch { missing.Append("Meter1Units "); }

                try { reader["Meter2CurrentReading"].ToString(); }
                catch { missing.Append("Meter2CurrentReading "); }

                try { reader["Meter2CurrentReadingDate"].ToString(); }
                catch { missing.Append("Meter2CurrentReadingDate "); }

                try { reader["Meter2Type"].ToString(); }
                catch { missing.Append("Meter2Type "); }

                try { reader["Meter2Units"].ToString(); }
                catch { missing.Append("Meter2Units "); }

                try { reader["RemoveFromService"].ToString(); }
                catch { missing.Append("RemoveFromService "); }

                try { reader["RemoveFromServiceDate"].ToString(); }
                catch { missing.Append("RemoveFromServiceDate "); }

                try { reader["ExpectedReturnToService"].ToString(); }
                catch { missing.Append("ExpectedReturnToService "); }

                try { reader["RemoveFromServiceReason"].ToString(); }
                catch { missing.Append("RemoveFromServiceReason "); }

                try { reader["RemoveFromServiceReasonCode"].ToString(); }
                catch { missing.Append("RemoveFromServiceReasonCode "); }

                try { reader["Assigned"].ToString(); }
                catch { missing.Append("Assigned "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Equipment table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Equipment_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Equipment table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Equipment_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Equipment table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Equipment_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Equipment table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Equipment[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Equipment[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Equipment> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Equipment[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Equipment>(reader => { b_Equipment obj = new b_Equipment(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Equipment_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Equipment[])results.ToArray(typeof(b_Equipment));
                }
                else
                {
                    data = new b_Equipment[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Equipment table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Equipment[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Equipment> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Equipment>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Equipment_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Equipment objects.
        /// </summary>
        /// <param name="obj">b_Equipment object to compare against the current object.</param>
        public bool Equals(b_Equipment obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (EquipmentId != obj.EquipmentId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (AcquiredCost != obj.AcquiredCost) return false;
            if (!AcquiredDate.Equals(obj.AcquiredDate)) return false;
            if (!BIMIdentifier.Equals(obj.BIMIdentifier)) return false;
            if (BookValue != obj.BookValue) return false;
            if (!BusinessGroup.Equals(obj.BusinessGroup)) return false;
            if (!CatalogNumber.Equals(obj.CatalogNumber)) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (!CostCenter.Equals(obj.CostCenter)) return false;
            if (!DeprCode.Equals(obj.DeprCode)) return false;
            if (DeprLifeToDate != obj.DeprLifeToDate) return false;
            if (DeprPercent != obj.DeprPercent) return false;
            if (DeprYearToDate != obj.DeprYearToDate) return false;
            if (ElectricalParent != obj.ElectricalParent) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (CriticalFlag != obj.CriticalFlag) return false;
            if (!InstallDate.Equals(obj.InstallDate)) return false;
            if (Labor_AccountId != obj.Labor_AccountId) return false;
            if (LifeinMonths != obj.LifeinMonths) return false;
            if (LifeinYears != obj.LifeinYears) return false;
            if (!Location.Equals(obj.Location)) return false;
            if (LocationId != obj.LocationId) return false;
            if (Maint_VendorId != obj.Maint_VendorId) return false;
            if (!Maint_WarrantyDesc.Equals(obj.Maint_WarrantyDesc)) return false;
            if (!Maint_WarrantyExpire.Equals(obj.Maint_WarrantyExpire)) return false;
            if (!Make.Equals(obj.Make)) return false;
            if (Material_AccountId != obj.Material_AccountId) return false;
            if (!Model.Equals(obj.Model)) return false;
            if (!Name.Equals(obj.Name)) return false;
            if (NoCostRollUp != obj.NoCostRollUp) return false;
            if (NoPartXRef != obj.NoPartXRef) return false;
            if (OriginalValue != obj.OriginalValue) return false;
            if (!OutofService.Equals(obj.OutofService)) return false;
            if (ParentId != obj.ParentId) return false;
            if (PartId != obj.PartId) return false;
            if (Purch_VendorId != obj.Purch_VendorId) return false;
            if (!Purch_WarrantyDesc.Equals(obj.Purch_WarrantyDesc)) return false;
            if (!Purch_WarrantyExpire.Equals(obj.Purch_WarrantyExpire)) return false;
            if (RIMEClass != obj.RIMEClass) return false;
            if (SalvageValue != obj.SalvageValue) return false;
            if (!SerialNumber.Equals(obj.SerialNumber)) return false;
            if (Size != obj.Size) return false;
            if (!SizeUnits.Equals(obj.SizeUnits)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (!AssetNumber.Equals(obj.AssetNumber)) return false;
            if (ProcessSystemId != obj.ProcessSystemId) return false;
            if (PlantLocationId != obj.PlantLocationId) return false;
            if (EquipmentMasterId != obj.EquipmentMasterId) return false;
            if (LineId != obj.LineId) return false;
            if (SystemInfoId != obj.SystemInfoId) return false;
            if (!AssetCategory.Equals(obj.AssetCategory)) return false;
            if (!SubType.Equals(obj.SubType)) return false;
            if (AssetGroup1 != obj.AssetGroup1) return false;
            if (AssetGroup2 != obj.AssetGroup2) return false;
            if (AssetGroup3 != obj.AssetGroup3) return false;
            if (!VIN.Equals(obj.VIN)) return false;
            if (!VehicleType.Equals(obj.VehicleType)) return false;
            if (!License.Equals(obj.License)) return false;
            if (!RegistrationLoc.Equals(obj.RegistrationLoc)) return false;
            if (VehicleYear != obj.VehicleYear) return false;
            if (CurrentReading != obj.CurrentReading) return false;
            if (!CurrentReadingDate.Equals(obj.CurrentReadingDate)) return false;
            if (!FuelUnits.Equals(obj.FuelUnits)) return false;
            if (Meter1CurrentReading != obj.Meter1CurrentReading) return false;
            if (!Meter1CurrentReadingDate.Equals(obj.Meter1CurrentReadingDate)) return false;
            if (!Meter1Type.Equals(obj.Meter1Type)) return false;
            if (!Meter1Units.Equals(obj.Meter1Units)) return false;
            if (Meter2CurrentReading != obj.Meter2CurrentReading) return false;
            if (!Meter2CurrentReadingDate.Equals(obj.Meter2CurrentReadingDate)) return false;
            if (!Meter2Type.Equals(obj.Meter2Type)) return false;
            if (!Meter2Units.Equals(obj.Meter2Units)) return false;
            if (RemoveFromService != obj.RemoveFromService) return false;
            if (!RemoveFromServiceDate.Equals(obj.RemoveFromServiceDate)) return false;
            if (!ExpectedReturnToService.Equals(obj.ExpectedReturnToService)) return false;
            if (!RemoveFromServiceReason.Equals(obj.RemoveFromServiceReason)) return false;
            if (!RemoveFromServiceReasonCode.Equals(obj.RemoveFromServiceReasonCode)) return false;
            if (Assigned != obj.Assigned) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Equipment objects.
        /// </summary>
        /// <param name="obj1">b_Equipment object to use in the comparison.</param>
        /// <param name="obj2">b_Equipment object to use in the comparison.</param>
        public static bool Equals(b_Equipment obj1, b_Equipment obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
