/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the IoTDevice table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_IoTDevice : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_IoTDevice()
        {
            ClientId = 0;
            IoTDeviceId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            Name = String.Empty;
            IoTDeviceCategory = String.Empty;
            SensorType = String.Empty;
            EquipmentId = 0;
            InactiveFlag = false;
            LastReading = 0;
            LastReadingDate = new System.Nullable<System.DateTime>();
            MeterInterval = 0;
            MeterReadingLife = 0;
            MeterReadingMax = 0;
            MonnitHeartbeat = 0;
            MonnitLastBatteryLevel = 0;
            MonnitLastSignalStrength = 0;
            MonnitNetworkID = 0;
            MonnitSensorAppID = 0;
            SensorAlertProcedureId = 0;
            SensorUnit = String.Empty;
            TriggerHigh = 0;
            TriggerLow = 0;
            SensorID = 0;
            CMMSMeterId = 0;
            TriggerHighCrit = 0;
            TriggerLowCrit = 0;
            CriticalProcedureId = 0;
            MeterLastDoneDate = new System.Nullable<System.DateTime>();
            MeterLastDone = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// IoTDeviceId property
        /// </summary>
        public long IoTDeviceId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// Name property
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// IoTDeviceCategory property
        /// </summary>
        public string IoTDeviceCategory { get; set; }

        /// <summary>
        /// SensorType property
        /// </summary>
        public string SensorType { get; set; }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        public long EquipmentId { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// LastReading property
        /// </summary>
        public decimal LastReading { get; set; }

        /// <summary>
        /// LastReadingDate property
        /// </summary>
        public DateTime? LastReadingDate { get; set; }

        /// <summary>
        /// MeterInterval property
        /// </summary>
        public decimal MeterInterval { get; set; }

        /// <summary>
        /// MeterReadingLife property
        /// </summary>
        public decimal MeterReadingLife { get; set; }

        /// <summary>
        /// MeterReadingMax property
        /// </summary>
        public decimal MeterReadingMax { get; set; }

        /// <summary>
        /// MonnitHeartbeat property
        /// </summary>
        public int MonnitHeartbeat { get; set; }

        /// <summary>
        /// MonnitLastBatteryLevel property
        /// </summary>
        public decimal MonnitLastBatteryLevel { get; set; }

        /// <summary>
        /// MonnitLastSignalStrength property
        /// </summary>
        public int MonnitLastSignalStrength { get; set; }

        /// <summary>
        /// MonnitNetworkID property
        /// </summary>
        public int MonnitNetworkID { get; set; }

        /// <summary>
        /// MonnitSensorAppID property
        /// </summary>
        public int MonnitSensorAppID { get; set; }

        /// <summary>
        /// SensorAlertProcedureId property
        /// </summary>
        public long SensorAlertProcedureId { get; set; }

        /// <summary>
        /// SensorUnit property
        /// </summary>
        public string SensorUnit { get; set; }

        /// <summary>
        /// TriggerHigh property
        /// </summary>
        public decimal TriggerHigh { get; set; }

        /// <summary>
        /// TriggerLow property
        /// </summary>
        public decimal TriggerLow { get; set; }

        /// <summary>
        /// SensorID property
        /// </summary>
        public int SensorID { get; set; }

        /// <summary>
        /// CMMSMeterId property
        /// </summary>
        public long CMMSMeterId { get; set; }

        /// <summary>
        /// TriggerHighCrit property
        /// </summary>
        public decimal TriggerHighCrit { get; set; }

        /// <summary>
        /// TriggerLowCrit property
        /// </summary>
        public decimal TriggerLowCrit { get; set; }

        /// <summary>
        /// CriticalProcedureId property
        /// </summary>
        public long CriticalProcedureId { get; set; }

        /// <summary>
        /// MeterLastDoneDate property
        /// </summary>
        public DateTime? MeterLastDoneDate { get; set; }

        /// <summary>
        /// MeterLastDone property
        /// </summary>
        public decimal MeterLastDone { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_IoTDevice object.
        /// This routine should be applied to the usp_IoTDevice_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_IoTDevice_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_IoTDevice object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_IoTDevice obj = new b_IoTDevice();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_IoTDevice object.
        /// This routine should be applied to the usp_IoTDevice_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_IoTDevice_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // IoTDeviceId column, bigint, not null
                IoTDeviceId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(31), not null
                ClientLookupId = reader.GetString(i++);

                // Name column, nvarchar(63), not null
                Name = reader.GetString(i++);

                // IoTDeviceCategory column, nvarchar(15), not null
                IoTDeviceCategory = reader.GetString(i++);

                // SensorType column, nvarchar(15), not null
                SensorType = reader.GetString(i++);

                // EquipmentId column, bigint, not null
                EquipmentId = reader.GetInt64(i++);

                // InactiveFlag column, bit, not null
                InactiveFlag = reader.GetBoolean(i++);

                // LastReading column, decimal(17,2), not null
                LastReading = reader.GetDecimal(i++);

                // LastReadingDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastReadingDate = reader.GetDateTime(i);
                }
                else
                {
                    LastReadingDate = DateTime.MinValue;
                }
                i++;
                // MeterInterval column, decimal(17,3), not null
                MeterInterval = reader.GetDecimal(i++);

                // MeterReadingLife column, decimal(17,3), not null
                MeterReadingLife = reader.GetDecimal(i++);

                // MeterReadingMax column, decimal(17,3), not null
                MeterReadingMax = reader.GetDecimal(i++);

                // MonnitHeartbeat column, int, not null
                MonnitHeartbeat = reader.GetInt32(i++);

                // MonnitLastBatteryLevel column, decimal(17,2), not null
                MonnitLastBatteryLevel = reader.GetDecimal(i++);

                // MonnitLastSignalStrength column, int, not null
                MonnitLastSignalStrength = reader.GetInt32(i++);

                // MonnitNetworkID column, int, not null
                MonnitNetworkID = reader.GetInt32(i++);

                // MonnitSensorAppID column, int, not null
                MonnitSensorAppID = reader.GetInt32(i++);

                // SensorAlertProcedureId column, bigint, not null
                SensorAlertProcedureId = reader.GetInt64(i++);

                // SensorUnit column, nvarchar(15), not null
                SensorUnit = reader.GetString(i++);

                // TriggerHigh column, decimal(17,2), not null
                TriggerHigh = reader.GetDecimal(i++);

                // TriggerLow column, decimal(17,2), not null
                TriggerLow = reader.GetDecimal(i++);

                // SensorID column, int, not null
                SensorID = reader.GetInt32(i++);

                // CMMSMeterId column, bigint, not null
                CMMSMeterId = reader.GetInt64(i++);

                // TriggerHighCrit column, decimal(17,2), not null
                TriggerHighCrit = reader.GetDecimal(i++);

                // TriggerLowCrit column, decimal(17,2), not null
                TriggerLowCrit = reader.GetDecimal(i++);

                // CriticalProcedureId column, bigint, not null
                CriticalProcedureId = reader.GetInt64(i++);

                // MeterLastDoneDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    MeterLastDoneDate = reader.GetDateTime(i);
                }
                else
                {
                    MeterLastDoneDate = DateTime.MinValue;
                }
                i++;
                // MeterLastDone column, decimal(17,3), not null
                MeterLastDone = reader.GetDecimal(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["IoTDeviceId"].ToString(); }
                catch { missing.Append("IoTDeviceId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["IoTDeviceCategory"].ToString(); }
                catch { missing.Append("IoTDeviceCategory "); }

                try { reader["SensorType"].ToString(); }
                catch { missing.Append("SensorType "); }

                try { reader["EquipmentId"].ToString(); }
                catch { missing.Append("EquipmentId "); }

                try { reader["InactiveFlag"].ToString(); }
                catch { missing.Append("InactiveFlag "); }

                try { reader["LastReading"].ToString(); }
                catch { missing.Append("LastReading "); }

                try { reader["LastReadingDate"].ToString(); }
                catch { missing.Append("LastReadingDate "); }

                try { reader["MeterInterval"].ToString(); }
                catch { missing.Append("MeterInterval "); }

                try { reader["MeterReadingLife"].ToString(); }
                catch { missing.Append("MeterReadingLife "); }

                try { reader["MeterReadingMax"].ToString(); }
                catch { missing.Append("MeterReadingMax "); }

                try { reader["MonnitHeartbeat"].ToString(); }
                catch { missing.Append("MonnitHeartbeat "); }

                try { reader["MonnitLastBatteryLevel"].ToString(); }
                catch { missing.Append("MonnitLastBatteryLevel "); }

                try { reader["MonnitLastSignalStrength"].ToString(); }
                catch { missing.Append("MonnitLastSignalStrength "); }

                try { reader["MonnitNetworkID"].ToString(); }
                catch { missing.Append("MonnitNetworkID "); }

                try { reader["MonnitSensorAppID"].ToString(); }
                catch { missing.Append("MonnitSensorAppID "); }

                try { reader["SensorAlertProcedureId"].ToString(); }
                catch { missing.Append("SensorAlertProcedureId "); }

                try { reader["SensorUnit"].ToString(); }
                catch { missing.Append("SensorUnit "); }

                try { reader["TriggerHigh"].ToString(); }
                catch { missing.Append("TriggerHigh "); }

                try { reader["TriggerLow"].ToString(); }
                catch { missing.Append("TriggerLow "); }

                try { reader["SensorID"].ToString(); }
                catch { missing.Append("SensorID "); }

                try { reader["CMMSMeterId"].ToString(); }
                catch { missing.Append("CMMSMeterId "); }

                try { reader["TriggerHighCrit"].ToString(); }
                catch { missing.Append("TriggerHighCrit "); }

                try { reader["TriggerLowCrit"].ToString(); }
                catch { missing.Append("TriggerLowCrit "); }

                try { reader["CriticalProcedureId"].ToString(); }
                catch { missing.Append("CriticalProcedureId "); }

                try { reader["MeterLastDoneDate"].ToString(); }
                catch { missing.Append("MeterLastDoneDate "); }

                try { reader["MeterLastDone"].ToString(); }
                catch { missing.Append("MeterLastDone "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a IoTDevice table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_IoTDevice_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the IoTDevice table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_IoTDevice_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the IoTDevice table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_IoTDevice_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all IoTDevice table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_IoTDevice[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_IoTDevice[] data
        )
        {
            Database.SqlClient.ProcessRow<b_IoTDevice> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_IoTDevice[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_IoTDevice>(reader => { b_IoTDevice obj = new b_IoTDevice(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_IoTDevice_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_IoTDevice[])results.ToArray(typeof(b_IoTDevice));
                }
                else
                {
                    data = new b_IoTDevice[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve IoTDevice table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_IoTDevice[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_IoTDevice> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_IoTDevice>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_IoTDevice_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_IoTDevice objects.
        /// </summary>
        /// <param name="obj">b_IoTDevice object to compare against the current object.</param>
        public bool Equals(b_IoTDevice obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (IoTDeviceId != obj.IoTDeviceId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!Name.Equals(obj.Name)) return false;
            if (!IoTDeviceCategory.Equals(obj.IoTDeviceCategory)) return false;
            if (!SensorType.Equals(obj.SensorType)) return false;
            if (EquipmentId != obj.EquipmentId) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (LastReading != obj.LastReading) return false;
            if (!LastReadingDate.Equals(obj.LastReadingDate)) return false;
            if (MeterInterval != obj.MeterInterval) return false;
            if (MeterReadingLife != obj.MeterReadingLife) return false;
            if (MeterReadingMax != obj.MeterReadingMax) return false;
            if (MonnitHeartbeat != obj.MonnitHeartbeat) return false;
            if (MonnitLastBatteryLevel != obj.MonnitLastBatteryLevel) return false;
            if (MonnitLastSignalStrength != obj.MonnitLastSignalStrength) return false;
            if (MonnitNetworkID != obj.MonnitNetworkID) return false;
            if (MonnitSensorAppID != obj.MonnitSensorAppID) return false;
            if (SensorAlertProcedureId != obj.SensorAlertProcedureId) return false;
            if (!SensorUnit.Equals(obj.SensorUnit)) return false;
            if (TriggerHigh != obj.TriggerHigh) return false;
            if (TriggerLow != obj.TriggerLow) return false;
            if (SensorID != obj.SensorID) return false;
            if (CMMSMeterId != obj.CMMSMeterId) return false;
            if (TriggerHighCrit != obj.TriggerHighCrit) return false;
            if (TriggerLowCrit != obj.TriggerLowCrit) return false;
            if (CriticalProcedureId != obj.CriticalProcedureId) return false;
            if (!MeterLastDoneDate.Equals(obj.MeterLastDoneDate)) return false;
            if (MeterLastDone != obj.MeterLastDone) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_IoTDevice objects.
        /// </summary>
        /// <param name="obj1">b_IoTDevice object to use in the comparison.</param>
        /// <param name="obj2">b_IoTDevice object to use in the comparison.</param>
        public static bool Equals(b_IoTDevice obj1, b_IoTDevice obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
    