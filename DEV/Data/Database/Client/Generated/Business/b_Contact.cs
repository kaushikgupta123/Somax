/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Contact table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Contact : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Contact ()
        {
            ClientId = 0;
            ContactId = 0;
            ObjectId = 0;
            TableName = String.Empty;
            OwnerId = 0;
            OwnerName = String.Empty;
            Name = String.Empty;
            Address1 = String.Empty;
            Address2 = String.Empty;
            Address3 = String.Empty;
            AddressCity = String.Empty;
            AddressCountry = String.Empty;
            AddressPostCode = String.Empty;
            AddressState = String.Empty;
            Phone1 = String.Empty;
            Phone2 = String.Empty;
            Phone3 = String.Empty;
            Email1 = String.Empty;
            Email2 = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// ContactId property
        /// </summary>
        public long ContactId { get; set; }

        /// <summary>
        /// ObjectId property
        /// </summary>
        public long ObjectId { get; set; }

        /// <summary>
        /// TableName property
        /// </summary>
        public string TableName { get; set; }

        /// <summary>
        /// OwnerId property
        /// </summary>
        public long OwnerId { get; set; }

        /// <summary>
        /// OwnerName property
        /// </summary>
        public string OwnerName { get; set; }

        /// <summary>
        /// Name property
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Address1 property
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Address2 property
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Address3 property
        /// </summary>
        public string Address3 { get; set; }

        /// <summary>
        /// AddressCity property
        /// </summary>
        public string AddressCity { get; set; }

        /// <summary>
        /// AddressCountry property
        /// </summary>
        public string AddressCountry { get; set; }

        /// <summary>
        /// AddressPostCode property
        /// </summary>
        public string AddressPostCode { get; set; }

        /// <summary>
        /// AddressState property
        /// </summary>
        public string AddressState { get; set; }

        /// <summary>
        /// Phone1 property
        /// </summary>
        public string Phone1 { get; set; }

        /// <summary>
        /// Phone2 property
        /// </summary>
        public string Phone2 { get; set; }

        /// <summary>
        /// Phone3 property
        /// </summary>
        public string Phone3 { get; set; }

        /// <summary>
        /// Email1 property
        /// </summary>
        public string Email1 { get; set; }

        /// <summary>
        /// Email2 property
        /// </summary>
        public string Email2 { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Contact object.
        /// This routine should be applied to the usp_Contact_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Contact_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Contact object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_Contact obj = new b_Contact();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Contact object.
        /// This routine should be applied to the usp_Contact_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Contact_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // ContactId column, bigint, not null
                        ContactId = reader.GetInt64(i++);

                        // ObjectId column, bigint, not null
                        ObjectId = reader.GetInt64(i++);

                        // TableName column, nvarchar(63), not null
                        TableName = reader.GetString(i++);

                        // OwnerId column, bigint, not null
                        OwnerId = reader.GetInt64(i++);

                        // OwnerName column, nvarchar(127), not null
                        OwnerName = reader.GetString(i++);

                        // Name column, nvarchar(63), not null
                        Name = reader.GetString(i++);

                        // Address1 column, nvarchar(63), not null
                        Address1 = reader.GetString(i++);

                        // Address2 column, nvarchar(63), not null
                        Address2 = reader.GetString(i++);

                        // Address3 column, nvarchar(63), not null
                        Address3 = reader.GetString(i++);

                        // AddressCity column, nvarchar(63), not null
                        AddressCity = reader.GetString(i++);

                        // AddressCountry column, nvarchar(63), not null
                        AddressCountry = reader.GetString(i++);

                        // AddressPostCode column, nvarchar(31), not null
                        AddressPostCode = reader.GetString(i++);

                        // AddressState column, nvarchar(63), not null
                        AddressState = reader.GetString(i++);

                        // Phone1 column, nvarchar(31), not null
                        Phone1 = reader.GetString(i++);

                        // Phone2 column, nvarchar(31), not null
                        Phone2 = reader.GetString(i++);

                        // Phone3 column, nvarchar(31), not null
                        Phone3 = reader.GetString(i++);

                        // Email1 column, nvarchar(127), not null
                        Email1 = reader.GetString(i++);

                        // Email2 column, nvarchar(127), not null
                        Email2 = reader.GetString(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["ContactId"].ToString(); }
            catch { missing.Append("ContactId "); }
            
            try { reader["ObjectId"].ToString(); }
            catch { missing.Append("ObjectId "); }
            
            try { reader["TableName"].ToString(); }
            catch { missing.Append("TableName "); }
            
            try { reader["OwnerId"].ToString(); }
            catch { missing.Append("OwnerId "); }
            
            try { reader["OwnerName"].ToString(); }
            catch { missing.Append("OwnerName "); }
            
            try { reader["Name"].ToString(); }
            catch { missing.Append("Name "); }
            
            try { reader["Address1"].ToString(); }
            catch { missing.Append("Address1 "); }
            
            try { reader["Address2"].ToString(); }
            catch { missing.Append("Address2 "); }
            
            try { reader["Address3"].ToString(); }
            catch { missing.Append("Address3 "); }
            
            try { reader["AddressCity"].ToString(); }
            catch { missing.Append("AddressCity "); }
            
            try { reader["AddressCountry"].ToString(); }
            catch { missing.Append("AddressCountry "); }
            
            try { reader["AddressPostCode"].ToString(); }
            catch { missing.Append("AddressPostCode "); }
            
            try { reader["AddressState"].ToString(); }
            catch { missing.Append("AddressState "); }
            
            try { reader["Phone1"].ToString(); }
            catch { missing.Append("Phone1 "); }
            
            try { reader["Phone2"].ToString(); }
            catch { missing.Append("Phone2 "); }
            
            try { reader["Phone3"].ToString(); }
            catch { missing.Append("Phone3 "); }
            
            try { reader["Email1"].ToString(); }
            catch { missing.Append("Email1 "); }
            
            try { reader["Email2"].ToString(); }
            catch { missing.Append("Email2 "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
}

        /// <summary>
        /// Insert this object into the database as a Contact table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Contact_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Contact table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Contact_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Contact table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
               Database.StoredProcedure.usp_Contact_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Contact table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Contact[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Contact[] data
        )
        {
            ProcessRow<b_Contact> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Contact[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new ProcessRow<b_Contact>(reader => { b_Contact obj = new b_Contact(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Contact_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Contact[])results.ToArray(typeof(b_Contact));
                }
                else
                {
                    data = new b_Contact[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Contact table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Contact[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            ProcessRow<b_Contact> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new ProcessRow<b_Contact>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Contact_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Contact objects.
        /// </summary>
        /// <param name="obj">b_Contact object to compare against the current object.</param>
        public bool Equals (b_Contact obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (ContactId != obj.ContactId) return false;
            if (ObjectId != obj.ObjectId) return false;
            if (!TableName.Equals(obj.TableName)) return false;
            if (OwnerId != obj.OwnerId) return false;
            if (!OwnerName.Equals(obj.OwnerName)) return false;
            if (!Name.Equals(obj.Name)) return false;
            if (!Address1.Equals(obj.Address1)) return false;
            if (!Address2.Equals(obj.Address2)) return false;
            if (!Address3.Equals(obj.Address3)) return false;
            if (!AddressCity.Equals(obj.AddressCity)) return false;
            if (!AddressCountry.Equals(obj.AddressCountry)) return false;
            if (!AddressPostCode.Equals(obj.AddressPostCode)) return false;
            if (!AddressState.Equals(obj.AddressState)) return false;
            if (!Phone1.Equals(obj.Phone1)) return false;
            if (!Phone2.Equals(obj.Phone2)) return false;
            if (!Phone3.Equals(obj.Phone3)) return false;
            if (!Email1.Equals(obj.Email1)) return false;
            if (!Email2.Equals(obj.Email2)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Contact objects.
        /// </summary>
        /// <param name="obj1">b_Contact object to use in the comparison.</param>
        /// <param name="obj2">b_Contact object to use in the comparison.</param>
        public static bool Equals (b_Contact obj1, b_Contact obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
