/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Site table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Site : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Site()
        {
            ClientId = 0;
            SiteId = 0;
            Name = String.Empty;
            Description = String.Empty;
            Localization = String.Empty;
            UIConfiguration = String.Empty;
            Address1 = String.Empty;
            Address2 = String.Empty;
            Address3 = String.Empty;
            AddressCity = String.Empty;
            AddressCountry = String.Empty;
            AddressPostCode = String.Empty;
            AddressState = String.Empty;
            AppUsers = 0;
            MaxAppUsers = 0;
            LimitedUsers = 0;
            MaxLimitedUsers = 0;
            SanitationUsers = 0;
            MaxSanitationUsers = 0;
            WorkRequestUsers = 0;
            MaxWorkRequestUsers = 0;
            PhoneUsers = 0;
            MaxPhoneUsers = 0;
            TabletUsers = 0;
            MaxTabletUsers = 0;
            SuperUsers = 0;
            MaxSuperUsers = 0;
            Status = String.Empty;
            TimeZone = String.Empty;
            BillToAddress1 = String.Empty;
            BillToAddress2 = String.Empty;
            BillToAddress3 = String.Empty;
            BillToAddressCity = String.Empty;
            BillToAddressCountry = String.Empty;
            BillToAddressPostCode = String.Empty;
            BillToAddressState = String.Empty;
            AutoPurch = false;
            AutoPurch_CreatorId = 0;
            AutoPurch_Prefix = String.Empty;
            AutoPM = false;
            AutoPM_CreatorId = 0;
            AutoSanit = false;
            AutoSanit_CreatorId = 0;
            GuestWorkRequest = false;
            BIMURN = String.Empty;
            ProcessSystemTree = false;
            BillToName = String.Empty;
            BillToComment = String.Empty;
            ShipToName = String.Empty;
            ExSiteCode = String.Empty;
            ExOrganizationId = String.Empty;
            UsePartMaster = false;
            PartClientLookupId = false;
            UseVendorMaster = false;
            NoPartIdChange = false;
            Logo = String.Empty;
            NonStockAccountId = 0;
            ShoppingCartReviewDefault = 0;
            ShoppingCartIncludeBuyer = false;
            DefaultBuyer = 0;
            PartMasterReqEmail = String.Empty;
            ExternalSanitation = false;
            MaintOnDemand = false;
            UseEquipmentMaster = false;
            ShoppingCart = false;
            MobileWOTimer = String.Empty;
            UIVersion = String.Empty;
            PMLibrary = false;
            APM = false;
            CMMS = false;
            Sanitation = false;
            PlantLocation = false;
            AssetGroup1Name = String.Empty;
            AssetGroup2Name = String.Empty;
            AssetGroup3Name = String.Empty;
            VendorMaster_AllowLocal = false;
            Fleet = false;
            UsePunchOut = false;
            AddressISOCountryCode = String.Empty;
            BillToAddressISOCountryCode = String.Empty;
            UsePlanning = false;
            Production = false;
            ProdAppUsers = 0;
            MaxProdAppUsers = 0;
            WOBarcode = String.Empty;
            IncludePRReview = false;
            OnOrderCheck = false;
            VendorCompliance = false;
            SourceAssetAccount = false;
            IoTDevices = 0;
            MaxIoTDevices = 0;
            SingleStockLineItem = false;
            InvoiceVarianceCheck = false;
            InvoiceVariance = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// Name property
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Localization property
        /// </summary>
        public string Localization { get; set; }

        /// <summary>
        /// UIConfiguration property
        /// </summary>
        public string UIConfiguration { get; set; }

        /// <summary>
        /// Address1 property
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Address2 property
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Address3 property
        /// </summary>
        public string Address3 { get; set; }

        /// <summary>
        /// AddressCity property
        /// </summary>
        public string AddressCity { get; set; }

        /// <summary>
        /// AddressCountry property
        /// </summary>
        public string AddressCountry { get; set; }

        /// <summary>
        /// AddressPostCode property
        /// </summary>
        public string AddressPostCode { get; set; }

        /// <summary>
        /// AddressState property
        /// </summary>
        public string AddressState { get; set; }

        /// <summary>
        /// AppUsers property
        /// </summary>
        public int AppUsers { get; set; }

        /// <summary>
        /// MaxAppUsers property
        /// </summary>
        public int MaxAppUsers { get; set; }

        /// <summary>
        /// LimitedUsers property
        /// </summary>
        public int LimitedUsers { get; set; }

        /// <summary>
        /// MaxLimitedUsers property
        /// </summary>
        public int MaxLimitedUsers { get; set; }

        /// <summary>
        /// SanitationUsers property
        /// </summary>
        public int SanitationUsers { get; set; }

        /// <summary>
        /// MaxSanitationUsers property
        /// </summary>
        public int MaxSanitationUsers { get; set; }

        /// <summary>
        /// WorkRequestUsers property
        /// </summary>
        public int WorkRequestUsers { get; set; }

        /// <summary>
        /// MaxWorkRequestUsers property
        /// </summary>
        public int MaxWorkRequestUsers { get; set; }

        /// <summary>
        /// PhoneUsers property
        /// </summary>
        public int PhoneUsers { get; set; }

        /// <summary>
        /// MaxPhoneUsers property
        /// </summary>
        public int MaxPhoneUsers { get; set; }

        /// <summary>
        /// TabletUsers property
        /// </summary>
        public int TabletUsers { get; set; }

        /// <summary>
        /// MaxTabletUsers property
        /// </summary>
        public int MaxTabletUsers { get; set; }

        /// <summary>
        /// SuperUsers property
        /// </summary>
        public int SuperUsers { get; set; }

        /// <summary>
        /// MaxSuperUsers property
        /// </summary>
        public int MaxSuperUsers { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// TimeZone property
        /// </summary>
        public string TimeZone { get; set; }

        /// <summary>
        /// BillToAddress1 property
        /// </summary>
        public string BillToAddress1 { get; set; }

        /// <summary>
        /// BillToAddress2 property
        /// </summary>
        public string BillToAddress2 { get; set; }

        /// <summary>
        /// BillToAddress3 property
        /// </summary>
        public string BillToAddress3 { get; set; }

        /// <summary>
        /// BillToAddressCity property
        /// </summary>
        public string BillToAddressCity { get; set; }

        /// <summary>
        /// BillToAddressCountry property
        /// </summary>
        public string BillToAddressCountry { get; set; }

        /// <summary>
        /// BillToAddressPostCode property
        /// </summary>
        public string BillToAddressPostCode { get; set; }

        /// <summary>
        /// BillToAddressState property
        /// </summary>
        public string BillToAddressState { get; set; }

        /// <summary>
        /// AutoPurch property
        /// </summary>
        public bool AutoPurch { get; set; }

        /// <summary>
        /// AutoPurch_CreatorId property
        /// </summary>
        public long AutoPurch_CreatorId { get; set; }

        /// <summary>
        /// AutoPurch_Prefix property
        /// </summary>
        public string AutoPurch_Prefix { get; set; }

        /// <summary>
        /// AutoPM property
        /// </summary>
        public bool AutoPM { get; set; }

        /// <summary>
        /// AutoPM_CreatorId property
        /// </summary>
        public long AutoPM_CreatorId { get; set; }

        /// <summary>
        /// AutoSanit property
        /// </summary>
        public bool AutoSanit { get; set; }

        /// <summary>
        /// AutoSanit_CreatorId property
        /// </summary>
        public long AutoSanit_CreatorId { get; set; }

        /// <summary>
        /// GuestWorkRequest property
        /// </summary>
        public bool GuestWorkRequest { get; set; }

        /// <summary>
        /// BIMURN property
        /// </summary>
        public string BIMURN { get; set; }

        /// <summary>
        /// ProcessSystemTree property
        /// </summary>
        public bool ProcessSystemTree { get; set; }

        /// <summary>
        /// BillToName property
        /// </summary>
        public string BillToName { get; set; }

        /// <summary>
        /// BillToComment property
        /// </summary>
        public string BillToComment { get; set; }

        /// <summary>
        /// ShipToName property
        /// </summary>
        public string ShipToName { get; set; }

        /// <summary>
        /// ExSiteCode property
        /// </summary>
        public string ExSiteCode { get; set; }

        /// <summary>
        /// ExOrganizationId property
        /// </summary>
        public string ExOrganizationId { get; set; }

        /// <summary>
        /// UsePartMaster property
        /// </summary>
        public bool UsePartMaster { get; set; }

        /// <summary>
        /// PartClientLookupId property
        /// </summary>
        public bool PartClientLookupId { get; set; }

        /// <summary>
        /// UseVendorMaster property
        /// </summary>
        public bool UseVendorMaster { get; set; }

        /// <summary>
        /// NoPartIdChange property
        /// </summary>
        public bool NoPartIdChange { get; set; }

        /// <summary>
        /// Logo property
        /// </summary>
        public string Logo { get; set; }

        /// <summary>
        /// NonStockAccountId property
        /// </summary>
        public long NonStockAccountId { get; set; }

        /// <summary>
        /// ShoppingCartReviewDefault property
        /// </summary>
        public long ShoppingCartReviewDefault { get; set; }

        /// <summary>
        /// ShoppingCartIncludeBuyer property
        /// </summary>
        public bool ShoppingCartIncludeBuyer { get; set; }

        /// <summary>
        /// DefaultBuyer property
        /// </summary>
        public long DefaultBuyer { get; set; }

        /// <summary>
        /// PartMasterReqEmail property
        /// </summary>
        public string PartMasterReqEmail { get; set; }

        /// <summary>
        /// ExternalSanitation property
        /// </summary>
        public bool ExternalSanitation { get; set; }

        /// <summary>
        /// MaintOnDemand property
        /// </summary>
        public bool MaintOnDemand { get; set; }

        /// <summary>
        /// UseEquipmentMaster property
        /// </summary>
        public bool UseEquipmentMaster { get; set; }

        /// <summary>
        /// ShoppingCart property
        /// </summary>
        public bool ShoppingCart { get; set; }

        /// <summary>
        /// MobileWOTimer property
        /// </summary>
        public string MobileWOTimer { get; set; }

        /// <summary>
        /// UIVersion property
        /// </summary>
        public string UIVersion { get; set; }

        /// <summary>
        /// PMLibrary property
        /// </summary>
        public bool PMLibrary { get; set; }

        /// <summary>
        /// APM property
        /// </summary>
        public bool APM { get; set; }

        /// <summary>
        /// CMMS property
        /// </summary>
        public bool CMMS { get; set; }

        /// <summary>
        /// Sanitation property
        /// </summary>
        public bool Sanitation { get; set; }

        /// <summary>
        /// PlantLocation property
        /// </summary>
        public bool PlantLocation { get; set; }

        /// <summary>
        /// AssetGroup1Name property
        /// </summary>
        public string AssetGroup1Name { get; set; }

        /// <summary>
        /// AssetGroup2Name property
        /// </summary>
        public string AssetGroup2Name { get; set; }

        /// <summary>
        /// AssetGroup3Name property
        /// </summary>
        public string AssetGroup3Name { get; set; }

        /// <summary>
        /// VendorMaster_AllowLocal property
        /// </summary>
        public bool VendorMaster_AllowLocal { get; set; }

        /// <summary>
        /// Fleet property
        /// </summary>
        public bool Fleet { get; set; }

        /// <summary>
        /// UsePunchOut property
        /// </summary>
        public bool UsePunchOut { get; set; }

        /// <summary>
        /// AddressISOCountryCode property
        /// </summary>
        public string AddressISOCountryCode { get; set; }

        /// <summary>
        /// BillToAddressISOCountryCode property
        /// </summary>
        public string BillToAddressISOCountryCode { get; set; }

        /// <summary>
        /// UsePlanning property
        /// </summary>
        public bool UsePlanning { get; set; }

        /// <summary>
        /// Production property
        /// </summary>
        public bool Production { get; set; }

        /// <summary>
        /// ProdAppUsers property
        /// </summary>
        public int ProdAppUsers { get; set; }

        /// <summary>
        /// MaxProdAppUsers property
        /// </summary>
        public int MaxProdAppUsers { get; set; }

        /// <summary>
        /// WOBarcode property
        /// </summary>
        public string WOBarcode { get; set; }

        /// <summary>
        /// IncludePRReview property
        /// </summary>
        public bool IncludePRReview { get; set; }

        /// <summary>
        /// OnOrderCheck property
        /// </summary>
        public bool OnOrderCheck { get; set; }

        /// <summary>
        /// VendorCompliance property
        /// </summary>
        public bool VendorCompliance { get; set; }

        /// <summary>
        /// SourceAssetAccount property
        /// </summary>
        public bool SourceAssetAccount { get; set; }

        /// <summary>
        /// IoTDevices property
        /// </summary>
        public int IoTDevices { get; set; }

        /// <summary>
        /// MaxIoTDevices property
        /// </summary>
        public int MaxIoTDevices { get; set; }

        /// <summary>
        /// SingleStockLineItem property
        /// </summary>
        public bool SingleStockLineItem { get; set; }

        /// <summary>
        /// InvoiceVarianceCheck property
        /// </summary>
        public bool InvoiceVarianceCheck { get; set; }

        /// <summary>
        /// InvoiceVariance property
        /// </summary>
        public int InvoiceVariance { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Site object.
        /// This routine should be applied to the usp_Site_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Site_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Site object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_Site obj = new b_Site();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Site object.
        /// This routine should be applied to the usp_Site_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Site_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // Name column, nvarchar(63), not null
                Name = reader.GetString(i++);

                // Description column, nvarchar(255), not null
                Description = reader.GetString(i++);

                // Localization column, nvarchar(255), not null
                Localization = reader.GetString(i++);

                // UIConfiguration column, nvarchar(255), not null
                UIConfiguration = reader.GetString(i++);

                // Address1 column, nvarchar(63), not null
                Address1 = reader.GetString(i++);

                // Address2 column, nvarchar(63), not null
                Address2 = reader.GetString(i++);

                // Address3 column, nvarchar(63), not null
                Address3 = reader.GetString(i++);

                // AddressCity column, nvarchar(63), not null
                AddressCity = reader.GetString(i++);

                // AddressCountry column, nvarchar(63), not null
                AddressCountry = reader.GetString(i++);

                // AddressPostCode column, nvarchar(31), not null
                AddressPostCode = reader.GetString(i++);

                // AddressState column, nvarchar(31), not null
                AddressState = reader.GetString(i++);

                // AppUsers column, int, not null
                AppUsers = reader.GetInt32(i++);

                // MaxAppUsers column, int, not null
                MaxAppUsers = reader.GetInt32(i++);

                // LimitedUsers column, int, not null
                LimitedUsers = reader.GetInt32(i++);

                // MaxLimitedUsers column, int, not null
                MaxLimitedUsers = reader.GetInt32(i++);

                // SanitationUsers column, int, not null
                SanitationUsers = reader.GetInt32(i++);

                // MaxSanitationUsers column, int, not null
                MaxSanitationUsers = reader.GetInt32(i++);

                // WorkRequestUsers column, int, not null
                WorkRequestUsers = reader.GetInt32(i++);

                // MaxWorkRequestUsers column, int, not null
                MaxWorkRequestUsers = reader.GetInt32(i++);

                // PhoneUsers column, int, not null
                PhoneUsers = reader.GetInt32(i++);

                // MaxPhoneUsers column, int, not null
                MaxPhoneUsers = reader.GetInt32(i++);

                // TabletUsers column, int, not null
                TabletUsers = reader.GetInt32(i++);

                // MaxTabletUsers column, int, not null
                MaxTabletUsers = reader.GetInt32(i++);

                // SuperUsers column, int, not null
                SuperUsers = reader.GetInt32(i++);

                // MaxSuperUsers column, int, not null
                MaxSuperUsers = reader.GetInt32(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // TimeZone column, nvarchar(31), not null
                TimeZone = reader.GetString(i++);

                // BillToAddress1 column, nvarchar(63), not null
                BillToAddress1 = reader.GetString(i++);

                // BillToAddress2 column, nvarchar(63), not null
                BillToAddress2 = reader.GetString(i++);

                // BillToAddress3 column, nvarchar(63), not null
                BillToAddress3 = reader.GetString(i++);

                // BillToAddressCity column, nvarchar(63), not null
                BillToAddressCity = reader.GetString(i++);

                // BillToAddressCountry column, nvarchar(63), not null
                BillToAddressCountry = reader.GetString(i++);

                // BillToAddressPostCode column, nvarchar(31), not null
                BillToAddressPostCode = reader.GetString(i++);

                // BillToAddressState column, nvarchar(31), not null
                BillToAddressState = reader.GetString(i++);

                // AutoPurch column, bit, not null
                AutoPurch = reader.GetBoolean(i++);

                // AutoPurch_CreatorId column, bigint, not null
                AutoPurch_CreatorId = reader.GetInt64(i++);

                // AutoPurch_Prefix column, nvarchar(7), not null
                AutoPurch_Prefix = reader.GetString(i++);

                // AutoPM column, bit, not null
                AutoPM = reader.GetBoolean(i++);

                // AutoPM_CreatorId column, bigint, not null
                AutoPM_CreatorId = reader.GetInt64(i++);

                // AutoSanit column, bit, not null
                AutoSanit = reader.GetBoolean(i++);

                // AutoSanit_CreatorId column, bigint, not null
                AutoSanit_CreatorId = reader.GetInt64(i++);

                // GuestWorkRequest column, bit, not null
                GuestWorkRequest = reader.GetBoolean(i++);

                // BIMURN column, nvarchar(255), not null
                BIMURN = reader.GetString(i++);

                // ProcessSystemTree column, bit, not null
                ProcessSystemTree = reader.GetBoolean(i++);

                // BillToName column, nvarchar(63), not null
                BillToName = reader.GetString(i++);

                // BillToComment column, nvarchar(255), not null
                BillToComment = reader.GetString(i++);

                // ShipToName column, nvarchar(63), not null
                ShipToName = reader.GetString(i++);

                // ExSiteCode column, nvarchar(15), not null
                ExSiteCode = reader.GetString(i++);

                // ExOrganizationId column, nvarchar(15), not null
                ExOrganizationId = reader.GetString(i++);

                // UsePartMaster column, bit, not null
                UsePartMaster = reader.GetBoolean(i++);

                // PartClientLookupId column, bit, not null
                PartClientLookupId = reader.GetBoolean(i++);

                // UseVendorMaster column, bit, not null
                UseVendorMaster = reader.GetBoolean(i++);

                // NoPartIdChange column, bit, not null
                NoPartIdChange = reader.GetBoolean(i++);

                // Logo column, nvarchar(255), not null
                Logo = reader.GetString(i++);

                // NonStockAccountId column, bigint, not null
                NonStockAccountId = reader.GetInt64(i++);

                // ShoppingCartReviewDefault column, bigint, not null
                ShoppingCartReviewDefault = reader.GetInt64(i++);

                // ShoppingCartIncludeBuyer column, bit, not null
                ShoppingCartIncludeBuyer = reader.GetBoolean(i++);

                // DefaultBuyer column, bigint, not null
                DefaultBuyer = reader.GetInt64(i++);

                // PartMasterReqEmail column, nvarchar(255), not null
                PartMasterReqEmail = reader.GetString(i++);

                // ExternalSanitation column, bit, not null
                ExternalSanitation = reader.GetBoolean(i++);

                // MaintOnDemand column, bit, not null
                MaintOnDemand = reader.GetBoolean(i++);

                // UseEquipmentMaster column, bit, not null
                UseEquipmentMaster = reader.GetBoolean(i++);

                // ShoppingCart column, bit, not null
                ShoppingCart = reader.GetBoolean(i++);

                // MobileWOTimer column, nvarchar(15), not null
                MobileWOTimer = reader.GetString(i++);

                // UIVersion column, nvarchar(15), not null
                UIVersion = reader.GetString(i++);

                // PMLibrary column, bit, not null
                PMLibrary = reader.GetBoolean(i++);

                // APM column, bit, not null
                APM = reader.GetBoolean(i++);

                // CMMS column, bit, not null
                CMMS = reader.GetBoolean(i++);

                // Sanitation column, bit, not null
                Sanitation = reader.GetBoolean(i++);

                // PlantLocation column, bit, not null
                PlantLocation = reader.GetBoolean(i++);

                // AssetGroup1Name column, nvarchar(31), not null
                AssetGroup1Name = reader.GetString(i++);

                // AssetGroup2Name column, nvarchar(31), not null
                AssetGroup2Name = reader.GetString(i++);

                // AssetGroup3Name column, nvarchar(31), not null
                AssetGroup3Name = reader.GetString(i++);

                // VendorMaster_AllowLocal column, bit, not null
                VendorMaster_AllowLocal = reader.GetBoolean(i++);

                // Fleet column, bit, not null
                Fleet = reader.GetBoolean(i++);

                // UsePunchOut column, bit, not null
                UsePunchOut = reader.GetBoolean(i++);

                // AddressISOCountryCode column, nvarchar(2), not null
                AddressISOCountryCode = reader.GetString(i++);

                // BillToAddressISOCountryCode column, nvarchar(2), not null
                BillToAddressISOCountryCode = reader.GetString(i++);

                // UsePlanning column, bit, not null
                UsePlanning = reader.GetBoolean(i++);

                // Production column, bit, not null
                Production = reader.GetBoolean(i++);

                // ProdAppUsers column, int, not null
                ProdAppUsers = reader.GetInt32(i++);

                // MaxProdAppUsers column, int, not null
                MaxProdAppUsers = reader.GetInt32(i++);

                // WOBarcode column, nvarchar(15), not null
                WOBarcode = reader.GetString(i++);

                // IncludePRReview column, bit, not null
                IncludePRReview = reader.GetBoolean(i++);

                // OnOrderCheck column, bit, not null
                OnOrderCheck = reader.GetBoolean(i++);

                // VendorCompliance column, bit, not null
                VendorCompliance = reader.GetBoolean(i++);

                // SourceAssetAccount column, bit, not null
                SourceAssetAccount = reader.GetBoolean(i++);

                // IoTDevices column, int, not null
                IoTDevices = reader.GetInt32(i++);

                // MaxIoTDevices column, int, not null
                MaxIoTDevices = reader.GetInt32(i++);

                // SingleStockLineItem column, bit, not null
                SingleStockLineItem = reader.GetBoolean(i++);

                // InvoiceVarianceCheck column, bit, not null
                InvoiceVarianceCheck = reader.GetBoolean(i++);

                // InvoiceVariance column, int, not null
                InvoiceVariance = reader.GetInt32(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["Localization"].ToString(); }
                catch { missing.Append("Localization "); }

                try { reader["UIConfiguration"].ToString(); }
                catch { missing.Append("UIConfiguration "); }

                try { reader["Address1"].ToString(); }
                catch { missing.Append("Address1 "); }

                try { reader["Address2"].ToString(); }
                catch { missing.Append("Address2 "); }

                try { reader["Address3"].ToString(); }
                catch { missing.Append("Address3 "); }

                try { reader["AddressCity"].ToString(); }
                catch { missing.Append("AddressCity "); }

                try { reader["AddressCountry"].ToString(); }
                catch { missing.Append("AddressCountry "); }

                try { reader["AddressPostCode"].ToString(); }
                catch { missing.Append("AddressPostCode "); }

                try { reader["AddressState"].ToString(); }
                catch { missing.Append("AddressState "); }

                try { reader["AppUsers"].ToString(); }
                catch { missing.Append("AppUsers "); }

                try { reader["MaxAppUsers"].ToString(); }
                catch { missing.Append("MaxAppUsers "); }

                try { reader["LimitedUsers"].ToString(); }
                catch { missing.Append("LimitedUsers "); }

                try { reader["MaxLimitedUsers"].ToString(); }
                catch { missing.Append("MaxLimitedUsers "); }

                try { reader["SanitationUsers"].ToString(); }
                catch { missing.Append("SanitationUsers "); }

                try { reader["MaxSanitationUsers"].ToString(); }
                catch { missing.Append("MaxSanitationUsers "); }

                try { reader["WorkRequestUsers"].ToString(); }
                catch { missing.Append("WorkRequestUsers "); }

                try { reader["MaxWorkRequestUsers"].ToString(); }
                catch { missing.Append("MaxWorkRequestUsers "); }

                try { reader["PhoneUsers"].ToString(); }
                catch { missing.Append("PhoneUsers "); }

                try { reader["MaxPhoneUsers"].ToString(); }
                catch { missing.Append("MaxPhoneUsers "); }

                try { reader["TabletUsers"].ToString(); }
                catch { missing.Append("TabletUsers "); }

                try { reader["MaxTabletUsers"].ToString(); }
                catch { missing.Append("MaxTabletUsers "); }

                try { reader["SuperUsers"].ToString(); }
                catch { missing.Append("SuperUsers "); }

                try { reader["MaxSuperUsers"].ToString(); }
                catch { missing.Append("MaxSuperUsers "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["TimeZone"].ToString(); }
                catch { missing.Append("TimeZone "); }

                try { reader["BillToAddress1"].ToString(); }
                catch { missing.Append("BillToAddress1 "); }

                try { reader["BillToAddress2"].ToString(); }
                catch { missing.Append("BillToAddress2 "); }

                try { reader["BillToAddress3"].ToString(); }
                catch { missing.Append("BillToAddress3 "); }

                try { reader["BillToAddressCity"].ToString(); }
                catch { missing.Append("BillToAddressCity "); }

                try { reader["BillToAddressCountry"].ToString(); }
                catch { missing.Append("BillToAddressCountry "); }

                try { reader["BillToAddressPostCode"].ToString(); }
                catch { missing.Append("BillToAddressPostCode "); }

                try { reader["BillToAddressState"].ToString(); }
                catch { missing.Append("BillToAddressState "); }

                try { reader["AutoPurch"].ToString(); }
                catch { missing.Append("AutoPurch "); }

                try { reader["AutoPurch_CreatorId"].ToString(); }
                catch { missing.Append("AutoPurch_CreatorId "); }

                try { reader["AutoPurch_Prefix"].ToString(); }
                catch { missing.Append("AutoPurch_Prefix "); }

                try { reader["AutoPM"].ToString(); }
                catch { missing.Append("AutoPM "); }

                try { reader["AutoPM_CreatorId"].ToString(); }
                catch { missing.Append("AutoPM_CreatorId "); }

                try { reader["AutoSanit"].ToString(); }
                catch { missing.Append("AutoSanit "); }

                try { reader["AutoSanit_CreatorId"].ToString(); }
                catch { missing.Append("AutoSanit_CreatorId "); }

                try { reader["GuestWorkRequest"].ToString(); }
                catch { missing.Append("GuestWorkRequest "); }

                try { reader["BIMURN"].ToString(); }
                catch { missing.Append("BIMURN "); }

                try { reader["ProcessSystemTree"].ToString(); }
                catch { missing.Append("ProcessSystemTree "); }

                try { reader["BillToName"].ToString(); }
                catch { missing.Append("BillToName "); }

                try { reader["BillToComment"].ToString(); }
                catch { missing.Append("BillToComment "); }

                try { reader["ShipToName"].ToString(); }
                catch { missing.Append("ShipToName "); }

                try { reader["ExSiteCode"].ToString(); }
                catch { missing.Append("ExSiteCode "); }

                try { reader["ExOrganizationId"].ToString(); }
                catch { missing.Append("ExOrganizationId "); }

                try { reader["UsePartMaster"].ToString(); }
                catch { missing.Append("UsePartMaster "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["UseVendorMaster"].ToString(); }
                catch { missing.Append("UseVendorMaster "); }

                try { reader["NoPartIdChange"].ToString(); }
                catch { missing.Append("NoPartIdChange "); }

                try { reader["Logo"].ToString(); }
                catch { missing.Append("Logo "); }

                try { reader["NonStockAccountId"].ToString(); }
                catch { missing.Append("NonStockAccountId "); }

                try { reader["ShoppingCartReviewDefault"].ToString(); }
                catch { missing.Append("ShoppingCartReviewDefault "); }

                try { reader["ShoppingCartIncludeBuyer"].ToString(); }
                catch { missing.Append("ShoppingCartIncludeBuyer "); }

                try { reader["DefaultBuyer"].ToString(); }
                catch { missing.Append("DefaultBuyer "); }

                try { reader["PartMasterReqEmail"].ToString(); }
                catch { missing.Append("PartMasterReqEmail "); }

                try { reader["ExternalSanitation"].ToString(); }
                catch { missing.Append("ExternalSanitation "); }

                try { reader["MaintOnDemand"].ToString(); }
                catch { missing.Append("MaintOnDemand "); }

                try { reader["UseEquipmentMaster"].ToString(); }
                catch { missing.Append("UseEquipmentMaster "); }

                try { reader["ShoppingCart"].ToString(); }
                catch { missing.Append("ShoppingCart "); }

                try { reader["MobileWOTimer"].ToString(); }
                catch { missing.Append("MobileWOTimer "); }

                try { reader["UIVersion"].ToString(); }
                catch { missing.Append("UIVersion "); }

                try { reader["PMLibrary"].ToString(); }
                catch { missing.Append("PMLibrary "); }

                try { reader["APM"].ToString(); }
                catch { missing.Append("APM "); }

                try { reader["CMMS"].ToString(); }
                catch { missing.Append("CMMS "); }

                try { reader["Sanitation"].ToString(); }
                catch { missing.Append("Sanitation "); }

                try { reader["PlantLocation"].ToString(); }
                catch { missing.Append("PlantLocation "); }

                try { reader["AssetGroup1Name"].ToString(); }
                catch { missing.Append("AssetGroup1Name "); }

                try { reader["AssetGroup2Name"].ToString(); }
                catch { missing.Append("AssetGroup2Name "); }

                try { reader["AssetGroup3Name"].ToString(); }
                catch { missing.Append("AssetGroup3Name "); }

                try { reader["VendorMaster_AllowLocal"].ToString(); }
                catch { missing.Append("VendorMaster_AllowLocal "); }

                try { reader["Fleet"].ToString(); }
                catch { missing.Append("Fleet "); }

                try { reader["UsePunchOut"].ToString(); }
                catch { missing.Append("UsePunchOut "); }

                try { reader["AddressISOCountryCode"].ToString(); }
                catch { missing.Append("AddressISOCountryCode "); }

                try { reader["BillToAddressISOCountryCode"].ToString(); }
                catch { missing.Append("BillToAddressISOCountryCode "); }

                try { reader["UsePlanning"].ToString(); }
                catch { missing.Append("UsePlanning "); }

                try { reader["Production"].ToString(); }
                catch { missing.Append("Production "); }

                try { reader["ProdAppUsers"].ToString(); }
                catch { missing.Append("ProdAppUsers "); }

                try { reader["MaxProdAppUsers"].ToString(); }
                catch { missing.Append("MaxProdAppUsers "); }

                try { reader["WOBarcode"].ToString(); }
                catch { missing.Append("WOBarcode "); }

                try { reader["IncludePRReview"].ToString(); }
                catch { missing.Append("IncludePRReview "); }

                try { reader["OnOrderCheck"].ToString(); }
                catch { missing.Append("OnOrderCheck "); }

                try { reader["VendorCompliance"].ToString(); }
                catch { missing.Append("VendorCompliance "); }

                try { reader["SourceAssetAccount"].ToString(); }
                catch { missing.Append("SourceAssetAccount "); }

                try { reader["IoTDevices"].ToString(); }
                catch { missing.Append("IoTDevices "); }

                try { reader["MaxIoTDevices"].ToString(); }
                catch { missing.Append("MaxIoTDevices "); }

                try { reader["SingleStockLineItem"].ToString(); }
                catch { missing.Append("SingleStockLineItem "); }

                try { reader["InvoiceVarianceCheck"].ToString(); }
                catch { missing.Append("InvoiceVarianceCheck "); }

                try { reader["InvoiceVariance"].ToString(); }
                catch { missing.Append("InvoiceVariance "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Site table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Site_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Site table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Site_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Site table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Site_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Site table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Site[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Site[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Site> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Site[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Site>(reader => { b_Site obj = new b_Site(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Site_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Site[])results.ToArray(typeof(b_Site));
                }
                else
                {
                    data = new b_Site[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Site table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Site[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Site> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Site>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Site_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Site objects.
        /// </summary>
        /// <param name="obj">b_Site object to compare against the current object.</param>
        public bool Equals(b_Site obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (SiteId != obj.SiteId) return false;
            if (!Name.Equals(obj.Name)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!Localization.Equals(obj.Localization)) return false;
            if (!UIConfiguration.Equals(obj.UIConfiguration)) return false;
            if (!Address1.Equals(obj.Address1)) return false;
            if (!Address2.Equals(obj.Address2)) return false;
            if (!Address3.Equals(obj.Address3)) return false;
            if (!AddressCity.Equals(obj.AddressCity)) return false;
            if (!AddressCountry.Equals(obj.AddressCountry)) return false;
            if (!AddressPostCode.Equals(obj.AddressPostCode)) return false;
            if (!AddressState.Equals(obj.AddressState)) return false;
            if (AppUsers != obj.AppUsers) return false;
            if (MaxAppUsers != obj.MaxAppUsers) return false;
            if (LimitedUsers != obj.LimitedUsers) return false;
            if (MaxLimitedUsers != obj.MaxLimitedUsers) return false;
            if (SanitationUsers != obj.SanitationUsers) return false;
            if (MaxSanitationUsers != obj.MaxSanitationUsers) return false;
            if (WorkRequestUsers != obj.WorkRequestUsers) return false;
            if (MaxWorkRequestUsers != obj.MaxWorkRequestUsers) return false;
            if (PhoneUsers != obj.PhoneUsers) return false;
            if (MaxPhoneUsers != obj.MaxPhoneUsers) return false;
            if (TabletUsers != obj.TabletUsers) return false;
            if (MaxTabletUsers != obj.MaxTabletUsers) return false;
            if (SuperUsers != obj.SuperUsers) return false;
            if (MaxSuperUsers != obj.MaxSuperUsers) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!TimeZone.Equals(obj.TimeZone)) return false;
            if (!BillToAddress1.Equals(obj.BillToAddress1)) return false;
            if (!BillToAddress2.Equals(obj.BillToAddress2)) return false;
            if (!BillToAddress3.Equals(obj.BillToAddress3)) return false;
            if (!BillToAddressCity.Equals(obj.BillToAddressCity)) return false;
            if (!BillToAddressCountry.Equals(obj.BillToAddressCountry)) return false;
            if (!BillToAddressPostCode.Equals(obj.BillToAddressPostCode)) return false;
            if (!BillToAddressState.Equals(obj.BillToAddressState)) return false;
            if (AutoPurch != obj.AutoPurch) return false;
            if (AutoPurch_CreatorId != obj.AutoPurch_CreatorId) return false;
            if (!AutoPurch_Prefix.Equals(obj.AutoPurch_Prefix)) return false;
            if (AutoPM != obj.AutoPM) return false;
            if (AutoPM_CreatorId != obj.AutoPM_CreatorId) return false;
            if (AutoSanit != obj.AutoSanit) return false;
            if (AutoSanit_CreatorId != obj.AutoSanit_CreatorId) return false;
            if (GuestWorkRequest != obj.GuestWorkRequest) return false;
            if (!BIMURN.Equals(obj.BIMURN)) return false;
            if (ProcessSystemTree != obj.ProcessSystemTree) return false;
            if (!BillToName.Equals(obj.BillToName)) return false;
            if (!BillToComment.Equals(obj.BillToComment)) return false;
            if (!ShipToName.Equals(obj.ShipToName)) return false;
            if (!ExSiteCode.Equals(obj.ExSiteCode)) return false;
            if (!ExOrganizationId.Equals(obj.ExOrganizationId)) return false;
            if (UsePartMaster != obj.UsePartMaster) return false;
            if (PartClientLookupId != obj.PartClientLookupId) return false;
            if (UseVendorMaster != obj.UseVendorMaster) return false;
            if (NoPartIdChange != obj.NoPartIdChange) return false;
            if (!Logo.Equals(obj.Logo)) return false;
            if (NonStockAccountId != obj.NonStockAccountId) return false;
            if (ShoppingCartReviewDefault != obj.ShoppingCartReviewDefault) return false;
            if (ShoppingCartIncludeBuyer != obj.ShoppingCartIncludeBuyer) return false;
            if (DefaultBuyer != obj.DefaultBuyer) return false;
            if (!PartMasterReqEmail.Equals(obj.PartMasterReqEmail)) return false;
            if (ExternalSanitation != obj.ExternalSanitation) return false;
            if (MaintOnDemand != obj.MaintOnDemand) return false;
            if (UseEquipmentMaster != obj.UseEquipmentMaster) return false;
            if (ShoppingCart != obj.ShoppingCart) return false;
            if (!MobileWOTimer.Equals(obj.MobileWOTimer)) return false;
            if (!UIVersion.Equals(obj.UIVersion)) return false;
            if (PMLibrary != obj.PMLibrary) return false;
            if (APM != obj.APM) return false;
            if (CMMS != obj.CMMS) return false;
            if (Sanitation != obj.Sanitation) return false;
            if (PlantLocation != obj.PlantLocation) return false;
            if (!AssetGroup1Name.Equals(obj.AssetGroup1Name)) return false;
            if (!AssetGroup2Name.Equals(obj.AssetGroup2Name)) return false;
            if (!AssetGroup3Name.Equals(obj.AssetGroup3Name)) return false;
            if (VendorMaster_AllowLocal != obj.VendorMaster_AllowLocal) return false;
            if (Fleet != obj.Fleet) return false;
            if (UsePunchOut != obj.UsePunchOut) return false;
            if (!AddressISOCountryCode.Equals(obj.AddressISOCountryCode)) return false;
            if (!BillToAddressISOCountryCode.Equals(obj.BillToAddressISOCountryCode)) return false;
            if (UsePlanning != obj.UsePlanning) return false;
            if (Production != obj.Production) return false;
            if (ProdAppUsers != obj.ProdAppUsers) return false;
            if (MaxProdAppUsers != obj.MaxProdAppUsers) return false;
            if (!WOBarcode.Equals(obj.WOBarcode)) return false;
            if (IncludePRReview != obj.IncludePRReview) return false;
            if (OnOrderCheck != obj.OnOrderCheck) return false;
            if (VendorCompliance != obj.VendorCompliance) return false;
            if (SourceAssetAccount != obj.SourceAssetAccount) return false;
            if (IoTDevices != obj.IoTDevices) return false;
            if (MaxIoTDevices != obj.MaxIoTDevices) return false;
            if (SingleStockLineItem != obj.SingleStockLineItem) return false;
            if (InvoiceVarianceCheck != obj.InvoiceVarianceCheck) return false;
            if (InvoiceVariance != obj.InvoiceVariance) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Site objects.
        /// </summary>
        /// <param name="obj1">b_Site object to use in the comparison.</param>
        /// <param name="obj2">b_Site object to use in the comparison.</param>
        public static bool Equals(b_Site obj1, b_Site obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }

}
