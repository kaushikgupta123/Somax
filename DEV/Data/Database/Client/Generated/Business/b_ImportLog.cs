/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
  /// <summary>
  /// Business object that stores a record from the ImportLog table.InsertIntoDatabase
  /// </summary>
  [Serializable()]
  public partial class b_ImportLog : DataBusinessBase
  {
    /// <summary>
    /// Default constructor.
    /// </summary>
    public b_ImportLog()
    {
      ClientId = 0;
      ImportLogId = 0;
      ProcessName = String.Empty;
      Transactions = 0;
      RunDate = new System.Nullable<System.DateTime>();
      RunBy = String.Empty;
      NewTransactions = 0;
      SuccessfulTransactions = 0;
      FailedTransactions = 0;
      FileName = String.Empty;
      Message = String.Empty;
      CompleteDate = new System.Nullable<System.DateTime>();
    }

    /// <summary>
    /// ImportLogId property
    /// </summary>
    public long ImportLogId { get; set; }

    /// <summary>
    /// ProcessName property
    /// </summary>
    public string ProcessName { get; set; }

    /// <summary>
    /// Transactions property
    /// </summary>
    public int Transactions { get; set; }

    /// <summary>
    /// RunDate property
    /// </summary>
    public DateTime? RunDate { get; set; }

    /// <summary>
    /// RunBy property
    /// </summary>
    public string RunBy { get; set; }

    /// <summary>
    /// NewTransactions property
    /// </summary>
    public int NewTransactions { get; set; }

    /// <summary>
    /// SuccessfulTransactions property
    /// </summary>
    public int SuccessfulTransactions { get; set; }

    /// <summary>
    /// FailedTransactions property
    /// </summary>
    public int FailedTransactions { get; set; }

    /// <summary>
    /// FileName property
    /// </summary>
    public string FileName { get; set; }

    /// <summary>
    /// Message property
    /// </summary>
    public string Message { get; set; }

    /// <summary>
    /// CompleteDate property
    /// </summary>
    public DateTime? CompleteDate { get; set; }

    /// <summary>
    /// Process the current row in the input SqlDataReader into a b_ImportLog object.
    /// This routine should be applied to the usp_ImportLog_RetrieveByPK stored procedure.
    /// This routine should be applied to the usp_ImportLog_RetrieveAll. stored procedure.
    /// </summary>
    /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
    /// <returns>object cast of the b_ImportLog object</returns>
    public static object ProcessRow(SqlDataReader reader)
    {
      // Create instance of object
      b_ImportLog obj = new b_ImportLog();

      // Load the object from the database
      obj.LoadFromDatabase(reader);

      // Return result
      return (object)obj;
    }

    /// <summary>
    /// Load the current row in the input SqlDataReader into a b_ImportLog object.
    /// This routine should be applied to the usp_ImportLog_RetrieveByPK stored procedure.
    /// This routine should be applied to the usp_ImportLog_RetrieveAll. stored procedure.
    /// </summary>
    /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
    public int LoadFromDatabase(SqlDataReader reader)
    {
      int i = 0;
      try
      {

        // ClientId column, bigint, not null
        ClientId = reader.GetInt64(i++);

        // ImportLogId column, bigint, not null
        ImportLogId = reader.GetInt64(i++);

        // ProcessName column, nvarchar(63), not null
        ProcessName = reader.GetString(i++);

        // Transactions column, int, not null
        Transactions = reader.GetInt32(i++);

        // RunDate column, datetime2, not null
        if (false == reader.IsDBNull(i))
        {
          RunDate = reader.GetDateTime(i);
        }
        else
        {
          RunDate = DateTime.MinValue;
        }
        i++;
        // RunBy column, nvarchar(63), not null
        RunBy = reader.GetString(i++);

        // NewTransactions column, int, not null
        NewTransactions = reader.GetInt32(i++);

        // SuccessfulTransactions column, int, not null
        SuccessfulTransactions = reader.GetInt32(i++);

        // FailedTransactions column, int, not null
        FailedTransactions = reader.GetInt32(i++);

        // FileName column, nvarchar(255), not null
        FileName = reader.GetString(i++);

        // Message column, nvarchar(255), not null
        Message = reader.GetString(i++);

        // CompleteDate column, datetime2, not null
        if (false == reader.IsDBNull(i))
        {
          CompleteDate = reader.GetDateTime(i);
        }
        else
        {
          CompleteDate = DateTime.MinValue;
        }
        i++;
      }
      catch (Exception ex)
      {
        // Diagnostics
        StringBuilder missing = new StringBuilder();


        try { reader["ClientId"].ToString(); }
        catch { missing.Append("ClientId "); }

        try { reader["ImportLogId"].ToString(); }
        catch { missing.Append("ImportLogId "); }

        try { reader["ProcessName"].ToString(); }
        catch { missing.Append("ProcessName "); }

        try { reader["Transactions"].ToString(); }
        catch { missing.Append("Transactions "); }

        try { reader["RunDate"].ToString(); }
        catch { missing.Append("RunDate "); }

        try { reader["RunBy"].ToString(); }
        catch { missing.Append("RunBy "); }

        try { reader["NewTransactions"].ToString(); }
        catch { missing.Append("NewTransactions "); }

        try { reader["SuccessfulTransactions"].ToString(); }
        catch { missing.Append("SuccessfulTransactions "); }

        try { reader["FailedTransactions"].ToString(); }
        catch { missing.Append("FailedTransactions "); }

        try { reader["FileName"].ToString(); }
        catch { missing.Append("FileName "); }

        try { reader["Message"].ToString(); }
        catch { missing.Append("Message "); }

        try { reader["CompleteDate"].ToString(); }
        catch { missing.Append("CompleteDate "); }


        StringBuilder msg = new StringBuilder();
        msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
        if (missing.Length > 0)
        {
          msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
        }

        throw new Exception(msg.ToString(), ex);
      }
      return i;
    }

    /// <summary>
    /// Insert this object into the database as a ImportLog table record.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void InsertIntoDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
    string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_ImportLog_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Update the ImportLog table record represented by this object in the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void UpdateInDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
        string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_ImportLog_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Delete the ImportLog table record represented by this object from the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    public override void DeleteFromDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName
    )
    {
      SqlCommand command = null;

      try
      {
        command = connection.CreateCommand();
        if (null != transaction)
        {
          command.Transaction = transaction;
        }
        Database.StoredProcedure.usp_ImportLog_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
      }
    }

    /// <summary>
    /// Retrieve all ImportLog table records represented by this object in the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    /// <param name="data">b_ImportLog[] that contains the results</param>
    public void RetrieveAllFromDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName,
        ref b_ImportLog[] data
    )
    {
      Database.SqlClient.ProcessRow<b_ImportLog> processRow = null;
      ArrayList results = null;
      SqlCommand command = null;
      string message = String.Empty;

      // Initialize the results
      data = new b_ImportLog[0];

      try
      {
        // Create the command to use in calling the stored procedures
        command = new SqlCommand();
        command.Connection = connection;
        command.Transaction = transaction;

        // Call the stored procedure to retrieve the data
        processRow = new Database.SqlClient.ProcessRow<b_ImportLog>(reader => { b_ImportLog obj = new b_ImportLog(); obj.LoadFromDatabase(reader); return obj; });
        results = Database.StoredProcedure.usp_ImportLog_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

        // Extract the results
        if (null != results)
        {
          data = (b_ImportLog[])results.ToArray(typeof(b_ImportLog));
        }
        else
        {
          data = new b_ImportLog[0];
        }

        // Clear the results collection
        if (null != results)
        {
          results.Clear();
          results = null;
        }
      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
        processRow = null;
        results = null;
        message = String.Empty;
        callerUserInfoId = 0;
        callerUserName = String.Empty;
      }
    }

    /// <summary>
    /// Retrieve ImportLog table records with specified primary key from the database.
    /// </summary>
    /// <param name="connection">SqlConnection containing the database connection</param>
    /// <param name="transaction">SqlTransaction containing the database transaction</param>
    /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
    /// <param name="callerUserName">string that identifies the user calling the database</param>
    /// <param name="key">System.Guid that contains the key to use in the lookup</param>
    /// <param name="data">b_ImportLog[] that contains the results</param>
    public override void RetrieveByPKFromDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
  string callerUserName
    )
    {
      Database.SqlClient.ProcessRow<b_ImportLog> processRow = null;
      SqlCommand command = null;
      string message = String.Empty;

      try
      {
        // Create the command to use in calling the stored procedures
        command = new SqlCommand();
        command.Connection = connection;
        command.Transaction = transaction;

        // Call the stored procedure to retrieve the data
        processRow = new Database.SqlClient.ProcessRow<b_ImportLog>(reader => { this.LoadFromDatabase(reader); return this; });
        Database.StoredProcedure.usp_ImportLog_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

      }
      finally
      {
        if (null != command)
        {
          command.Dispose();
          command = null;
        }
        processRow = null;
        message = String.Empty;
        callerUserInfoId = 0;
        callerUserName = String.Empty;
      }
    }

    /// <summary>
    /// Test equality of two b_ImportLog objects.
    /// </summary>
    /// <param name="obj">b_ImportLog object to compare against the current object.</param>
    public bool Equals(b_ImportLog obj)
    {
      if (ClientId != obj.ClientId) return false;
      if (ImportLogId != obj.ImportLogId) return false;
      if (!ProcessName.Equals(obj.ProcessName)) return false;
      if (Transactions != obj.Transactions) return false;
      if (!RunDate.Equals(obj.RunDate)) return false;
      if (!RunBy.Equals(obj.RunBy)) return false;
      if (NewTransactions != obj.NewTransactions) return false;
      if (SuccessfulTransactions != obj.SuccessfulTransactions) return false;
      if (FailedTransactions != obj.FailedTransactions) return false;
      if (!FileName.Equals(obj.FileName)) return false;
      if (!Message.Equals(obj.Message)) return false;
      if (!CompleteDate.Equals(obj.CompleteDate)) return false;
      return true;
    }

    /// <summary>
    /// Test equality of two b_ImportLog objects.
    /// </summary>
    /// <param name="obj1">b_ImportLog object to use in the comparison.</param>
    /// <param name="obj2">b_ImportLog object to use in the comparison.</param>
    public static bool Equals(b_ImportLog obj1, b_ImportLog obj2)
    {
      if ((null == obj1) && (null == obj2)) return true;
      if ((null == obj1) && (null != obj2)) return false;
      if ((null != obj1) && (null == obj2)) return false;
      return obj1.Equals(obj2);
    }
  }
}
