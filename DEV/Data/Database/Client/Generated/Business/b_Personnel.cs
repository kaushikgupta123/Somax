/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Personnel table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Personnel : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Personnel()
        {
            ClientId = 0;
            PersonnelId = 0;
            UserInfoId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            Address1 = String.Empty;
            Address2 = String.Empty;
            Address3 = String.Empty;
            AddressCity = String.Empty;
            AddressCountry = String.Empty;
            AddressPostCode = String.Empty;
            AddressState = String.Empty;
            ApprovalLimitPO = 0;
            ApprovalLimitWO = 0;
            BasePay = 0;
            CraftId = 0;
            Crew = String.Empty;
            CurrentLevel = String.Empty;
            DateofBirth = new System.Nullable<System.DateTime>();
            Default_StoreroomId = 0;
            DistancefromWork = 0;
            Email = String.Empty;
            Floater = false;
            Gender = String.Empty;
            InactiveFlag = false;
            InitialLevel = String.Empty;
            InitialPay = 0;
            LastSalaryReview = new System.Nullable<System.DateTime>();
            MaritalStatus = String.Empty;
            NameFirst = String.Empty;
            NameLast = String.Empty;
            NameMiddle = String.Empty;
            Phone1 = String.Empty;
            Phone2 = String.Empty;
            Planner = false;
            Scheduler = false;
            ScheduleEmployee = false;
            Section = String.Empty;
            Shift = String.Empty;
            SocialSecurityNumber = String.Empty;
            StartDate = new System.Nullable<System.DateTime>();
            Status = String.Empty;
            Supervisor_PersonnelId = 0;
            TerminationDate = new System.Nullable<System.DateTime>();
            TerminationReason = String.Empty;
            Buyer = false;
            ExOracleUserId = String.Empty;
            ScheduleGroup = String.Empty;
            AssetGroup1 = String.Empty;
            AssetGroup2 = String.Empty;
            AssetGroup3 = String.Empty;
            SOMAXAdmin = false;
            AssignedAssetGroup1 = 0;
            AssignedAssetGroup2 = 0;
            AssignedAssetGroup3 = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// PersonnelId property
        /// </summary>
        public long PersonnelId { get; set; }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        public long UserInfoId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// Address1 property
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Address2 property
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Address3 property
        /// </summary>
        public string Address3 { get; set; }

        /// <summary>
        /// AddressCity property
        /// </summary>
        public string AddressCity { get; set; }

        /// <summary>
        /// AddressCountry property
        /// </summary>
        public string AddressCountry { get; set; }

        /// <summary>
        /// AddressPostCode property
        /// </summary>
        public string AddressPostCode { get; set; }

        /// <summary>
        /// AddressState property
        /// </summary>
        public string AddressState { get; set; }

        /// <summary>
        /// ApprovalLimitPO property
        /// </summary>
        public decimal ApprovalLimitPO { get; set; }

        /// <summary>
        /// ApprovalLimitWO property
        /// </summary>
        public decimal ApprovalLimitWO { get; set; }

        /// <summary>
        /// BasePay property
        /// </summary>
        public decimal BasePay { get; set; }

        /// <summary>
        /// CraftId property
        /// </summary>
        public long CraftId { get; set; }

        /// <summary>
        /// Crew property
        /// </summary>
        public string Crew { get; set; }

        /// <summary>
        /// CurrentLevel property
        /// </summary>
        public string CurrentLevel { get; set; }

        /// <summary>
        /// DateofBirth property
        /// </summary>
        public DateTime? DateofBirth { get; set; }

        /// <summary>
        /// Default_StoreroomId property
        /// </summary>
        public long Default_StoreroomId { get; set; }

        /// <summary>
        /// DistancefromWork property
        /// </summary>
        public decimal DistancefromWork { get; set; }

        /// <summary>
        /// Email property
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Floater property
        /// </summary>
        public bool Floater { get; set; }

        /// <summary>
        /// Gender property
        /// </summary>
        public string Gender { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// InitialLevel property
        /// </summary>
        public string InitialLevel { get; set; }

        /// <summary>
        /// InitialPay property
        /// </summary>
        public decimal InitialPay { get; set; }

        /// <summary>
        /// LastSalaryReview property
        /// </summary>
        public DateTime? LastSalaryReview { get; set; }

        /// <summary>
        /// MaritalStatus property
        /// </summary>
        public string MaritalStatus { get; set; }

        /// <summary>
        /// NameFirst property
        /// </summary>
        public string NameFirst { get; set; }

        /// <summary>
        /// NameLast property
        /// </summary>
        public string NameLast { get; set; }

        /// <summary>
        /// NameMiddle property
        /// </summary>
        public string NameMiddle { get; set; }

        /// <summary>
        /// Phone1 property
        /// </summary>
        public string Phone1 { get; set; }

        /// <summary>
        /// Phone2 property
        /// </summary>
        public string Phone2 { get; set; }

        /// <summary>
        /// Planner property
        /// </summary>
        public bool Planner { get; set; }

        /// <summary>
        /// Scheduler property
        /// </summary>
        public bool Scheduler { get; set; }

        /// <summary>
        /// ScheduleEmployee property
        /// </summary>
        public bool ScheduleEmployee { get; set; }

        /// <summary>
        /// Section property
        /// </summary>
        public string Section { get; set; }

        /// <summary>
        /// Shift property
        /// </summary>
        public string Shift { get; set; }

        /// <summary>
        /// SocialSecurityNumber property
        /// </summary>
        public string SocialSecurityNumber { get; set; }

        /// <summary>
        /// StartDate property
        /// </summary>
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Supervisor_PersonnelId property
        /// </summary>
        public long Supervisor_PersonnelId { get; set; }

        /// <summary>
        /// TerminationDate property
        /// </summary>
        public DateTime? TerminationDate { get; set; }

        /// <summary>
        /// TerminationReason property
        /// </summary>
        public string TerminationReason { get; set; }

        /// <summary>
        /// Buyer property
        /// </summary>
        public bool Buyer { get; set; }

        /// <summary>
        /// ExOracleUserId property
        /// </summary>
        public string ExOracleUserId { get; set; }

        /// <summary>
        /// ScheduleGroup property
        /// </summary>
        public string ScheduleGroup { get; set; }

        /// <summary>
        /// AssetGroup1 property
        /// </summary>
        public string AssetGroup1 { get; set; }

        /// <summary>
        /// AssetGroup2 property
        /// </summary>
        public string AssetGroup2 { get; set; }

        /// <summary>
        /// AssetGroup3 property
        /// </summary>
        public string AssetGroup3 { get; set; }

        /// <summary>
        /// SOMAXAdmin property
        /// </summary>
        public bool SOMAXAdmin { get; set; }

        /// <summary>
        /// AssignedAssetGroup1 property
        /// </summary>
        public long AssignedAssetGroup1 { get; set; }

        /// <summary>
        /// AssignedAssetGroup2 property
        /// </summary>
        public long AssignedAssetGroup2 { get; set; }

        /// <summary>
        /// AssignedAssetGroup3 property
        /// </summary>
        public long AssignedAssetGroup3 { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Personnel object.
        /// This routine should be applied to the usp_Personnel_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Personnel_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Personnel object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_Personnel obj = new b_Personnel();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Personnel object.
        /// This routine should be applied to the usp_Personnel_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Personnel_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PersonnelId column, bigint, not null
                PersonnelId = reader.GetInt64(i++);

                // UserInfoId column, bigint, not null
                UserInfoId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(63), not null
                ClientLookupId = reader.GetString(i++);

                // Address1 column, nvarchar(63), not null
                Address1 = reader.GetString(i++);

                // Address2 column, nvarchar(63), not null
                Address2 = reader.GetString(i++);

                // Address3 column, nvarchar(63), not null
                Address3 = reader.GetString(i++);

                // AddressCity column, nvarchar(63), not null
                AddressCity = reader.GetString(i++);

                // AddressCountry column, nvarchar(63), not null
                AddressCountry = reader.GetString(i++);

                // AddressPostCode column, nvarchar(31), not null
                AddressPostCode = reader.GetString(i++);

                // AddressState column, nvarchar(63), not null
                AddressState = reader.GetString(i++);

                // ApprovalLimitPO column, decimal(15,0), not null
                ApprovalLimitPO = reader.GetDecimal(i++);

                // ApprovalLimitWO column, decimal(15,0), not null
                ApprovalLimitWO = reader.GetDecimal(i++);

                // BasePay column, decimal(10,2), not null
                BasePay = reader.GetDecimal(i++);

                // CraftId column, bigint, not null
                CraftId = reader.GetInt64(i++);

                // Crew column, nvarchar(15), not null
                Crew = reader.GetString(i++);

                // CurrentLevel column, nvarchar(15), not null
                CurrentLevel = reader.GetString(i++);

                // DateofBirth column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateofBirth = reader.GetDateTime(i);
                }
                else
                {
                    DateofBirth = DateTime.MinValue;
                }
                i++;
                // Default_StoreroomId column, bigint, not null
                Default_StoreroomId = reader.GetInt64(i++);

                // DistancefromWork column, decimal(6,2), not null
                DistancefromWork = reader.GetDecimal(i++);

                // Email column, nvarchar(255), not null
                Email = reader.GetString(i++);

                // Floater column, bit, not null
                Floater = reader.GetBoolean(i++);

                // Gender column, nvarchar(15), not null
                Gender = reader.GetString(i++);

                // InactiveFlag column, bit, not null
                InactiveFlag = reader.GetBoolean(i++);

                // InitialLevel column, nvarchar(15), not null
                InitialLevel = reader.GetString(i++);

                // InitialPay column, decimal(10,2), not null
                InitialPay = reader.GetDecimal(i++);

                // LastSalaryReview column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastSalaryReview = reader.GetDateTime(i);
                }
                else
                {
                    LastSalaryReview = DateTime.MinValue;
                }
                i++;
                // MaritalStatus column, nvarchar(15), not null
                MaritalStatus = reader.GetString(i++);

                // NameFirst column, nvarchar(31), not null
                NameFirst = reader.GetString(i++);

                // NameLast column, nvarchar(31), not null
                NameLast = reader.GetString(i++);

                // NameMiddle column, nvarchar(31), not null
                NameMiddle = reader.GetString(i++);

                // Phone1 column, nvarchar(31), not null
                Phone1 = reader.GetString(i++);

                // Phone2 column, nvarchar(31), not null
                Phone2 = reader.GetString(i++);

                // Planner column, bit, not null
                Planner = reader.GetBoolean(i++);

                // Scheduler column, bit, not null
                Scheduler = reader.GetBoolean(i++);

                // ScheduleEmployee column, bit, not null
                ScheduleEmployee = reader.GetBoolean(i++);

                // Section column, nvarchar(15), not null
                Section = reader.GetString(i++);

                // Shift column, nvarchar(15), not null
                Shift = reader.GetString(i++);

                // SocialSecurityNumber column, nvarchar(15), not null
                SocialSecurityNumber = reader.GetString(i++);

                // StartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    StartDate = reader.GetDateTime(i);
                }
                else
                {
                    StartDate = DateTime.MinValue;
                }
                i++;
                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // Supervisor_PersonnelId column, bigint, not null
                Supervisor_PersonnelId = reader.GetInt64(i++);

                // TerminationDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    TerminationDate = reader.GetDateTime(i);
                }
                else
                {
                    TerminationDate = DateTime.MinValue;
                }
                i++;
                // TerminationReason column, nvarchar(15), not null
                TerminationReason = reader.GetString(i++);

                // Buyer column, bit, not null
                Buyer = reader.GetBoolean(i++);

                // ExOracleUserId column, nvarchar(63), not null
                ExOracleUserId = reader.GetString(i++);

                // ScheduleGroup column, nvarchar(15), not null
                ScheduleGroup = reader.GetString(i++);

                // AssetGroup1 column, nvarchar(MAX), not null
                AssetGroup1 = reader.GetString(i++);

                // AssetGroup2 column, nvarchar(MAX), not null
                AssetGroup2 = reader.GetString(i++);

                // AssetGroup3 column, nvarchar(MAX), not null
                AssetGroup3 = reader.GetString(i++);

                // SOMAXAdmin column, bit, not null
                SOMAXAdmin = reader.GetBoolean(i++);

                // AssignedAssetGroup1 column, bigint, not null
                AssignedAssetGroup1 = reader.GetInt64(i++);

                // AssignedAssetGroup2 column, bigint, not null
                AssignedAssetGroup2 = reader.GetInt64(i++);

                // AssignedAssetGroup3 column, bigint, not null
                AssignedAssetGroup3 = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PersonnelId"].ToString(); }
                catch { missing.Append("PersonnelId "); }

                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["Address1"].ToString(); }
                catch { missing.Append("Address1 "); }

                try { reader["Address2"].ToString(); }
                catch { missing.Append("Address2 "); }

                try { reader["Address3"].ToString(); }
                catch { missing.Append("Address3 "); }

                try { reader["AddressCity"].ToString(); }
                catch { missing.Append("AddressCity "); }

                try { reader["AddressCountry"].ToString(); }
                catch { missing.Append("AddressCountry "); }

                try { reader["AddressPostCode"].ToString(); }
                catch { missing.Append("AddressPostCode "); }

                try { reader["AddressState"].ToString(); }
                catch { missing.Append("AddressState "); }

                try { reader["ApprovalLimitPO"].ToString(); }
                catch { missing.Append("ApprovalLimitPO "); }

                try { reader["ApprovalLimitWO"].ToString(); }
                catch { missing.Append("ApprovalLimitWO "); }

                try { reader["BasePay"].ToString(); }
                catch { missing.Append("BasePay "); }

                try { reader["CraftId"].ToString(); }
                catch { missing.Append("CraftId "); }

                try { reader["Crew"].ToString(); }
                catch { missing.Append("Crew "); }

                try { reader["CurrentLevel"].ToString(); }
                catch { missing.Append("CurrentLevel "); }

                try { reader["DateofBirth"].ToString(); }
                catch { missing.Append("DateofBirth "); }

                try { reader["Default_StoreroomId"].ToString(); }
                catch { missing.Append("Default_StoreroomId "); }

                try { reader["DistancefromWork"].ToString(); }
                catch { missing.Append("DistancefromWork "); }

                try { reader["Email"].ToString(); }
                catch { missing.Append("Email "); }

                try { reader["Floater"].ToString(); }
                catch { missing.Append("Floater "); }

                try { reader["Gender"].ToString(); }
                catch { missing.Append("Gender "); }

                try { reader["InactiveFlag"].ToString(); }
                catch { missing.Append("InactiveFlag "); }

                try { reader["InitialLevel"].ToString(); }
                catch { missing.Append("InitialLevel "); }

                try { reader["InitialPay"].ToString(); }
                catch { missing.Append("InitialPay "); }

                try { reader["LastSalaryReview"].ToString(); }
                catch { missing.Append("LastSalaryReview "); }

                try { reader["MaritalStatus"].ToString(); }
                catch { missing.Append("MaritalStatus "); }

                try { reader["NameFirst"].ToString(); }
                catch { missing.Append("NameFirst "); }

                try { reader["NameLast"].ToString(); }
                catch { missing.Append("NameLast "); }

                try { reader["NameMiddle"].ToString(); }
                catch { missing.Append("NameMiddle "); }

                try { reader["Phone1"].ToString(); }
                catch { missing.Append("Phone1 "); }

                try { reader["Phone2"].ToString(); }
                catch { missing.Append("Phone2 "); }

                try { reader["Planner"].ToString(); }
                catch { missing.Append("Planner "); }

                try { reader["Scheduler"].ToString(); }
                catch { missing.Append("Scheduler "); }

                try { reader["ScheduleEmployee"].ToString(); }
                catch { missing.Append("ScheduleEmployee "); }

                try { reader["Section"].ToString(); }
                catch { missing.Append("Section "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["SocialSecurityNumber"].ToString(); }
                catch { missing.Append("SocialSecurityNumber "); }

                try { reader["StartDate"].ToString(); }
                catch { missing.Append("StartDate "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["Supervisor_PersonnelId"].ToString(); }
                catch { missing.Append("Supervisor_PersonnelId "); }

                try { reader["TerminationDate"].ToString(); }
                catch { missing.Append("TerminationDate "); }

                try { reader["TerminationReason"].ToString(); }
                catch { missing.Append("TerminationReason "); }

                try { reader["Buyer"].ToString(); }
                catch { missing.Append("Buyer "); }

                try { reader["ExOracleUserId"].ToString(); }
                catch { missing.Append("ExOracleUserId "); }

                try { reader["ScheduleGroup"].ToString(); }
                catch { missing.Append("ScheduleGroup "); }

                try { reader["AssetGroup1"].ToString(); }
                catch { missing.Append("AssetGroup1 "); }

                try { reader["AssetGroup2"].ToString(); }
                catch { missing.Append("AssetGroup2 "); }

                try { reader["AssetGroup3"].ToString(); }
                catch { missing.Append("AssetGroup3 "); }

                try { reader["SOMAXAdmin"].ToString(); }
                catch { missing.Append("SOMAXAdmin "); }

                try { reader["AssignedAssetGroup1"].ToString(); }
                catch { missing.Append("AssignedAssetGroup1 "); }

                try { reader["AssignedAssetGroup2"].ToString(); }
                catch { missing.Append("AssignedAssetGroup2 "); }

                try { reader["AssignedAssetGroup3"].ToString(); }
                catch { missing.Append("AssignedAssetGroup3 "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a Personnel table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Personnel_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Personnel table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Personnel_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Personnel table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Personnel_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Personnel table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Personnel[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Personnel[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Personnel> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Personnel[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Personnel>(reader => { b_Personnel obj = new b_Personnel(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Personnel_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Personnel[])results.ToArray(typeof(b_Personnel));
                }
                else
                {
                    data = new b_Personnel[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Personnel table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Personnel[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Personnel> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Personnel>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Personnel_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Personnel objects.
        /// </summary>
        /// <param name="obj">b_Personnel object to compare against the current object.</param>
        public bool Equals(b_Personnel obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PersonnelId != obj.PersonnelId) return false;
            if (UserInfoId != obj.UserInfoId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!Address1.Equals(obj.Address1)) return false;
            if (!Address2.Equals(obj.Address2)) return false;
            if (!Address3.Equals(obj.Address3)) return false;
            if (!AddressCity.Equals(obj.AddressCity)) return false;
            if (!AddressCountry.Equals(obj.AddressCountry)) return false;
            if (!AddressPostCode.Equals(obj.AddressPostCode)) return false;
            if (!AddressState.Equals(obj.AddressState)) return false;
            if (ApprovalLimitPO != obj.ApprovalLimitPO) return false;
            if (ApprovalLimitWO != obj.ApprovalLimitWO) return false;
            if (BasePay != obj.BasePay) return false;
            if (CraftId != obj.CraftId) return false;
            if (!Crew.Equals(obj.Crew)) return false;
            if (!CurrentLevel.Equals(obj.CurrentLevel)) return false;
            if (!DateofBirth.Equals(obj.DateofBirth)) return false;
            if (Default_StoreroomId != obj.Default_StoreroomId) return false;
            if (DistancefromWork != obj.DistancefromWork) return false;
            if (!Email.Equals(obj.Email)) return false;
            if (Floater != obj.Floater) return false;
            if (!Gender.Equals(obj.Gender)) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (!InitialLevel.Equals(obj.InitialLevel)) return false;
            if (InitialPay != obj.InitialPay) return false;
            if (!LastSalaryReview.Equals(obj.LastSalaryReview)) return false;
            if (!MaritalStatus.Equals(obj.MaritalStatus)) return false;
            if (!NameFirst.Equals(obj.NameFirst)) return false;
            if (!NameLast.Equals(obj.NameLast)) return false;
            if (!NameMiddle.Equals(obj.NameMiddle)) return false;
            if (!Phone1.Equals(obj.Phone1)) return false;
            if (!Phone2.Equals(obj.Phone2)) return false;
            if (Planner != obj.Planner) return false;
            if (Scheduler != obj.Scheduler) return false;
            if (ScheduleEmployee != obj.ScheduleEmployee) return false;
            if (!Section.Equals(obj.Section)) return false;
            if (!Shift.Equals(obj.Shift)) return false;
            if (!SocialSecurityNumber.Equals(obj.SocialSecurityNumber)) return false;
            if (!StartDate.Equals(obj.StartDate)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (Supervisor_PersonnelId != obj.Supervisor_PersonnelId) return false;
            if (!TerminationDate.Equals(obj.TerminationDate)) return false;
            if (!TerminationReason.Equals(obj.TerminationReason)) return false;
            if (Buyer != obj.Buyer) return false;
            if (!ExOracleUserId.Equals(obj.ExOracleUserId)) return false;
            if (!ScheduleGroup.Equals(obj.ScheduleGroup)) return false;
            if (!AssetGroup1.Equals(obj.AssetGroup1)) return false;
            if (!AssetGroup2.Equals(obj.AssetGroup2)) return false;
            if (!AssetGroup3.Equals(obj.AssetGroup3)) return false;
            if (SOMAXAdmin != obj.SOMAXAdmin) return false;
            if (AssignedAssetGroup1 != obj.AssignedAssetGroup1) return false;
            if (AssignedAssetGroup2 != obj.AssignedAssetGroup2) return false;
            if (AssignedAssetGroup3 != obj.AssignedAssetGroup3) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Personnel objects.
        /// </summary>
        /// <param name="obj1">b_Personnel object to use in the comparison.</param>
        /// <param name="obj2">b_Personnel object to use in the comparison.</param>
        public static bool Equals(b_Personnel obj1, b_Personnel obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
