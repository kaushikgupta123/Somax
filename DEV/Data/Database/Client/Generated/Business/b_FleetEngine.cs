/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the FleetEngine table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_FleetEngine : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_FleetEngine ()
        {
            FleetEngineId = 0;
            ClientId = 0;
            EquipmentId = 0;
            EngineBrand = String.Empty;
            Aspiration = String.Empty;
            Bore = 0;
            Cam = String.Empty;
            Compression = 0;
            Cylinders = 0;
            Displacement = 0;
            FuelInduction = String.Empty;
            FuelQuality = 0;
            MaxHP = 0;
            MaxTorque = 0;
            RedlineRPM = 0;
            Stroke = 0;
            Valves = 0;
            TransmissionBrand = String.Empty;
            TransmissionType = String.Empty;
            Gears = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// FleetEngineId property
        /// </summary>
        public long FleetEngineId { get; set; }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        public long EquipmentId { get; set; }

        /// <summary>
        /// EngineBrand property
        /// </summary>
        public string EngineBrand { get; set; }

        /// <summary>
        /// Aspiration property
        /// </summary>
        public string Aspiration { get; set; }

        /// <summary>
        /// Bore property
        /// </summary>
        public decimal Bore { get; set; }

        /// <summary>
        /// Cam property
        /// </summary>
        public string Cam { get; set; }

        /// <summary>
        /// Compression property
        /// </summary>
        public decimal Compression { get; set; }

        /// <summary>
        /// Cylinders property
        /// </summary>
        public decimal Cylinders { get; set; }

        /// <summary>
        /// Displacement property
        /// </summary>
        public decimal Displacement { get; set; }

        /// <summary>
        /// FuelInduction property
        /// </summary>
        public string FuelInduction { get; set; }

        /// <summary>
        /// FuelQuality property
        /// </summary>
        public decimal FuelQuality { get; set; }

        /// <summary>
        /// MaxHP property
        /// </summary>
        public decimal MaxHP { get; set; }

        /// <summary>
        /// MaxTorque property
        /// </summary>
        public decimal MaxTorque { get; set; }

        /// <summary>
        /// RedlineRPM property
        /// </summary>
        public decimal RedlineRPM { get; set; }

        /// <summary>
        /// Stroke property
        /// </summary>
        public decimal Stroke { get; set; }

        /// <summary>
        /// Valves property
        /// </summary>
        public decimal Valves { get; set; }

        /// <summary>
        /// TransmissionBrand property
        /// </summary>
        public string TransmissionBrand { get; set; }

        /// <summary>
        /// TransmissionType property
        /// </summary>
        public string TransmissionType { get; set; }

        /// <summary>
        /// Gears property
        /// </summary>
        public decimal Gears { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_FleetEngine object.
        /// This routine should be applied to the usp_FleetEngine_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FleetEngine_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_FleetEngine object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_FleetEngine obj = new b_FleetEngine();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_FleetEngine object.
        /// This routine should be applied to the usp_FleetEngine_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FleetEngine_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // FleetEngineId column, bigint, not null
                        FleetEngineId = reader.GetInt64(i++);

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // EquipmentId column, bigint, not null
                        EquipmentId = reader.GetInt64(i++);

                        // EngineBrand column, nvarchar(30), not null
                        EngineBrand = reader.GetString(i++);

                        // Aspiration column, nvarchar(30), not null
                        Aspiration = reader.GetString(i++);

                        // Bore column, decimal(6,2), not null
                        Bore = reader.GetDecimal(i++);

                        // Cam column, nvarchar(30), not null
                        Cam = reader.GetString(i++);

                        // Compression column, decimal(6,2), not null
                        Compression = reader.GetDecimal(i++);

                        // Cylinders column, decimal(6,2), not null
                        Cylinders = reader.GetDecimal(i++);

                        // Displacement column, decimal(6,2), not null
                        Displacement = reader.GetDecimal(i++);

                        // FuelInduction column, nvarchar(30), not null
                        FuelInduction = reader.GetString(i++);

                        // FuelQuality column, decimal(6,2), not null
                        FuelQuality = reader.GetDecimal(i++);

                        // MaxHP column, decimal(6,2), not null
                        MaxHP = reader.GetDecimal(i++);

                        // MaxTorque column, decimal(6,2), not null
                        MaxTorque = reader.GetDecimal(i++);

                        // RedlineRPM column, decimal(6,2), not null
                        RedlineRPM = reader.GetDecimal(i++);

                        // Stroke column, decimal(6,2), not null
                        Stroke = reader.GetDecimal(i++);

                        // Valves column, decimal(6,2), not null
                        Valves = reader.GetDecimal(i++);

                        // TransmissionBrand column, nvarchar(30), not null
                        TransmissionBrand = reader.GetString(i++);

                        // TransmissionType column, nvarchar(30), not null
                        TransmissionType = reader.GetString(i++);

                        // Gears column, decimal(6,2), not null
                        Gears = reader.GetDecimal(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["FleetEngineId"].ToString(); }
            catch { missing.Append("FleetEngineId "); }
            
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["EquipmentId"].ToString(); }
            catch { missing.Append("EquipmentId "); }
            
            try { reader["EngineBrand"].ToString(); }
            catch { missing.Append("EngineBrand "); }
            
            try { reader["Aspiration"].ToString(); }
            catch { missing.Append("Aspiration "); }
            
            try { reader["Bore"].ToString(); }
            catch { missing.Append("Bore "); }
            
            try { reader["Cam"].ToString(); }
            catch { missing.Append("Cam "); }
            
            try { reader["Compression"].ToString(); }
            catch { missing.Append("Compression "); }
            
            try { reader["Cylinders"].ToString(); }
            catch { missing.Append("Cylinders "); }
            
            try { reader["Displacement"].ToString(); }
            catch { missing.Append("Displacement "); }
            
            try { reader["FuelInduction"].ToString(); }
            catch { missing.Append("FuelInduction "); }
            
            try { reader["FuelQuality"].ToString(); }
            catch { missing.Append("FuelQuality "); }
            
            try { reader["MaxHP"].ToString(); }
            catch { missing.Append("MaxHP "); }
            
            try { reader["MaxTorque"].ToString(); }
            catch { missing.Append("MaxTorque "); }
            
            try { reader["RedlineRPM"].ToString(); }
            catch { missing.Append("RedlineRPM "); }
            
            try { reader["Stroke"].ToString(); }
            catch { missing.Append("Stroke "); }
            
            try { reader["Valves"].ToString(); }
            catch { missing.Append("Valves "); }
            
            try { reader["TransmissionBrand"].ToString(); }
            catch { missing.Append("TransmissionBrand "); }
            
            try { reader["TransmissionType"].ToString(); }
            catch { missing.Append("TransmissionType "); }
            
            try { reader["Gears"].ToString(); }
            catch { missing.Append("Gears "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a FleetEngine table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetEngine_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the FleetEngine table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetEngine_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the FleetEngine table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_FleetEngine_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all FleetEngine table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_FleetEngine[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_FleetEngine[] data
        )
        {
            Database.SqlClient.ProcessRow<b_FleetEngine> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_FleetEngine[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FleetEngine>(reader => { b_FleetEngine obj = new b_FleetEngine(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_FleetEngine_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_FleetEngine[])results.ToArray(typeof(b_FleetEngine));
                }
                else
                {
                    data = new b_FleetEngine[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve FleetEngine table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_FleetEngine[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_FleetEngine> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FleetEngine>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_FleetEngine_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_FleetEngine objects.
        /// </summary>
        /// <param name="obj">b_FleetEngine object to compare against the current object.</param>
        public bool Equals (b_FleetEngine obj)
        {
            if (FleetEngineId != obj.FleetEngineId) return false;
            if (ClientId != obj.ClientId) return false;
            if (EquipmentId != obj.EquipmentId) return false;
            if (!EngineBrand.Equals(obj.EngineBrand)) return false;
            if (!Aspiration.Equals(obj.Aspiration)) return false;
            if (Bore != obj.Bore) return false;
            if (!Cam.Equals(obj.Cam)) return false;
            if (Compression != obj.Compression) return false;
            if (Cylinders != obj.Cylinders) return false;
            if (Displacement != obj.Displacement) return false;
            if (!FuelInduction.Equals(obj.FuelInduction)) return false;
            if (FuelQuality != obj.FuelQuality) return false;
            if (MaxHP != obj.MaxHP) return false;
            if (MaxTorque != obj.MaxTorque) return false;
            if (RedlineRPM != obj.RedlineRPM) return false;
            if (Stroke != obj.Stroke) return false;
            if (Valves != obj.Valves) return false;
            if (!TransmissionBrand.Equals(obj.TransmissionBrand)) return false;
            if (!TransmissionType.Equals(obj.TransmissionType)) return false;
            if (Gears != obj.Gears) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_FleetEngine objects.
        /// </summary>
        /// <param name="obj1">b_FleetEngine object to use in the comparison.</param>
        /// <param name="obj2">b_FleetEngine object to use in the comparison.</param>
        public static bool Equals (b_FleetEngine obj1, b_FleetEngine obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
