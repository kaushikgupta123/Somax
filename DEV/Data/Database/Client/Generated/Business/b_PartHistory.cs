/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using DevExpress.Data.Linq.Helpers;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartHistory table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_PartHistory : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PartHistory()
        {
            ClientId = 0;
            PartHistoryId = 0;
            PartId = 0;
            PartStoreroomId = 0;
            AccountId = 0;
            AverageCostBefore = 0;
            AverageCostAfter = 0;
            ChargeType_Primary = String.Empty;
            ChargeToId_Primary = 0;
            Comments = String.Empty;
            Cost = 0;
            CostAfter = 0;
            CostBefore = 0;
            Description = String.Empty;
            DepartmentId = 0;
            PerformedById = 0;
            QtyAfter = 0;
            QtyBefore = 0;
            RequestorId = 0;
            StockType = String.Empty;
            StoreroomId = 0;
            TransactionDate = new System.Nullable<System.DateTime>();
            TransactionQuantity = 0;
            TransactionType = String.Empty;
            UnitofMeasure = String.Empty;
            CreatedBy = String.Empty;
            CreatedDate = new System.Nullable<System.DateTime>();
            ChargeType_Secondary = String.Empty;
            ChargeToId_Secondary = 0;
            VMRSFailure = String.Empty;
            EstimatedCostsId = 0;
        }

        /// <summary>
        /// PartHistoryId property
        /// </summary>
        public long PartHistoryId { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// PartStoreroomId property
        /// </summary>
        public long PartStoreroomId { get; set; }

        /// <summary>
        /// AccountId property
        /// </summary>
        public long AccountId { get; set; }

        /// <summary>
        /// AverageCostBefore property
        /// </summary>
        public decimal AverageCostBefore { get; set; }

        /// <summary>
        /// AverageCostAfter property
        /// </summary>
        public decimal AverageCostAfter { get; set; }

        /// <summary>
        /// ChargeType_Primary property
        /// </summary>
        public string ChargeType_Primary { get; set; }

        /// <summary>
        /// ChargeToId_Primary property
        /// </summary>
        public long ChargeToId_Primary { get; set; }

        /// <summary>
        /// Comments property
        /// </summary>
        public string Comments { get; set; }

        /// <summary>
        /// Cost property
        /// </summary>
        public decimal Cost { get; set; }

        /// <summary>
        /// CostAfter property
        /// </summary>
        public decimal CostAfter { get; set; }

        /// <summary>
        /// CostBefore property
        /// </summary>
        public decimal CostBefore { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// PerformedById property
        /// </summary>
        public long PerformedById { get; set; }

        /// <summary>
        /// QtyAfter property
        /// </summary>
        public decimal QtyAfter { get; set; }

        /// <summary>
        /// QtyBefore property
        /// </summary>
        public decimal QtyBefore { get; set; }

        /// <summary>
        /// RequestorId property
        /// </summary>
        public long RequestorId { get; set; }

        /// <summary>
        /// StockType property
        /// </summary>
        public string StockType { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// TransactionDate property
        /// </summary>
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// TransactionQuantity property
        /// </summary>
        public decimal TransactionQuantity { get; set; }

        /// <summary>
        /// TransactionType property
        /// </summary>
        public string TransactionType { get; set; }

        /// <summary>
        /// UnitofMeasure property
        /// </summary>
        public string UnitofMeasure { get; set; }

        /// <summary>
        /// CreatedBy property
        /// </summary>
        public string CreatedBy { get; set; }

        /// <summary>
        /// CreatedDate property
        /// </summary>
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// ChargeType_Secondary property
        /// </summary>
        public string ChargeType_Secondary { get; set; }

        /// <summary>
        /// ChargeToId_Secondary property
        /// </summary>
        public long ChargeToId_Secondary { get; set; }

        /// <summary>
        /// VMRSFailure property
        /// </summary>
        public string VMRSFailure { get; set; }

        /// <summary>
        /// EstimatedCostsId property
        /// </summary>
        public long EstimatedCostsId { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PartHistory object.
        /// This routine should be applied to the usp_PartHistory_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartHistory_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PartHistory object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_PartHistory obj = new b_PartHistory();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PartHistory object.
        /// This routine should be applied to the usp_PartHistory_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartHistory_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PartHistoryId column, bigint, not null
                PartHistoryId = reader.GetInt64(i++);

                // PartId column, bigint, not null
                PartId = reader.GetInt64(i++);

                // PartStoreroomId column, bigint, not null
                PartStoreroomId = reader.GetInt64(i++);

                // AccountId column, bigint, not null
                AccountId = reader.GetInt64(i++);

                // AverageCostBefore column, decimal(15,5), not null
                AverageCostBefore = reader.GetDecimal(i++);

                // AverageCostAfter column, decimal(15,5), not null
                AverageCostAfter = reader.GetDecimal(i++);

                // ChargeType_Primary column, nvarchar(15), not null
                ChargeType_Primary = reader.GetString(i++);

                // ChargeToId_Primary column, bigint, not null
                ChargeToId_Primary = reader.GetInt64(i++);

                // Comments column, nvarchar(254), not null
                Comments = reader.GetString(i++);

                // Cost column, decimal(15,5), not null
                Cost = reader.GetDecimal(i++);

                // CostAfter column, decimal(15,5), not null
                CostAfter = reader.GetDecimal(i++);

                // CostBefore column, decimal(15,5), not null
                CostBefore = reader.GetDecimal(i++);

                // Description column, nvarchar(MAX), not null
                Description = reader.GetString(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // PerformedById column, bigint, not null
                PerformedById = reader.GetInt64(i++);

                // QtyAfter column, decimal(15,6), not null
                QtyAfter = reader.GetDecimal(i++);

                // QtyBefore column, decimal(15,6), not null
                QtyBefore = reader.GetDecimal(i++);

                // RequestorId column, bigint, not null
                RequestorId = reader.GetInt64(i++);

                // StockType column, nvarchar(15), not null
                StockType = reader.GetString(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // TransactionDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    TransactionDate = reader.GetDateTime(i);
                }
                else
                {
                    TransactionDate = DateTime.MinValue;
                }
                i++;
                // TransactionQuantity column, decimal(15,6), not null
                TransactionQuantity = reader.GetDecimal(i++);

                // TransactionType column, nvarchar(31), not null
                TransactionType = reader.GetString(i++);

                // UnitofMeasure column, nvarchar(15), not null
                UnitofMeasure = reader.GetString(i++);

                // CreatedBy column, nvarchar(254), not null
                CreatedBy = reader.GetString(i++);

                // CreatedDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CreatedDate = reader.GetDateTime(i);
                }
                else
                {
                    CreatedDate = DateTime.MinValue;
                }
                i++;
                // ChargeType_Secondary column, nvarchar(15), not null
                ChargeType_Secondary = reader.GetString(i++);

                // ChargeToId_Secondary column, bigint, not null
                ChargeToId_Secondary = reader.GetInt64(i++);

                // VMRSFailure column, nvarchar(15), not null
                VMRSFailure = reader.GetString(i++);

                // EstimatedCostsId column, bigint, not null
                EstimatedCostsId = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PartHistoryId"].ToString(); }
                catch { missing.Append("PartHistoryId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["AccountId"].ToString(); }
                catch { missing.Append("AccountId "); }

                try { reader["AverageCostBefore"].ToString(); }
                catch { missing.Append("AverageCostBefore "); }

                try { reader["AverageCostAfter"].ToString(); }
                catch { missing.Append("AverageCostAfter "); }

                try { reader["ChargeType_Primary"].ToString(); }
                catch { missing.Append("ChargeType_Primary "); }

                try { reader["ChargeToId_Primary"].ToString(); }
                catch { missing.Append("ChargeToId_Primary "); }

                try { reader["Comments"].ToString(); }
                catch { missing.Append("Comments "); }

                try { reader["Cost"].ToString(); }
                catch { missing.Append("Cost "); }

                try { reader["CostAfter"].ToString(); }
                catch { missing.Append("CostAfter "); }

                try { reader["CostBefore"].ToString(); }
                catch { missing.Append("CostBefore "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["PerformedById"].ToString(); }
                catch { missing.Append("PerformedById "); }

                try { reader["QtyAfter"].ToString(); }
                catch { missing.Append("QtyAfter "); }

                try { reader["QtyBefore"].ToString(); }
                catch { missing.Append("QtyBefore "); }

                try { reader["RequestorId"].ToString(); }
                catch { missing.Append("RequestorId "); }

                try { reader["StockType"].ToString(); }
                catch { missing.Append("StockType "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["TransactionDate"].ToString(); }
                catch { missing.Append("TransactionDate "); }

                try { reader["TransactionQuantity"].ToString(); }
                catch { missing.Append("TransactionQuantity "); }

                try { reader["TransactionType"].ToString(); }
                catch { missing.Append("TransactionType "); }

                try { reader["UnitofMeasure"].ToString(); }
                catch { missing.Append("UnitofMeasure "); }

                try { reader["CreatedBy"].ToString(); }
                catch { missing.Append("CreatedBy "); }

                try { reader["CreatedDate"].ToString(); }
                catch { missing.Append("CreatedDate "); }

                try { reader["ChargeType_Secondary"].ToString(); }
                catch { missing.Append("ChargeType_Secondary "); }

                try { reader["ChargeToId_Secondary"].ToString(); }
                catch { missing.Append("ChargeToId_Secondary "); }

                try { reader["VMRSFailure"].ToString(); }
                catch { missing.Append("VMRSFailure "); }

                try { reader["EstimatedCostsId"].ToString(); }
                catch { missing.Append("EstimatedCostsId "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a PartHistory table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the PartHistory table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the PartHistory table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all PartHistory table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_PartHistory[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_PartHistory[] data
        )
        {
            Database.SqlClient.ProcessRow<b_PartHistory> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_PartHistory[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartHistory>(reader => { b_PartHistory obj = new b_PartHistory(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_PartHistory_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_PartHistory[])results.ToArray(typeof(b_PartHistory));
                }
                else
                {
                    data = new b_PartHistory[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve PartHistory table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_PartHistory[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_PartHistory> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartHistory>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_PartHistory_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_PartHistory objects.
        /// </summary>
        /// <param name="obj">b_PartHistory object to compare against the current object.</param>
        public bool Equals(b_PartHistory obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (PartHistoryId != obj.PartHistoryId) return false;
            if (PartId != obj.PartId) return false;
            if (PartStoreroomId != obj.PartStoreroomId) return false;
            if (AccountId != obj.AccountId) return false;
            if (AverageCostBefore != obj.AverageCostBefore) return false;
            if (AverageCostAfter != obj.AverageCostAfter) return false;
            if (!ChargeType_Primary.Equals(obj.ChargeType_Primary)) return false;
            if (ChargeToId_Primary != obj.ChargeToId_Primary) return false;
            if (!Comments.Equals(obj.Comments)) return false;
            if (Cost != obj.Cost) return false;
            if (CostAfter != obj.CostAfter) return false;
            if (CostBefore != obj.CostBefore) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (PerformedById != obj.PerformedById) return false;
            if (QtyAfter != obj.QtyAfter) return false;
            if (QtyBefore != obj.QtyBefore) return false;
            if (RequestorId != obj.RequestorId) return false;
            if (!StockType.Equals(obj.StockType)) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!TransactionDate.Equals(obj.TransactionDate)) return false;
            if (TransactionQuantity != obj.TransactionQuantity) return false;
            if (!TransactionType.Equals(obj.TransactionType)) return false;
            if (!UnitofMeasure.Equals(obj.UnitofMeasure)) return false;
            if (!CreatedBy.Equals(obj.CreatedBy)) return false;
            if (!CreatedDate.Equals(obj.CreatedDate)) return false;
            if (!ChargeType_Secondary.Equals(obj.ChargeType_Secondary)) return false;
            if (ChargeToId_Secondary != obj.ChargeToId_Secondary) return false;
            if (!VMRSFailure.Equals(obj.VMRSFailure)) return false;
            if (EstimatedCostsId != obj.EstimatedCostsId) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_PartHistory objects.
        /// </summary>
        /// <param name="obj1">b_PartHistory object to use in the comparison.</param>
        /// <param name="obj2">b_PartHistory object to use in the comparison.</param>
        public static bool Equals(b_PartHistory obj1, b_PartHistory obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
