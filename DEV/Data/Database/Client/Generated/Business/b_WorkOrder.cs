/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the WorkOrder table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_WorkOrder : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_WorkOrder()
        {
            ClientId = 0;
            WorkOrderId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            ActionCode = String.Empty;
            ActualDuration = 0;
            ActualFinishDate = new System.Nullable<System.DateTime>();
            ActualLaborCosts = 0;
            ActualLaborHours = 0;
            ActualMaterialCosts = 0;
            ActualOutsideServiceCosts = 0;
            ActualStartDate = new System.Nullable<System.DateTime>();
            ActualTotalCosts = 0;
            ApprovalRequired = false;
            ApproveBy_PersonnelId = 0;
            ApproveDate = new System.Nullable<System.DateTime>();
            CancelReason = String.Empty;
            ChargeToId = 0;
            ChargeType = String.Empty;
            ChargeTo_Name = String.Empty;
            CloseBy_PersonnelId = 0;
            CloseDate = new System.Nullable<System.DateTime>();
            CompleteAllTasks = false;
            CompleteBy_PersonnelId = 0;
            CompleteComments = String.Empty;
            CompleteDate = new System.Nullable<System.DateTime>();
            Creator_PersonnelId = 0;
            Crew = String.Empty;
            Description = String.Empty;
            DownRequired = false;
            EquipDown = false;
            EquipDownDate = new System.Nullable<System.DateTime>();
            EquipDownHours = 0;
            EquipUpDate = new System.Nullable<System.DateTime>();
            EstimatedLaborCosts = 0;
            EstimatedLaborHours = 0;
            EstimatedMaterialCosts = 0;
            EstimatedOutsideServiceCosts = 0;
            EstimatedPurchaseMaterialCosts = 0;
            EstimatedTotalCosts = 0;
            FailureCode = String.Empty;
            JobPlan = String.Empty;
            Labor_AccountId = 0;
            Location = String.Empty;
            Material_AccountId = 0;
            MeterId = 0;
            MeterReadingDone = 0;
            MeterReadingDue = 0;
            Other_AccountId = 0;
            Planner_PersonnelId = 0;
            PrevMaintBatchId = 0;
            PrimaveraProjectNumber = 0;
            Printed = 0;
            Priority = String.Empty;
            ProjectId = 0;
            ReasonforDown = String.Empty;
            ReasonNotDone = String.Empty;
            ReleaseBy_PersonnelId = 0;
            ReleaseDate = new System.Nullable<System.DateTime>();
            RequestDate = new System.Nullable<System.DateTime>();
            Requestor_PersonnelId = 0;
            RequestorLocation = String.Empty;
            RequestorPhone = String.Empty;
            RequiredDate = new System.Nullable<System.DateTime>();
            RIMEAssetCriticality = 0;
            RIMEPriority = 0;
            RIMEWorkClass = 0;
            ScheduledDuration = 0;
            ScheduledFinishDate = new System.Nullable<System.DateTime>();
            ScheduledStartDate = new System.Nullable<System.DateTime>();
            Scheduler_PersonnelId = 0;
            Section = String.Empty;
            Shift = String.Empty;
            SignOffDate = new System.Nullable<System.DateTime>();
            SignoffBy_PersonnelId = 0;
            SourceId = 0;
            SourceType = String.Empty;
            Status = String.Empty;
            SuspendDuration = 0;
            Type = String.Empty;
            WorkAssigned_PersonnelId = 0;
            DeniedReason = String.Empty;
            DeniedDate = new System.Nullable<System.DateTime>();
            DeniedBy_PersonnelId = 0;
            DeniedComment = String.Empty;
            EmergencyWorkOrder = false;
            CancelDate = new System.Nullable<System.DateTime>();
            Category = String.Empty;
            RequestorName = String.Empty;
            RequestorPhoneNumber = String.Empty;
            RequestorEmail = String.Empty;
            SchedInitDate = new System.Nullable<System.DateTime>();
            PartsOnOrder = 0;
            RootCauseCode = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// WorkOrderId property
        /// </summary>
        public long WorkOrderId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// ActionCode property
        /// </summary>
        public string ActionCode { get; set; }

        /// <summary>
        /// ActualDuration property
        /// </summary>
        public decimal ActualDuration { get; set; }

        /// <summary>
        /// ActualFinishDate property
        /// </summary>
        public DateTime? ActualFinishDate { get; set; }

        /// <summary>
        /// ActualLaborCosts property
        /// </summary>
        public decimal ActualLaborCosts { get; set; }

        /// <summary>
        /// ActualLaborHours property
        /// </summary>
        public decimal ActualLaborHours { get; set; }

        /// <summary>
        /// ActualMaterialCosts property
        /// </summary>
        public decimal ActualMaterialCosts { get; set; }

        /// <summary>
        /// ActualOutsideServiceCosts property
        /// </summary>
        public decimal ActualOutsideServiceCosts { get; set; }

        /// <summary>
        /// ActualStartDate property
        /// </summary>
        public DateTime? ActualStartDate { get; set; }

        /// <summary>
        /// ActualTotalCosts property
        /// </summary>
        public decimal ActualTotalCosts { get; set; }

        /// <summary>
        /// ApprovalRequired property
        /// </summary>
        public bool ApprovalRequired { get; set; }

        /// <summary>
        /// ApproveBy_PersonnelId property
        /// </summary>
        public long ApproveBy_PersonnelId { get; set; }

        /// <summary>
        /// ApproveDate property
        /// </summary>
        public DateTime? ApproveDate { get; set; }

        /// <summary>
        /// CancelReason property
        /// </summary>
        public string CancelReason { get; set; }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        public long ChargeToId { get; set; }

        /// <summary>
        /// ChargeType property
        /// </summary>
        public string ChargeType { get; set; }

        /// <summary>
        /// ChargeTo_Name property
        /// </summary>
        public string ChargeTo_Name { get; set; }

        /// <summary>
        /// CloseBy_PersonnelId property
        /// </summary>
        public long CloseBy_PersonnelId { get; set; }

        /// <summary>
        /// CloseDate property
        /// </summary>
        public DateTime? CloseDate { get; set; }

        /// <summary>
        /// CompleteAllTasks property
        /// </summary>
        public bool CompleteAllTasks { get; set; }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        public long CompleteBy_PersonnelId { get; set; }

        /// <summary>
        /// CompleteComments property
        /// </summary>
        public string CompleteComments { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        public long Creator_PersonnelId { get; set; }

        /// <summary>
        /// Crew property
        /// </summary>
        public string Crew { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// DownRequired property
        /// </summary>
        public bool DownRequired { get; set; }

        /// <summary>
        /// EquipDown property
        /// </summary>
        public bool EquipDown { get; set; }

        /// <summary>
        /// EquipDownDate property
        /// </summary>
        public DateTime? EquipDownDate { get; set; }

        /// <summary>
        /// EquipDownHours property
        /// </summary>
        public decimal EquipDownHours { get; set; }

        /// <summary>
        /// EquipUpDate property
        /// </summary>
        public DateTime? EquipUpDate { get; set; }

        /// <summary>
        /// EstimatedLaborCosts property
        /// </summary>
        public decimal EstimatedLaborCosts { get; set; }

        /// <summary>
        /// EstimatedLaborHours property
        /// </summary>
        public decimal EstimatedLaborHours { get; set; }

        /// <summary>
        /// EstimatedMaterialCosts property
        /// </summary>
        public decimal EstimatedMaterialCosts { get; set; }

        /// <summary>
        /// EstimatedOutsideServiceCosts property
        /// </summary>
        public decimal EstimatedOutsideServiceCosts { get; set; }

        /// <summary>
        /// EstimatedPurchaseMaterialCosts property
        /// </summary>
        public decimal EstimatedPurchaseMaterialCosts { get; set; }

        /// <summary>
        /// EstimatedTotalCosts property
        /// </summary>
        public decimal EstimatedTotalCosts { get; set; }

        /// <summary>
        /// FailureCode property
        /// </summary>
        public string FailureCode { get; set; }

        /// <summary>
        /// JobPlan property
        /// </summary>
        public string JobPlan { get; set; }

        /// <summary>
        /// Labor_AccountId property
        /// </summary>
        public long Labor_AccountId { get; set; }

        /// <summary>
        /// Location property
        /// </summary>
        public string Location { get; set; }

        /// <summary>
        /// Material_AccountId property
        /// </summary>
        public long Material_AccountId { get; set; }

        /// <summary>
        /// MeterId property
        /// </summary>
        public long MeterId { get; set; }

        /// <summary>
        /// MeterReadingDone property
        /// </summary>
        public decimal MeterReadingDone { get; set; }

        /// <summary>
        /// MeterReadingDue property
        /// </summary>
        public decimal MeterReadingDue { get; set; }

        /// <summary>
        /// Other_AccountId property
        /// </summary>
        public long Other_AccountId { get; set; }

        /// <summary>
        /// Planner_PersonnelId property
        /// </summary>
        public long Planner_PersonnelId { get; set; }

        /// <summary>
        /// PrevMaintBatchId property
        /// </summary>
        public long PrevMaintBatchId { get; set; }

        /// <summary>
        /// PrimaveraProjectNumber property
        /// </summary>
        public int PrimaveraProjectNumber { get; set; }

        /// <summary>
        /// Printed property
        /// </summary>
        public int Printed { get; set; }

        /// <summary>
        /// Priority property
        /// </summary>
        public string Priority { get; set; }

        /// <summary>
        /// ProjectId property
        /// </summary>
        public long ProjectId { get; set; }

        /// <summary>
        /// ReasonforDown property
        /// </summary>
        public string ReasonforDown { get; set; }

        /// <summary>
        /// ReasonNotDone property
        /// </summary>
        public string ReasonNotDone { get; set; }

        /// <summary>
        /// ReleaseBy_PersonnelId property
        /// </summary>
        public long ReleaseBy_PersonnelId { get; set; }

        /// <summary>
        /// ReleaseDate property
        /// </summary>
        public DateTime? ReleaseDate { get; set; }

        /// <summary>
        /// RequestDate property
        /// </summary>
        public DateTime? RequestDate { get; set; }

        /// <summary>
        /// Requestor_PersonnelId property
        /// </summary>
        public long Requestor_PersonnelId { get; set; }

        /// <summary>
        /// RequestorLocation property
        /// </summary>
        public string RequestorLocation { get; set; }

        /// <summary>
        /// RequestorPhone property
        /// </summary>
        public string RequestorPhone { get; set; }

        /// <summary>
        /// RequiredDate property
        /// </summary>
        public DateTime? RequiredDate { get; set; }

        /// <summary>
        /// RIMEAssetCriticality property
        /// </summary>
        public int RIMEAssetCriticality { get; set; }

        /// <summary>
        /// RIMEPriority property
        /// </summary>
        public int RIMEPriority { get; set; }

        /// <summary>
        /// RIMEWorkClass property
        /// </summary>
        public int RIMEWorkClass { get; set; }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        public decimal ScheduledDuration { get; set; }

        /// <summary>
        /// ScheduledFinishDate property
        /// </summary>
        public DateTime? ScheduledFinishDate { get; set; }

        /// <summary>
        /// ScheduledStartDate property
        /// </summary>
        public DateTime? ScheduledStartDate { get; set; }

        /// <summary>
        /// Scheduler_PersonnelId property
        /// </summary>
        public long Scheduler_PersonnelId { get; set; }

        /// <summary>
        /// Section property
        /// </summary>
        public string Section { get; set; }

        /// <summary>
        /// Shift property
        /// </summary>
        public string Shift { get; set; }

        /// <summary>
        /// SignOffDate property
        /// </summary>
        public DateTime? SignOffDate { get; set; }

        /// <summary>
        /// SignoffBy_PersonnelId property
        /// </summary>
        public long SignoffBy_PersonnelId { get; set; }

        /// <summary>
        /// SourceId property
        /// </summary>
        public long SourceId { get; set; }

        /// <summary>
        /// SourceType property
        /// </summary>
        public string SourceType { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// SuspendDuration property
        /// </summary>
        public decimal SuspendDuration { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// WorkAssigned_PersonnelId property
        /// </summary>
        public long WorkAssigned_PersonnelId { get; set; }

        /// <summary>
        /// DeniedReason property
        /// </summary>
        public string DeniedReason { get; set; }

        /// <summary>
        /// DeniedDate property
        /// </summary>
        public DateTime? DeniedDate { get; set; }

        /// <summary>
        /// DeniedBy_PersonnelId property
        /// </summary>
        public long DeniedBy_PersonnelId { get; set; }

        /// <summary>
        /// DeniedComment property
        /// </summary>
        public string DeniedComment { get; set; }

        /// <summary>
        /// EmergencyWorkOrder property
        /// </summary>
        public bool EmergencyWorkOrder { get; set; }

        /// <summary>
        /// CancelDate property
        /// </summary>
        public DateTime? CancelDate { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// RequestorName property
        /// </summary>
        public string RequestorName { get; set; }

        /// <summary>
        /// RequestorPhoneNumber property
        /// </summary>
        public string RequestorPhoneNumber { get; set; }

        /// <summary>
        /// RequestorEmail property
        /// </summary>
        public string RequestorEmail { get; set; }

        /// <summary>
        /// SchedInitDate property
        /// </summary>
        public DateTime? SchedInitDate { get; set; }

        /// <summary>
        /// PartsOnOrder property
        /// </summary>
        public int PartsOnOrder { get; set; }

        /// <summary>
        /// RootCauseCode property
        /// </summary>
        public string RootCauseCode { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_WorkOrder object.
        /// This routine should be applied to the usp_WorkOrder_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_WorkOrder_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_WorkOrder object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_WorkOrder obj = new b_WorkOrder();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_WorkOrder object.
        /// This routine should be applied to the usp_WorkOrder_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_WorkOrder_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // WorkOrderId column, bigint, not null
                WorkOrderId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(15), not null
                ClientLookupId = reader.GetString(i++);

                // ActionCode column, nvarchar(15), not null
                ActionCode = reader.GetString(i++);

                // ActualDuration column, decimal(8,2), not null
                ActualDuration = reader.GetDecimal(i++);

                // ActualFinishDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ActualFinishDate = reader.GetDateTime(i);
                }
                else
                {
                    ActualFinishDate = DateTime.MinValue;
                }
                i++;
                // ActualLaborCosts column, decimal(15,6), not null
                ActualLaborCosts = reader.GetDecimal(i++);

                // ActualLaborHours column, decimal(10,2), not null
                ActualLaborHours = reader.GetDecimal(i++);

                // ActualMaterialCosts column, decimal(15,6), not null
                ActualMaterialCosts = reader.GetDecimal(i++);

                // ActualOutsideServiceCosts column, decimal(15,6), not null
                ActualOutsideServiceCosts = reader.GetDecimal(i++);

                // ActualStartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ActualStartDate = reader.GetDateTime(i);
                }
                else
                {
                    ActualStartDate = DateTime.MinValue;
                }
                i++;
                // ActualTotalCosts column, decimal(15,6), not null
                ActualTotalCosts = reader.GetDecimal(i++);

                // ApprovalRequired column, bit, not null
                ApprovalRequired = reader.GetBoolean(i++);

                // ApproveBy_PersonnelId column, bigint, not null
                ApproveBy_PersonnelId = reader.GetInt64(i++);

                // ApproveDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ApproveDate = reader.GetDateTime(i);
                }
                else
                {
                    ApproveDate = DateTime.MinValue;
                }
                i++;
                // CancelReason column, nvarchar(15), not null
                CancelReason = reader.GetString(i++);

                // ChargeToId column, bigint, not null
                ChargeToId = reader.GetInt64(i++);

                // ChargeType column, nvarchar(15), not null
                ChargeType = reader.GetString(i++);

                // ChargeTo_Name column, nvarchar(63), not null
                ChargeTo_Name = reader.GetString(i++);

                // CloseBy_PersonnelId column, bigint, not null
                CloseBy_PersonnelId = reader.GetInt64(i++);

                // CloseDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CloseDate = reader.GetDateTime(i);
                }
                else
                {
                    CloseDate = DateTime.MinValue;
                }
                i++;
                // CompleteAllTasks column, bit, not null
                CompleteAllTasks = reader.GetBoolean(i++);

                // CompleteBy_PersonnelId column, bigint, not null
                CompleteBy_PersonnelId = reader.GetInt64(i++);

                // CompleteComments column, nvarchar(MAX), not null
                CompleteComments = reader.GetString(i++);

                // CompleteDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CompleteDate = reader.GetDateTime(i);
                }
                else
                {
                    CompleteDate = DateTime.MinValue;
                }
                i++;
                // Creator_PersonnelId column, bigint, not null
                Creator_PersonnelId = reader.GetInt64(i++);

                // Crew column, nvarchar(15), not null
                Crew = reader.GetString(i++);

                // Description column, nvarchar(MAX), not null
                Description = reader.GetString(i++);

                // DownRequired column, bit, not null
                DownRequired = reader.GetBoolean(i++);

                // EquipDown column, bit, not null
                EquipDown = reader.GetBoolean(i++);

                // EquipDownDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    EquipDownDate = reader.GetDateTime(i);
                }
                else
                {
                    EquipDownDate = DateTime.MinValue;
                }
                i++;
                // EquipDownHours column, decimal(15,6), not null
                EquipDownHours = reader.GetDecimal(i++);

                // EquipUpDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    EquipUpDate = reader.GetDateTime(i);
                }
                else
                {
                    EquipUpDate = DateTime.MinValue;
                }
                i++;
                // EstimatedLaborCosts column, decimal(15,6), not null
                EstimatedLaborCosts = reader.GetDecimal(i++);

                // EstimatedLaborHours column, decimal(10,2), not null
                EstimatedLaborHours = reader.GetDecimal(i++);

                // EstimatedMaterialCosts column, decimal(15,6), not null
                EstimatedMaterialCosts = reader.GetDecimal(i++);

                // EstimatedOutsideServiceCosts column, decimal(15,6), not null
                EstimatedOutsideServiceCosts = reader.GetDecimal(i++);

                // EstimatedPurchaseMaterialCosts column, decimal(15,6), not null
                EstimatedPurchaseMaterialCosts = reader.GetDecimal(i++);

                // EstimatedTotalCosts column, decimal(15,6), not null
                EstimatedTotalCosts = reader.GetDecimal(i++);

                // FailureCode column, nvarchar(15), not null
                FailureCode = reader.GetString(i++);

                // JobPlan column, nvarchar(MAX), not null
                JobPlan = reader.GetString(i++);

                // Labor_AccountId column, bigint, not null
                Labor_AccountId = reader.GetInt64(i++);

                // Location column, nvarchar(63), not null
                Location = reader.GetString(i++);

                // Material_AccountId column, bigint, not null
                Material_AccountId = reader.GetInt64(i++);

                // MeterId column, bigint, not null
                MeterId = reader.GetInt64(i++);

                // MeterReadingDone column, decimal(17,3), not null
                MeterReadingDone = reader.GetDecimal(i++);

                // MeterReadingDue column, decimal(17,3), not null
                MeterReadingDue = reader.GetDecimal(i++);

                // Other_AccountId column, bigint, not null
                Other_AccountId = reader.GetInt64(i++);

                // Planner_PersonnelId column, bigint, not null
                Planner_PersonnelId = reader.GetInt64(i++);

                // PrevMaintBatchId column, bigint, not null
                PrevMaintBatchId = reader.GetInt64(i++);

                // PrimaveraProjectNumber column, int, not null
                PrimaveraProjectNumber = reader.GetInt32(i++);

                // Printed column, int, not null
                Printed = reader.GetInt32(i++);

                // Priority column, nvarchar(15), not null
                Priority = reader.GetString(i++);

                // ProjectId column, bigint, not null
                ProjectId = reader.GetInt64(i++);

                // ReasonforDown column, nvarchar(15), not null
                ReasonforDown = reader.GetString(i++);

                // ReasonNotDone column, nvarchar(15), not null
                ReasonNotDone = reader.GetString(i++);

                // ReleaseBy_PersonnelId column, bigint, not null
                ReleaseBy_PersonnelId = reader.GetInt64(i++);

                // ReleaseDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ReleaseDate = reader.GetDateTime(i);
                }
                else
                {
                    ReleaseDate = DateTime.MinValue;
                }
                i++;
                // RequestDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    RequestDate = reader.GetDateTime(i);
                }
                else
                {
                    RequestDate = DateTime.MinValue;
                }
                i++;
                // Requestor_PersonnelId column, bigint, not null
                Requestor_PersonnelId = reader.GetInt64(i++);

                // RequestorLocation column, nvarchar(63), not null
                RequestorLocation = reader.GetString(i++);

                // RequestorPhone column, nvarchar(31), not null
                RequestorPhone = reader.GetString(i++);

                // RequiredDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    RequiredDate = reader.GetDateTime(i);
                }
                else
                {
                    RequiredDate = DateTime.MinValue;
                }
                i++;
                // RIMEAssetCriticality column, int, not null
                RIMEAssetCriticality = reader.GetInt32(i++);

                // RIMEPriority column, int, not null
                RIMEPriority = reader.GetInt32(i++);

                // RIMEWorkClass column, int, not null
                RIMEWorkClass = reader.GetInt32(i++);

                // ScheduledDuration column, decimal(8,2), not null
                ScheduledDuration = reader.GetDecimal(i++);

                // ScheduledFinishDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ScheduledFinishDate = reader.GetDateTime(i);
                }
                else
                {
                    ScheduledFinishDate = DateTime.MinValue;
                }
                i++;
                // ScheduledStartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ScheduledStartDate = reader.GetDateTime(i);
                }
                else
                {
                    ScheduledStartDate = DateTime.MinValue;
                }
                i++;
                // Scheduler_PersonnelId column, bigint, not null
                Scheduler_PersonnelId = reader.GetInt64(i++);

                // Section column, nvarchar(15), not null
                Section = reader.GetString(i++);

                // Shift column, nvarchar(15), not null
                Shift = reader.GetString(i++);

                // SignOffDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    SignOffDate = reader.GetDateTime(i);
                }
                else
                {
                    SignOffDate = DateTime.MinValue;
                }
                i++;
                // SignoffBy_PersonnelId column, bigint, not null
                SignoffBy_PersonnelId = reader.GetInt64(i++);

                // SourceId column, bigint, not null
                SourceId = reader.GetInt64(i++);

                // SourceType column, nvarchar(15), not null
                SourceType = reader.GetString(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // SuspendDuration column, decimal(8,2), not null
                SuspendDuration = reader.GetDecimal(i++);

                // Type column, nvarchar(15), not null
                Type = reader.GetString(i++);

                // WorkAssigned_PersonnelId column, bigint, not null
                WorkAssigned_PersonnelId = reader.GetInt64(i++);

                // DeniedReason column, nvarchar(15), not null
                DeniedReason = reader.GetString(i++);

                // DeniedDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DeniedDate = reader.GetDateTime(i);
                }
                else
                {
                    DeniedDate = DateTime.MinValue;
                }
                i++;
                // DeniedBy_PersonnelId column, bigint, not null
                DeniedBy_PersonnelId = reader.GetInt64(i++);

                // DeniedComment column, nvarchar(500), not null
                DeniedComment = reader.GetString(i++);

                // EmergencyWorkOrder column, bit, not null
                EmergencyWorkOrder = reader.GetBoolean(i++);

                // CancelDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CancelDate = reader.GetDateTime(i);
                }
                else
                {
                    CancelDate = DateTime.MinValue;
                }
                i++;
                // Category column, nvarchar(15), not null
                Category = reader.GetString(i++);

                // RequestorName column, nvarchar(63), not null
                RequestorName = reader.GetString(i++);

                // RequestorPhoneNumber column, nvarchar(31), not null
                RequestorPhoneNumber = reader.GetString(i++);

                // RequestorEmail column, nvarchar(255), not null
                RequestorEmail = reader.GetString(i++);

                // SchedInitDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    SchedInitDate = reader.GetDateTime(i);
                }
                else
                {
                    SchedInitDate = DateTime.MinValue;
                }
                i++;
                // PartsOnOrder column, int, not null
                PartsOnOrder = reader.GetInt32(i++);

                // RootCauseCode column, nvarchar(15), not null
                RootCauseCode = reader.GetString(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["WorkOrderId"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["ActionCode"].ToString(); }
                catch { missing.Append("ActionCode "); }

                try { reader["ActualDuration"].ToString(); }
                catch { missing.Append("ActualDuration "); }

                try { reader["ActualFinishDate"].ToString(); }
                catch { missing.Append("ActualFinishDate "); }

                try { reader["ActualLaborCosts"].ToString(); }
                catch { missing.Append("ActualLaborCosts "); }

                try { reader["ActualLaborHours"].ToString(); }
                catch { missing.Append("ActualLaborHours "); }

                try { reader["ActualMaterialCosts"].ToString(); }
                catch { missing.Append("ActualMaterialCosts "); }

                try { reader["ActualOutsideServiceCosts"].ToString(); }
                catch { missing.Append("ActualOutsideServiceCosts "); }

                try { reader["ActualStartDate"].ToString(); }
                catch { missing.Append("ActualStartDate "); }

                try { reader["ActualTotalCosts"].ToString(); }
                catch { missing.Append("ActualTotalCosts "); }

                try { reader["ApprovalRequired"].ToString(); }
                catch { missing.Append("ApprovalRequired "); }

                try { reader["ApproveBy_PersonnelId"].ToString(); }
                catch { missing.Append("ApproveBy_PersonnelId "); }

                try { reader["ApproveDate"].ToString(); }
                catch { missing.Append("ApproveDate "); }

                try { reader["CancelReason"].ToString(); }
                catch { missing.Append("CancelReason "); }

                try { reader["ChargeToId"].ToString(); }
                catch { missing.Append("ChargeToId "); }

                try { reader["ChargeType"].ToString(); }
                catch { missing.Append("ChargeType "); }

                try { reader["ChargeTo_Name"].ToString(); }
                catch { missing.Append("ChargeTo_Name "); }

                try { reader["CloseBy_PersonnelId"].ToString(); }
                catch { missing.Append("CloseBy_PersonnelId "); }

                try { reader["CloseDate"].ToString(); }
                catch { missing.Append("CloseDate "); }

                try { reader["CompleteAllTasks"].ToString(); }
                catch { missing.Append("CompleteAllTasks "); }

                try { reader["CompleteBy_PersonnelId"].ToString(); }
                catch { missing.Append("CompleteBy_PersonnelId "); }

                try { reader["CompleteComments"].ToString(); }
                catch { missing.Append("CompleteComments "); }

                try { reader["CompleteDate"].ToString(); }
                catch { missing.Append("CompleteDate "); }

                try { reader["Creator_PersonnelId"].ToString(); }
                catch { missing.Append("Creator_PersonnelId "); }

                try { reader["Crew"].ToString(); }
                catch { missing.Append("Crew "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["DownRequired"].ToString(); }
                catch { missing.Append("DownRequired "); }

                try { reader["EquipDown"].ToString(); }
                catch { missing.Append("EquipDown "); }

                try { reader["EquipDownDate"].ToString(); }
                catch { missing.Append("EquipDownDate "); }

                try { reader["EquipDownHours"].ToString(); }
                catch { missing.Append("EquipDownHours "); }

                try { reader["EquipUpDate"].ToString(); }
                catch { missing.Append("EquipUpDate "); }

                try { reader["EstimatedLaborCosts"].ToString(); }
                catch { missing.Append("EstimatedLaborCosts "); }

                try { reader["EstimatedLaborHours"].ToString(); }
                catch { missing.Append("EstimatedLaborHours "); }

                try { reader["EstimatedMaterialCosts"].ToString(); }
                catch { missing.Append("EstimatedMaterialCosts "); }

                try { reader["EstimatedOutsideServiceCosts"].ToString(); }
                catch { missing.Append("EstimatedOutsideServiceCosts "); }

                try { reader["EstimatedPurchaseMaterialCosts"].ToString(); }
                catch { missing.Append("EstimatedPurchaseMaterialCosts "); }

                try { reader["EstimatedTotalCosts"].ToString(); }
                catch { missing.Append("EstimatedTotalCosts "); }

                try { reader["FailureCode"].ToString(); }
                catch { missing.Append("FailureCode "); }

                try { reader["JobPlan"].ToString(); }
                catch { missing.Append("JobPlan "); }

                try { reader["Labor_AccountId"].ToString(); }
                catch { missing.Append("Labor_AccountId "); }

                try { reader["Location"].ToString(); }
                catch { missing.Append("Location "); }

                try { reader["Material_AccountId"].ToString(); }
                catch { missing.Append("Material_AccountId "); }

                try { reader["MeterId"].ToString(); }
                catch { missing.Append("MeterId "); }

                try { reader["MeterReadingDone"].ToString(); }
                catch { missing.Append("MeterReadingDone "); }

                try { reader["MeterReadingDue"].ToString(); }
                catch { missing.Append("MeterReadingDue "); }

                try { reader["Other_AccountId"].ToString(); }
                catch { missing.Append("Other_AccountId "); }

                try { reader["Planner_PersonnelId"].ToString(); }
                catch { missing.Append("Planner_PersonnelId "); }

                try { reader["PrevMaintBatchId"].ToString(); }
                catch { missing.Append("PrevMaintBatchId "); }

                try { reader["PrimaveraProjectNumber"].ToString(); }
                catch { missing.Append("PrimaveraProjectNumber "); }

                try { reader["Printed"].ToString(); }
                catch { missing.Append("Printed "); }

                try { reader["Priority"].ToString(); }
                catch { missing.Append("Priority "); }

                try { reader["ProjectId"].ToString(); }
                catch { missing.Append("ProjectId "); }

                try { reader["ReasonforDown"].ToString(); }
                catch { missing.Append("ReasonforDown "); }

                try { reader["ReasonNotDone"].ToString(); }
                catch { missing.Append("ReasonNotDone "); }

                try { reader["ReleaseBy_PersonnelId"].ToString(); }
                catch { missing.Append("ReleaseBy_PersonnelId "); }

                try { reader["ReleaseDate"].ToString(); }
                catch { missing.Append("ReleaseDate "); }

                try { reader["RequestDate"].ToString(); }
                catch { missing.Append("RequestDate "); }

                try { reader["Requestor_PersonnelId"].ToString(); }
                catch { missing.Append("Requestor_PersonnelId "); }

                try { reader["RequestorLocation"].ToString(); }
                catch { missing.Append("RequestorLocation "); }

                try { reader["RequestorPhone"].ToString(); }
                catch { missing.Append("RequestorPhone "); }

                try { reader["RequiredDate"].ToString(); }
                catch { missing.Append("RequiredDate "); }

                try { reader["RIMEAssetCriticality"].ToString(); }
                catch { missing.Append("RIMEAssetCriticality "); }

                try { reader["RIMEPriority"].ToString(); }
                catch { missing.Append("RIMEPriority "); }

                try { reader["RIMEWorkClass"].ToString(); }
                catch { missing.Append("RIMEWorkClass "); }

                try { reader["ScheduledDuration"].ToString(); }
                catch { missing.Append("ScheduledDuration "); }

                try { reader["ScheduledFinishDate"].ToString(); }
                catch { missing.Append("ScheduledFinishDate "); }

                try { reader["ScheduledStartDate"].ToString(); }
                catch { missing.Append("ScheduledStartDate "); }

                try { reader["Scheduler_PersonnelId"].ToString(); }
                catch { missing.Append("Scheduler_PersonnelId "); }

                try { reader["Section"].ToString(); }
                catch { missing.Append("Section "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["SignOffDate"].ToString(); }
                catch { missing.Append("SignOffDate "); }

                try { reader["SignoffBy_PersonnelId"].ToString(); }
                catch { missing.Append("SignoffBy_PersonnelId "); }

                try { reader["SourceId"].ToString(); }
                catch { missing.Append("SourceId "); }

                try { reader["SourceType"].ToString(); }
                catch { missing.Append("SourceType "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["SuspendDuration"].ToString(); }
                catch { missing.Append("SuspendDuration "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["WorkAssigned_PersonnelId"].ToString(); }
                catch { missing.Append("WorkAssigned_PersonnelId "); }

                try { reader["DeniedReason"].ToString(); }
                catch { missing.Append("DeniedReason "); }

                try { reader["DeniedDate"].ToString(); }
                catch { missing.Append("DeniedDate "); }

                try { reader["DeniedBy_PersonnelId"].ToString(); }
                catch { missing.Append("DeniedBy_PersonnelId "); }

                try { reader["DeniedComment"].ToString(); }
                catch { missing.Append("DeniedComment "); }

                try { reader["EmergencyWorkOrder"].ToString(); }
                catch { missing.Append("EmergencyWorkOrder "); }

                try { reader["CancelDate"].ToString(); }
                catch { missing.Append("CancelDate "); }

                try { reader["Category"].ToString(); }
                catch { missing.Append("Category "); }

                try { reader["RequestorName"].ToString(); }
                catch { missing.Append("RequestorName "); }

                try { reader["RequestorPhoneNumber"].ToString(); }
                catch { missing.Append("RequestorPhoneNumber "); }

                try { reader["RequestorEmail"].ToString(); }
                catch { missing.Append("RequestorEmail "); }

                try { reader["SchedInitDate"].ToString(); }
                catch { missing.Append("SchedInitDate "); }

                try { reader["PartsOnOrder"].ToString(); }
                catch { missing.Append("PartsOnOrder "); }

                try { reader["RootCauseCode"].ToString(); }
                catch { missing.Append("RootCauseCode "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a WorkOrder table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrder_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the WorkOrder table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrder_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the WorkOrder table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrder_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all WorkOrder table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_WorkOrder[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_WorkOrder[] data
        )
        {
            Database.SqlClient.ProcessRow<b_WorkOrder> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_WorkOrder[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_WorkOrder>(reader => { b_WorkOrder obj = new b_WorkOrder(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_WorkOrder_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_WorkOrder[])results.ToArray(typeof(b_WorkOrder));
                }
                else
                {
                    data = new b_WorkOrder[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve WorkOrder table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_WorkOrder[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_WorkOrder> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_WorkOrder>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_WorkOrder_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_WorkOrder objects.
        /// </summary>
        /// <param name="obj">b_WorkOrder object to compare against the current object.</param>
        public bool Equals(b_WorkOrder obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (WorkOrderId != obj.WorkOrderId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!ActionCode.Equals(obj.ActionCode)) return false;
            if (ActualDuration != obj.ActualDuration) return false;
            if (!ActualFinishDate.Equals(obj.ActualFinishDate)) return false;
            if (ActualLaborCosts != obj.ActualLaborCosts) return false;
            if (ActualLaborHours != obj.ActualLaborHours) return false;
            if (ActualMaterialCosts != obj.ActualMaterialCosts) return false;
            if (ActualOutsideServiceCosts != obj.ActualOutsideServiceCosts) return false;
            if (!ActualStartDate.Equals(obj.ActualStartDate)) return false;
            if (ActualTotalCosts != obj.ActualTotalCosts) return false;
            if (ApprovalRequired != obj.ApprovalRequired) return false;
            if (ApproveBy_PersonnelId != obj.ApproveBy_PersonnelId) return false;
            if (!ApproveDate.Equals(obj.ApproveDate)) return false;
            if (!CancelReason.Equals(obj.CancelReason)) return false;
            if (ChargeToId != obj.ChargeToId) return false;
            if (!ChargeType.Equals(obj.ChargeType)) return false;
            if (!ChargeTo_Name.Equals(obj.ChargeTo_Name)) return false;
            if (CloseBy_PersonnelId != obj.CloseBy_PersonnelId) return false;
            if (!CloseDate.Equals(obj.CloseDate)) return false;
            if (CompleteAllTasks != obj.CompleteAllTasks) return false;
            if (CompleteBy_PersonnelId != obj.CompleteBy_PersonnelId) return false;
            if (!CompleteComments.Equals(obj.CompleteComments)) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (Creator_PersonnelId != obj.Creator_PersonnelId) return false;
            if (!Crew.Equals(obj.Crew)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (DownRequired != obj.DownRequired) return false;
            if (EquipDown != obj.EquipDown) return false;
            if (!EquipDownDate.Equals(obj.EquipDownDate)) return false;
            if (EquipDownHours != obj.EquipDownHours) return false;
            if (!EquipUpDate.Equals(obj.EquipUpDate)) return false;
            if (EstimatedLaborCosts != obj.EstimatedLaborCosts) return false;
            if (EstimatedLaborHours != obj.EstimatedLaborHours) return false;
            if (EstimatedMaterialCosts != obj.EstimatedMaterialCosts) return false;
            if (EstimatedOutsideServiceCosts != obj.EstimatedOutsideServiceCosts) return false;
            if (EstimatedPurchaseMaterialCosts != obj.EstimatedPurchaseMaterialCosts) return false;
            if (EstimatedTotalCosts != obj.EstimatedTotalCosts) return false;
            if (!FailureCode.Equals(obj.FailureCode)) return false;
            if (!JobPlan.Equals(obj.JobPlan)) return false;
            if (Labor_AccountId != obj.Labor_AccountId) return false;
            if (!Location.Equals(obj.Location)) return false;
            if (Material_AccountId != obj.Material_AccountId) return false;
            if (MeterId != obj.MeterId) return false;
            if (MeterReadingDone != obj.MeterReadingDone) return false;
            if (MeterReadingDue != obj.MeterReadingDue) return false;
            if (Other_AccountId != obj.Other_AccountId) return false;
            if (Planner_PersonnelId != obj.Planner_PersonnelId) return false;
            if (PrevMaintBatchId != obj.PrevMaintBatchId) return false;
            if (PrimaveraProjectNumber != obj.PrimaveraProjectNumber) return false;
            if (Printed != obj.Printed) return false;
            if (!Priority.Equals(obj.Priority)) return false;
            if (ProjectId != obj.ProjectId) return false;
            if (!ReasonforDown.Equals(obj.ReasonforDown)) return false;
            if (!ReasonNotDone.Equals(obj.ReasonNotDone)) return false;
            if (ReleaseBy_PersonnelId != obj.ReleaseBy_PersonnelId) return false;
            if (!ReleaseDate.Equals(obj.ReleaseDate)) return false;
            if (!RequestDate.Equals(obj.RequestDate)) return false;
            if (Requestor_PersonnelId != obj.Requestor_PersonnelId) return false;
            if (!RequestorLocation.Equals(obj.RequestorLocation)) return false;
            if (!RequestorPhone.Equals(obj.RequestorPhone)) return false;
            if (!RequiredDate.Equals(obj.RequiredDate)) return false;
            if (RIMEAssetCriticality != obj.RIMEAssetCriticality) return false;
            if (RIMEPriority != obj.RIMEPriority) return false;
            if (RIMEWorkClass != obj.RIMEWorkClass) return false;
            if (ScheduledDuration != obj.ScheduledDuration) return false;
            if (!ScheduledFinishDate.Equals(obj.ScheduledFinishDate)) return false;
            if (!ScheduledStartDate.Equals(obj.ScheduledStartDate)) return false;
            if (Scheduler_PersonnelId != obj.Scheduler_PersonnelId) return false;
            if (!Section.Equals(obj.Section)) return false;
            if (!Shift.Equals(obj.Shift)) return false;
            if (!SignOffDate.Equals(obj.SignOffDate)) return false;
            if (SignoffBy_PersonnelId != obj.SignoffBy_PersonnelId) return false;
            if (SourceId != obj.SourceId) return false;
            if (!SourceType.Equals(obj.SourceType)) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (SuspendDuration != obj.SuspendDuration) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (WorkAssigned_PersonnelId != obj.WorkAssigned_PersonnelId) return false;
            if (!DeniedReason.Equals(obj.DeniedReason)) return false;
            if (!DeniedDate.Equals(obj.DeniedDate)) return false;
            if (DeniedBy_PersonnelId != obj.DeniedBy_PersonnelId) return false;
            if (!DeniedComment.Equals(obj.DeniedComment)) return false;
            if (EmergencyWorkOrder != obj.EmergencyWorkOrder) return false;
            if (!CancelDate.Equals(obj.CancelDate)) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (!RequestorName.Equals(obj.RequestorName)) return false;
            if (!RequestorPhoneNumber.Equals(obj.RequestorPhoneNumber)) return false;
            if (!RequestorEmail.Equals(obj.RequestorEmail)) return false;
            if (!SchedInitDate.Equals(obj.SchedInitDate)) return false;
            if (PartsOnOrder != obj.PartsOnOrder) return false;
            if (!RootCauseCode.Equals(obj.RootCauseCode)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_WorkOrder objects.
        /// </summary>
        /// <param name="obj1">b_WorkOrder object to use in the comparison.</param>
        /// <param name="obj2">b_WorkOrder object to use in the comparison.</param>
        public static bool Equals(b_WorkOrder obj1, b_WorkOrder obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}