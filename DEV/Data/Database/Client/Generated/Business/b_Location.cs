/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2014 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Location table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Location : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Location ()
        {
            ClientId = 0;
            LocationId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            Address1 = String.Empty;
            Address2 = String.Empty;
            Address3 = String.Empty;
            AddressCity = String.Empty;
            AddressPostCode = String.Empty;
            AddressState = String.Empty;
            AddressCountry = String.Empty;
            Complex = String.Empty;
            CurrentValue = 0;
            DepreciationCode = String.Empty;
            DepreciationLTD = 0;
            DepreciationPCT = 0;
            DepreciationYTD = 0;
            FacilitiyConditionIndex = 0;
            InactiveFlag = false;
            Labor_AccountId = 0;
            LifeExpectMonths = 0;
            LifeExpectYears = 0;
            Material_AccountId = 0;
            Name = String.Empty;
            OriginalCost = 0;
            ParentId = 0;
            ReplacementCost = 0;
            SquareFeet = 0;
            Type = String.Empty;
            Usage = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// LocationId property
        /// </summary>
        public long LocationId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// Address1 property
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Address2 property
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Address3 property
        /// </summary>
        public string Address3 { get; set; }

        /// <summary>
        /// AddressCity property
        /// </summary>
        public string AddressCity { get; set; }

        /// <summary>
        /// AddressPostCode property
        /// </summary>
        public string AddressPostCode { get; set; }

        /// <summary>
        /// AddressState property
        /// </summary>
        public string AddressState { get; set; }

        /// <summary>
        /// AddressCountry property
        /// </summary>
        public string AddressCountry { get; set; }

        /// <summary>
        /// Complex property
        /// </summary>
        public string Complex { get; set; }

        /// <summary>
        /// CurrentValue property
        /// </summary>
        public decimal CurrentValue { get; set; }

        /// <summary>
        /// DepreciationCode property
        /// </summary>
        public string DepreciationCode { get; set; }

        /// <summary>
        /// DepreciationLTD property
        /// </summary>
        public decimal DepreciationLTD { get; set; }

        /// <summary>
        /// DepreciationPCT property
        /// </summary>
        public decimal DepreciationPCT { get; set; }

        /// <summary>
        /// DepreciationYTD property
        /// </summary>
        public decimal DepreciationYTD { get; set; }

        /// <summary>
        /// FacilitiyConditionIndex property
        /// </summary>
        public decimal FacilitiyConditionIndex { get; set; }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        public bool InactiveFlag { get; set; }

        /// <summary>
        /// Labor_AccountId property
        /// </summary>
        public long Labor_AccountId { get; set; }

        /// <summary>
        /// LifeExpectMonths property
        /// </summary>
        public int LifeExpectMonths { get; set; }

        /// <summary>
        /// LifeExpectYears property
        /// </summary>
        public int LifeExpectYears { get; set; }

        /// <summary>
        /// Material_AccountId property
        /// </summary>
        public long Material_AccountId { get; set; }

        /// <summary>
        /// Name property
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// OriginalCost property
        /// </summary>
        public decimal OriginalCost { get; set; }

        /// <summary>
        /// ParentId property
        /// </summary>
        public long ParentId { get; set; }

        /// <summary>
        /// ReplacementCost property
        /// </summary>
        public decimal ReplacementCost { get; set; }

        /// <summary>
        /// SquareFeet property
        /// </summary>
        public decimal SquareFeet { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Usage property
        /// </summary>
        public string Usage { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }
      
        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Location object.
        /// This routine should be applied to the usp_Location_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Location_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Location object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_Location obj = new b_Location();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Location object.
        /// This routine should be applied to the usp_Location_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Location_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // LocationId column, bigint, not null
                        LocationId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // AreaId column, bigint, not null
                        AreaId = reader.GetInt64(i++);

                        // DepartmentId column, bigint, not null
                        DepartmentId = reader.GetInt64(i++);

                        // StoreroomId column, bigint, not null
                        StoreroomId = reader.GetInt64(i++);

                        // ClientLookupId column, nvarchar(31), not null
                        ClientLookupId = reader.GetString(i++);

                        // Address1 column, nvarchar(63), not null
                        Address1 = reader.GetString(i++);

                        // Address2 column, nvarchar(63), not null
                        Address2 = reader.GetString(i++);

                        // Address3 column, nvarchar(63), not null
                        Address3 = reader.GetString(i++);

                        // AddressCity column, nvarchar(63), not null
                        AddressCity = reader.GetString(i++);

                        // AddressPostCode column, nvarchar(31), not null
                        AddressPostCode = reader.GetString(i++);

                        // AddressState column, nvarchar(63), not null
                        AddressState = reader.GetString(i++);

                        // AddressCountry column, nvarchar(63), not null
                        AddressCountry = reader.GetString(i++);

                        // Complex column, nvarchar(15), not null
                        Complex = reader.GetString(i++);

                        // CurrentValue column, decimal(12,2), not null
                        CurrentValue = reader.GetDecimal(i++);

                        // DepreciationCode column, nvarchar(15), not null
                        DepreciationCode = reader.GetString(i++);

                        // DepreciationLTD column, decimal(12,2), not null
                        DepreciationLTD = reader.GetDecimal(i++);

                        // DepreciationPCT column, decimal(6,3), not null
                        DepreciationPCT = reader.GetDecimal(i++);

                        // DepreciationYTD column, decimal(12,2), not null
                        DepreciationYTD = reader.GetDecimal(i++);

                        // FacilitiyConditionIndex column, decimal(10,3), not null
                        FacilitiyConditionIndex = reader.GetDecimal(i++);

                        // InactiveFlag column, bit, not null
                        InactiveFlag = reader.GetBoolean(i++);

                        // Labor_AccountId column, bigint, not null
                        Labor_AccountId = reader.GetInt64(i++);

                        // LifeExpectMonths column, int, not null
                        LifeExpectMonths = reader.GetInt32(i++);

                        // LifeExpectYears column, int, not null
                        LifeExpectYears = reader.GetInt32(i++);

                        // Material_AccountId column, bigint, not null
                        Material_AccountId = reader.GetInt64(i++);

                        // Name column, nvarchar(63), not null
                        Name = reader.GetString(i++);

                        // OriginalCost column, decimal(12,2), not null
                        OriginalCost = reader.GetDecimal(i++);

                        // ParentId column, bigint, not null
                        ParentId = reader.GetInt64(i++);

                        // ReplacementCost column, decimal(12,2), not null
                        ReplacementCost = reader.GetDecimal(i++);

                        // SquareFeet column, decimal(12,2), not null
                        SquareFeet = reader.GetDecimal(i++);

                        // Type column, nvarchar(15), not null
                        Type = reader.GetString(i++);

                        // Usage column, nvarchar(15), not null
                        Usage = reader.GetString(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["LocationId"].ToString(); }
            catch { missing.Append("LocationId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["AreaId"].ToString(); }
            catch { missing.Append("AreaId "); }
            
            try { reader["DepartmentId"].ToString(); }
            catch { missing.Append("DepartmentId "); }
            
            try { reader["StoreroomId"].ToString(); }
            catch { missing.Append("StoreroomId "); }
            
            try { reader["ClientLookupId"].ToString(); }
            catch { missing.Append("ClientLookupId "); }
            
            try { reader["Address1"].ToString(); }
            catch { missing.Append("Address1 "); }
            
            try { reader["Address2"].ToString(); }
            catch { missing.Append("Address2 "); }
            
            try { reader["Address3"].ToString(); }
            catch { missing.Append("Address3 "); }
            
            try { reader["AddressCity"].ToString(); }
            catch { missing.Append("AddressCity "); }
            
            try { reader["AddressPostCode"].ToString(); }
            catch { missing.Append("AddressPostCode "); }
            
            try { reader["AddressState"].ToString(); }
            catch { missing.Append("AddressState "); }
            
            try { reader["AddressCountry"].ToString(); }
            catch { missing.Append("AddressCountry "); }
            
            try { reader["Complex"].ToString(); }
            catch { missing.Append("Complex "); }
            
            try { reader["CurrentValue"].ToString(); }
            catch { missing.Append("CurrentValue "); }
            
            try { reader["DepreciationCode"].ToString(); }
            catch { missing.Append("DepreciationCode "); }
            
            try { reader["DepreciationLTD"].ToString(); }
            catch { missing.Append("DepreciationLTD "); }
            
            try { reader["DepreciationPCT"].ToString(); }
            catch { missing.Append("DepreciationPCT "); }
            
            try { reader["DepreciationYTD"].ToString(); }
            catch { missing.Append("DepreciationYTD "); }
            
            try { reader["FacilitiyConditionIndex"].ToString(); }
            catch { missing.Append("FacilitiyConditionIndex "); }
            
            try { reader["InactiveFlag"].ToString(); }
            catch { missing.Append("InactiveFlag "); }
            
            try { reader["Labor_AccountId"].ToString(); }
            catch { missing.Append("Labor_AccountId "); }
            
            try { reader["LifeExpectMonths"].ToString(); }
            catch { missing.Append("LifeExpectMonths "); }
            
            try { reader["LifeExpectYears"].ToString(); }
            catch { missing.Append("LifeExpectYears "); }
            
            try { reader["Material_AccountId"].ToString(); }
            catch { missing.Append("Material_AccountId "); }
            
            try { reader["Name"].ToString(); }
            catch { missing.Append("Name "); }
            
            try { reader["OriginalCost"].ToString(); }
            catch { missing.Append("OriginalCost "); }
            
            try { reader["ParentId"].ToString(); }
            catch { missing.Append("ParentId "); }
            
            try { reader["ReplacementCost"].ToString(); }
            catch { missing.Append("ReplacementCost "); }
            
            try { reader["SquareFeet"].ToString(); }
            catch { missing.Append("SquareFeet "); }
            
            try { reader["Type"].ToString(); }
            catch { missing.Append("Type "); }
            
            try { reader["Usage"].ToString(); }
            catch { missing.Append("Usage "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a Location table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Location_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Location table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Location_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Location table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Location_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Location table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Location[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Location[] data
        )
        {
            Database.SqlClient.ProcessRow<b_Location> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Location[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Location>(reader => { b_Location obj = new b_Location(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Location_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Location[])results.ToArray(typeof(b_Location));
                }
                else
                {
                    data = new b_Location[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Location table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Location[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Location> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Location>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Location_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Location objects.
        /// </summary>
        /// <param name="obj">b_Location object to compare against the current object.</param>
        public bool Equals (b_Location obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (LocationId != obj.LocationId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!Address1.Equals(obj.Address1)) return false;
            if (!Address2.Equals(obj.Address2)) return false;
            if (!Address3.Equals(obj.Address3)) return false;
            if (!AddressCity.Equals(obj.AddressCity)) return false;
            if (!AddressPostCode.Equals(obj.AddressPostCode)) return false;
            if (!AddressState.Equals(obj.AddressState)) return false;
            if (!AddressCountry.Equals(obj.AddressCountry)) return false;
            if (!Complex.Equals(obj.Complex)) return false;
            if (CurrentValue != obj.CurrentValue) return false;
            if (!DepreciationCode.Equals(obj.DepreciationCode)) return false;
            if (DepreciationLTD != obj.DepreciationLTD) return false;
            if (DepreciationPCT != obj.DepreciationPCT) return false;
            if (DepreciationYTD != obj.DepreciationYTD) return false;
            if (FacilitiyConditionIndex != obj.FacilitiyConditionIndex) return false;
            if (InactiveFlag != obj.InactiveFlag) return false;
            if (Labor_AccountId != obj.Labor_AccountId) return false;
            if (LifeExpectMonths != obj.LifeExpectMonths) return false;
            if (LifeExpectYears != obj.LifeExpectYears) return false;
            if (Material_AccountId != obj.Material_AccountId) return false;
            if (!Name.Equals(obj.Name)) return false;
            if (OriginalCost != obj.OriginalCost) return false;
            if (ParentId != obj.ParentId) return false;
            if (ReplacementCost != obj.ReplacementCost) return false;
            if (SquareFeet != obj.SquareFeet) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (!Usage.Equals(obj.Usage)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Location objects.
        /// </summary>
        /// <param name="obj1">b_Location object to use in the comparison.</param>
        /// <param name="obj2">b_Location object to use in the comparison.</param>
        public static bool Equals (b_Location obj1, b_Location obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
