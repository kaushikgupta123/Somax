/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2015 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using Database;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Equipment_Parts_Xref table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_Equipment_Parts_Xref : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_Equipment_Parts_Xref ()
        {
            ClientId = 0;
            Equipment_Parts_XrefId = 0;
            EquipmentId = 0;
            PartId = 0;
            Comment = String.Empty;
            QuantityNeeded = 0;
            QuantityUsed = 0;
            UpdateIndex = 0;
        }

        /// <summary>
        /// Equipment_Parts_XrefId property
        /// </summary>
        public long Equipment_Parts_XrefId { get; set; }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        public long EquipmentId { get; set; }

        /// <summary>
        /// PartId property
        /// </summary>
        public long PartId { get; set; }

        /// <summary>
        /// Comment property
        /// </summary>
        public string Comment { get; set; }

        /// <summary>
        /// QuantityNeeded property
        /// </summary>
        public decimal QuantityNeeded { get; set; }

        /// <summary>
        /// QuantityUsed property
        /// </summary>
        public decimal QuantityUsed { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Equipment_Parts_Xref object.
        /// This routine should be applied to the usp_Equipment_Parts_Xref_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Equipment_Parts_Xref_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Equipment_Parts_Xref object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_Equipment_Parts_Xref obj = new b_Equipment_Parts_Xref();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Equipment_Parts_Xref object.
        /// This routine should be applied to the usp_Equipment_Parts_Xref_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Equipment_Parts_Xref_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // Equipment_Parts_XrefId column, bigint, not null
                        Equipment_Parts_XrefId = reader.GetInt64(i++);

                        // EquipmentId column, bigint, not null
                        EquipmentId = reader.GetInt64(i++);

                        // PartId column, bigint, not null
                        PartId = reader.GetInt64(i++);

                        // Comment column, nvarchar(2047), not null
                        Comment = reader.GetString(i++);

                        // QuantityNeeded column, decimal(15,6), not null
                        QuantityNeeded = reader.GetDecimal(i++);

                        // QuantityUsed column, decimal(15,6), not null
                        QuantityUsed = reader.GetDecimal(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["Equipment_Parts_XrefId"].ToString(); }
            catch { missing.Append("Equipment_Parts_XrefId "); }
            
            try { reader["EquipmentId"].ToString(); }
            catch { missing.Append("EquipmentId "); }
            
            try { reader["PartId"].ToString(); }
            catch { missing.Append("PartId "); }
            
            try { reader["Comment"].ToString(); }
            catch { missing.Append("Comment "); }
            
            try { reader["QuantityNeeded"].ToString(); }
            catch { missing.Append("QuantityNeeded "); }
            
            try { reader["QuantityUsed"].ToString(); }
            catch { missing.Append("QuantityUsed "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a Equipment_Parts_Xref table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
               Database.StoredProcedure.usp_Equipment_Parts_Xref_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Equipment_Parts_Xref table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Equipment_Parts_Xref_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the Equipment_Parts_Xref table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Equipment_Parts_Xref_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all Equipment_Parts_Xref table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_Equipment_Parts_Xref[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_Equipment_Parts_Xref[] data
        )
        {
           ProcessRow<b_Equipment_Parts_Xref> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Equipment_Parts_Xref[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Equipment_Parts_Xref>(reader => { b_Equipment_Parts_Xref obj = new b_Equipment_Parts_Xref(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Equipment_Parts_Xref_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Equipment_Parts_Xref[])results.ToArray(typeof(b_Equipment_Parts_Xref));
                }
                else
                {
                    data = new b_Equipment_Parts_Xref[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve Equipment_Parts_Xref table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_Equipment_Parts_Xref[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            ProcessRow<b_Equipment_Parts_Xref> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Equipment_Parts_Xref>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_Equipment_Parts_Xref_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_Equipment_Parts_Xref objects.
        /// </summary>
        /// <param name="obj">b_Equipment_Parts_Xref object to compare against the current object.</param>
        public bool Equals (b_Equipment_Parts_Xref obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (Equipment_Parts_XrefId != obj.Equipment_Parts_XrefId) return false;
            if (EquipmentId != obj.EquipmentId) return false;
            if (PartId != obj.PartId) return false;
            if (!Comment.Equals(obj.Comment)) return false;
            if (QuantityNeeded != obj.QuantityNeeded) return false;
            if (QuantityUsed != obj.QuantityUsed) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_Equipment_Parts_Xref objects.
        /// </summary>
        /// <param name="obj1">b_Equipment_Parts_Xref object to use in the comparison.</param>
        /// <param name="obj2">b_Equipment_Parts_Xref object to use in the comparison.</param>
        public static bool Equals (b_Equipment_Parts_Xref obj1, b_Equipment_Parts_Xref obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
