/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using Database;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the SanitationJob table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_SanitationJob : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_SanitationJob ()
        {
            ClientId = 0;
            SanitationJobId = 0;
            SanitationMasterId = 0;
            AreaId = 0;
            SiteId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            SourceType = String.Empty;
            SourceId = 0;
            ActualDuration = 0;
            AssignedTo_PersonnelId = 0;
            CancelReason = String.Empty;
            ChargeToId = 0;
            ChargeType = String.Empty;
            ChargeTo_Name = String.Empty;
            CompleteBy_PersonnelId = 0;
            CompleteComments = String.Empty;
            CompleteDate = new System.Nullable<System.DateTime>();
            Description = String.Empty;
            Shift = String.Empty;
            DownRequired = false;
            ScheduledDate = new System.Nullable<System.DateTime>();
            ScheduledDuration = 0;
            Status = String.Empty;
            Creator_PersonnelId = 0;
            ApproveBy_PersonnelId = 0;
            ApproveDate = new System.Nullable<System.DateTime>();
            DeniedBy_PersonnelId = 0;
            DeniedDate = new System.Nullable<System.DateTime>();
            DeniedReason = String.Empty;
            DeniedComment = String.Empty;
            PassBy_PersonnelId = 0;
            PassDate = new System.Nullable<System.DateTime>();
            FailBy_PersonnelId = 0;
            FailDate = new System.Nullable<System.DateTime>();
            FailReason = String.Empty;
            FailComment = String.Empty;
            SanOnDemandMasterId = 0;
            Extracted = false;
            ExportLogId = 0;
            RequiredDate = new System.Nullable<System.DateTime>();
            UpdateIndex = 0;
        }

        /// <summary>
        /// SanitationJobId property
        /// </summary>
        public long SanitationJobId { get; set; }

        /// <summary>
        /// SanitationMasterId property
        /// </summary>
        public long SanitationMasterId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// SourceType property
        /// </summary>
        public string SourceType { get; set; }

        /// <summary>
        /// SourceId property
        /// </summary>
        public long SourceId { get; set; }

        /// <summary>
        /// ActualDuration property
        /// </summary>
        public decimal ActualDuration { get; set; }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        public long AssignedTo_PersonnelId { get; set; }

        /// <summary>
        /// CancelReason property
        /// </summary>
        public string CancelReason { get; set; }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        public long ChargeToId { get; set; }

        /// <summary>
        /// ChargeType property
        /// </summary>
        public string ChargeType { get; set; }

        /// <summary>
        /// ChargeTo_Name property
        /// </summary>
        public string ChargeTo_Name { get; set; }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        public long CompleteBy_PersonnelId { get; set; }

        /// <summary>
        /// CompleteComments property
        /// </summary>
        public string CompleteComments { get; set; }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Shift property
        /// </summary>
        public string Shift { get; set; }

        /// <summary>
        /// DownRequired property
        /// </summary>
        public bool DownRequired { get; set; }

        /// <summary>
        /// ScheduledDate property
        /// </summary>
        public DateTime? ScheduledDate { get; set; }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        public decimal ScheduledDuration { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        public long Creator_PersonnelId { get; set; }

        /// <summary>
        /// ApproveBy_PersonnelId property
        /// </summary>
        public long ApproveBy_PersonnelId { get; set; }

        /// <summary>
        /// ApproveDate property
        /// </summary>
        public DateTime? ApproveDate { get; set; }

        /// <summary>
        /// DeniedBy_PersonnelId property
        /// </summary>
        public long DeniedBy_PersonnelId { get; set; }

        /// <summary>
        /// DeniedDate property
        /// </summary>
        public DateTime? DeniedDate { get; set; }

        /// <summary>
        /// DeniedReason property
        /// </summary>
        public string DeniedReason { get; set; }

        /// <summary>
        /// DeniedComment property
        /// </summary>
        public string DeniedComment { get; set; }

        /// <summary>
        /// PassBy_PersonnelId property
        /// </summary>
        public long PassBy_PersonnelId { get; set; }

        /// <summary>
        /// PassDate property
        /// </summary>
        public DateTime? PassDate { get; set; }

        /// <summary>
        /// FailBy_PersonnelId property
        /// </summary>
        public long FailBy_PersonnelId { get; set; }

        /// <summary>
        /// FailDate property
        /// </summary>
        public DateTime? FailDate { get; set; }

        /// <summary>
        /// FailReason property
        /// </summary>
        public string FailReason { get; set; }

        /// <summary>
        /// FailComment property
        /// </summary>
        public string FailComment { get; set; }

        /// <summary>
        /// SanOnDemandMasterId property
        /// </summary>
        public long SanOnDemandMasterId { get; set; }

        /// <summary>
        /// Extracted property
        /// </summary>
        public bool Extracted { get; set; }

        /// <summary>
        /// ExportLogId property
        /// </summary>
        public long ExportLogId { get; set; }

        /// <summary>
        /// RequiredDate property
        /// </summary>
        public DateTime? RequiredDate { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_SanitationJob object.
        /// This routine should be applied to the usp_SanitationJob_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_SanitationJob_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_SanitationJob object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_SanitationJob obj = new b_SanitationJob();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_SanitationJob object.
        /// This routine should be applied to the usp_SanitationJob_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_SanitationJob_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // SanitationJobId column, bigint, not null
                        SanitationJobId = reader.GetInt64(i++);

                        // SanitationMasterId column, bigint, not null
                        SanitationMasterId = reader.GetInt64(i++);

                        // AreaId column, bigint, not null
                        AreaId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // DepartmentId column, bigint, not null
                        DepartmentId = reader.GetInt64(i++);

                        // StoreroomId column, bigint, not null
                        StoreroomId = reader.GetInt64(i++);

                        // ClientLookupId column, nvarchar(15), not null
                        ClientLookupId = reader.GetString(i++);

                        // SourceType column, nvarchar(15), not null
                        SourceType = reader.GetString(i++);

                        // SourceId column, bigint, not null
                        SourceId = reader.GetInt64(i++);

                        // ActualDuration column, decimal(8,2), not null
                        ActualDuration = reader.GetDecimal(i++);

                        // AssignedTo_PersonnelId column, bigint, not null
                        AssignedTo_PersonnelId = reader.GetInt64(i++);

                        // CancelReason column, nvarchar(15), not null
                        CancelReason = reader.GetString(i++);

                        // ChargeToId column, bigint, not null
                        ChargeToId = reader.GetInt64(i++);

                        // ChargeType column, nvarchar(15), not null
                        ChargeType = reader.GetString(i++);

                        // ChargeTo_Name column, nvarchar(63), not null
                        ChargeTo_Name = reader.GetString(i++);

                        // CompleteBy_PersonnelId column, bigint, not null
                        CompleteBy_PersonnelId = reader.GetInt64(i++);

                        // CompleteComments column, nvarchar(MAX), not null
                        CompleteComments = reader.GetString(i++);

            // CompleteDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    CompleteDate = reader.GetDateTime(i);
            }
            else
            {
                    CompleteDate = DateTime.MinValue;
            }
            i++;
                        // Description column, nvarchar(MAX), not null
                        Description = reader.GetString(i++);

                        // Shift column, nvarchar(15), not null
                        Shift = reader.GetString(i++);

                        // DownRequired column, bit, not null
                        DownRequired = reader.GetBoolean(i++);

            // ScheduledDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ScheduledDate = reader.GetDateTime(i);
            }
            else
            {
                    ScheduledDate = DateTime.MinValue;
            }
            i++;
                        // ScheduledDuration column, decimal(8,2), not null
                        ScheduledDuration = reader.GetDecimal(i++);

                        // Status column, nvarchar(15), not null
                        Status = reader.GetString(i++);

                        // Creator_PersonnelId column, bigint, not null
                        Creator_PersonnelId = reader.GetInt64(i++);

                        // ApproveBy_PersonnelId column, bigint, not null
                        ApproveBy_PersonnelId = reader.GetInt64(i++);

            // ApproveDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    ApproveDate = reader.GetDateTime(i);
            }
            else
            {
                    ApproveDate = DateTime.MinValue;
            }
            i++;
                        // DeniedBy_PersonnelId column, bigint, not null
                        DeniedBy_PersonnelId = reader.GetInt64(i++);

            // DeniedDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    DeniedDate = reader.GetDateTime(i);
            }
            else
            {
                    DeniedDate = DateTime.MinValue;
            }
            i++;
                        // DeniedReason column, nvarchar(15), not null
                        DeniedReason = reader.GetString(i++);

                        // DeniedComment column, nvarchar(500), not null
                        DeniedComment = reader.GetString(i++);

                        // PassBy_PersonnelId column, bigint, not null
                        PassBy_PersonnelId = reader.GetInt64(i++);

            // PassDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    PassDate = reader.GetDateTime(i);
            }
            else
            {
                    PassDate = DateTime.MinValue;
            }
            i++;
                        // FailBy_PersonnelId column, bigint, not null
                        FailBy_PersonnelId = reader.GetInt64(i++);

            // FailDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    FailDate = reader.GetDateTime(i);
            }
            else
            {
                    FailDate = DateTime.MinValue;
            }
            i++;
                        // FailReason column, nvarchar(15), not null
                        FailReason = reader.GetString(i++);

                        // FailComment column, nvarchar(500), not null
                        FailComment = reader.GetString(i++);

                        // SanOnDemandMasterId column, bigint, not null
                        SanOnDemandMasterId = reader.GetInt64(i++);

                        // Extracted column, bit, not null
                        Extracted = reader.GetBoolean(i++);

                        // ExportLogId column, bigint, not null
                        ExportLogId = reader.GetInt64(i++);

            // RequiredDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    RequiredDate = reader.GetDateTime(i);
            }
            else
            {
                    RequiredDate = DateTime.MinValue;
            }
            i++;
                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["SanitationJobId"].ToString(); }
            catch { missing.Append("SanitationJobId "); }
            
            try { reader["SanitationMasterId"].ToString(); }
            catch { missing.Append("SanitationMasterId "); }
            
            try { reader["AreaId"].ToString(); }
            catch { missing.Append("AreaId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["DepartmentId"].ToString(); }
            catch { missing.Append("DepartmentId "); }
            
            try { reader["StoreroomId"].ToString(); }
            catch { missing.Append("StoreroomId "); }
            
            try { reader["ClientLookupId"].ToString(); }
            catch { missing.Append("ClientLookupId "); }
            
            try { reader["SourceType"].ToString(); }
            catch { missing.Append("SourceType "); }
            
            try { reader["SourceId"].ToString(); }
            catch { missing.Append("SourceId "); }
            
            try { reader["ActualDuration"].ToString(); }
            catch { missing.Append("ActualDuration "); }
            
            try { reader["AssignedTo_PersonnelId"].ToString(); }
            catch { missing.Append("AssignedTo_PersonnelId "); }
            
            try { reader["CancelReason"].ToString(); }
            catch { missing.Append("CancelReason "); }
            
            try { reader["ChargeToId"].ToString(); }
            catch { missing.Append("ChargeToId "); }
            
            try { reader["ChargeType"].ToString(); }
            catch { missing.Append("ChargeType "); }
            
            try { reader["ChargeTo_Name"].ToString(); }
            catch { missing.Append("ChargeTo_Name "); }
            
            try { reader["CompleteBy_PersonnelId"].ToString(); }
            catch { missing.Append("CompleteBy_PersonnelId "); }
            
            try { reader["CompleteComments"].ToString(); }
            catch { missing.Append("CompleteComments "); }
            
            try { reader["CompleteDate"].ToString(); }
            catch { missing.Append("CompleteDate "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["Shift"].ToString(); }
            catch { missing.Append("Shift "); }
            
            try { reader["DownRequired"].ToString(); }
            catch { missing.Append("DownRequired "); }
            
            try { reader["ScheduledDate"].ToString(); }
            catch { missing.Append("ScheduledDate "); }
            
            try { reader["ScheduledDuration"].ToString(); }
            catch { missing.Append("ScheduledDuration "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
            try { reader["Creator_PersonnelId"].ToString(); }
            catch { missing.Append("Creator_PersonnelId "); }
            
            try { reader["ApproveBy_PersonnelId"].ToString(); }
            catch { missing.Append("ApproveBy_PersonnelId "); }
            
            try { reader["ApproveDate"].ToString(); }
            catch { missing.Append("ApproveDate "); }
            
            try { reader["DeniedBy_PersonnelId"].ToString(); }
            catch { missing.Append("DeniedBy_PersonnelId "); }
            
            try { reader["DeniedDate"].ToString(); }
            catch { missing.Append("DeniedDate "); }
            
            try { reader["DeniedReason"].ToString(); }
            catch { missing.Append("DeniedReason "); }
            
            try { reader["DeniedComment"].ToString(); }
            catch { missing.Append("DeniedComment "); }
            
            try { reader["PassBy_PersonnelId"].ToString(); }
            catch { missing.Append("PassBy_PersonnelId "); }
            
            try { reader["PassDate"].ToString(); }
            catch { missing.Append("PassDate "); }
            
            try { reader["FailBy_PersonnelId"].ToString(); }
            catch { missing.Append("FailBy_PersonnelId "); }
            
            try { reader["FailDate"].ToString(); }
            catch { missing.Append("FailDate "); }
            
            try { reader["FailReason"].ToString(); }
            catch { missing.Append("FailReason "); }
            
            try { reader["FailComment"].ToString(); }
            catch { missing.Append("FailComment "); }
            
            try { reader["SanOnDemandMasterId"].ToString(); }
            catch { missing.Append("SanOnDemandMasterId "); }
            
            try { reader["Extracted"].ToString(); }
            catch { missing.Append("Extracted "); }
            
            try { reader["ExportLogId"].ToString(); }
            catch { missing.Append("ExportLogId "); }
            
            try { reader["RequiredDate"].ToString(); }
            catch { missing.Append("RequiredDate "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a SanitationJob table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
               
                Database.StoredProcedure.usp_SanitationJob_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the SanitationJob table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SanitationJob_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the SanitationJob table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SanitationJob_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all SanitationJob table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_SanitationJob[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_SanitationJob[] data
        )
        {
            Database.SqlClient.ProcessRow<b_SanitationJob> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_SanitationJob[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SanitationJob>(reader => { b_SanitationJob obj = new b_SanitationJob(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_SanitationJob_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_SanitationJob[])results.ToArray(typeof(b_SanitationJob));
                }
                else
                {
                    data = new b_SanitationJob[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve SanitationJob table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_SanitationJob[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_SanitationJob> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SanitationJob>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_SanitationJob_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_SanitationJob objects.
        /// </summary>
        /// <param name="obj">b_SanitationJob object to compare against the current object.</param>
        public bool Equals (b_SanitationJob obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (SanitationJobId != obj.SanitationJobId) return false;
            if (SanitationMasterId != obj.SanitationMasterId) return false;
            if (AreaId != obj.AreaId) return false;
            if (SiteId != obj.SiteId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (!SourceType.Equals(obj.SourceType)) return false;
            if (SourceId != obj.SourceId) return false;
            if (ActualDuration != obj.ActualDuration) return false;
            if (AssignedTo_PersonnelId != obj.AssignedTo_PersonnelId) return false;
            if (!CancelReason.Equals(obj.CancelReason)) return false;
            if (ChargeToId != obj.ChargeToId) return false;
            if (!ChargeType.Equals(obj.ChargeType)) return false;
            if (!ChargeTo_Name.Equals(obj.ChargeTo_Name)) return false;
            if (CompleteBy_PersonnelId != obj.CompleteBy_PersonnelId) return false;
            if (!CompleteComments.Equals(obj.CompleteComments)) return false;
            if (!CompleteDate.Equals(obj.CompleteDate)) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!Shift.Equals(obj.Shift)) return false;
            if (DownRequired != obj.DownRequired) return false;
            if (!ScheduledDate.Equals(obj.ScheduledDate)) return false;
            if (ScheduledDuration != obj.ScheduledDuration) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (Creator_PersonnelId != obj.Creator_PersonnelId) return false;
            if (ApproveBy_PersonnelId != obj.ApproveBy_PersonnelId) return false;
            if (!ApproveDate.Equals(obj.ApproveDate)) return false;
            if (DeniedBy_PersonnelId != obj.DeniedBy_PersonnelId) return false;
            if (!DeniedDate.Equals(obj.DeniedDate)) return false;
            if (!DeniedReason.Equals(obj.DeniedReason)) return false;
            if (!DeniedComment.Equals(obj.DeniedComment)) return false;
            if (PassBy_PersonnelId != obj.PassBy_PersonnelId) return false;
            if (!PassDate.Equals(obj.PassDate)) return false;
            if (FailBy_PersonnelId != obj.FailBy_PersonnelId) return false;
            if (!FailDate.Equals(obj.FailDate)) return false;
            if (!FailReason.Equals(obj.FailReason)) return false;
            if (!FailComment.Equals(obj.FailComment)) return false;
            if (SanOnDemandMasterId != obj.SanOnDemandMasterId) return false;
            if (Extracted != obj.Extracted) return false;
            if (ExportLogId != obj.ExportLogId) return false;
            if (!RequiredDate.Equals(obj.RequiredDate)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_SanitationJob objects.
        /// </summary>
        /// <param name="obj1">b_SanitationJob object to use in the comparison.</param>
        /// <param name="obj2">b_SanitationJob object to use in the comparison.</param>
        public static bool Equals (b_SanitationJob obj1, b_SanitationJob obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
