/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using Database;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the InvoiceMatchHeader table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_InvoiceMatchHeader : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_InvoiceMatchHeader()
        {
            ClientId = 0;
            InvoiceMatchHeaderId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            ClientLookupId = String.Empty;
            AuthorizedToPay = false;
            AuthorizedToPayDate = new System.Nullable<System.DateTime>();
            AuthorizedToPay_PersonnelId = 0;
            Creator_PersonnelId = 0;
            DueDate = new System.Nullable<System.DateTime>();
            OverrideCode = String.Empty;
            OverrideComments = String.Empty;
            PurchaseOrderId = 0;
            ReceiptDate = new System.Nullable<System.DateTime>();
            Responsible_PersonnelId = 0;
            ShipAmount = 0;
            Status = String.Empty;
            TaxAmount = 0;
            TotalInput = 0;
            Type = String.Empty;
            InvoiceDate = new System.Nullable<System.DateTime>();
            VendorId = 0;
            Paid = false;
            PaidDate = new System.Nullable<System.DateTime>();
            Paid_PersonnelId = 0;
            IsExternal = false;
            UpdateIndex = 0;
        }

        /// <summary>
        /// InvoiceMatchHeaderId property
        /// </summary>
        public long InvoiceMatchHeaderId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        public string ClientLookupId { get; set; }

        /// <summary>
        /// AuthorizedToPay property
        /// </summary>
        public bool AuthorizedToPay { get; set; }

        /// <summary>
        /// AuthorizedToPayDate property
        /// </summary>
        public DateTime? AuthorizedToPayDate { get; set; }

        /// <summary>
        /// AuthorizedToPay_PersonnelId property
        /// </summary>
        public long AuthorizedToPay_PersonnelId { get; set; }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        public long Creator_PersonnelId { get; set; }

        /// <summary>
        /// DueDate property
        /// </summary>
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// OverrideCode property
        /// </summary>
        public string OverrideCode { get; set; }

        /// <summary>
        /// OverrideComments property
        /// </summary>
        public string OverrideComments { get; set; }

        /// <summary>
        /// PurchaseOrderId property
        /// </summary>
        public long PurchaseOrderId { get; set; }

        /// <summary>
        /// ReceiptDate property
        /// </summary>
        public DateTime? ReceiptDate { get; set; }

        /// <summary>
        /// Responsible_PersonnelId property
        /// </summary>
        public long Responsible_PersonnelId { get; set; }

        /// <summary>
        /// ShipAmount property
        /// </summary>
        public decimal ShipAmount { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// TaxAmount property
        /// </summary>
        public decimal TaxAmount { get; set; }

        /// <summary>
        /// TotalInput property
        /// </summary>
        public decimal TotalInput { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// InvoiceDate property
        /// </summary>
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// VendorId property
        /// </summary>
        public long VendorId { get; set; }

        /// <summary>
        /// Paid property
        /// </summary>
        public bool Paid { get; set; }

        /// <summary>
        /// PaidDate property
        /// </summary>
        public DateTime? PaidDate { get; set; }

        /// <summary>
        /// Paid_PersonnelId property
        /// </summary>
        public long Paid_PersonnelId { get; set; }

        /// <summary>
        /// IsExternal property
        /// </summary>
        public bool IsExternal { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public long UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_InvoiceMatchHeader object.
        /// This routine should be applied to the usp_InvoiceMatchHeader_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_InvoiceMatchHeader_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_InvoiceMatchHeader object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_InvoiceMatchHeader obj = new b_InvoiceMatchHeader();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_InvoiceMatchHeader object.
        /// This routine should be applied to the usp_InvoiceMatchHeader_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_InvoiceMatchHeader_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // InvoiceMatchHeaderId column, bigint, not null
                InvoiceMatchHeaderId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(31), not null
                ClientLookupId = reader.GetString(i++);

                // AuthorizedToPay column, bit, not null
                AuthorizedToPay = reader.GetBoolean(i++);

                // AuthorizedToPayDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    AuthorizedToPayDate = reader.GetDateTime(i);
                }
                else
                {
                    AuthorizedToPayDate = DateTime.MinValue;
                }
                i++;
                // AuthorizedToPay_PersonnelId column, bigint, not null
                AuthorizedToPay_PersonnelId = reader.GetInt64(i++);

                // Creator_PersonnelId column, bigint, not null
                Creator_PersonnelId = reader.GetInt64(i++);

                // DueDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DueDate = reader.GetDateTime(i);
                }
                else
                {
                    DueDate = DateTime.MinValue;
                }
                i++;
                // OverrideCode column, nvarchar(15), not null
                OverrideCode = reader.GetString(i++);

                // OverrideComments column, nvarchar(255), not null
                OverrideComments = reader.GetString(i++);

                // PurchaseOrderId column, bigint, not null
                PurchaseOrderId = reader.GetInt64(i++);

                // ReceiptDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ReceiptDate = reader.GetDateTime(i);
                }
                else
                {
                    ReceiptDate = DateTime.MinValue;
                }
                i++;
                // Responsible_PersonnelId column, bigint, not null
                Responsible_PersonnelId = reader.GetInt64(i++);

                // ShipAmount column, decimal(15,2), not null
                ShipAmount = reader.GetDecimal(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // TaxAmount column, decimal(15,2), not null
                TaxAmount = reader.GetDecimal(i++);

                // TotalInput column, decimal(15,2), not null
                TotalInput = reader.GetDecimal(i++);

                // Type column, nvarchar(15), not null
                Type = reader.GetString(i++);

                // InvoiceDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    InvoiceDate = reader.GetDateTime(i);
                }
                else
                {
                    InvoiceDate = DateTime.MinValue;
                }
                i++;
                // VendorId column, bigint, not null
                VendorId = reader.GetInt64(i++);

                // Paid column, bit, not null
                Paid = reader.GetBoolean(i++);

                // PaidDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    PaidDate = reader.GetDateTime(i);
                }
                else
                {
                    PaidDate = DateTime.MinValue;
                }
                i++;
                // Paid_PersonnelId column, bigint, not null
                Paid_PersonnelId = reader.GetInt64(i++);

                // IsExternal column, bit, not null
                IsExternal = reader.GetBoolean(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["InvoiceMatchHeaderId"].ToString(); }
                catch { missing.Append("InvoiceMatchHeaderId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["AuthorizedToPay"].ToString(); }
                catch { missing.Append("AuthorizedToPay "); }

                try { reader["AuthorizedToPayDate"].ToString(); }
                catch { missing.Append("AuthorizedToPayDate "); }

                try { reader["AuthorizedToPay_PersonnelId"].ToString(); }
                catch { missing.Append("AuthorizedToPay_PersonnelId "); }

                try { reader["Creator_PersonnelId"].ToString(); }
                catch { missing.Append("Creator_PersonnelId "); }

                try { reader["DueDate"].ToString(); }
                catch { missing.Append("DueDate "); }

                try { reader["OverrideCode"].ToString(); }
                catch { missing.Append("OverrideCode "); }

                try { reader["OverrideComments"].ToString(); }
                catch { missing.Append("OverrideComments "); }

                try { reader["PurchaseOrderId"].ToString(); }
                catch { missing.Append("PurchaseOrderId "); }

                try { reader["ReceiptDate"].ToString(); }
                catch { missing.Append("ReceiptDate "); }

                try { reader["Responsible_PersonnelId"].ToString(); }
                catch { missing.Append("Responsible_PersonnelId "); }

                try { reader["ShipAmount"].ToString(); }
                catch { missing.Append("ShipAmount "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["TaxAmount"].ToString(); }
                catch { missing.Append("TaxAmount "); }

                try { reader["TotalInput"].ToString(); }
                catch { missing.Append("TotalInput "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["InvoiceDate"].ToString(); }
                catch { missing.Append("InvoiceDate "); }

                try { reader["VendorId"].ToString(); }
                catch { missing.Append("VendorId "); }

                try { reader["Paid"].ToString(); }
                catch { missing.Append("Paid "); }

                try { reader["PaidDate"].ToString(); }
                catch { missing.Append("PaidDate "); }

                try { reader["Paid_PersonnelId"].ToString(); }
                catch { missing.Append("Paid_PersonnelId "); }

                try { reader["IsExternal"].ToString(); }
                catch { missing.Append("IsExternal "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a InvoiceMatchHeader table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_InvoiceMatchHeader_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the InvoiceMatchHeader table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_InvoiceMatchHeader_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the InvoiceMatchHeader table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_InvoiceMatchHeader_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all InvoiceMatchHeader table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_InvoiceMatchHeader[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_InvoiceMatchHeader[] data
        )
        {
            Database.SqlClient.ProcessRow<b_InvoiceMatchHeader> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_InvoiceMatchHeader[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_InvoiceMatchHeader>(reader => { b_InvoiceMatchHeader obj = new b_InvoiceMatchHeader(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_InvoiceMatchHeader_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_InvoiceMatchHeader[])results.ToArray(typeof(b_InvoiceMatchHeader));
                }
                else
                {
                    data = new b_InvoiceMatchHeader[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve InvoiceMatchHeader table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_InvoiceMatchHeader[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_InvoiceMatchHeader> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_InvoiceMatchHeader>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_InvoiceMatchHeader_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_InvoiceMatchHeader objects.
        /// </summary>
        /// <param name="obj">b_InvoiceMatchHeader object to compare against the current object.</param>
        public bool Equals(b_InvoiceMatchHeader obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (InvoiceMatchHeaderId != obj.InvoiceMatchHeaderId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!ClientLookupId.Equals(obj.ClientLookupId)) return false;
            if (AuthorizedToPay != obj.AuthorizedToPay) return false;
            if (!AuthorizedToPayDate.Equals(obj.AuthorizedToPayDate)) return false;
            if (AuthorizedToPay_PersonnelId != obj.AuthorizedToPay_PersonnelId) return false;
            if (Creator_PersonnelId != obj.Creator_PersonnelId) return false;
            if (!DueDate.Equals(obj.DueDate)) return false;
            if (!OverrideCode.Equals(obj.OverrideCode)) return false;
            if (!OverrideComments.Equals(obj.OverrideComments)) return false;
            if (PurchaseOrderId != obj.PurchaseOrderId) return false;
            if (!ReceiptDate.Equals(obj.ReceiptDate)) return false;
            if (Responsible_PersonnelId != obj.Responsible_PersonnelId) return false;
            if (ShipAmount != obj.ShipAmount) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (TaxAmount != obj.TaxAmount) return false;
            if (TotalInput != obj.TotalInput) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (!InvoiceDate.Equals(obj.InvoiceDate)) return false;
            if (VendorId != obj.VendorId) return false;
            if (Paid != obj.Paid) return false;
            if (!PaidDate.Equals(obj.PaidDate)) return false;
            if (Paid_PersonnelId != obj.Paid_PersonnelId) return false;
            if (IsExternal != obj.IsExternal) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_InvoiceMatchHeader objects.
        /// </summary>
        /// <param name="obj1">b_InvoiceMatchHeader object to use in the comparison.</param>
        /// <param name="obj2">b_InvoiceMatchHeader object to use in the comparison.</param>
        public static bool Equals(b_InvoiceMatchHeader obj1, b_InvoiceMatchHeader obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
