/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the POImport2 table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_POImport2 : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_POImport2 ()
        {
            ClientId = 0;
            POImport2Id = 0;
            SiteId = 0;
            PurchaseOrder = String.Empty;
            ExPurchaseOrderId = 0;
            PurchaseRequest = String.Empty;
            PurchaseRequestId = 0;
            ExRequest = String.Empty;
            Required = new System.Nullable<System.DateTime>();
            POCreateDate = new System.Nullable<System.DateTime>();
            Currency = String.Empty;
            ExVendor = String.Empty;
            ExVendorId = 0;
            ExVendorSiteId = 0;
            PRLineItemId = 0;
            LineNumber = 0;
            ExPurchaseOrderLineId = 0;
            ExPart = String.Empty;
            ExPartId = 0;
            Description = String.Empty;
            Category = String.Empty;
            PurchaseQuantity = 0;
            PurchaseUOM = String.Empty;
            UnitCost = 0;
            UOMConversion = 0;
            WorkOrder = String.Empty;
            LineStatus = String.Empty;
            ErrorMessage = String.Empty;
            LastProcess = new System.Nullable<System.DateTime>();
            Revision = 0;
            PaymentTerms = String.Empty;
            BillToAddress1 = String.Empty;
            BillToAddress2 = String.Empty;
            BillToCity = String.Empty;
            BillToState = String.Empty;
            BillToZip = String.Empty;
            BillToCountry = String.Empty;
            ShipToAddress1 = String.Empty;
            ShipToAddress2 = String.Empty;
            ShipToCity = String.Empty;
            ShipToState = String.Empty;
            ShipToZip = String.Empty;
            ShipToCountry = String.Empty;
            POBuyer_PersonnelId = 0;
            POCreator_PersonnelId = 0;
            VendorAutoEmail = false;
            VendorEmailAddress = String.Empty;
            PurchaseOrderId = 0;
            ExpenseAccount = String.Empty;
            UpdateIndex = 0;
        }

        /// <summary>
        /// POImport2Id property
        /// </summary>
        public long POImport2Id { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// PurchaseOrder property
        /// </summary>
        public string PurchaseOrder { get; set; }

        /// <summary>
        /// ExPurchaseOrderId property
        /// </summary>
        public long ExPurchaseOrderId { get; set; }

        /// <summary>
        /// PurchaseRequest property
        /// </summary>
        public string PurchaseRequest { get; set; }

        /// <summary>
        /// PurchaseRequestId property
        /// </summary>
        public long PurchaseRequestId { get; set; }

        /// <summary>
        /// ExRequest property
        /// </summary>
        public string ExRequest { get; set; }

        /// <summary>
        /// Required property
        /// </summary>
        public DateTime? Required { get; set; }

        /// <summary>
        /// POCreateDate property
        /// </summary>
        public DateTime? POCreateDate { get; set; }

        /// <summary>
        /// Currency property
        /// </summary>
        public string Currency { get; set; }

        /// <summary>
        /// ExVendor property
        /// </summary>
        public string ExVendor { get; set; }

        /// <summary>
        /// ExVendorId property
        /// </summary>
        public long ExVendorId { get; set; }

        /// <summary>
        /// ExVendorSiteId property
        /// </summary>
        public long ExVendorSiteId { get; set; }

        /// <summary>
        /// PRLineItemId property
        /// </summary>
        public long PRLineItemId { get; set; }

        /// <summary>
        /// LineNumber property
        /// </summary>
        public int LineNumber { get; set; }

        /// <summary>
        /// ExPurchaseOrderLineId property
        /// </summary>
        public long ExPurchaseOrderLineId { get; set; }

        /// <summary>
        /// ExPart property
        /// </summary>
        public string ExPart { get; set; }

        /// <summary>
        /// ExPartId property
        /// </summary>
        public long ExPartId { get; set; }

        /// <summary>
        /// Description property
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Category property
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// PurchaseQuantity property
        /// </summary>
        public decimal PurchaseQuantity { get; set; }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        public string PurchaseUOM { get; set; }

        /// <summary>
        /// UnitCost property
        /// </summary>
        public decimal UnitCost { get; set; }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        public decimal UOMConversion { get; set; }

        /// <summary>
        /// WorkOrder property
        /// </summary>
        public string WorkOrder { get; set; }

        /// <summary>
        /// LineStatus property
        /// </summary>
        public string LineStatus { get; set; }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        public string ErrorMessage { get; set; }

        /// <summary>
        /// LastProcess property
        /// </summary>
        public DateTime? LastProcess { get; set; }

        /// <summary>
        /// Revision property
        /// </summary>
        public int Revision { get; set; }

        /// <summary>
        /// PaymentTerms property
        /// </summary>
        public string PaymentTerms { get; set; }

        /// <summary>
        /// BillToAddress1 property
        /// </summary>
        public string BillToAddress1 { get; set; }

        /// <summary>
        /// BillToAddress2 property
        /// </summary>
        public string BillToAddress2 { get; set; }

        /// <summary>
        /// BillToCity property
        /// </summary>
        public string BillToCity { get; set; }

        /// <summary>
        /// BillToState property
        /// </summary>
        public string BillToState { get; set; }

        /// <summary>
        /// BillToZip property
        /// </summary>
        public string BillToZip { get; set; }

        /// <summary>
        /// BillToCountry property
        /// </summary>
        public string BillToCountry { get; set; }

        /// <summary>
        /// ShipToAddress1 property
        /// </summary>
        public string ShipToAddress1 { get; set; }

        /// <summary>
        /// ShipToAddress2 property
        /// </summary>
        public string ShipToAddress2 { get; set; }

        /// <summary>
        /// ShipToCity property
        /// </summary>
        public string ShipToCity { get; set; }

        /// <summary>
        /// ShipToState property
        /// </summary>
        public string ShipToState { get; set; }

        /// <summary>
        /// ShipToZip property
        /// </summary>
        public string ShipToZip { get; set; }

        /// <summary>
        /// ShipToCountry property
        /// </summary>
        public string ShipToCountry { get; set; }

        /// <summary>
        /// POBuyer_PersonnelId property
        /// </summary>
        public long POBuyer_PersonnelId { get; set; }

        /// <summary>
        /// POCreator_PersonnelId property
        /// </summary>
        public long POCreator_PersonnelId { get; set; }

        /// <summary>
        /// VendorAutoEmail property
        /// </summary>
        public bool VendorAutoEmail { get; set; }

        /// <summary>
        /// VendorEmailAddress property
        /// </summary>
        public string VendorEmailAddress { get; set; }

        /// <summary>
        /// PurchaseOrderId property
        /// </summary>
        public long PurchaseOrderId { get; set; }

        /// <summary>
        /// ExpenseAccount property
        /// </summary>
        public string ExpenseAccount { get; set; }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        public int UpdateIndex { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_POImport2 object.
        /// This routine should be applied to the usp_POImport2_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POImport2_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_POImport2 object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_POImport2 obj = new b_POImport2();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_POImport2 object.
        /// This routine should be applied to the usp_POImport2_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_POImport2_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // POImport2Id column, bigint, not null
                        POImport2Id = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // PurchaseOrder column, nvarchar(31), not null
                        PurchaseOrder = reader.GetString(i++);

                        // ExPurchaseOrderId column, bigint, not null
                        ExPurchaseOrderId = reader.GetInt64(i++);

                        // PurchaseRequest column, nvarchar(15), not null
                        PurchaseRequest = reader.GetString(i++);

                        // PurchaseRequestId column, bigint, not null
                        PurchaseRequestId = reader.GetInt64(i++);

                        // ExRequest column, nvarchar(20), not null
                        ExRequest = reader.GetString(i++);

            // Required column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    Required = reader.GetDateTime(i);
            }
            else
            {
                    Required = DateTime.MinValue;
            }
            i++;
            // POCreateDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    POCreateDate = reader.GetDateTime(i);
            }
            else
            {
                    POCreateDate = DateTime.MinValue;
            }
            i++;
                        // Currency column, nvarchar(15), not null
                        Currency = reader.GetString(i++);

                        // ExVendor column, nvarchar(31), not null
                        ExVendor = reader.GetString(i++);

                        // ExVendorId column, bigint, not null
                        ExVendorId = reader.GetInt64(i++);

                        // ExVendorSiteId column, bigint, not null
                        ExVendorSiteId = reader.GetInt64(i++);

                        // PRLineItemId column, bigint, not null
                        PRLineItemId = reader.GetInt64(i++);

                        // LineNumber column, int, not null
                        LineNumber = reader.GetInt32(i++);

                        // ExPurchaseOrderLineId column, bigint, not null
                        ExPurchaseOrderLineId = reader.GetInt64(i++);

                        // ExPart column, nvarchar(31), not null
                        ExPart = reader.GetString(i++);

                        // ExPartId column, bigint, not null
                        ExPartId = reader.GetInt64(i++);

                        // Description column, nvarchar(255), not null
                        Description = reader.GetString(i++);

                        // Category column, nvarchar(255), not null
                        Category = reader.GetString(i++);

                        // PurchaseQuantity column, decimal(15,6), not null
                        PurchaseQuantity = reader.GetDecimal(i++);

                        // PurchaseUOM column, nvarchar(15), not null
                        PurchaseUOM = reader.GetString(i++);

                        // UnitCost column, decimal(15,6), not null
                        UnitCost = reader.GetDecimal(i++);

                        // UOMConversion column, decimal(15,6), not null
                        UOMConversion = reader.GetDecimal(i++);

                        // WorkOrder column, nvarchar(15), not null
                        WorkOrder = reader.GetString(i++);

                        // LineStatus column, nvarchar(31), not null
                        LineStatus = reader.GetString(i++);

                        // ErrorMessage column, nvarchar(511), not null
                        ErrorMessage = reader.GetString(i++);

            // LastProcess column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastProcess = reader.GetDateTime(i);
            }
            else
            {
                    LastProcess = DateTime.MinValue;
            }
            i++;
                        // Revision column, int, not null
                        Revision = reader.GetInt32(i++);

                        // PaymentTerms column, nvarchar(50), not null
                        PaymentTerms = reader.GetString(i++);

                        // BillToAddress1 column, nvarchar(240), not null
                        BillToAddress1 = reader.GetString(i++);

                        // BillToAddress2 column, nvarchar(240), not null
                        BillToAddress2 = reader.GetString(i++);

                        // BillToCity column, nvarchar(30), not null
                        BillToCity = reader.GetString(i++);

                        // BillToState column, nvarchar(120), not null
                        BillToState = reader.GetString(i++);

                        // BillToZip column, nvarchar(30), not null
                        BillToZip = reader.GetString(i++);

                        // BillToCountry column, nvarchar(60), not null
                        BillToCountry = reader.GetString(i++);

                        // ShipToAddress1 column, nvarchar(240), not null
                        ShipToAddress1 = reader.GetString(i++);

                        // ShipToAddress2 column, nvarchar(240), not null
                        ShipToAddress2 = reader.GetString(i++);

                        // ShipToCity column, nvarchar(30), not null
                        ShipToCity = reader.GetString(i++);

                        // ShipToState column, nvarchar(120), not null
                        ShipToState = reader.GetString(i++);

                        // ShipToZip column, nvarchar(30), not null
                        ShipToZip = reader.GetString(i++);

                        // ShipToCountry column, nvarchar(60), not null
                        ShipToCountry = reader.GetString(i++);

                        // POBuyer_PersonnelId column, bigint, not null
                        POBuyer_PersonnelId = reader.GetInt64(i++);

                        // POCreator_PersonnelId column, bigint, not null
                        POCreator_PersonnelId = reader.GetInt64(i++);

                        // VendorAutoEmail column, bit, not null
                        VendorAutoEmail = reader.GetBoolean(i++);

                        // VendorEmailAddress column, nvarchar(63), not null
                        VendorEmailAddress = reader.GetString(i++);

                        // PurchaseOrderId column, bigint, not null
                        PurchaseOrderId = reader.GetInt64(i++);

                        // ExpenseAccount column, nvarchar(63), not null
                        ExpenseAccount = reader.GetString(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["POImport2Id"].ToString(); }
            catch { missing.Append("POImport2Id "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["PurchaseOrder"].ToString(); }
            catch { missing.Append("PurchaseOrder "); }
            
            try { reader["ExPurchaseOrderId"].ToString(); }
            catch { missing.Append("ExPurchaseOrderId "); }
            
            try { reader["PurchaseRequest"].ToString(); }
            catch { missing.Append("PurchaseRequest "); }
            
            try { reader["PurchaseRequestId"].ToString(); }
            catch { missing.Append("PurchaseRequestId "); }
            
            try { reader["ExRequest"].ToString(); }
            catch { missing.Append("ExRequest "); }
            
            try { reader["Required"].ToString(); }
            catch { missing.Append("Required "); }
            
            try { reader["POCreateDate"].ToString(); }
            catch { missing.Append("POCreateDate "); }
            
            try { reader["Currency"].ToString(); }
            catch { missing.Append("Currency "); }
            
            try { reader["ExVendor"].ToString(); }
            catch { missing.Append("ExVendor "); }
            
            try { reader["ExVendorId"].ToString(); }
            catch { missing.Append("ExVendorId "); }
            
            try { reader["ExVendorSiteId"].ToString(); }
            catch { missing.Append("ExVendorSiteId "); }
            
            try { reader["PRLineItemId"].ToString(); }
            catch { missing.Append("PRLineItemId "); }
            
            try { reader["LineNumber"].ToString(); }
            catch { missing.Append("LineNumber "); }
            
            try { reader["ExPurchaseOrderLineId"].ToString(); }
            catch { missing.Append("ExPurchaseOrderLineId "); }
            
            try { reader["ExPart"].ToString(); }
            catch { missing.Append("ExPart "); }
            
            try { reader["ExPartId"].ToString(); }
            catch { missing.Append("ExPartId "); }
            
            try { reader["Description"].ToString(); }
            catch { missing.Append("Description "); }
            
            try { reader["Category"].ToString(); }
            catch { missing.Append("Category "); }
            
            try { reader["PurchaseQuantity"].ToString(); }
            catch { missing.Append("PurchaseQuantity "); }
            
            try { reader["PurchaseUOM"].ToString(); }
            catch { missing.Append("PurchaseUOM "); }
            
            try { reader["UnitCost"].ToString(); }
            catch { missing.Append("UnitCost "); }
            
            try { reader["UOMConversion"].ToString(); }
            catch { missing.Append("UOMConversion "); }
            
            try { reader["WorkOrder"].ToString(); }
            catch { missing.Append("WorkOrder "); }
            
            try { reader["LineStatus"].ToString(); }
            catch { missing.Append("LineStatus "); }
            
            try { reader["ErrorMessage"].ToString(); }
            catch { missing.Append("ErrorMessage "); }
            
            try { reader["LastProcess"].ToString(); }
            catch { missing.Append("LastProcess "); }
            
            try { reader["Revision"].ToString(); }
            catch { missing.Append("Revision "); }
            
            try { reader["PaymentTerms"].ToString(); }
            catch { missing.Append("PaymentTerms "); }
            
            try { reader["BillToAddress1"].ToString(); }
            catch { missing.Append("BillToAddress1 "); }
            
            try { reader["BillToAddress2"].ToString(); }
            catch { missing.Append("BillToAddress2 "); }
            
            try { reader["BillToCity"].ToString(); }
            catch { missing.Append("BillToCity "); }
            
            try { reader["BillToState"].ToString(); }
            catch { missing.Append("BillToState "); }
            
            try { reader["BillToZip"].ToString(); }
            catch { missing.Append("BillToZip "); }
            
            try { reader["BillToCountry"].ToString(); }
            catch { missing.Append("BillToCountry "); }
            
            try { reader["ShipToAddress1"].ToString(); }
            catch { missing.Append("ShipToAddress1 "); }
            
            try { reader["ShipToAddress2"].ToString(); }
            catch { missing.Append("ShipToAddress2 "); }
            
            try { reader["ShipToCity"].ToString(); }
            catch { missing.Append("ShipToCity "); }
            
            try { reader["ShipToState"].ToString(); }
            catch { missing.Append("ShipToState "); }
            
            try { reader["ShipToZip"].ToString(); }
            catch { missing.Append("ShipToZip "); }
            
            try { reader["ShipToCountry"].ToString(); }
            catch { missing.Append("ShipToCountry "); }
            
            try { reader["POBuyer_PersonnelId"].ToString(); }
            catch { missing.Append("POBuyer_PersonnelId "); }
            
            try { reader["POCreator_PersonnelId"].ToString(); }
            catch { missing.Append("POCreator_PersonnelId "); }
            
            try { reader["VendorAutoEmail"].ToString(); }
            catch { missing.Append("VendorAutoEmail "); }
            
            try { reader["VendorEmailAddress"].ToString(); }
            catch { missing.Append("VendorEmailAddress "); }
            
            try { reader["PurchaseOrderId"].ToString(); }
            catch { missing.Append("PurchaseOrderId "); }
            
            try { reader["ExpenseAccount"].ToString(); }
            catch { missing.Append("ExpenseAccount "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a POImport2 table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POImport2_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the POImport2 table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POImport2_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the POImport2 table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POImport2_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all POImport2 table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_POImport2[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_POImport2[] data
        )
        {
            Database.SqlClient.ProcessRow<b_POImport2> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_POImport2[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POImport2>(reader => { b_POImport2 obj = new b_POImport2(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_POImport2_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_POImport2[])results.ToArray(typeof(b_POImport2));
                }
                else
                {
                    data = new b_POImport2[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve POImport2 table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_POImport2[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_POImport2> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_POImport2>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_POImport2_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_POImport2 objects.
        /// </summary>
        /// <param name="obj">b_POImport2 object to compare against the current object.</param>
        public bool Equals (b_POImport2 obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (POImport2Id != obj.POImport2Id) return false;
            if (SiteId != obj.SiteId) return false;
            if (!PurchaseOrder.Equals(obj.PurchaseOrder)) return false;
            if (ExPurchaseOrderId != obj.ExPurchaseOrderId) return false;
            if (!PurchaseRequest.Equals(obj.PurchaseRequest)) return false;
            if (PurchaseRequestId != obj.PurchaseRequestId) return false;
            if (!ExRequest.Equals(obj.ExRequest)) return false;
            if (!Required.Equals(obj.Required)) return false;
            if (!POCreateDate.Equals(obj.POCreateDate)) return false;
            if (!Currency.Equals(obj.Currency)) return false;
            if (!ExVendor.Equals(obj.ExVendor)) return false;
            if (ExVendorId != obj.ExVendorId) return false;
            if (ExVendorSiteId != obj.ExVendorSiteId) return false;
            if (PRLineItemId != obj.PRLineItemId) return false;
            if (LineNumber != obj.LineNumber) return false;
            if (ExPurchaseOrderLineId != obj.ExPurchaseOrderLineId) return false;
            if (!ExPart.Equals(obj.ExPart)) return false;
            if (ExPartId != obj.ExPartId) return false;
            if (!Description.Equals(obj.Description)) return false;
            if (!Category.Equals(obj.Category)) return false;
            if (PurchaseQuantity != obj.PurchaseQuantity) return false;
            if (!PurchaseUOM.Equals(obj.PurchaseUOM)) return false;
            if (UnitCost != obj.UnitCost) return false;
            if (UOMConversion != obj.UOMConversion) return false;
            if (!WorkOrder.Equals(obj.WorkOrder)) return false;
            if (!LineStatus.Equals(obj.LineStatus)) return false;
            if (!ErrorMessage.Equals(obj.ErrorMessage)) return false;
            if (!LastProcess.Equals(obj.LastProcess)) return false;
            if (Revision != obj.Revision) return false;
            if (!PaymentTerms.Equals(obj.PaymentTerms)) return false;
            if (!BillToAddress1.Equals(obj.BillToAddress1)) return false;
            if (!BillToAddress2.Equals(obj.BillToAddress2)) return false;
            if (!BillToCity.Equals(obj.BillToCity)) return false;
            if (!BillToState.Equals(obj.BillToState)) return false;
            if (!BillToZip.Equals(obj.BillToZip)) return false;
            if (!BillToCountry.Equals(obj.BillToCountry)) return false;
            if (!ShipToAddress1.Equals(obj.ShipToAddress1)) return false;
            if (!ShipToAddress2.Equals(obj.ShipToAddress2)) return false;
            if (!ShipToCity.Equals(obj.ShipToCity)) return false;
            if (!ShipToState.Equals(obj.ShipToState)) return false;
            if (!ShipToZip.Equals(obj.ShipToZip)) return false;
            if (!ShipToCountry.Equals(obj.ShipToCountry)) return false;
            if (POBuyer_PersonnelId != obj.POBuyer_PersonnelId) return false;
            if (POCreator_PersonnelId != obj.POCreator_PersonnelId) return false;
            if (VendorAutoEmail != obj.VendorAutoEmail) return false;
            if (!VendorEmailAddress.Equals(obj.VendorEmailAddress)) return false;
            if (PurchaseOrderId != obj.PurchaseOrderId) return false;
            if (!ExpenseAccount.Equals(obj.ExpenseAccount)) return false;
            if (UpdateIndex != obj.UpdateIndex) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_POImport2 objects.
        /// </summary>
        /// <param name="obj1">b_POImport2 object to use in the comparison.</param>
        /// <param name="obj2">b_POImport2 object to use in the comparison.</param>
        public static bool Equals (b_POImport2 obj1, b_POImport2 obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
