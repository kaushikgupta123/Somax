/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */
  
using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the SensorReading table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_SensorReading : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_SensorReading ()
        {
            ClientId = 0;
            SensorReadingId = 0;
            SiteId = 0;
            SensorID = 0;
            NetworkId = 0;
            MessageGUID = System.Guid.Empty;
            MessageState = 0;
            MessageDate = new System.Nullable<System.DateTime>();
            RawData = String.Empty;
            DataType = String.Empty;
            DataValue = String.Empty;
            PlotValues = 0;
            PlotLabels = String.Empty;
            BatteryLevel = 0;
            SignalStrength = 0;
        }

        /// <summary>
        /// SensorReadingId property
        /// </summary>
        public long SensorReadingId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// SensorID property
        /// </summary>
        public int SensorID { get; set; }

        /// <summary>
        /// NetworkId property
        /// </summary>
        public int NetworkId { get; set; }

        /// <summary>
        /// MessageGUID property
        /// </summary>
        public System.Guid MessageGUID { get; set; }

        /// <summary>
        /// MessageState property
        /// </summary>
        public int MessageState { get; set; }

        /// <summary>
        /// MessageDate property
        /// </summary>
        public DateTime? MessageDate { get; set; }

        /// <summary>
        /// RawData property
        /// </summary>
        public string RawData { get; set; }

        /// <summary>
        /// DataType property
        /// </summary>
        public string DataType { get; set; }

        /// <summary>
        /// DataValue property
        /// </summary>
        public string DataValue { get; set; }

        /// <summary>
        /// PlotValues property
        /// </summary>
        public decimal PlotValues { get; set; }

        /// <summary>
        /// PlotLabels property
        /// </summary>
        public string PlotLabels { get; set; }

        /// <summary>
        /// BatteryLevel property
        /// </summary>
        public int BatteryLevel { get; set; }
        
        /// <summary>
        /// SignalStrength property
        /// </summary>
        public int SignalStrength { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_SensorReading object.
        /// This routine should be applied to the usp_SensorReading_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_SensorReading_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_SensorReading object</returns>
        public static object ProcessRow (SqlDataReader reader)
        {
            // Create instance of object
            b_SensorReading obj = new b_SensorReading();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_SensorReading object.
        /// This routine should be applied to the usp_SensorReading_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_SensorReading_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // SensorReadingId column, bigint, not null
                        SensorReadingId = reader.GetInt64(i++);

                        // SiteId column, bigint, not null
                        SiteId = reader.GetInt64(i++);

                        // SensorID column, int, not null
                        SensorID = reader.GetInt32(i++);

                        // NetworkId column, int, not null
                        NetworkId = reader.GetInt32(i++);

                        // MessageGUID column, uniqueidentifier, not null
                        if (false == reader.IsDBNull(i))
                        {
                          MessageGUID = reader.GetGuid(i);
                        }
                        else
                        {
                           MessageGUID = Guid.Empty;
                        }
                        i++;

                        // MessageState column, int, not null
                        MessageState = reader.GetInt32(i++);

            // MessageDate column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    MessageDate = reader.GetDateTime(i);
            }
            else
            {
                    MessageDate = DateTime.MinValue;
            }
            i++;
                        // RawData column, nvarchar(31), not null
                        RawData = reader.GetString(i++);

                        // DataType column, nvarchar(31), not null
                        DataType = reader.GetString(i++);

                        // DataValue column, nvarchar(31), not null
                        DataValue = reader.GetString(i++);

                        // PlotValues column, decimal(12,3), not null
                        PlotValues = reader.GetDecimal(i++);

                        // PlotLabels column, nvarchar(255), not null
                        PlotLabels = reader.GetString(i++);

                        // BatteryLevel column, int, not null
                        BatteryLevel = reader.GetInt32(i++);

                        // SignalStrength column, int, not null
                        SignalStrength = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["SensorReadingId"].ToString(); }
            catch { missing.Append("SensorReadingId "); }
            
            try { reader["SiteId"].ToString(); }
            catch { missing.Append("SiteId "); }
            
            try { reader["SensorID"].ToString(); }
            catch { missing.Append("SensorID "); }
            
            try { reader["NetworkId"].ToString(); }
            catch { missing.Append("NetworkId "); }
            
            try { reader["MessageGUID"].ToString(); }
            catch { missing.Append("MessageGUID "); }
            
            try { reader["MessageState"].ToString(); }
            catch { missing.Append("MessageState "); }
            
            try { reader["MessageDate"].ToString(); }
            catch { missing.Append("MessageDate "); }
            
            try { reader["RawData"].ToString(); }
            catch { missing.Append("RawData "); }
            
            try { reader["DataType"].ToString(); }
            catch { missing.Append("DataType "); }
            
            try { reader["DataValue"].ToString(); }
            catch { missing.Append("DataValue "); }
            
            try { reader["PlotValues"].ToString(); }
            catch { missing.Append("PlotValues "); }
            
            try { reader["PlotLabels"].ToString(); }
            catch { missing.Append("PlotLabels "); }
            
            try { reader["BatteryLevel"].ToString(); }
            catch { missing.Append("BatteryLevel "); }
            
            try { reader["SignalStrength"].ToString(); }
            catch { missing.Append("SignalStrength "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        /// <summary>
        /// Insert this object into the database as a SensorReading table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SensorReading_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the SensorReading table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SensorReading_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the SensorReading table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_SensorReading_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all SensorReading table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_SensorReading[] that contains the results</param>
        public void RetrieveAllFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_SensorReading[] data
        )
        {
            Database.SqlClient.ProcessRow<b_SensorReading> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_SensorReading[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SensorReading>(reader => { b_SensorReading obj = new b_SensorReading(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_SensorReading_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_SensorReading[])results.ToArray(typeof(b_SensorReading));
                }
                else
                {
                    data = new b_SensorReading[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
        callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve SensorReading table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_SensorReading[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_SensorReading> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SensorReading>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_SensorReading_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_SensorReading objects.
        /// </summary>
        /// <param name="obj">b_SensorReading object to compare against the current object.</param>
        public bool Equals (b_SensorReading obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (SensorReadingId != obj.SensorReadingId) return false;
            if (SiteId != obj.SiteId) return false;
            if (SensorID != obj.SensorID) return false;
            if (NetworkId != obj.NetworkId) return false;
            if (!MessageGUID.Equals(obj.MessageGUID)) return false;
            if (MessageState != obj.MessageState) return false;
            if (!MessageDate.Equals(obj.MessageDate)) return false;
            if (!RawData.Equals(obj.RawData)) return false;
            if (!DataType.Equals(obj.DataType)) return false;
            if (!DataValue.Equals(obj.DataValue)) return false;
            if (PlotValues != obj.PlotValues) return false;
            if (!PlotLabels.Equals(obj.PlotLabels)) return false;
            if (BatteryLevel != obj.BatteryLevel) return false;
            if (SignalStrength != obj.SignalStrength) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_SensorReading objects.
        /// </summary>
        /// <param name="obj1">b_SensorReading object to use in the comparison.</param>
        /// <param name="obj2">b_SensorReading object to use in the comparison.</param>
        public static bool Equals (b_SensorReading obj1, b_SensorReading obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
