/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the VendorRequest table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_VendorRequest : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_VendorRequest()
        {
            ClientId = 0;
            VendorRequestId = 0;
            SiteId = 0;
            AreaId = 0;
            DepartmentId = 0;
            StoreroomId = 0;
            Address1 = String.Empty;
            Address2 = String.Empty;
            Address3 = String.Empty;
            AddressCity = String.Empty;
            AddressCountry = String.Empty;
            AddressPostCode = String.Empty;
            AddressState = String.Empty;
            CustomerAccount = String.Empty;
            EmailAddress = String.Empty;
            FaxNumber = String.Empty;
            FOBCode = String.Empty;
            Name = String.Empty;
            PhoneNumber = String.Empty;
            RemitAddress1 = String.Empty;
            RemitAddress2 = String.Empty;
            RemitAddress3 = String.Empty;
            RemitCity = String.Empty;
            RemitCountry = String.Empty;
            RemitPostCode = String.Empty;
            RemitState = String.Empty;
            RemitUseBusiness = false;
            Status = String.Empty;
            Terms = String.Empty;
            Type = String.Empty;
            Website = String.Empty;
            ApproveDate = new System.Nullable<System.DateTime>();
            ApproveBy_PersonnelId = 0;
            DenyDate = new System.Nullable<System.DateTime>();
            DenyBy_PersonnelId = 0;
        }

        /// <summary>
        /// VendorRequestId property
        /// </summary>
        public long VendorRequestId { get; set; }

        /// <summary>
        /// SiteId property
        /// </summary>
        public long SiteId { get; set; }

        /// <summary>
        /// AreaId property
        /// </summary>
        public long AreaId { get; set; }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        public long DepartmentId { get; set; }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        public long StoreroomId { get; set; }

        /// <summary>
        /// Address1 property
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Address2 property
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Address3 property
        /// </summary>
        public string Address3 { get; set; }

        /// <summary>
        /// AddressCity property
        /// </summary>
        public string AddressCity { get; set; }

        /// <summary>
        /// AddressCountry property
        /// </summary>
        public string AddressCountry { get; set; }

        /// <summary>
        /// AddressPostCode property
        /// </summary>
        public string AddressPostCode { get; set; }

        /// <summary>
        /// AddressState property
        /// </summary>
        public string AddressState { get; set; }

        /// <summary>
        /// CustomerAccount property
        /// </summary>
        public string CustomerAccount { get; set; }

        /// <summary>
        /// EmailAddress property
        /// </summary>
        public string EmailAddress { get; set; }

        /// <summary>
        /// FaxNumber property
        /// </summary>
        public string FaxNumber { get; set; }

        /// <summary>
        /// FOBCode property
        /// </summary>
        public string FOBCode { get; set; }

        /// <summary>
        /// Name property
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// PhoneNumber property
        /// </summary>
        public string PhoneNumber { get; set; }

        /// <summary>
        /// RemitAddress1 property
        /// </summary>
        public string RemitAddress1 { get; set; }

        /// <summary>
        /// RemitAddress2 property
        /// </summary>
        public string RemitAddress2 { get; set; }

        /// <summary>
        /// RemitAddress3 property
        /// </summary>
        public string RemitAddress3 { get; set; }

        /// <summary>
        /// RemitCity property
        /// </summary>
        public string RemitCity { get; set; }

        /// <summary>
        /// RemitCountry property
        /// </summary>
        public string RemitCountry { get; set; }

        /// <summary>
        /// RemitPostCode property
        /// </summary>
        public string RemitPostCode { get; set; }

        /// <summary>
        /// RemitState property
        /// </summary>
        public string RemitState { get; set; }

        /// <summary>
        /// RemitUseBusiness property
        /// </summary>
        public bool RemitUseBusiness { get; set; }

        /// <summary>
        /// Status property
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Terms property
        /// </summary>
        public string Terms { get; set; }

        /// <summary>
        /// Type property
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Website property
        /// </summary>
        public string Website { get; set; }

        /// <summary>
        /// ApproveDate property
        /// </summary>
        public DateTime? ApproveDate { get; set; }

        /// <summary>
        /// ApproveBy_PersonnelId property
        /// </summary>
        public long ApproveBy_PersonnelId { get; set; }

        /// <summary>
        /// DenyDate property
        /// </summary>
        public DateTime? DenyDate { get; set; }

        /// <summary>
        /// DenyBy_PersonnelId property
        /// </summary>
        public long DenyBy_PersonnelId { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_VendorRequest object.
        /// This routine should be applied to the usp_VendorRequest_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorRequest_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_VendorRequest object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_VendorRequest obj = new b_VendorRequest();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_VendorRequest object.
        /// This routine should be applied to the usp_VendorRequest_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_VendorRequest_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // VendorRequestId column, bigint, not null
                VendorRequestId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                SiteId = reader.GetInt64(i++);

                // AreaId column, bigint, not null
                AreaId = reader.GetInt64(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // Address1 column, nvarchar(63), not null
                Address1 = reader.GetString(i++);

                // Address2 column, nvarchar(63), not null
                Address2 = reader.GetString(i++);

                // Address3 column, nvarchar(63), not null
                Address3 = reader.GetString(i++);

                // AddressCity column, nvarchar(63), not null
                AddressCity = reader.GetString(i++);

                // AddressCountry column, nvarchar(63), not null
                AddressCountry = reader.GetString(i++);

                // AddressPostCode column, nvarchar(31), not null
                AddressPostCode = reader.GetString(i++);

                // AddressState column, nvarchar(63), not null
                AddressState = reader.GetString(i++);

                // CustomerAccount column, nvarchar(31), not null
                CustomerAccount = reader.GetString(i++);

                // EmailAddress column, nvarchar(63), not null
                EmailAddress = reader.GetString(i++);

                // FaxNumber column, nvarchar(31), not null
                FaxNumber = reader.GetString(i++);

                // FOBCode column, nvarchar(15), not null
                FOBCode = reader.GetString(i++);

                // Name column, nvarchar(63), not null
                Name = reader.GetString(i++);

                // PhoneNumber column, nvarchar(31), not null
                PhoneNumber = reader.GetString(i++);

                // RemitAddress1 column, nvarchar(63), not null
                RemitAddress1 = reader.GetString(i++);

                // RemitAddress2 column, nvarchar(63), not null
                RemitAddress2 = reader.GetString(i++);

                // RemitAddress3 column, nvarchar(63), not null
                RemitAddress3 = reader.GetString(i++);

                // RemitCity column, nvarchar(63), not null
                RemitCity = reader.GetString(i++);

                // RemitCountry column, nvarchar(63), not null
                RemitCountry = reader.GetString(i++);

                // RemitPostCode column, nvarchar(31), not null
                RemitPostCode = reader.GetString(i++);

                // RemitState column, nvarchar(63), not null
                RemitState = reader.GetString(i++);

                // RemitUseBusiness column, bit, not null
                RemitUseBusiness = reader.GetBoolean(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // Terms column, nvarchar(15), not null
                Terms = reader.GetString(i++);

                // Type column, nvarchar(15), not null
                Type = reader.GetString(i++);

                // Website column, nvarchar(127), not null
                Website = reader.GetString(i++);

                // ApproveDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ApproveDate = reader.GetDateTime(i);
                }
                else
                {
                    ApproveDate = DateTime.MinValue;
                }
                i++;
                // ApproveBy_PersonnelId column, bigint, not null
                ApproveBy_PersonnelId = reader.GetInt64(i++);

                // DenyDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DenyDate = reader.GetDateTime(i);
                }
                else
                {
                    DenyDate = DateTime.MinValue;
                }
                i++;
                // DenyBy_PersonnelId column, bigint, not null
                DenyBy_PersonnelId = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["VendorRequestId"].ToString(); }
                catch { missing.Append("VendorRequestId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["Address1"].ToString(); }
                catch { missing.Append("Address1 "); }

                try { reader["Address2"].ToString(); }
                catch { missing.Append("Address2 "); }

                try { reader["Address3"].ToString(); }
                catch { missing.Append("Address3 "); }

                try { reader["AddressCity"].ToString(); }
                catch { missing.Append("AddressCity "); }

                try { reader["AddressCountry"].ToString(); }
                catch { missing.Append("AddressCountry "); }

                try { reader["AddressPostCode"].ToString(); }
                catch { missing.Append("AddressPostCode "); }

                try { reader["AddressState"].ToString(); }
                catch { missing.Append("AddressState "); }

                try { reader["CustomerAccount"].ToString(); }
                catch { missing.Append("CustomerAccount "); }

                try { reader["EmailAddress"].ToString(); }
                catch { missing.Append("EmailAddress "); }

                try { reader["FaxNumber"].ToString(); }
                catch { missing.Append("FaxNumber "); }

                try { reader["FOBCode"].ToString(); }
                catch { missing.Append("FOBCode "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["PhoneNumber"].ToString(); }
                catch { missing.Append("PhoneNumber "); }

                try { reader["RemitAddress1"].ToString(); }
                catch { missing.Append("RemitAddress1 "); }

                try { reader["RemitAddress2"].ToString(); }
                catch { missing.Append("RemitAddress2 "); }

                try { reader["RemitAddress3"].ToString(); }
                catch { missing.Append("RemitAddress3 "); }

                try { reader["RemitCity"].ToString(); }
                catch { missing.Append("RemitCity "); }

                try { reader["RemitCountry"].ToString(); }
                catch { missing.Append("RemitCountry "); }

                try { reader["RemitPostCode"].ToString(); }
                catch { missing.Append("RemitPostCode "); }

                try { reader["RemitState"].ToString(); }
                catch { missing.Append("RemitState "); }

                try { reader["RemitUseBusiness"].ToString(); }
                catch { missing.Append("RemitUseBusiness "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["Terms"].ToString(); }
                catch { missing.Append("Terms "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["Website"].ToString(); }
                catch { missing.Append("Website "); }

                try { reader["ApproveDate"].ToString(); }
                catch { missing.Append("ApproveDate "); }

                try { reader["ApproveBy_PersonnelId"].ToString(); }
                catch { missing.Append("ApproveBy_PersonnelId "); }

                try { reader["DenyDate"].ToString(); }
                catch { missing.Append("DenyDate "); }

                try { reader["DenyBy_PersonnelId"].ToString(); }
                catch { missing.Append("DenyBy_PersonnelId "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a VendorRequest table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorRequest_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the VendorRequest table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorRequest_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the VendorRequest table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_VendorRequest_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all VendorRequest table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_VendorRequest[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_VendorRequest[] data
        )
        {
            Database.SqlClient.ProcessRow<b_VendorRequest> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_VendorRequest[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorRequest>(reader => { b_VendorRequest obj = new b_VendorRequest(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_VendorRequest_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_VendorRequest[])results.ToArray(typeof(b_VendorRequest));
                }
                else
                {
                    data = new b_VendorRequest[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve VendorRequest table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_VendorRequest[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_VendorRequest> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_VendorRequest>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_VendorRequest_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_VendorRequest objects.
        /// </summary>
        /// <param name="obj">b_VendorRequest object to compare against the current object.</param>
        public bool Equals(b_VendorRequest obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (VendorRequestId != obj.VendorRequestId) return false;
            if (SiteId != obj.SiteId) return false;
            if (AreaId != obj.AreaId) return false;
            if (DepartmentId != obj.DepartmentId) return false;
            if (StoreroomId != obj.StoreroomId) return false;
            if (!Address1.Equals(obj.Address1)) return false;
            if (!Address2.Equals(obj.Address2)) return false;
            if (!Address3.Equals(obj.Address3)) return false;
            if (!AddressCity.Equals(obj.AddressCity)) return false;
            if (!AddressCountry.Equals(obj.AddressCountry)) return false;
            if (!AddressPostCode.Equals(obj.AddressPostCode)) return false;
            if (!AddressState.Equals(obj.AddressState)) return false;
            if (!CustomerAccount.Equals(obj.CustomerAccount)) return false;
            if (!EmailAddress.Equals(obj.EmailAddress)) return false;
            if (!FaxNumber.Equals(obj.FaxNumber)) return false;
            if (!FOBCode.Equals(obj.FOBCode)) return false;
            if (!Name.Equals(obj.Name)) return false;
            if (!PhoneNumber.Equals(obj.PhoneNumber)) return false;
            if (!RemitAddress1.Equals(obj.RemitAddress1)) return false;
            if (!RemitAddress2.Equals(obj.RemitAddress2)) return false;
            if (!RemitAddress3.Equals(obj.RemitAddress3)) return false;
            if (!RemitCity.Equals(obj.RemitCity)) return false;
            if (!RemitCountry.Equals(obj.RemitCountry)) return false;
            if (!RemitPostCode.Equals(obj.RemitPostCode)) return false;
            if (!RemitState.Equals(obj.RemitState)) return false;
            if (RemitUseBusiness != obj.RemitUseBusiness) return false;
            if (!Status.Equals(obj.Status)) return false;
            if (!Terms.Equals(obj.Terms)) return false;
            if (!Type.Equals(obj.Type)) return false;
            if (!Website.Equals(obj.Website)) return false;
            if (!ApproveDate.Equals(obj.ApproveDate)) return false;
            if (ApproveBy_PersonnelId != obj.ApproveBy_PersonnelId) return false;
            if (!DenyDate.Equals(obj.DenyDate)) return false;
            if (DenyBy_PersonnelId != obj.DenyBy_PersonnelId) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_VendorRequest objects.
        /// </summary>
        /// <param name="obj1">b_VendorRequest object to use in the comparison.</param>
        /// <param name="obj2">b_VendorRequest object to use in the comparison.</param>
        public static bool Equals(b_VendorRequest obj1, b_VendorRequest obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
