/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the UIConfiguration table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_UIConfiguration : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_UIConfiguration()
        {
            ClientId = 0;
            UIConfigurationId = 0;
            UIViewId = 0;
            DataDictionaryId = 0;
            Order = 0;
            Display = false;
            ViewOnly = false;
            Section = false;
            SectionName = String.Empty;
            SystemRequired = false;
            SystemRequiredResourceId = String.Empty;
            SystemRequiredResourceSet = String.Empty;
            Required = false;
            RequiredResourceId = String.Empty;
            RequiredResourceSet = String.Empty;
            MaxLength = 0;
            MaxLengthResourceId = String.Empty;
            MaxLengthResourceSet = String.Empty;
            MinLength = 0;
            MinLengthResourceId = String.Empty;
            MinLengthResourceSet = String.Empty;
            RegularExpression = String.Empty;
            RegularExpressionResourceId = String.Empty;
            RegularExpressionResourceSet = String.Empty;
            Range = false;
            RangeMinValue = 0;
            RangeMaxValue = 0;
            RangeResourceId = String.Empty;
            RangeResourceSet = String.Empty;
        }

        /// <summary>
        /// UIConfigurationId property
        /// </summary>
        public long UIConfigurationId { get; set; }

        /// <summary>
        /// UIViewId property
        /// </summary>
        public long UIViewId { get; set; }

        /// <summary>
        /// DataDictionaryId property
        /// </summary>
        public long DataDictionaryId { get; set; }

        /// <summary>
        /// Order property
        /// </summary>
        public int Order { get; set; }

        /// <summary>
        /// Display property
        /// </summary>
        public bool Display { get; set; }

        /// <summary>
        /// ViewOnly property
        /// </summary>
        public bool ViewOnly { get; set; }

        /// <summary>
        /// Section property
        /// </summary>
        public bool Section { get; set; }

        /// <summary>
        /// SectionName property
        /// </summary>
        public string SectionName { get; set; }

        /// <summary>
        /// SystemRequired property
        /// </summary>
        public bool SystemRequired { get; set; }

        /// <summary>
        /// SystemRequiredResourceId property
        /// </summary>
        public string SystemRequiredResourceId { get; set; }

        /// <summary>
        /// SystemRequiredResourceSet property
        /// </summary>
        public string SystemRequiredResourceSet { get; set; }

        /// <summary>
        /// Required property
        /// </summary>
        public bool Required { get; set; }

        /// <summary>
        /// RequiredResourceId property
        /// </summary>
        public string RequiredResourceId { get; set; }

        /// <summary>
        /// RequiredResourceSet property
        /// </summary>
        public string RequiredResourceSet { get; set; }

        /// <summary>
        /// MaxLength property
        /// </summary>
        public int MaxLength { get; set; }

        /// <summary>
        /// MaxLengthResourceId property
        /// </summary>
        public string MaxLengthResourceId { get; set; }

        /// <summary>
        /// MaxLengthResourceSet property
        /// </summary>
        public string MaxLengthResourceSet { get; set; }

        /// <summary>
        /// MinLength property
        /// </summary>
        public int MinLength { get; set; }

        /// <summary>
        /// MinLengthResourceId property
        /// </summary>
        public string MinLengthResourceId { get; set; }

        /// <summary>
        /// MinLengthResourceSet property
        /// </summary>
        public string MinLengthResourceSet { get; set; }

        /// <summary>
        /// RegularExpression property
        /// </summary>
        public string RegularExpression { get; set; }

        /// <summary>
        /// RegularExpressionResourceId property
        /// </summary>
        public string RegularExpressionResourceId { get; set; }

        /// <summary>
        /// RegularExpressionResourceSet property
        /// </summary>
        public string RegularExpressionResourceSet { get; set; }

        /// <summary>
        /// Range property
        /// </summary>
        public bool Range { get; set; }

        /// <summary>
        /// RangeMinValue property
        /// </summary>
        public decimal RangeMinValue { get; set; }

        /// <summary>
        /// RangeMaxValue property
        /// </summary>
        public decimal RangeMaxValue { get; set; }

        /// <summary>
        /// RangeResourceId property
        /// </summary>
        public string RangeResourceId { get; set; }

        /// <summary>
        /// RangeResourceSet property
        /// </summary>
        public string RangeResourceSet { get; set; }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_UIConfiguration object.
        /// This routine should be applied to the usp_UIConfiguration_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_UIConfiguration_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_UIConfiguration object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_UIConfiguration obj = new b_UIConfiguration();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_UIConfiguration object.
        /// This routine should be applied to the usp_UIConfiguration_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_UIConfiguration_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // UIConfigurationId column, bigint, not null
                UIConfigurationId = reader.GetInt64(i++);

                // UIViewId column, bigint, not null
                UIViewId = reader.GetInt64(i++);

                // DataDictionaryId column, bigint, not null
                DataDictionaryId = reader.GetInt64(i++);

                // Order column, int, not null
                Order = reader.GetInt32(i++);

                // Display column, bit, not null
                Display = reader.GetBoolean(i++);

                // ViewOnly column, bit, not null
                ViewOnly = reader.GetBoolean(i++);

                // Section column, bit, not null
                Section = reader.GetBoolean(i++);

                // SectionName column, nvarchar(31), not null
                SectionName = reader.GetString(i++);

                // SystemRequired column, bit, not null
                SystemRequired = reader.GetBoolean(i++);

                // SystemRequiredResourceId column, nvarchar(63), not null
                SystemRequiredResourceId = reader.GetString(i++);

                // SystemRequiredResourceSet column, nvarchar(63), not null
                SystemRequiredResourceSet = reader.GetString(i++);

                // Required column, bit, not null
                Required = reader.GetBoolean(i++);

                // RequiredResourceId column, nvarchar(63), not null
                RequiredResourceId = reader.GetString(i++);

                // RequiredResourceSet column, nvarchar(63), not null
                RequiredResourceSet = reader.GetString(i++);

                // MaxLength column, int, not null
                MaxLength = reader.GetInt32(i++);

                // MaxLengthResourceId column, nvarchar(63), not null
                MaxLengthResourceId = reader.GetString(i++);

                // MaxLengthResourceSet column, nvarchar(63), not null
                MaxLengthResourceSet = reader.GetString(i++);

                // MinLength column, int, not null
                MinLength = reader.GetInt32(i++);

                // MinLengthResourceId column, nvarchar(63), not null
                MinLengthResourceId = reader.GetString(i++);

                // MinLengthResourceSet column, nvarchar(63), not null
                MinLengthResourceSet = reader.GetString(i++);

                // RegularExpression column, nvarchar(50), not null
                RegularExpression = reader.GetString(i++);

                // RegularExpressionResourceId column, nvarchar(63), not null
                RegularExpressionResourceId = reader.GetString(i++);

                // RegularExpressionResourceSet column, nvarchar(63), not null
                RegularExpressionResourceSet = reader.GetString(i++);

                // Range column, bit, not null
                Range = reader.GetBoolean(i++);

                // RangeMinValue column, decimal(18,2), not null
                RangeMinValue = reader.GetDecimal(i++);

                // RangeMaxValue column, decimal(18,2), not null
                RangeMaxValue = reader.GetDecimal(i++);

                // RangeResourceId column, nvarchar(63), not null
                RangeResourceId = reader.GetString(i++);

                // RangeResourceSet column, nvarchar(63), not null
                RangeResourceSet = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["UIConfigurationId"].ToString(); }
                catch { missing.Append("UIConfigurationId "); }

                try { reader["UIViewId"].ToString(); }
                catch { missing.Append("UIViewId "); }

                try { reader["DataDictionaryId"].ToString(); }
                catch { missing.Append("DataDictionaryId "); }

                try { reader["Order"].ToString(); }
                catch { missing.Append("Order "); }

                try { reader["Display"].ToString(); }
                catch { missing.Append("Display "); }

                try { reader["ViewOnly"].ToString(); }
                catch { missing.Append("ViewOnly "); }

                try { reader["Section"].ToString(); }
                catch { missing.Append("Section "); }

                try { reader["SectionName"].ToString(); }
                catch { missing.Append("SectionName "); }

                try { reader["SystemRequired"].ToString(); }
                catch { missing.Append("SystemRequired "); }

                try { reader["SystemRequiredResourceId"].ToString(); }
                catch { missing.Append("SystemRequiredResourceId "); }

                try { reader["SystemRequiredResourceSet"].ToString(); }
                catch { missing.Append("SystemRequiredResourceSet "); }

                try { reader["Required"].ToString(); }
                catch { missing.Append("Required "); }

                try { reader["RequiredResourceId"].ToString(); }
                catch { missing.Append("RequiredResourceId "); }

                try { reader["RequiredResourceSet"].ToString(); }
                catch { missing.Append("RequiredResourceSet "); }

                try { reader["MaxLength"].ToString(); }
                catch { missing.Append("MaxLength "); }

                try { reader["MaxLengthResourceId"].ToString(); }
                catch { missing.Append("MaxLengthResourceId "); }

                try { reader["MaxLengthResourceSet"].ToString(); }
                catch { missing.Append("MaxLengthResourceSet "); }

                try { reader["MinLength"].ToString(); }
                catch { missing.Append("MinLength "); }

                try { reader["MinLengthResourceId"].ToString(); }
                catch { missing.Append("MinLengthResourceId "); }

                try { reader["MinLengthResourceSet"].ToString(); }
                catch { missing.Append("MinLengthResourceSet "); }

                try { reader["RegularExpression"].ToString(); }
                catch { missing.Append("RegularExpression "); }

                try { reader["RegularExpressionResourceId"].ToString(); }
                catch { missing.Append("RegularExpressionResourceId "); }

                try { reader["RegularExpressionResourceSet"].ToString(); }
                catch { missing.Append("RegularExpressionResourceSet "); }

                try { reader["Range"].ToString(); }
                catch { missing.Append("Range "); }

                try { reader["RangeMinValue"].ToString(); }
                catch { missing.Append("RangeMinValue "); }

                try { reader["RangeMaxValue"].ToString(); }
                catch { missing.Append("RangeMaxValue "); }

                try { reader["RangeResourceId"].ToString(); }
                catch { missing.Append("RangeResourceId "); }

                try { reader["RangeResourceSet"].ToString(); }
                catch { missing.Append("RangeResourceSet "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a UIConfiguration table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UIConfiguration_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the UIConfiguration table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UIConfiguration_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the UIConfiguration table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UIConfiguration_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all UIConfiguration table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_UIConfiguration[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_UIConfiguration[] data
        )
        {
            Database.SqlClient.ProcessRow<b_UIConfiguration> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_UIConfiguration[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_UIConfiguration>(reader => { b_UIConfiguration obj = new b_UIConfiguration(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_UIConfiguration_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_UIConfiguration[])results.ToArray(typeof(b_UIConfiguration));
                }
                else
                {
                    data = new b_UIConfiguration[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve UIConfiguration table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_UIConfiguration[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_UIConfiguration> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_UIConfiguration>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_UIConfiguration_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_UIConfiguration objects.
        /// </summary>
        /// <param name="obj">b_UIConfiguration object to compare against the current object.</param>
        public bool Equals(b_UIConfiguration obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (UIConfigurationId != obj.UIConfigurationId) return false;
            if (UIViewId != obj.UIViewId) return false;
            if (DataDictionaryId != obj.DataDictionaryId) return false;
            if (Order != obj.Order) return false;
            if (Display != obj.Display) return false;
            if (ViewOnly != obj.ViewOnly) return false;
            if (Section != obj.Section) return false;
            if (!SectionName.Equals(obj.SectionName)) return false;
            if (SystemRequired != obj.SystemRequired) return false;
            if (!SystemRequiredResourceId.Equals(obj.SystemRequiredResourceId)) return false;
            if (!SystemRequiredResourceSet.Equals(obj.SystemRequiredResourceSet)) return false;
            if (Required != obj.Required) return false;
            if (!RequiredResourceId.Equals(obj.RequiredResourceId)) return false;
            if (!RequiredResourceSet.Equals(obj.RequiredResourceSet)) return false;
            if (MaxLength != obj.MaxLength) return false;
            if (!MaxLengthResourceId.Equals(obj.MaxLengthResourceId)) return false;
            if (!MaxLengthResourceSet.Equals(obj.MaxLengthResourceSet)) return false;
            if (MinLength != obj.MinLength) return false;
            if (!MinLengthResourceId.Equals(obj.MinLengthResourceId)) return false;
            if (!MinLengthResourceSet.Equals(obj.MinLengthResourceSet)) return false;
            if (!RegularExpression.Equals(obj.RegularExpression)) return false;
            if (!RegularExpressionResourceId.Equals(obj.RegularExpressionResourceId)) return false;
            if (!RegularExpressionResourceSet.Equals(obj.RegularExpressionResourceSet)) return false;
            if (Range != obj.Range) return false;
            if (RangeMinValue != obj.RangeMinValue) return false;
            if (RangeMaxValue != obj.RangeMaxValue) return false;
            if (!RangeResourceId.Equals(obj.RangeResourceId)) return false;
            if (!RangeResourceSet.Equals(obj.RangeResourceSet)) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_UIConfiguration objects.
        /// </summary>
        /// <param name="obj1">b_UIConfiguration object to use in the comparison.</param>
        /// <param name="obj2">b_UIConfiguration object to use in the comparison.</param>
        public static bool Equals(b_UIConfiguration obj1, b_UIConfiguration obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
