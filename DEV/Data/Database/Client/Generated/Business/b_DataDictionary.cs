/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the DataDictionary table.InsertIntoDatabase
    /// </summary>
    [Serializable()]
    public partial class b_DataDictionary : DataBusinessBase
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_DataDictionary()
        {
            ClientId = 0;
            DataDictionaryId = 0;
            TableName = String.Empty;
            ColumnName = String.Empty;
            ColumnLabel = String.Empty;
            ColumnType = String.Empty;
            LookupType = String.Empty;
            LookupName = String.Empty;
            UDF = false;
            DisplayonForm = false;
            Enabled = false;
        }

        /// <summary>
        /// DataDictionaryId property
        /// </summary>
        public long DataDictionaryId { get; set; }

        /// <summary>
        /// TableName property
        /// </summary>
        public string TableName { get; set; }

        /// <summary>
        /// ColumnName property
        /// </summary>
        public string ColumnName { get; set; }

        /// <summary>
        /// ColumnLabel property
        /// </summary>
        public string ColumnLabel { get; set; }

        /// <summary>
        /// ColumnType property
        /// </summary>
        public string ColumnType { get; set; }

        /// <summary>
        /// LookupType property
        /// </summary>
        public string LookupType { get; set; }

        /// <summary>
        /// LookupName property
        /// </summary>
        public string LookupName { get; set; }

        /// <summary>
        /// UDF property
        /// </summary>
        public bool UDF { get; set; }

        /// <summary>
        /// Enabled property
        /// </summary>
        public bool Enabled { get; set; }

        /// <summary>
        /// DisplayonForm property
        /// </summary>
        public bool DisplayonForm { get; set; }
        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_DataDictionary object.
        /// This routine should be applied to the usp_DataDictionary_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_DataDictionary_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_DataDictionary object</returns>
        public static object ProcessRow(SqlDataReader reader)
        {
            // Create instance of object
            b_DataDictionary obj = new b_DataDictionary();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_DataDictionary object.
        /// This routine should be applied to the usp_DataDictionary_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_DataDictionary_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public int LoadFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // DataDictionaryId column, bigint, not null
                DataDictionaryId = reader.GetInt64(i++);

                // TableName column, nvarchar(31), not null
                TableName = reader.GetString(i++);

                // ColumnName column, nvarchar(31), not null
                ColumnName = reader.GetString(i++);

                // ColumnLabel column, nvarchar(67), not null
                ColumnLabel = reader.GetString(i++);

                // ColumnType column, nvarchar(15), not null
                ColumnType = reader.GetString(i++);

                // LookupType column, nvarchar(15), not null
                LookupType = reader.GetString(i++);

                // LookupName column, nvarchar(31), not null
                LookupName = reader.GetString(i++);

                // UDF column, bit, not null
                UDF = reader.GetBoolean(i++);

                // Enabled column, bit, not null
                Enabled = reader.GetBoolean(i++);

                // DisplayonForm column, bit, not null
                DisplayonForm = reader.GetBoolean(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["DataDictionaryId"].ToString(); }
                catch { missing.Append("DataDictionaryId "); }

                try { reader["TableName"].ToString(); }
                catch { missing.Append("TableName "); }

                try { reader["ColumnName"].ToString(); }
                catch { missing.Append("ColumnName "); }

                try { reader["ColumnLabel"].ToString(); }
                catch { missing.Append("ColumnLabel "); }

                try { reader["ColumnType"].ToString(); }
                catch { missing.Append("ColumnType "); }

                try { reader["LookupType"].ToString(); }
                catch { missing.Append("LookupType "); }

                try { reader["LookupName"].ToString(); }
                catch { missing.Append("LookupName "); }

                try { reader["UDF"].ToString(); }
                catch { missing.Append("UDF "); }

                try { reader["Enabled"].ToString(); }
                catch { missing.Append("Enabled "); }

                try { reader["DisplayonForm"].ToString(); }
                catch { missing.Append("DisplayonForm "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        /// <summary>
        /// Insert this object into the database as a DataDictionary table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void InsertIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_DataDictionary_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the DataDictionary table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void UpdateInDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_DataDictionary_UpdateByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Delete the DataDictionary table record represented by this object from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public override void DeleteFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_DataDictionary_DeleteByPK.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Retrieve all DataDictionary table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_DataDictionary[] that contains the results</param>
        public void RetrieveAllFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_DataDictionary[] data
        )
        {
            Database.SqlClient.ProcessRow<b_DataDictionary> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_DataDictionary[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_DataDictionary>(reader => { b_DataDictionary obj = new b_DataDictionary(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_DataDictionary_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_DataDictionary[])results.ToArray(typeof(b_DataDictionary));
                }
                else
                {
                    data = new b_DataDictionary[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Retrieve DataDictionary table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_DataDictionary[] that contains the results</param>
        public override void RetrieveByPKFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_DataDictionary> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_DataDictionary>(reader => { this.LoadFromDatabase(reader); return this; });
                Database.StoredProcedure.usp_DataDictionary_RetrieveByPK.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /// <summary>
        /// Test equality of two b_DataDictionary objects.
        /// </summary>
        /// <param name="obj">b_DataDictionary object to compare against the current object.</param>
        public bool Equals(b_DataDictionary obj)
        {
            if (ClientId != obj.ClientId) return false;
            if (DataDictionaryId != obj.DataDictionaryId) return false;
            if (!TableName.Equals(obj.TableName)) return false;
            if (!ColumnName.Equals(obj.ColumnName)) return false;
            if (!ColumnLabel.Equals(obj.ColumnLabel)) return false;
            if (!ColumnType.Equals(obj.ColumnType)) return false;
            if (!LookupType.Equals(obj.LookupType)) return false;
            if (!LookupName.Equals(obj.LookupName)) return false;
            if (UDF != obj.UDF) return false;
            if (Enabled != obj.Enabled) return false;
            if (DisplayonForm != obj.DisplayonForm) return false;
            return true;
        }

        /// <summary>
        /// Test equality of two b_DataDictionary objects.
        /// </summary>
        /// <param name="obj1">b_DataDictionary object to use in the comparison.</param>
        /// <param name="obj2">b_DataDictionary object to use in the comparison.</param>
        public static bool Equals(b_DataDictionary obj1, b_DataDictionary obj2)
        {
            if ((null == obj1) && (null == obj2)) return true;
            if ((null == obj1) && (null != obj2)) return false;
            if ((null != obj1) && (null == obj2)) return false;
            return obj1.Equals(obj2);
        }
    }
}
