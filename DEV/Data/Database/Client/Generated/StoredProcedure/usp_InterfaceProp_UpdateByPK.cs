/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;
using Database.SqlClient;
using Database.Business;


namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_InterfaceProp_UpdateByPK stored procedure.
    /// </summary>
    public class usp_InterfaceProp_UpdateByPK
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_InterfaceProp_UpdateByPK";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_InterfaceProp_UpdateByPK()
        {
        }

        /// <summary>
        /// Static method to call the usp_InterfaceProp_UpdateByPK stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public static void CallStoredProcedure(
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_InterfaceProp obj
        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetInputParameter(SqlDbType.BigInt, "InterfacePropId", obj.InterfacePropId);
            command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "InterfaceType", obj.InterfaceType, 31);
            command.SetInputParameter(SqlDbType.Bit, "InUse", obj.InUse);
            command.SetStringInputParameter(SqlDbType.NVarChar, "APIKey1", obj.APIKey1, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "APIKey2", obj.APIKey2, 255);
            command.SetInputParameter(SqlDbType.Bit, "Switch1", obj.Switch1);
            command.SetInputParameter(SqlDbType.Bit, "Switch2", obj.Switch2);
            command.SetInputParameter(SqlDbType.Bit, "Switch3", obj.Switch3);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FTPAddress", obj.FTPAddress, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FTPUserName", obj.FTPUserName, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FTPPassword", obj.FTPPassword, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CreatedBy", obj.CreatedBy, 255);
            command.SetInputParameter(SqlDbType.DateTime2, "CreatedDate", obj.CreatedDate);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FTPFileDirectory", obj.FTPFileDirectory, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FTPArcDirectory", obj.FTPArcDirectory, 255);
            command.SetInputParameter(SqlDbType.Bit, "FilesEncrypted", obj.FilesEncrypted);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Delimiter", obj.Delimiter, 7);
            command.SetStringInputParameter(SqlDbType.NVarChar, "JSONSchemaDir", obj.JSONSchemaDir, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PublicKey", obj.PublicKey, 1073741823);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PrivateKey", obj.PrivateKey, 1073741823);
            command.SetStringInputParameter(SqlDbType.NVarChar, "KeyPass", obj.KeyPass, 67);
            command.SetInputParameter(SqlDbType.Int, "FTPPort", obj.FTPPort);

            // Execute stored procedure.
            command.ExecuteNonQuery();



            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}