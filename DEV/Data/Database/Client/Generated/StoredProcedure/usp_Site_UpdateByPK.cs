/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;

using Database.Business;
using Database.SqlClient;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_Site_UpdateByPK stored procedure.
    /// </summary>
    public class usp_Site_UpdateByPK
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_Site_UpdateByPK";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_Site_UpdateByPK()
        {
        }

        /// <summary>
        /// Static method to call the usp_Site_UpdateByPK stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="updateIndexOut">int that contains the value of the @UpdateIndexOut parameter</param>
        public static void CallStoredProcedure(
             SqlCommand command,
             long callerUserInfoId,
             string callerUserName,
             b_Site obj
         )
        {
            SqlParameter RETURN_CODE_parameter = null;
            SqlParameter updateIndexOut_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Name", obj.Name, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Description", obj.Description, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Localization", obj.Localization, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "UIConfiguration", obj.UIConfiguration, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address1", obj.Address1, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address2", obj.Address2, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address3", obj.Address3, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressCity", obj.AddressCity, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressCountry", obj.AddressCountry, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressPostCode", obj.AddressPostCode, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressState", obj.AddressState, 31);
            command.SetInputParameter(SqlDbType.Int, "AppUsers", obj.AppUsers);
            command.SetInputParameter(SqlDbType.Int, "MaxAppUsers", obj.MaxAppUsers);
            command.SetInputParameter(SqlDbType.Int, "LimitedUsers", obj.LimitedUsers);
            command.SetInputParameter(SqlDbType.Int, "MaxLimitedUsers", obj.MaxLimitedUsers);
            command.SetInputParameter(SqlDbType.Int, "SanitationUsers", obj.SanitationUsers);
            command.SetInputParameter(SqlDbType.Int, "MaxSanitationUsers", obj.MaxSanitationUsers);
            command.SetInputParameter(SqlDbType.Int, "WorkRequestUsers", obj.WorkRequestUsers);
            command.SetInputParameter(SqlDbType.Int, "MaxWorkRequestUsers", obj.MaxWorkRequestUsers);
            command.SetInputParameter(SqlDbType.Int, "PhoneUsers", obj.PhoneUsers);
            command.SetInputParameter(SqlDbType.Int, "MaxPhoneUsers", obj.MaxPhoneUsers);
            command.SetInputParameter(SqlDbType.Int, "TabletUsers", obj.TabletUsers);
            command.SetInputParameter(SqlDbType.Int, "MaxTabletUsers", obj.MaxTabletUsers);
            command.SetInputParameter(SqlDbType.Int, "SuperUsers", obj.SuperUsers);
            command.SetInputParameter(SqlDbType.Int, "MaxSuperUsers", obj.MaxSuperUsers);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Status", obj.Status, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "TimeZone", obj.TimeZone, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddress1", obj.BillToAddress1, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddress2", obj.BillToAddress2, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddress3", obj.BillToAddress3, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddressCity", obj.BillToAddressCity, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddressCountry", obj.BillToAddressCountry, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddressPostCode", obj.BillToAddressPostCode, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddressState", obj.BillToAddressState, 31);
            command.SetInputParameter(SqlDbType.Bit, "AutoPurch", obj.AutoPurch);
            command.SetInputParameter(SqlDbType.BigInt, "AutoPurch_CreatorId", obj.AutoPurch_CreatorId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AutoPurch_Prefix", obj.AutoPurch_Prefix, 7);
            command.SetInputParameter(SqlDbType.Bit, "AutoPM", obj.AutoPM);
            command.SetInputParameter(SqlDbType.BigInt, "AutoPM_CreatorId", obj.AutoPM_CreatorId);
            command.SetInputParameter(SqlDbType.Bit, "AutoSanit", obj.AutoSanit);
            command.SetInputParameter(SqlDbType.BigInt, "AutoSanit_CreatorId", obj.AutoSanit_CreatorId);
            command.SetInputParameter(SqlDbType.Bit, "GuestWorkRequest", obj.GuestWorkRequest);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BIMURN", obj.BIMURN, 255);
            command.SetInputParameter(SqlDbType.Bit, "ProcessSystemTree", obj.ProcessSystemTree);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToName", obj.BillToName, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToComment", obj.BillToComment, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ShipToName", obj.ShipToName, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ExSiteCode", obj.ExSiteCode, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ExOrganizationId", obj.ExOrganizationId, 15);
            command.SetInputParameter(SqlDbType.Bit, "UsePartMaster", obj.UsePartMaster);
            command.SetInputParameter(SqlDbType.Bit, "PartClientLookupId", obj.PartClientLookupId);
            command.SetInputParameter(SqlDbType.Bit, "UseVendorMaster", obj.UseVendorMaster);
            command.SetInputParameter(SqlDbType.Bit, "NoPartIdChange", obj.NoPartIdChange);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Logo", obj.Logo, 255);
            command.SetInputParameter(SqlDbType.BigInt, "NonStockAccountId", obj.NonStockAccountId);
            command.SetInputParameter(SqlDbType.BigInt, "ShoppingCartReviewDefault", obj.ShoppingCartReviewDefault);
            command.SetInputParameter(SqlDbType.Bit, "ShoppingCartIncludeBuyer", obj.ShoppingCartIncludeBuyer);
            command.SetInputParameter(SqlDbType.BigInt, "DefaultBuyer", obj.DefaultBuyer);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PartMasterReqEmail", obj.PartMasterReqEmail, 255);
            command.SetInputParameter(SqlDbType.Bit, "ExternalSanitation", obj.ExternalSanitation);
            command.SetInputParameter(SqlDbType.Bit, "MaintOnDemand", obj.MaintOnDemand);
            command.SetInputParameter(SqlDbType.Bit, "UseEquipmentMaster", obj.UseEquipmentMaster);
            command.SetInputParameter(SqlDbType.Bit, "ShoppingCart", obj.ShoppingCart);
            command.SetStringInputParameter(SqlDbType.NVarChar, "MobileWOTimer", obj.MobileWOTimer, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "UIVersion", obj.UIVersion, 15);
            command.SetInputParameter(SqlDbType.Bit, "PMLibrary", obj.PMLibrary);
            command.SetInputParameter(SqlDbType.Bit, "APM", obj.APM);
            command.SetInputParameter(SqlDbType.Bit, "CMMS", obj.CMMS);
            command.SetInputParameter(SqlDbType.Bit, "Sanitation", obj.Sanitation);
            command.SetInputParameter(SqlDbType.Bit, "PlantLocation", obj.PlantLocation);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AssetGroup1Name", obj.AssetGroup1Name, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AssetGroup2Name", obj.AssetGroup2Name, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AssetGroup3Name", obj.AssetGroup3Name, 31);
            command.SetInputParameter(SqlDbType.Bit, "VendorMaster_AllowLocal", obj.VendorMaster_AllowLocal);
            command.SetInputParameter(SqlDbType.Bit, "Fleet", obj.Fleet);
            command.SetInputParameter(SqlDbType.Bit, "UsePunchOut", obj.UsePunchOut);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressISOCountryCode", obj.AddressISOCountryCode, 2);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddressISOCountryCode", obj.BillToAddressISOCountryCode, 2);
            command.SetInputParameter(SqlDbType.Bit, "UsePlanning", obj.UsePlanning);
            command.SetInputParameter(SqlDbType.Bit, "Production", obj.Production);
            command.SetInputParameter(SqlDbType.Int, "ProdAppUsers", obj.ProdAppUsers);
            command.SetInputParameter(SqlDbType.Int, "MaxProdAppUsers", obj.MaxProdAppUsers);
            command.SetStringInputParameter(SqlDbType.NVarChar, "WOBarcode", obj.WOBarcode, 15);
            command.SetInputParameter(SqlDbType.Bit, "IncludePRReview", obj.IncludePRReview);
            command.SetInputParameter(SqlDbType.Bit, "OnOrderCheck", obj.OnOrderCheck);
            command.SetInputParameter(SqlDbType.Bit, "VendorCompliance", obj.VendorCompliance);
            command.SetInputParameter(SqlDbType.Bit, "SourceAssetAccount", obj.SourceAssetAccount);
            command.SetInputParameter(SqlDbType.Int, "IoTDevices", obj.IoTDevices);
            command.SetInputParameter(SqlDbType.Int, "MaxIoTDevices", obj.MaxIoTDevices);
            command.SetInputParameter(SqlDbType.Bit, "SingleStockLineItem", obj.SingleStockLineItem);
            command.SetInputParameter(SqlDbType.Bit, "InvoiceVarianceCheck", obj.InvoiceVarianceCheck);
            command.SetInputParameter(SqlDbType.Int, "InvoiceVariance", obj.InvoiceVariance);
            command.SetInputParameter(SqlDbType.Int, "UpdateIndex", obj.UpdateIndex);

            // Setup updateIndexOut parameter.
            updateIndexOut_parameter = command.Parameters.Add("@UpdateIndexOut", SqlDbType.Int);
            updateIndexOut_parameter.Direction = ParameterDirection.Output;

            // Execute stored procedure.
            command.ExecuteNonQuery();

            obj.UpdateIndex = (int)updateIndexOut_parameter.Value;

            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}