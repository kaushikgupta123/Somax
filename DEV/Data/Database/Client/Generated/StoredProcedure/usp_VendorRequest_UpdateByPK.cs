/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;

using Database.SqlClient;

using Database.Business;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_VendorRequest_UpdateByPK stored procedure.
    /// </summary>
    public class usp_VendorRequest_UpdateByPK
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_VendorRequest_UpdateByPK";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_VendorRequest_UpdateByPK()
        {
        }

        /// <summary>
        /// Static method to call the usp_VendorRequest_UpdateByPK stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public static void CallStoredProcedure(
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_VendorRequest obj
        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetInputParameter(SqlDbType.BigInt, "VendorRequestId", obj.VendorRequestId);
            command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
            command.SetInputParameter(SqlDbType.BigInt, "AreaId", obj.AreaId);
            command.SetInputParameter(SqlDbType.BigInt, "DepartmentId", obj.DepartmentId);
            command.SetInputParameter(SqlDbType.BigInt, "StoreroomId", obj.StoreroomId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address1", obj.Address1, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address2", obj.Address2, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address3", obj.Address3, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressCity", obj.AddressCity, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressCountry", obj.AddressCountry, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressPostCode", obj.AddressPostCode, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressState", obj.AddressState, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CustomerAccount", obj.CustomerAccount, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "EmailAddress", obj.EmailAddress, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FaxNumber", obj.FaxNumber, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FOBCode", obj.FOBCode, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Name", obj.Name, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PhoneNumber", obj.PhoneNumber, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitAddress1", obj.RemitAddress1, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitAddress2", obj.RemitAddress2, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitAddress3", obj.RemitAddress3, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitCity", obj.RemitCity, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitCountry", obj.RemitCountry, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitPostCode", obj.RemitPostCode, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitState", obj.RemitState, 63);
            command.SetInputParameter(SqlDbType.Bit, "RemitUseBusiness", obj.RemitUseBusiness);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Status", obj.Status, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Terms", obj.Terms, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Type", obj.Type, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Website", obj.Website, 127);
            command.SetInputParameter(SqlDbType.DateTime2, "ApproveDate", obj.ApproveDate);
            command.SetInputParameter(SqlDbType.BigInt, "ApproveBy_PersonnelId", obj.ApproveBy_PersonnelId);
            command.SetInputParameter(SqlDbType.DateTime2, "DenyDate", obj.DenyDate);
            command.SetInputParameter(SqlDbType.BigInt, "DenyBy_PersonnelId", obj.DenyBy_PersonnelId);

            // Execute stored procedure.
            command.ExecuteNonQuery();



            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}