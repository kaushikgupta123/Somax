/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;

using Database.Business;
using Database.SqlClient;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_ReportListing_UpdateByPK stored procedure.
    /// </summary>
    public class usp_ReportListing_UpdateByPK
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_ReportListing_UpdateByPK";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_ReportListing_UpdateByPK()
        {
        }

        /// <summary>
        /// Static method to call the usp_ReportListing_UpdateByPK stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public static void CallStoredProcedure(
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_ReportListing obj
        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ReportListingId", obj.ReportListingId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ReportName", obj.ReportName, 250);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Description", obj.Description, 250);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ReportGroup", obj.ReportGroup, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SourceName", obj.SourceName, 250);
            command.SetInputParameter(SqlDbType.Bit, "UseSP", obj.UseSP);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PrimarySortColumn", obj.PrimarySortColumn, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SecondarySortColumn", obj.SecondarySortColumn, 30);
            command.SetInputParameter(SqlDbType.Bit, "IsGrouped", obj.IsGrouped);
            command.SetStringInputParameter(SqlDbType.NVarChar, "GroupColumn", obj.GroupColumn, 30);
            command.SetInputParameter(SqlDbType.Bit, "IncludePrompt", obj.IncludePrompt);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Prompt1Source", obj.Prompt1Source, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Prompt1Type", obj.Prompt1Type, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Prompt1ListSource", obj.Prompt1ListSource, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Prompt1List", obj.Prompt1List, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Prompt2Source", obj.Prompt2Source, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Prompt2Type", obj.Prompt2Type, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Prompt2ListSource", obj.Prompt2ListSource, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Prompt2List", obj.Prompt2List, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ChildSourceName", obj.ChildSourceName, 250);
            command.SetStringInputParameter(SqlDbType.NVarChar, "MasterLinkColumn", obj.MasterLinkColumn, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ChildLinkColumn", obj.ChildLinkColumn, 30);
            command.SetInputParameter(SqlDbType.Bit, "IncludeChild", obj.IncludeChild);
            command.SetInputParameter(SqlDbType.Bit, "IsEnterprise", obj.IsEnterprise);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BaseQuery", obj.BaseQuery, 1073741823);
            command.SetInputParameter(SqlDbType.Bit, "NoExcel", obj.NoExcel);
            command.SetInputParameter(SqlDbType.Bit, "NoCSV", obj.NoCSV);
            command.SetInputParameter(SqlDbType.Bit, "DevExpressRpt", obj.DevExpressRpt);
            command.SetStringInputParameter(SqlDbType.NVarChar, "DevExpressRptName", obj.DevExpressRptName, 205);

            // Execute stored procedure.
            command.ExecuteNonQuery();



            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}