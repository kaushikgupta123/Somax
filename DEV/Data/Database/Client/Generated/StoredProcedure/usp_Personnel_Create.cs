/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;

using Database.Business;
using Database.SqlClient;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_Personnel_Create stored procedure.
    /// </summary>
    public class usp_Personnel_Create
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_Personnel_Create";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_Personnel_Create()
        {
        }

        /// <summary>
        /// Static method to call the usp_Personnel_Create stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public static void CallStoredProcedure(
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_Personnel obj
        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetOutputParameter(SqlDbType.BigInt, "PersonnelId");
            command.SetInputParameter(SqlDbType.BigInt, "UserInfoId", obj.UserInfoId);
            command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
            command.SetInputParameter(SqlDbType.BigInt, "AreaId", obj.AreaId);
            command.SetInputParameter(SqlDbType.BigInt, "DepartmentId", obj.DepartmentId);
            command.SetInputParameter(SqlDbType.BigInt, "StoreroomId", obj.StoreroomId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ClientLookupId", obj.ClientLookupId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address1", obj.Address1, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address2", obj.Address2, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address3", obj.Address3, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressCity", obj.AddressCity, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressCountry", obj.AddressCountry, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressPostCode", obj.AddressPostCode, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressState", obj.AddressState, 63);
            command.SetInputParameter(SqlDbType.Decimal, "ApprovalLimitPO", obj.ApprovalLimitPO);
            command.SetInputParameter(SqlDbType.Decimal, "ApprovalLimitWO", obj.ApprovalLimitWO);
            command.SetInputParameter(SqlDbType.Decimal, "BasePay", obj.BasePay);
            command.SetInputParameter(SqlDbType.BigInt, "CraftId", obj.CraftId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Crew", obj.Crew, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CurrentLevel", obj.CurrentLevel, 15);
            command.SetInputParameter(SqlDbType.DateTime2, "DateofBirth", obj.DateofBirth);
            command.SetInputParameter(SqlDbType.BigInt, "Default_StoreroomId", obj.Default_StoreroomId);
            command.SetInputParameter(SqlDbType.Decimal, "DistancefromWork", obj.DistancefromWork);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Email", obj.Email, 255);
            command.SetInputParameter(SqlDbType.Bit, "Floater", obj.Floater);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Gender", obj.Gender, 15);
            command.SetInputParameter(SqlDbType.Bit, "InactiveFlag", obj.InactiveFlag);
            command.SetStringInputParameter(SqlDbType.NVarChar, "InitialLevel", obj.InitialLevel, 15);
            command.SetInputParameter(SqlDbType.Decimal, "InitialPay", obj.InitialPay);
            command.SetInputParameter(SqlDbType.DateTime2, "LastSalaryReview", obj.LastSalaryReview);
            command.SetStringInputParameter(SqlDbType.NVarChar, "MaritalStatus", obj.MaritalStatus, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "NameFirst", obj.NameFirst, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "NameLast", obj.NameLast, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "NameMiddle", obj.NameMiddle, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Phone1", obj.Phone1, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Phone2", obj.Phone2, 31);
            command.SetInputParameter(SqlDbType.Bit, "Planner", obj.Planner);
            command.SetInputParameter(SqlDbType.Bit, "Scheduler", obj.Scheduler);
            command.SetInputParameter(SqlDbType.Bit, "ScheduleEmployee", obj.ScheduleEmployee);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Section", obj.Section, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Shift", obj.Shift, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SocialSecurityNumber", obj.SocialSecurityNumber, 15);
            command.SetInputParameter(SqlDbType.DateTime2, "StartDate", obj.StartDate);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Status", obj.Status, 15);
            command.SetInputParameter(SqlDbType.BigInt, "Supervisor_PersonnelId", obj.Supervisor_PersonnelId);
            command.SetInputParameter(SqlDbType.DateTime2, "TerminationDate", obj.TerminationDate);
            command.SetStringInputParameter(SqlDbType.NVarChar, "TerminationReason", obj.TerminationReason, 15);
            command.SetInputParameter(SqlDbType.Bit, "Buyer", obj.Buyer);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ExOracleUserId", obj.ExOracleUserId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ScheduleGroup", obj.ScheduleGroup, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AssetGroup1", obj.AssetGroup1, 1073741823);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AssetGroup2", obj.AssetGroup2, 1073741823);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AssetGroup3", obj.AssetGroup3, 1073741823);
            command.SetInputParameter(SqlDbType.Bit, "SOMAXAdmin", obj.SOMAXAdmin);
            command.SetInputParameter(SqlDbType.BigInt, "AssignedAssetGroup1", obj.AssignedAssetGroup1);
            command.SetInputParameter(SqlDbType.BigInt, "AssignedAssetGroup2", obj.AssignedAssetGroup2);
            command.SetInputParameter(SqlDbType.BigInt, "AssignedAssetGroup3", obj.AssignedAssetGroup3);

            // Execute stored procedure.
            command.ExecuteNonQuery();

            obj.PersonnelId = (long)command.Parameters["@PersonnelId"].Value;

            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}