/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;
using Database.SqlClient;
using Database.Business;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_Vendor_UpdateByPK stored procedure.
    /// </summary>
    public class usp_Vendor_UpdateByPK
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_Vendor_UpdateByPK";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_Vendor_UpdateByPK()
        {
        }

        /// <summary>
        /// Static method to call the usp_Vendor_UpdateByPK stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="updateIndexOut">int that contains the value of the @UpdateIndexOut parameter</param>
        public static void CallStoredProcedure(
           SqlCommand command,
           long callerUserInfoId,
           string callerUserName,
           b_Vendor obj
       )
        {
            SqlParameter RETURN_CODE_parameter = null;
            SqlParameter updateIndexOut_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetInputParameter(SqlDbType.BigInt, "VendorId", obj.VendorId);
            command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
            command.SetInputParameter(SqlDbType.BigInt, "AreaId", obj.AreaId);
            command.SetInputParameter(SqlDbType.BigInt, "DepartmentId", obj.DepartmentId);
            command.SetInputParameter(SqlDbType.BigInt, "StoreroomId", obj.StoreroomId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ClientLookupId", obj.ClientLookupId, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address1", obj.Address1, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address2", obj.Address2, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Address3", obj.Address3, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressCity", obj.AddressCity, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressCountry", obj.AddressCountry, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressPostCode", obj.AddressPostCode, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "AddressState", obj.AddressState, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CustomerAccount", obj.CustomerAccount, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "EmailAddress", obj.EmailAddress, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FaxNumber", obj.FaxNumber, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FOBCode", obj.FOBCode, 15);
            command.SetInputParameter(SqlDbType.Bit, "InactiveFlag", obj.InactiveFlag);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Name", obj.Name, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PhoneNumber", obj.PhoneNumber, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitAddress1", obj.RemitAddress1, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitAddress2", obj.RemitAddress2, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitAddress3", obj.RemitAddress3, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitCity", obj.RemitCity, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitCountry", obj.RemitCountry, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitPostCode", obj.RemitPostCode, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RemitState", obj.RemitState, 63);
            command.SetInputParameter(SqlDbType.Bit, "RemitUseBusiness", obj.RemitUseBusiness);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Terms", obj.Terms, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Type", obj.Type, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Website", obj.Website, 127);
            command.SetInputParameter(SqlDbType.BigInt, "VendorMasterId", obj.VendorMasterId);
            command.SetInputParameter(SqlDbType.Bit, "AutoEmailPO", obj.AutoEmailPO);
            command.SetInputParameter(SqlDbType.Bit, "IsExternal", obj.IsExternal);
            command.SetInputParameter(SqlDbType.Bit, "PunchoutIndicator", obj.PunchoutIndicator);
            command.SetStringInputParameter(SqlDbType.NVarChar, "VendorDomain", obj.VendorDomain, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "VendorIdentity", obj.VendorIdentity, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SharedSecret", obj.SharedSecret, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SenderDomain", obj.SenderDomain, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SenderIdentity", obj.SenderIdentity, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PunchoutURL", obj.PunchoutURL, 1073741823);
            command.SetInputParameter(SqlDbType.Bit, "AutoSendPunchOutPO", obj.AutoSendPunchOutPO);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SendPunchoutPOURL", obj.SendPunchoutPOURL, 1073741823);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SendPunchoutPOEmail", obj.SendPunchoutPOEmail, 63);
            command.SetInputParameter(SqlDbType.BigInt, "SourceId", obj.SourceId);
            command.SetInputParameter(SqlDbType.Bit, "InsuranceOverride", obj.InsuranceOverride);
            command.SetInputParameter(SqlDbType.DateTime2, "InsuranceOverrideDate", obj.InsuranceOverrideDate);
            command.SetInputParameter(SqlDbType.Bit, "InsuranceRequired", obj.InsuranceRequired);
            command.SetInputParameter(SqlDbType.BigInt, "InsuranceSource", obj.InsuranceSource);
            command.SetInputParameter(SqlDbType.DateTime2, "InsuranceExpireDate", obj.InsuranceExpireDate);
            command.SetInputParameter(SqlDbType.BigInt, "ContractorOwner", obj.ContractorOwner);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SICCode", obj.SICCode, 31);
            command.SetInputParameter(SqlDbType.Decimal, "OSHARate", obj.OSHARate);
            command.SetInputParameter(SqlDbType.Decimal, "ExpModRate", obj.ExpModRate);
            command.SetStringInputParameter(SqlDbType.NVarChar, "NAICSCode", obj.NAICSCode, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ClassCode", obj.ClassCode, 15);
            command.SetInputParameter(SqlDbType.Bit, "AssetMgtOverride", obj.AssetMgtOverride);
            command.SetInputParameter(SqlDbType.DateTime2, "AssetMgtOverrideDate", obj.AssetMgtOverrideDate);
            command.SetInputParameter(SqlDbType.Bit, "AssetMgtRequired", obj.AssetMgtRequired);
            command.SetInputParameter(SqlDbType.BigInt, "AssetMgtSource", obj.AssetMgtSource);
            command.SetInputParameter(SqlDbType.DateTime2, "AssetMgtExpireDate", obj.AssetMgtExpireDate);
            command.SetInputParameter(SqlDbType.BigInt, "AssetMgtOwner", obj.AssetMgtOwner);
            command.SetInputParameter(SqlDbType.Int, "UpdateIndex", obj.UpdateIndex);

            // Setup updateIndexOut parameter.
            updateIndexOut_parameter = command.Parameters.Add("@UpdateIndexOut", SqlDbType.Int);
            updateIndexOut_parameter.Direction = ParameterDirection.Output;

            // Execute stored procedure.
            command.ExecuteNonQuery();

            obj.UpdateIndex = (int)updateIndexOut_parameter.Value;

            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}