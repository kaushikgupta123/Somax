/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;
using Database.SqlClient;
using Database.Business;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_POImport2_UpdateByPK stored procedure.
    /// </summary>
    public class usp_POImport2_UpdateByPK
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_POImport2_UpdateByPK";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_POImport2_UpdateByPK ()
        {
        }

        /// <summary>
        /// Static method to call the usp_POImport2_UpdateByPK stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="updateIndexOut">int that contains the value of the @UpdateIndexOut parameter</param>
        public static void CallStoredProcedure (
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_POImport2 obj
        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            SqlParameter        updateIndexOut_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetInputParameter(SqlDbType.BigInt, "POImport2Id", obj.POImport2Id);
            command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PurchaseOrder", obj.PurchaseOrder, 31);
            command.SetInputParameter(SqlDbType.BigInt, "ExPurchaseOrderId", obj.ExPurchaseOrderId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PurchaseRequest", obj.PurchaseRequest, 15);
            command.SetInputParameter(SqlDbType.BigInt, "PurchaseRequestId", obj.PurchaseRequestId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ExRequest", obj.ExRequest, 20);
            command.SetInputParameter(SqlDbType.DateTime2, "Required", obj.Required);
            command.SetInputParameter(SqlDbType.DateTime2, "POCreateDate", obj.POCreateDate);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Currency", obj.Currency, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ExVendor", obj.ExVendor, 31);
            command.SetInputParameter(SqlDbType.BigInt, "ExVendorId", obj.ExVendorId);
            command.SetInputParameter(SqlDbType.BigInt, "ExVendorSiteId", obj.ExVendorSiteId);
            command.SetInputParameter(SqlDbType.BigInt, "PRLineItemId", obj.PRLineItemId);
            command.SetInputParameter(SqlDbType.Int, "LineNumber", obj.LineNumber);
            command.SetInputParameter(SqlDbType.BigInt, "ExPurchaseOrderLineId", obj.ExPurchaseOrderLineId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ExPart", obj.ExPart, 70);
            command.SetInputParameter(SqlDbType.BigInt, "ExPartId", obj.ExPartId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Description", obj.Description, 255);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Category", obj.Category, 255);
            command.SetInputParameter(SqlDbType.Decimal, "PurchaseQuantity", obj.PurchaseQuantity);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PurchaseUOM", obj.PurchaseUOM, 15);
            command.SetInputParameter(SqlDbType.Decimal, "UnitCost", obj.UnitCost);
            command.SetInputParameter(SqlDbType.Decimal, "UOMConversion", obj.UOMConversion);
            command.SetStringInputParameter(SqlDbType.NVarChar, "WorkOrder", obj.WorkOrder, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "LineStatus", obj.LineStatus, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ErrorMessage", obj.ErrorMessage, 511);
            command.SetInputParameter(SqlDbType.DateTime2, "LastProcess", obj.LastProcess);
            command.SetInputParameter(SqlDbType.Int, "Revision", obj.Revision);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PaymentTerms", obj.PaymentTerms, 50);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddress1", obj.BillToAddress1, 240);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToAddress2", obj.BillToAddress2, 240);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToCity", obj.BillToCity, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToState", obj.BillToState, 120);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToZip", obj.BillToZip, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "BillToCountry", obj.BillToCountry, 60);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ShipToAddress1", obj.ShipToAddress1, 240);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ShipToAddress2", obj.ShipToAddress2, 240);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ShipToCity", obj.ShipToCity, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ShipToState", obj.ShipToState, 120);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ShipToZip", obj.ShipToZip, 30);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ShipToCountry", obj.ShipToCountry, 60);
            command.SetInputParameter(SqlDbType.BigInt, "POBuyer_PersonnelId", obj.POBuyer_PersonnelId);
            command.SetInputParameter(SqlDbType.BigInt, "POCreator_PersonnelId", obj.POCreator_PersonnelId);
            command.SetInputParameter(SqlDbType.Bit, "VendorAutoEmail", obj.VendorAutoEmail);
            command.SetStringInputParameter(SqlDbType.NVarChar, "VendorEmailAddress", obj.VendorEmailAddress, 63);
            command.SetInputParameter(SqlDbType.BigInt, "PurchaseOrderId", obj.PurchaseOrderId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ExpenseAccount", obj.ExpenseAccount, 63);
            command.SetInputParameter(SqlDbType.Int, "UpdateIndex", obj.UpdateIndex);

                // Setup updateIndexOut parameter.
                updateIndexOut_parameter = command.Parameters.Add("@UpdateIndexOut", SqlDbType.Int);
                updateIndexOut_parameter.Direction = ParameterDirection.Output;

            // Execute stored procedure.
            command.ExecuteNonQuery();

            obj.UpdateIndex = (int)updateIndexOut_parameter.Value;

            // Process the RETURN_CODE parameter value
            retCode = (int) RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}