/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;

using Database.Business;
using Database.SqlClient;
namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_BBUKPI_Create stored procedure.
    /// </summary>
    public class usp_BBUKPI_Create
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_BBUKPI_Create";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_BBUKPI_Create ()
        {
        }

        /// <summary>
        /// Static method to call the usp_BBUKPI_Create stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public static void CallStoredProcedure(
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_BBUKPI obj
        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetOutputParameter(SqlDbType.BigInt, "BBUKPIId");
            command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
            command.SetInputParameter(SqlDbType.Decimal, "PMWOCompleted", obj.PMWOCompleted);
            command.SetInputParameter(SqlDbType.Int, "WOBacklogCount", obj.WOBacklogCount);
            command.SetInputParameter(SqlDbType.Int, "RCACount", obj.RCACount);
            command.SetInputParameter(SqlDbType.Int, "TTRCount", obj.TTRCount);
            command.SetInputParameter(SqlDbType.Decimal, "InvValueOverMax", obj.InvValueOverMax);
            command.SetInputParameter(SqlDbType.Decimal, "PhyInvAccuracy", obj.PhyInvAccuracy);
            command.SetInputParameter(SqlDbType.Decimal, "EVTrainingHrs", obj.EVTrainingHrs);
            command.SetInputParameter(SqlDbType.Bit, "DownDaySched", obj.DownDaySched);
            command.SetInputParameter(SqlDbType.Int, "OptPMPlansCompleted", obj.OptPMPlansCompleted);
            command.SetInputParameter(SqlDbType.Int, "OptPMPlansAdopted", obj.OptPMPlansAdopted);
            command.SetInputParameter(SqlDbType.Decimal, "MLT", obj.MLT);
            command.SetInputParameter(SqlDbType.Bit, "TrainingPlanImp", obj.TrainingPlanImp);
            command.SetInputParameter(SqlDbType.DateTime2, "SubmitDate", obj.SubmitDate);
            command.SetInputParameter(SqlDbType.BigInt, "SubmitBy_PersonnelId", obj.SubmitBy_PersonnelId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Status", obj.Status, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Week", obj.Week, 2);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Year", obj.Year, 4);
            command.SetInputParameter(SqlDbType.Decimal, "CycleCountProgress", obj.CycleCountProgress);
            command.SetInputParameter(SqlDbType.Int, "PMFollowUpComp", obj.PMFollowUpComp);
            command.SetInputParameter(SqlDbType.Int, "ActiveMechUsers", obj.ActiveMechUsers);
            command.SetInputParameter(SqlDbType.DateTime2, "WeekStart", obj.WeekStart);
            command.SetInputParameter(SqlDbType.DateTime2, "WeekEnd", obj.WeekEnd);

            // Execute stored procedure.
            command.ExecuteNonQuery();

            obj.BBUKPIId = (long)command.Parameters["@BBUKPIId"].Value;

            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}