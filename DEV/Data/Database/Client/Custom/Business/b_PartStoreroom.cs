/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{
    public partial class b_PartStoreroom
    {
        #region Properties
        public string StoreroomName { get; set; }
        public string AccountId_ClientLookupId { get; set; }
        public string ATSource_StoreroomName { get; set; }
        public long SiteId { get; set; }
        public string PurchVendorIdClientLookupId { get; set; }
        public string PartIdClientLookupId { get; set; }
        public string LocationIdClientLookupId { get; set; }
        public bool createmode { get; set; }
        public DataTable LuList { get; set; }

        //V2-670
        //public string Part_ClientLookupId { get; set; }
        public bool Maintain { get; set; }
        public List<b_PartStoreroom> listOfPartStoreroom { get; set; }
        public long PersonnelId { get; set; }
        //V2-1059
        public string orderbyColumn { get; set; }
        public string orderBy { get; set; }
        public string offset1 { get; set; }
        public string nextrow { get; set; }
        public string StoreroomIdList { get; set; }
        public long RowId { get; set; }
        public string RequestStr { get; set; }
        public string IssueStr { get; set; }
        public string PartDescription { get; set; }
        public decimal? TransferQuantity { get; set; }
        public decimal? Max { get; set; }
        public decimal? Min { get; set; }
        public decimal? OnHand { get; set; }
        public long RequestPTStoreroomId { get; set; }
        public long RequestStoreroomId { get; set; }
        public long RequestPartId { get; set; }
        public long IssuePTStoreroomId { get; set; }
        public long IssueStoreroomId { get; set; }
        public long IssuePartId { get; set; }
        public long Creator_PersonnelId { get; set; }
        public int TotalCount { get; set; }
        //

        #region V2-755
        public bool Issue { get; set; }
        public bool PhysicalInventory { get; set; }
        #endregion

        #region 1025
        public string StoreroomNameWithDescription { get; set; }
        public decimal TotalOnRequest { get; set; }
        public decimal TotalOnOrder { get; set; }
        public string VendorName { get; set; }
        public string VendorClientLookupId { get; set; }
        #endregion

        public string Flag { get; set; } //V2-1070
        #endregion

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PartStoreroom object.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PartStoreroom object</returns>
        public static object ProcessRowForPartStoreroomSearchResult(SqlDataReader reader)
        {
            // Create instance of object
            b_PartStoreroom obj = new b_PartStoreroom();

            // Load the object from the database
            obj.LoadFromDatabaseForPartStoreroomSearchResult(reader);

            // Return result
            return (object)obj;
        }
        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_PartStoreroom object.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_PartStoreroom object</returns>
        public static object ProcessRowExtended(SqlDataReader reader)
        {
            // Create instance of object
            b_PartStoreroom obj = new b_PartStoreroom();

            // Load the object from the database
            obj.LoadFromDatabaseExtended(reader);

            // Return result
            return (object)obj;
        }
        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PartStoreroom object.
        /// Adds the extended items
        /// This routine should be applied to the usp_PartStoreroom_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// 
        public void LoadFromDatabaseExtended(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);

            try
            {
                // Storeroom name (StoreroomId)
                StoreroomName = reader.GetString(i++);
                // Account Client Lookup Id (AccountID)
                AccountId_ClientLookupId = reader.GetString(i++);
                // Auto transfer source storeroom name (ATSource_PartStoreroomId)
                ATSource_StoreroomName = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                try { reader["StoreroomName"].ToString(); }
                catch { missing.Append("StoreroomName "); }

                try { reader["AccountId_ClientLookupId"].ToString(); }
                catch { missing.Append("AccountId_ClientLookupId "); }

                try { reader["ATSource_StoreroomName"].ToString(); }
                catch { missing.Append("ATSource_StoreroomName "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);

            }



        }
        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_PartStoreroom object.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_PartStoreroom_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// 
        public void LoadFromDatabaseForPartStoreroomSearchResult(SqlDataReader reader)
        {
            int i = 42;
            try
            {
                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PartStoreroomId column, bigint, not null
                PartStoreroomId = reader.GetInt64(i++);


                // CountFrequency column, int, not null
                CountFrequency = reader.GetInt32(i++);

                // LastCounted column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastCounted = reader.GetDateTime(i);
                }
                else
                {
                    LastCounted = DateTime.MinValue;
                }
                i++;
                // Location1_1 column, nvarchar(31), not null
                Location1_1 = reader.GetString(i++);

                // Location1_2 column, nvarchar(31), not null
                Location1_2 = reader.GetString(i++);

                // Location1_3 column, nvarchar(31), not null
                Location1_3 = reader.GetString(i++);

                // Location1_4 column, nvarchar(31), not null
                Location1_4 = reader.GetString(i++);

                // QtyMaximum column, decimal(15,6), not null
                QtyMaximum = reader.GetDecimal(i++);

                // QtyOnHand column, decimal(15,6), not null
                QtyOnHand = reader.GetDecimal(i++);

                // QtyReorderLevel column, decimal(15,6), not null
                QtyReorderLevel = reader.GetDecimal(i++);


                // ReorderMethod column, nvarchar(15), not null
                ReorderMethod = reader.GetString(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["PartStoreroom_ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PartStoreroom_PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["PartStoreroom_CountFrequency"].ToString(); }
                catch { missing.Append("CountFrequency "); }

                try { reader["PartStoreroom_InactiveFlag"].ToString(); }
                catch { missing.Append("InactiveFlag "); }

                try { reader["PartStoreroom_LastCounted"].ToString(); }
                catch { missing.Append("LastCounted "); }

                try { reader["PartStoreroom_Location1_1"].ToString(); }
                catch { missing.Append("Location1_1 "); }

                try { reader["PartStoreroom_Location1_2"].ToString(); }
                catch { missing.Append("Location1_2 "); }

                try { reader["PartStoreroom_Location1_3"].ToString(); }
                catch { missing.Append("Location1_3 "); }

                try { reader["PartStoreroom_Location1_4"].ToString(); }
                catch { missing.Append("Location1_4 "); }

                try { reader["PartStoreroom_QtyMaximum"].ToString(); }
                catch { missing.Append("QtyMaximum "); }

                try { reader["PartStoreroom_QtyOnHand"].ToString(); }
                catch { missing.Append("QtyOnHand "); }


                try { reader["PartStoreroom_QtyReorderLevel"].ToString(); }
                catch { missing.Append("QtyReorderLevel "); }

                try { reader["PartStoreroom_ReorderMethod"].ToString(); }
                catch { missing.Append("ReorderMethod "); }

                try { reader["PartStoreroom_UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void RetrieveByPartId(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName, ref List<b_PartStoreroom> data)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_PartStoreroom> results = null;
            data = new List<b_PartStoreroom>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartStoreroom_RetrieveByPartId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_PartStoreroom>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void RetrieveByPartStoreroomId(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName)
        {
            Database.SqlClient.ProcessRow<b_PartStoreroom> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PartStoreroom>(reader => { this.LoadFromDatabaseExtended(reader); return this; });
                Database.StoredProcedure.usp_PartStoreroom_RetrieveByPartStoreroomId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void ValidateByPartId(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName, ref List<b_StoredProcValidationError> data)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartStoreroom_ValidateByPartId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }
        public void UpdateByPartId(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartStoreroom_UpdateByPartId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        //V2-670
        public void RetrieveForChildGridByPartId(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName, ref b_PartStoreroom results)
        {

            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartStoreroom_RetrieveForChildGridByPartId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_PartStoreroom ProcessPartStoreroomRetrieveForRetrieveForChildGridByPartIdV2(SqlDataReader reader)
        {
            b_PartStoreroom PartStoreroom = new b_PartStoreroom();

            PartStoreroom.LoadFromDatabaseForRetrieveForChildGridByPartIdV2(reader);
            return PartStoreroom;
        }

        public int LoadFromDatabaseForRetrieveForChildGridByPartIdV2(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                //  ClientLookupId
                if (false == reader.IsDBNull(i))
                {
                    PartIdClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartIdClientLookupId = "";
                }
                i++;

                // StoreroomId
                if (false == reader.IsDBNull(i))
                {
                    PartStoreroomId = reader.GetInt64(i);
                }
                else
                {
                    PartStoreroomId = 0;
                }
                i++;
                // QtyOnHand 
                if (false == reader.IsDBNull(i))
                {
                    QtyOnHand = reader.GetDecimal(i);
                }
                else
                {
                    QtyOnHand = 0;
                }
                i++;

                // QtyMaximum 
                if (false == reader.IsDBNull(i))
                {
                    QtyMaximum = reader.GetDecimal(i);
                }
                else
                {
                    QtyMaximum = 0;
                }
                i++;


                // QtyReorderLevel 
                if (false == reader.IsDBNull(i))
                {
                    QtyReorderLevel = reader.GetDecimal(i);
                }
                else
                {
                    QtyReorderLevel = 0;
                }
                i++;

                // Location1_1 
                if (false == reader.IsDBNull(i))
                {
                    Location1_1 = reader.GetString(i);
                }
                else
                {
                    Location1_1 = "";
                }
                i++;


                // Location1_2 
                if (false == reader.IsDBNull(i))
                {
                    Location1_2 = reader.GetString(i);
                }
                else
                {
                    Location1_2 = "";
                }
                i++;

                // Location1_3 
                if (false == reader.IsDBNull(i))
                {
                    Location1_3 = reader.GetString(i);
                }
                else
                {
                    Location1_3 = "";
                }
                i++;

                // Location1_4 
                if (false == reader.IsDBNull(i))
                {
                    Location1_4 = reader.GetString(i);
                }
                else
                {
                    Location1_4 = "";
                }
                i++;
                // Location1_5 
                if (false == reader.IsDBNull(i))
                {
                    Location1_5 = reader.GetString(i);
                }
                else
                {
                    Location1_5 = "";
                }
                i++;
                // CountFrequency column, int, not null
                CountFrequency = reader.GetInt32(i++);

                // LastCounted column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastCounted = reader.GetDateTime(i);
                }
                else
                {
                    LastCounted = DateTime.MinValue;
                }
                i++;
                //AutoTransfer
                if (false == reader.IsDBNull(i))
                {
                    AutoTransfer = reader.GetInt64(i);
                }
                else
                {
                    AutoTransfer = 0;
                }
                i++;
                //StoreroomName
                if (false == reader.IsDBNull(i))
                {
                    StoreroomName = reader.GetString(i);
                }
                else
                {
                    StoreroomName = "";
                }
                i++;
                StoreroomId = reader.GetInt64(i++);
                Maintain = reader.GetBoolean(i++);
                Issue = reader.GetBoolean(i++);
                PhysicalInventory = reader.GetBoolean(i++);
                //StoreroomNameWithDescription
                if (false == reader.IsDBNull(i))
                {
                    StoreroomNameWithDescription = reader.GetString(i);
                }
                else
                {
                    StoreroomNameWithDescription = "";
                }
                i++;
                // TotalOnRequest 
                if (false == reader.IsDBNull(i))
                {
                    TotalOnRequest = reader.GetDecimal(i);
                }
                else
                {
                    TotalOnRequest = 0;
                }
                i++;
                // TotalOnOrder 
                if (false == reader.IsDBNull(i))
                {
                    TotalOnOrder = reader.GetDecimal(i);
                }
                else
                {
                    TotalOnOrder = 0;
                }

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["Part_ClientLookupId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["QtyOnHand"].ToString(); }
                catch { missing.Append("QtyOnHand "); }

                try { reader["QtyMaximum"].ToString(); }
                catch { missing.Append("QtyMaximum "); }

                try { reader["QtyReorderLevel"].ToString(); }
                catch { missing.Append("QtyReorderLevel "); }

                try { reader["Location1_1"].ToString(); }
                catch { missing.Append("Location1_1 "); }

                try { reader["Location1_2"].ToString(); }
                catch { missing.Append("Location1_2 "); }

                try { reader["Location1_3"].ToString(); }
                catch { missing.Append("Location1_3"); }

                try { reader["Location1_4"].ToString(); }
                catch { missing.Append("Location1_4 "); }
                                
                try { reader["CountFrequency"].ToString(); }
                catch { missing.Append("CountFrequency "); }

                try { reader["LastCounted"].ToString(); }
                catch { missing.Append("LastCounted "); }

                try { reader["AutoTransfer"].ToString(); }
                catch { missing.Append("AutoTransfer "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }
                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["Maintain"].ToString(); }
                catch { missing.Append("Maintain "); }

                try { reader["Issue"].ToString(); }
                catch { missing.Append("Issue "); }

                try { reader["PhysicalInventory"].ToString(); }
                catch { missing.Append("PhysicalInventory "); }

                try { reader["StoreroomNameWithDescription"].ToString(); }
                catch { missing.Append("StoreroomNameWithDescription "); }

                try { reader["TotalOnRequest"].ToString(); }
                catch { missing.Append("TotalOnRequest "); }

                try { reader["TotalOnOrder"].ToString(); }
                catch { missing.Append("TotalOnOrder "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

            return i;
        }

        //V2-670
        public void RetrieveByStoreroomIdAndPartId(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_PartStoreroom> results
          )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_PartStoreroom_RetrieveByStoreroomIdAndPartId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }


        public static b_PartStoreroom ProcessPartStoreroomRetrievebyStoreroomIdandPartIdV2(SqlDataReader reader)
        {
            b_PartStoreroom PartStoreroom = new b_PartStoreroom();

            PartStoreroom.LoadFromDatabaseForRetrievebyStoreroomIdandPartIdV2(reader);
            return PartStoreroom;
        }

        public int LoadFromDatabaseForRetrievebyStoreroomIdandPartIdV2(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                //  ClientId
                if (false == reader.IsDBNull(i))
                {
                    ClientId = reader.GetInt64(i);
                }
                else
                {
                    ClientId = 0;
                }
                i++;

                //PartId
                if (false == reader.IsDBNull(i))
                {
                    PartId = reader.GetInt64(i);
                }
                else
                {
                    PartId = 0;
                }
                i++;

                // PartStoreroomId
                if (false == reader.IsDBNull(i))
                {
                    PartStoreroomId = reader.GetInt64(i);
                }
                else
                {
                    PartStoreroomId = 0;
                }
                i++;
                // StoreroomId
                if (false == reader.IsDBNull(i))
                {
                    StoreroomId = reader.GetInt64(i);
                }
                else
                {
                    StoreroomId = 0;
                }
                i++;
                // CountFrequency 
                CountFrequency = reader.GetInt32(i++);

                // LastCounted 
                if (false == reader.IsDBNull(i))
                {
                    LastCounted = reader.GetDateTime(i);
                }
                else
                {
                    LastCounted = DateTime.MinValue;
                }
                i++;
                // Location1_1 
                if (false == reader.IsDBNull(i))
                {
                    Location1_1 = reader.GetString(i);
                }
                else
                {
                    Location1_1 = "";
                }
                i++;


                // Location1_2 
                if (false == reader.IsDBNull(i))
                {
                    Location1_2 = reader.GetString(i);
                }
                else
                {
                    Location1_2 = "";
                }
                i++;

                // Location1_3 
                if (false == reader.IsDBNull(i))
                {
                    Location1_3 = reader.GetString(i);
                }
                else
                {
                    Location1_3 = "";
                }
                i++;

                // Location1_4 
                if (false == reader.IsDBNull(i))
                {
                    Location1_4 = reader.GetString(i);
                }
                else
                {
                    Location1_4 = "";
                }
                i++;
                // Location1_5 
                if (false == reader.IsDBNull(i))
                {
                    Location1_5 = reader.GetString(i);
                }
                else
                {
                    Location1_5 = "";
                }
                i++;
                UpdateIndex = reader.GetInt32(i++);

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["Location1_1"].ToString(); }
                catch { missing.Append("Location1_1 "); }

                try { reader["Location1_2"].ToString(); }
                catch { missing.Append("Location1_2 "); }

                try { reader["Location1_3"].ToString(); }
                catch { missing.Append("Location1_3"); }

                try { reader["Location1_4"].ToString(); }
                catch { missing.Append("Location1_4 "); }

                try { reader["Location1_5"].ToString(); }
                catch { missing.Append("Location1_5 "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

            return i;
        }


        public void ValidateStoreroomId(
      SqlConnection connection,
      SqlTransaction transaction,
      long callerUserInfoId,
      string callerUserName,
      ref List<b_StoredProcValidationError> data
    )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            //data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartStoreroom_ValidateStoreroomId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        #region V2-751
        public void RetrieveIssuingStoreroomListForPartTransferRequest(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
         string callerUserName,
         ref List<b_PartStoreroom> results
        )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_PartStoreroom_IssuingStoreroomListForPartTransferRequest_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_PartStoreroom ProcessPartStoreroomRetrieveForPartTransferRequest(SqlDataReader reader)
        {
            b_PartStoreroom PartStoreroom = new b_PartStoreroom();

            PartStoreroom.LoadFromDatabaseForRetrieveForPartTransferRequest(reader);
            return PartStoreroom;
        }

        public int LoadFromDatabaseForRetrieveForPartTransferRequest(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // PartStoreroomId
                if (false == reader.IsDBNull(i))
                {
                    PartStoreroomId = reader.GetInt64(i);
                }
                else
                {
                    PartStoreroomId = 0;
                }
                i++;
                // StoreroomId
                if (false == reader.IsDBNull(i))
                {
                    StoreroomId = reader.GetInt64(i);
                }
                else
                {
                    StoreroomId = 0;
                }

                i++;
                // StoreroomName
                if (false == reader.IsDBNull(i))
                {
                    StoreroomName = reader.GetString(i);
                }
                else
                {
                    StoreroomName = "";
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["StoreroomName"].ToString(); }
                catch { missing.Append("StoreroomName "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

            return i;
        }

        #endregion
        #region V2-1025

        public void RetrieveForChildDetailsViewByPartStoreroomId(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName, ref b_PartStoreroom results)
        {

            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartStoreroom_RetrieveForChildDetailsViewByPartStoreroomId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_PartStoreroom ProcessPartStoreroomRetrieveForChildDetailsViewByPartStoreroomIdV2(SqlDataReader reader)
        {
            b_PartStoreroom PartStoreroom = new b_PartStoreroom();

            PartStoreroom.LoadFromDatabaseForRetrieveForChildDetailsViewByPartStoreroomIdV2(reader);
            return PartStoreroom;
        }

        public int LoadFromDatabaseForRetrieveForChildDetailsViewByPartStoreroomIdV2(SqlDataReader reader)
        {
            int i = 0;
            try
            {


                // PartStoreroomId
                if (false == reader.IsDBNull(i))
                {
                    PartStoreroomId = reader.GetInt64(i);
                }
                else
                {
                    PartStoreroomId = 0;
                }
                i++;
                // StoreroomId
                if (false == reader.IsDBNull(i))
                {
                    StoreroomId = reader.GetInt64(i);
                }
                else
                {
                    StoreroomId = 0;
                }
                i++;
                // StoreroomName 
                if (false == reader.IsDBNull(i))
                {
                    StoreroomName = reader.GetString(i);
                }
                else
                {
                    StoreroomName = "";
                }
                i++;
                // LastCounted column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    LastCounted = reader.GetDateTime(i);
                }
                else
                {
                    LastCounted = DateTime.MinValue;
                }
                i++;
                // CountFrequency column, int, not null
                CountFrequency = reader.GetInt32(i++);

                Critical = reader.GetBoolean(i++);


                // Location1_1 
                if (false == reader.IsDBNull(i))
                {
                    Location1_1 = reader.GetString(i);
                }
                else
                {
                    Location1_1 = "";
                }
                i++;


                // Location1_2 
                if (false == reader.IsDBNull(i))
                {
                    Location1_2 = reader.GetString(i);
                }
                else
                {
                    Location1_2 = "";
                }
                i++;

                // Location1_3 
                if (false == reader.IsDBNull(i))
                {
                    Location1_3 = reader.GetString(i);
                }
                else
                {
                    Location1_3 = "";
                }
                i++;

                // Location1_4 
                if (false == reader.IsDBNull(i))
                {
                    Location1_4 = reader.GetString(i);
                }
                else
                {
                    Location1_4 = "";
                }
                i++;
                // Location1_5 
                if (false == reader.IsDBNull(i))
                {
                    Location1_5 = reader.GetString(i);
                }
                else
                {
                    Location1_5 = "";
                }
                i++;
                // Location2_1 
                if (false == reader.IsDBNull(i))
                {
                    Location2_1 = reader.GetString(i);
                }
                else
                {
                    Location2_1 = "";
                }
                i++;


                // Location2_2 
                if (false == reader.IsDBNull(i))
                {
                    Location2_2 = reader.GetString(i);
                }
                else
                {
                    Location2_2 = "";
                }
                i++;

                // Location2_3 
                if (false == reader.IsDBNull(i))
                {
                    Location2_3 = reader.GetString(i);
                }
                else
                {
                    Location2_3 = "";
                }
                i++;
                // Location2_4 
                if (false == reader.IsDBNull(i))
                {
                    Location2_4 = reader.GetString(i);
                }
                else
                {
                    Location2_4 = "";
                }
                i++;
                // Location2_5 
                if (false == reader.IsDBNull(i))
                {
                    Location2_5 = reader.GetString(i);
                }
                else
                {
                    Location2_5 = "";
                }
                i++;
                AutoPurchase = reader.GetBoolean(i++);
                if (false == reader.IsDBNull(i))
                {
                    QtyOnHand = reader.GetDecimal(i);
                }
                else
                {
                    QtyOnHand = 0;
                }
                i++;

                // QtyMaximum 
                if (false == reader.IsDBNull(i))
                {
                    QtyMaximum = reader.GetDecimal(i);
                }
                else
                {
                    QtyMaximum = 0;
                }
                i++;


                // QtyReorderLevel 
                if (false == reader.IsDBNull(i))
                {
                    QtyReorderLevel = reader.GetDecimal(i);
                }
                else
                {
                    QtyReorderLevel = 0;
                }

                i++;
                // PartVendorId
                if (false == reader.IsDBNull(i))
                {
                    PartVendorId = reader.GetInt64(i);
                }
                else
                {
                    PartVendorId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    VendorName = reader.GetString(i);
                }
                else
                {
                    VendorName = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    VendorClientLookupId = reader.GetString(i);
                }
                else
                {
                    VendorClientLookupId = "";
                }
                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["LastCounted"].ToString(); }
                catch { missing.Append("LastCounted "); }

                try { reader["CountFrequency"].ToString(); }
                catch { missing.Append("CountFrequency "); }

                try { reader["Critical"].ToString(); }
                catch { missing.Append("Critical "); }

                try { reader["Location1_1"].ToString(); }
                catch { missing.Append("Location1_1 "); }

                try { reader["Location1_2"].ToString(); }
                catch { missing.Append("Location1_2 "); }

                try { reader["Location1_3"].ToString(); }
                catch { missing.Append("Location1_3"); }

                try { reader["Location1_4"].ToString(); }
                catch { missing.Append("Location1_4 "); }

                try { reader["Location1_5"].ToString(); }
                catch { missing.Append("Location1_5 "); }

                try { reader["Location2_1"].ToString(); }
                catch { missing.Append("Location2_1 "); }

                try { reader["Location2_2"].ToString(); }
                catch { missing.Append("Location2_2 "); }

                try { reader["Location2_3"].ToString(); }
                catch { missing.Append("Location2_3"); }

                try { reader["Location2_4"].ToString(); }
                catch { missing.Append("Location2_4 "); }

                try { reader["Location2_5"].ToString(); }
                catch { missing.Append("Location2_5 "); }

                try { reader["AutoPurchase"].ToString(); }
                catch { missing.Append("AutoPurchase "); }

                try { reader["QtyOnHand"].ToString(); }
                catch { missing.Append("QtyOnHand "); }


                try { reader["QtyMaximum"].ToString(); }
                catch { missing.Append("QtyMaximum "); }


                try { reader["QtyReorderLevel"].ToString(); }
                catch { missing.Append("QtyReorderLevel "); }


                try { reader["PartVendorId"].ToString(); }
                catch { missing.Append("PartVendorId "); }

                try { reader["VendorName"].ToString(); }
                catch { missing.Append("VendorName "); }

                try { reader["VendorClientLookupId"].ToString(); }
                catch { missing.Append("VendorClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

            return i;
        }


        #endregion

        //V2-1059

        public void ValidateSameStoreroomId(
      SqlConnection connection,
      SqlTransaction transaction,
      long callerUserInfoId,
      string callerUserName,
      ref List<b_StoredProcValidationError> data
    )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            //data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartStoreroom_ValidateAutoTransferIssueStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        #region Chunk Search AutoTRGeneration V2-1059
        public static b_PartStoreroom ProcessRowChunkSearchForAutoTRGeneration(SqlDataReader reader)
        {
            // Create instance of object
            b_PartStoreroom PartStoreroom = new b_PartStoreroom();
            PartStoreroom.LoadFromDatabaseProcessRowChunkSearchForAutoTRGeneration(reader);
            return PartStoreroom;
        }

        public int LoadFromDatabaseProcessRowChunkSearchForAutoTRGeneration(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // RowId column, bigint, not null              
                RowId = reader.GetInt64(i++);
                // PartClientLookupId column
                if (false == reader.IsDBNull(i))
                {
                    PartIdClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartIdClientLookupId = string.Empty;
                }
                i++;
                // Storeroom Name column,         
                if (false == reader.IsDBNull(i))
                {
                    RequestStr = reader.GetString(i);
                }
                else
                {
                    RequestStr = string.Empty;
                }
                i++;
                // PartStoreroom Name column,               
                if (false == reader.IsDBNull(i))
                {
                    IssueStr = reader.GetString(i);
                }
                else
                {
                    IssueStr = string.Empty;
                }
                i++;
                // Part Description column,           
                if (false == reader.IsDBNull(i))
                {
                    PartDescription = reader.GetString(i);
                }
                else
                {
                    PartDescription = string.Empty;
                }
                i++;
                TransferQuantity = reader.GetDecimal(i++);
                Max = reader.GetDecimal(i++);
                Min = reader.GetDecimal(i++);
                OnHand = reader.GetDecimal(i++);

                // Part Description column,           
                RequestPTStoreroomId = reader.GetInt64(i++);
                RequestStoreroomId = reader.GetInt64(i++);

                RequestPartId = reader.GetInt64(i++);
                IssuePTStoreroomId = reader.GetInt64(i++);
                IssueStoreroomId = reader.GetInt64(i++);
                IssuePartId = reader.GetInt64(i++);
                Creator_PersonnelId = reader.GetInt64(i++);
                //TotalCount
                TotalCount = reader.GetInt32(i++);

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["RowId"].ToString(); }
                catch { missing.Append("RowId "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["RequestStr"].ToString(); }
                catch { missing.Append("RequestStr "); }

                try { reader["IssueStr"].ToString(); }
                catch { missing.Append("IssueStr "); }

                try { reader["PartDescription"].ToString(); }
                catch { missing.Append("PartDescription "); }

                try { reader["TransferQuantity"].ToString(); }
                catch { missing.Append("TransferQuantity "); }

                try { reader["Max"].ToString(); }
                catch { missing.Append("Max "); }

                try { reader["Min"].ToString(); }
                catch { missing.Append("Min "); }

                try { reader["OnHand"].ToString(); }
                catch { missing.Append("OnHand "); }

                try { reader["RequestPTStoreroomId"].ToString(); }
                catch { missing.Append("RequestPTStoreroomId "); }

                try { reader["RequestStoreroomId"].ToString(); }
                catch { missing.Append("RequestStoreroomId "); }

                try { reader["RequestPartId"].ToString(); }
                catch { missing.Append("RequestPartId "); }

                try { reader["IssuePTStoreroomId"].ToString(); }
                catch { missing.Append("IssuePTStoreroomId "); }

                try { reader["IssueStoreroomId"].ToString(); }
                catch { missing.Append("IssueStoreroomId "); }

                try { reader["IssuePartId"].ToString(); }
                catch { missing.Append("IssuePartId "); }

                try { reader["Creator_PersonnelId"].ToString(); }
                catch { missing.Append("Creator_PersonnelId "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

            return i;
        }

        public void RetrieveChunkSearchForAutoTRGeneration(
 SqlConnection connection,
 SqlTransaction transaction,
 long callerUserInfoId,
 string callerUserName,
 ref List<b_PartStoreroom> results
 )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_PartStoreroom_RetrieveChunkSearchForAutoTRGeneration_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        #endregion
        #region V2-1070
        public void ValidateByInactivateorActivatePartForStoreroom(
  SqlConnection connection,
  SqlTransaction transaction,
  long callerUserInfoId,
  string callerUserName,
  ref List<b_StoredProcValidationError> data
)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;


            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Part_ValidateByInactivateorActivateForMultiStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }
        #endregion
    }
}
