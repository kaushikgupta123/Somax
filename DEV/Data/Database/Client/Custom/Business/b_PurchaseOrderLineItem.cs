/*
****************************************************************************************************
* PROPRIETARY DATA 
****************************************************************************************************
* This work is PROPRIETARY to SOMAX Inc and is protected 
* under Federal Law as an unpublished Copyrighted work and under State Law as 
* a Trade Secret. 
****************************************************************************************************
* Copyright (c) 2014 by SOMAX Inc.
* b_PurchaseOrderLineItem.cs (Data Object)
* All rights reserved. 
****************************************************************************************************
* Date        JIRA-ID  Person             Description
* =========== ======== ================== =========================================================
* 2014-Oct-17 SOM-369  Roger Lawton       
* 2014-Nov-03 SOM-398  Roger Lawton       Clean up method LoadFromDatabaseExtended
*                                         Removed PartStoreroomId (handled in LoadFromDatabase)
* 2014-Nov-12 SOM-419  Roger Lawton       Modified                                        
* 2015-Feb-04 SOM-529  Roger Lawton       Removed PartStoreRoomId (Duplicate of PartStoreroomId)
*                                         Caused issue with JSON serialization
* 2015-Mar-18 SOM-608  Roger Lawton       Added CreateWithReplication method
* 2016-Oct-06 SOM-1037 Roger Lawton       Added new txn method PurchaseOrderLineItem_RetrieveForAlert
*                                         and new property PurchaseRequest_ClientLookupId
* 2020-Sep-09 V2-410   Roger Lawton       Change QuanityBackOrdered to a ReadOnly calculation                                        
****************************************************************************************************
*/

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;

namespace Database.Business
{

    public partial class b_PurchaseOrderLineItem
    {
        #region properties
        public decimal TotalCost { get; set; }
        public string PartClientLookupId { get; set; }
        public string ChargeToClientLookupId { get; set; }
        public string ChargeTo_Name { get; set; }
        public string AccountClientLookupId { get; set; }
        public decimal QuantityReceived { get; set; }
        public decimal QuantityToDate { get; set; }
        public decimal CurrentAverageCost { get; set; }
        public decimal CurrentAppliedCost { get; set; }
        public decimal CurrentOnHandQuantity { get; set; }
        // SOM-529
        //public Int64 PartStoreRoomId { get; set; }
        public string StockType { get; set; }
        // V2-410
        //public decimal QuantityBackOrdered { get; set; }
        public Int64 SiteId { get; set; } //--SOM-892--//
        public string Part_ManufacturerId { get; set; }    // Add to PO Print
        public string Part_Manufacturer { get; set; }      // Add to PO Print
        // SOM-1037 - Added to support Sending Alert Upon Receipt
        public string PurchaseOrder_ClientLookupId { get; set; }
        public string PurchaseRequest_ClientLookupId { get; set; }
        public long PurchaseRequest_Creator_PersonnelId { get; set; }
        public bool PurchaseRequest_AutoGenerated { get; set; }
        public decimal LineTotal { get; set; }       
        public string PartNumber { get; set; }
        public string PartCategoryMasterClientLookupId { get; set; }
        //V2-598
        public string Vendor_ClientLookupId { get; set; }
        public string Vendor_Name { get; set; }
        public string RequestorName { get; set; }//V2-1115
        #region V2-1112
        public string EPMPart { get; set; }
        public string SUPPart { get; set; }
        public decimal Extension { get; set; }
        #endregion 
        #endregion properties

        public void PurchaseOrderLineItem_RetrieveByPurchaseOrderId(
             SqlConnection connection,
             SqlTransaction transaction,
             long callerUserInfoId,
             string callerUserName,

             ref List<b_PurchaseOrderLineItem> purchaseOrderLineItemList
         )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                purchaseOrderLineItemList = Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveByPurchaseOrderId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }

        public void PurchaseOrderLineItem_RetrieveByPurchaseOrderId_V2(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,

            ref List<b_PurchaseOrderLineItem> purchaseOrderLineItemList
        )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                purchaseOrderLineItemList = Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveByPurchaseOrderId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }
        //--Som-892--//
        public void PurchaseOrderLineItem_FilterByPartId(
             SqlConnection connection,
             SqlTransaction transaction,
             long callerUserInfoId,
             string callerUserName,
             ref List<b_PurchaseOrderLineItem> purchaseOrderLineItemList
         )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                purchaseOrderLineItemList = Database.StoredProcedure.usp_PurchaseOrderLineItem_FilterByPartId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }
        public void LoadFromDatabaseFilterByPartId(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                if (false == reader.IsDBNull(i))
                {
                    PartClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PartId = reader.GetInt64(i);
                }
                else
                {
                    PartId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    Description = reader.GetString(i);
                }
                else
                {
                    Description = "";
                }
                i++;
               
            }

            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void LoadFromDatabaseExtended(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {

                //this.TotalCost = reader.GetString(i++);


                if (false == reader.IsDBNull(i))
                {
                    TotalCost = reader.GetDecimal(i);
                }
                else
                {
                    TotalCost = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    PartClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartClientLookupId = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    ChargeToClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    QuantityReceived = reader.GetDecimal(i);
                }
                else
                {
                    QuantityReceived = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    QuantityToDate = reader.GetDecimal(i);
                }
                else
                {
                    QuantityToDate = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentAverageCost = reader.GetDecimal(i);
                }
                else
                {
                    CurrentAverageCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentAppliedCost = reader.GetDecimal(i);
                }
                else
                {
                    CurrentAppliedCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentOnHandQuantity = reader.GetDecimal(i);
                }
                else
                {
                    CurrentOnHandQuantity = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    StockType = reader.GetString(i);
                }
                else
                {
                    StockType = "";
                }
                                i++;
                // V2-410
                //if (false == reader.IsDBNull(i))
                //{
                //    QuantityBackOrdered = reader.GetDecimal(i);
                //}
                //else
                //{
                //    QuantityBackOrdered = 0;
                //}
                //i++;
                if (false == reader.IsDBNull(i))
                {
                  Part_Manufacturer = reader.GetString(i);
                }
                else
                {
                  Part_Manufacturer = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                  Part_ManufacturerId = reader.GetString(i);
                }
                else
                {
                  Part_ManufacturerId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PartNumber = reader.GetString(i);
                }
                else
                {
                    PartNumber = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    LineTotal = reader.GetDecimal(i);
                }
                else
                {
                    LineTotal = 0;
                }

            }

            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["TotalCost"].ToString(); }
                catch { missing.Append("TotalCost "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["QuantityReceived"].ToString(); }
                catch { missing.Append("QuantityReceived "); }

                try { reader["QuantityToDate"].ToString(); }
                catch { missing.Append("QuantityToDate "); }

                try { reader["CurrentAverageCost"].ToString(); }
                catch { missing.Append("CurrentAverageCost "); }

                try { reader["CurrentOnHandQuantity"].ToString(); }
                catch { missing.Append("CurrentOnHandQuantity "); }

                try { reader["StockType"].ToString(); }
                catch { missing.Append("StockType "); }
                // V2-410
                //try { reader["QuantityBackOrdered"].ToString(); }             
                //catch {missing.Append("QuantityBackOrdered ");}

                try { reader["Part_Manufacturer"].ToString(); }
                catch { missing.Append("Manufacturer "); }

                try { reader["Part_ManufacturerId"].ToString(); }
                catch { missing.Append("ManufacturerId "); }

                // SOM-398
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                  msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void LoadFromDatabaseExtended_V2(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {

                //this.TotalCost = reader.GetString(i++);


                if (false == reader.IsDBNull(i))
                {
                    TotalCost = reader.GetDecimal(i);
                }
                else
                {
                    TotalCost = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    PartClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartClientLookupId = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    ChargeToClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    QuantityReceived = reader.GetDecimal(i);
                }
                else
                {
                    QuantityReceived = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    QuantityToDate = reader.GetDecimal(i);
                }
                else
                {
                    QuantityToDate = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentAverageCost = reader.GetDecimal(i);
                }
                else
                {
                    CurrentAverageCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentAppliedCost = reader.GetDecimal(i);
                }
                else
                {
                    CurrentAppliedCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentOnHandQuantity = reader.GetDecimal(i);
                }
                else
                {
                    CurrentOnHandQuantity = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    StockType = reader.GetString(i);
                }
                else
                {
                    StockType = "";
                }
                i++;
                // V2-410
                //if (false == reader.IsDBNull(i))
                //{
                //    QuantityBackOrdered = reader.GetDecimal(i);
                //}
                //else
                //{
                //    QuantityBackOrdered = 0;
                //}
                //i++;
                if (false == reader.IsDBNull(i))
                {
                    Part_Manufacturer = reader.GetString(i);
                }
                else
                {
                    Part_Manufacturer = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    Part_ManufacturerId = reader.GetString(i);
                }
                else
                {
                    Part_ManufacturerId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PartNumber = reader.GetString(i);
                }
                else
                {
                    PartNumber = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    LineTotal = reader.GetDecimal(i);
                }
                else
                {
                    LineTotal = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    AccountClientLookupId = reader.GetString(i);
                }
                else
                {
                    AccountClientLookupId = "";
                }
                i++;
                #region V2-1115
                if (false == reader.IsDBNull(i))
                {
                    RequestorName = reader.GetString(i);
                }
                else
                {
                    RequestorName = "";
                }
                #endregion
            }

            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["TotalCost"].ToString(); }
                catch { missing.Append("TotalCost "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["QuantityReceived"].ToString(); }
                catch { missing.Append("QuantityReceived "); }

                try { reader["QuantityToDate"].ToString(); }
                catch { missing.Append("QuantityToDate "); }

                try { reader["CurrentAverageCost"].ToString(); }
                catch { missing.Append("CurrentAverageCost "); }

                try { reader["CurrentOnHandQuantity"].ToString(); }
                catch { missing.Append("CurrentOnHandQuantity "); }

                try { reader["StockType"].ToString(); }
                catch { missing.Append("StockType "); }
                // V2-410
                //try { reader["QuantityBackOrdered"].ToString(); }             
                //catch {missing.Append("QuantityBackOrdered ");}

                try { reader["Part_Manufacturer"].ToString(); }
                catch { missing.Append("Manufacturer "); }

                try { reader["Part_ManufacturerId"].ToString(); }
                catch { missing.Append("ManufacturerId "); }

                try { reader["AccountClientLookupId"].ToString(); }
                catch { missing.Append("AccountClientLookupId "); }

                try { reader["RequestorName"].ToString(); }
                catch { missing.Append("RequestorName "); }
                // SOM-398
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void LoadFromDatabaseExtendedPO(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {

                //this.TotalCost = reader.GetString(i++);


                if (false == reader.IsDBNull(i))
                {
                    TotalCost = reader.GetDecimal(i);
                }
                else
                {
                    TotalCost = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    PartClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartClientLookupId = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    ChargeToClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    QuantityReceived = reader.GetDecimal(i);
                }
                else
                {
                    QuantityReceived = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    QuantityToDate = reader.GetDecimal(i);
                }
                else
                {
                    QuantityToDate = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentAverageCost = reader.GetDecimal(i);
                }
                else
                {
                    CurrentAverageCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentAppliedCost = reader.GetDecimal(i);
                }
                else
                {
                    CurrentAppliedCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentOnHandQuantity = reader.GetDecimal(i);
                }
                else
                {
                    CurrentOnHandQuantity = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    StockType = reader.GetString(i);
                }
                else
                {
                    StockType = "";
                }
                i++;
                // V2-410
                //if (false == reader.IsDBNull(i))
                //{
                //    QuantityBackOrdered = reader.GetDecimal(i);
                //}
                //else
                //{
                //    QuantityBackOrdered = 0;
                //}
                //i++;
                if (false == reader.IsDBNull(i))
                {
                    ChargeTo_Name = reader.GetString(i);
                }
                else
                {
                    ChargeTo_Name = "";
                }
            }

            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["TotalCost"].ToString(); }
                catch { missing.Append("TotalCost "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["QuantityReceived"].ToString(); }
                catch { missing.Append("QuantityReceived "); }

                try { reader["QuantityToDate"].ToString(); }
                catch { missing.Append("QuantityToDate "); }

                try { reader["CurrentAverageCost"].ToString(); }
                catch { missing.Append("CurrentAverageCost "); }

                try { reader["CurrentOnHandQuantity"].ToString(); }
                catch { missing.Append("CurrentOnHandQuantity "); }

                try { reader["StockType"].ToString(); }
                catch { missing.Append("StockType "); }
                // V2-410
                //try { reader["QuantityBackOrdered"].ToString(); }
                //catch { missing.Append("QuantityBackOrdered "); }

                try { reader["ChargeTo_Name"].ToString(); }
                catch { missing.Append("ChargeTo_Name "); }
                // SOM-398
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void LoadFromDatabaseExtendedPO_V2(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {

                //this.TotalCost = reader.GetString(i++);


                if (false == reader.IsDBNull(i))
                {
                    TotalCost = reader.GetDecimal(i);
                }
                else
                {
                    TotalCost = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    PartClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartClientLookupId = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    ChargeToClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    AccountClientLookupId = reader.GetString(i);
                }
                else
                {
                    AccountClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    QuantityReceived = reader.GetDecimal(i);
                }
                else
                {
                    QuantityReceived = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    QuantityToDate = reader.GetDecimal(i);
                }
                else
                {
                    QuantityToDate = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentAverageCost = reader.GetDecimal(i);
                }
                else
                {
                    CurrentAverageCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentAppliedCost = reader.GetDecimal(i);
                }
                else
                {
                    CurrentAppliedCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    CurrentOnHandQuantity = reader.GetDecimal(i);
                }
                else
                {
                    CurrentOnHandQuantity = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    StockType = reader.GetString(i);
                }
                else
                {
                    StockType = "";
                }
                i++;
                // V2-410
                //if (false == reader.IsDBNull(i))
                //{
                //    QuantityBackOrdered = reader.GetDecimal(i);
                //}
                //else
                //{
                //    QuantityBackOrdered = 0;
                //}
                //i++;
                if (false == reader.IsDBNull(i))
                {
                    ChargeTo_Name = reader.GetString(i);
                }
                else
                {
                    ChargeTo_Name = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                     PartCategoryMasterClientLookupId  = reader.GetString(i);
                }
                else
                {
                     PartCategoryMasterClientLookupId  = "";
                }
                i++;
            }

            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["TotalCost"].ToString(); }
                catch { missing.Append("TotalCost "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["AccountClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["QuantityReceived"].ToString(); }
                catch { missing.Append("QuantityReceived "); }

                try { reader["QuantityToDate"].ToString(); }
                catch { missing.Append("QuantityToDate "); }

                try { reader["CurrentAverageCost"].ToString(); }
                catch { missing.Append("CurrentAverageCost "); }

                try { reader["CurrentOnHandQuantity"].ToString(); }
                catch { missing.Append("CurrentOnHandQuantity "); }

                try { reader["StockType"].ToString(); }
                catch { missing.Append("StockType "); }
                // V2-410
                //try { reader["QuantityBackOrdered"].ToString(); }
                //catch { missing.Append("QuantityBackOrdered "); }

                try { reader["ChargeTo_Name"].ToString(); }
                catch { missing.Append("ChargeTo_Name "); }
                // SOM-398
                try { reader["PartCategoryMasterClientLookupId"].ToString(); }
                catch { missing.Append("PartCategoryMasterClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void PurchaseOrderLineItem_RetrieveForAlert(
             SqlConnection connection,
             SqlTransaction transaction,
             long callerUserInfoId,
             string callerUserName


         )
        {
          Database.SqlClient.ProcessRow<b_PurchaseOrderLineItem> processRow = null;
          SqlCommand command = null;
          string message = String.Empty;

          try
          {
            // Create the command to use in calling the stored procedures
            command = new SqlCommand();
            command.Connection = connection;
            command.Transaction = transaction;
            // Call the stored procedure to retrieve the data
            processRow = new Database.SqlClient.ProcessRow<b_PurchaseOrderLineItem>(reader => { this.LoadFromDatabaseForAlert(reader); return this; });
            Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveForAlert.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

          }
          finally
          {
            if (null != command)
            {
              command.Dispose();
              command = null;
            }
            message = String.Empty;
            callerUserInfoId = 0;
            callerUserName = String.Empty;
            ClientId = 0;
          }
        }
        public void PurchaseOrderLineItem_RetrieveForAlert_V2(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName


        )
        {
            Database.SqlClient.ProcessRow<b_PurchaseOrderLineItem> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PurchaseOrderLineItem>(reader => { this.LoadFromDatabaseForAlert_V2(reader); return this; });
                Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveForAlert_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }
        public void LoadFromDatabaseForAlert(SqlDataReader reader)
        {
          int i = this.LoadFromDatabase(reader);
          try
          {
            PurchaseOrder_ClientLookupId = reader.GetString(i);
            i++;
            PartClientLookupId = reader.GetString(i);
            i++;
            ChargeToClientLookupId = reader.GetString(i);
            i++;
            ChargeTo_Name = reader.GetString(i);
            i++;
            PurchaseRequest_ClientLookupId = reader.GetString(i);
            i++;
            PurchaseRequest_Creator_PersonnelId = reader.GetInt64(i);
            i++;
            PurchaseRequest_AutoGenerated = reader.GetBoolean(i);

          }

          catch (Exception ex)
          {
            // Diagnostics
            StringBuilder missing = new StringBuilder();

            try { reader["PurchaseOrder_ClientLookupId"].ToString(); }
            catch { missing.Append("PurchaseOrder_ClientLookupId "); }

            try { reader["PartClientLookupId"].ToString(); }
            catch { missing.Append("PartClientLookupId "); }

            try { reader["ChargeToClientLookupId"].ToString(); }
            catch { missing.Append("ChargeToClientLookupId "); }

            try { reader["ChargeTo_Name"].ToString(); }
            catch { missing.Append("ChargeTo_Name "); }

            try { reader["PurchaseRequest_ClientLookupId"].ToString(); }
            catch { missing.Append("PurchaseRequest_ClientLookupId "); }

            try { reader["PurchaseRequest_Creator_PersonnelId"].ToString(); }
            catch { missing.Append("PurchaseRequest_Creator_PersonnelId "); }

            StringBuilder msg = new StringBuilder();
            msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
            if (missing.Length > 0)
            {
              msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
            }
            throw new Exception(msg.ToString(), ex);
          }
        }
        public void LoadFromDatabaseForAlert_V2(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {
                PurchaseOrder_ClientLookupId = reader.GetString(i);
                i++;
                PartClientLookupId = reader.GetString(i);
                i++;
                ChargeToClientLookupId = reader.GetString(i);
                i++;
                ChargeTo_Name = reader.GetString(i);
                i++;
                PurchaseRequest_ClientLookupId = reader.GetString(i);
                i++;
                PurchaseRequest_Creator_PersonnelId = reader.GetInt64(i);
                i++;
                PurchaseRequest_AutoGenerated = reader.GetBoolean(i);
                i++;
                Vendor_ClientLookupId = reader.GetString(i);
                i++;
                Vendor_Name = reader.GetString(i);

            }

            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["PurchaseOrder_ClientLookupId"].ToString(); }
                catch { missing.Append("PurchaseOrder_ClientLookupId "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["ChargeTo_Name"].ToString(); }
                catch { missing.Append("ChargeTo_Name "); }

                try { reader["PurchaseRequest_ClientLookupId"].ToString(); }
                catch { missing.Append("PurchaseRequest_ClientLookupId "); }

                try { reader["PurchaseRequest_Creator_PersonnelId"].ToString(); }
                catch { missing.Append("PurchaseRequest_Creator_PersonnelId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
                throw new Exception(msg.ToString(), ex);
            }
        }
        public void PurchaseOrderLineItem_RetrieveByPurchaseOrderLineItemId(
             SqlConnection connection,
             SqlTransaction transaction,
             long callerUserInfoId,
             string callerUserName

             
         )
        {
            Database.SqlClient.ProcessRow<b_PurchaseOrderLineItem> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PurchaseOrderLineItem>(reader => { this.LoadFromDatabaseExtendedPO(reader); return this; });
                Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveByPurchaseOrderLineItemId.CallStoredProcedure(command,processRow, callerUserInfoId, callerUserName,this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }
        public void PurchaseOrderLineItem_RetrieveByPurchaseOrderLineItemId_V2(
     SqlConnection connection,
     SqlTransaction transaction,
     long callerUserInfoId,
     string callerUserName


 )
        {
            Database.SqlClient.ProcessRow<b_PurchaseOrderLineItem> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_PurchaseOrderLineItem>(reader => { this.LoadFromDatabaseExtendedPO_V2(reader); return this; });
                Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveByPurchaseOrderLineItemId_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }

        /// <summary>
        /// Insert this object into the database as a PurchaseOrderLineItem table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public void CreateWithReplication(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName)
        {
          SqlCommand command = null;

          try
          {
            command = connection.CreateCommand();
            if (null != transaction)
            {
              command.Transaction = transaction;
            }
            Database.StoredProcedure.usp_PurchaseOrderLineItem_CreateWithReplication.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
          }
          finally
          {
            if (null != command)
            {
              command.Dispose();
              command = null;
            }
          }
        }
        public void CreateWithReplication_V2(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PurchaseOrderLineItem_CreateWithReplication_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void CreateFromShoppingCart(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PurchaseOrderLineItem_CreateFromShoppingCart_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void PurchaseOrderLineItem_Validation(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
         string callerUserName,
         ref List<b_StoredProcValidationError> data
      )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            //data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PurchaseOrderLineItem_ValidateByClientLookupId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void ReOrderLineNumber(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PurchaseOrderLineItem_ReOrderLineNumber.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void RetriveByWorkOrderIdFromDatabase(SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_PurchaseOrderLineItem> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_PurchaseOrderLineItem> results = null;
            data = new List<b_PurchaseOrderLineItem>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveByWorkOrderId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_PurchaseOrderLineItem>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }

        }

        public static object ProcessRowPOL(SqlDataReader reader)
        {
            // Create instance of object           
            b_PurchaseOrderLineItem obj = new b_PurchaseOrderLineItem();
            obj.LoadFromDatabaseProcessRowPOL(reader);
            // Return result
            return (object)obj;
        }
        public void LoadFromDatabaseProcessRowPOL(SqlDataReader reader)
        {
            int i = 0;

            try
            {
                if (false == reader.IsDBNull(i))
                {
                    PurchaseOrderId = reader.GetInt64(i);
                }
                else
                {
                    PurchaseOrderId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    ClientLookupId = reader.GetString(i);
                }
                else
                {
                    ClientLookupId = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    Required = reader.GetDateTime(i);
                }
                else
                {
                    Required = DateTime.MinValue;
                }
                i++;

                this.LineNumber = reader.GetInt32(i++);

                if (false == reader.IsDBNull(i))
                {
                    Description = reader.GetString(i);
                }
                else
                {
                    Description = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    EstimatedDelivery = reader.GetDateTime(i);
                }
                else
                {
                    EstimatedDelivery = DateTime.MinValue;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    Status = reader.GetString(i);
                }
                else
                {
                    Status = "";
                }
                i++;

                OrderQuantity = reader.GetDecimal(i++);

                if (false == reader.IsDBNull(i))
                {
                    UnitOfMeasure = reader.GetString(i);
                }
                else
                {
                    UnitOfMeasure = "";
                }
                i++;
                ReceivedQuantity = reader.GetDecimal(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                try { reader["PurchaseOrderId"].ToString(); }
                catch { missing.Append("PurchaseOrderId"); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId"); }


                try { reader["Required"].ToString(); }
                catch { missing.Append("Required"); }


                try { reader["LineNumber"].ToString(); }
                catch { missing.Append("LineNumber"); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description"); }

                try { reader["EstimatedDelivery"].ToString(); }
                catch { missing.Append("EstimatedDelivery"); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status"); }

                try { reader["OrderQuantity"].ToString(); }
                catch { missing.Append("OrderQuantity"); }

                try { reader["UnitOfMeasure"].ToString(); }
                catch { missing.Append("UnitOfMeasure"); }

                try { reader["ReceivedQuantity"].ToString(); }
                catch { missing.Append("ReceivedQuantity"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }


        public decimal ReceivedQuantity { get; set; }

        public DateTime Required { get; set; }

        public string ClientLookupId { get; set; }
         
        #region V2-738
        public void CreateFromShoppingCartForMultiStoreroom(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PurchaseOrderLineItem_CreateFromShoppingCartForMultiStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void PurchaseOrderLineItem_RetrieveByPurchaseOrderIdForMultiStoreroom_V2(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,

          ref List<b_PurchaseOrderLineItem> purchaseOrderLineItemList
      )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                purchaseOrderLineItemList = Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveByPurchaseOrderIdForMultiStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }
        #endregion

        #region V2-946
        public static b_PurchaseOrderLineItem ProcessRowForPurchaseOrderLineItemPrint(SqlDataReader reader)
        {
            // Create instance of object
            b_PurchaseOrderLineItem obj = new b_PurchaseOrderLineItem();

            // Load the object from the database
            obj.LoadFromDatabaseForPurchaseOrderLineItemPrint(reader);

            // Return result
            return obj;
        }
       
        public void LoadFromDatabaseForPurchaseOrderLineItemPrint(SqlDataReader reader)
        {
            //   int i = this.LoadFromDatabase(reader);
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PurchaseOrderLineItemId  column, bigint, not null
                PurchaseOrderLineItemId = reader.GetInt64(i++);

                // PurchaseOrderId  column, bigint, not null
                PurchaseOrderId = reader.GetInt64(i++);

                // Description column, nvarchar(max), not null
                Description = reader.GetString(i++);

                // LineNumber column, int, not null
                LineNumber = reader.GetInt32(i++);

                // OrderQuantity column, decimal(15,6), not null
                OrderQuantity = reader.GetDecimal(i++);

                // UnitOfMeasure column, nvarchar(15), not null
                UnitOfMeasure = reader.GetString(i++);               

                // UnitCost column, decimal(15,5), not null
                UnitCost = reader.GetDecimal(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // TotalCost column, decimal(38,6), not null
                TotalCost = reader.GetDecimal(i++);

                // PartClientLookupId column, nvarchar(31), not null
                PartClientLookupId = reader.GetString(i++);

                // ChargeToClientLookupId column, nvarchar(15), not null
                ChargeToClientLookupId = reader.GetString(i++);

                // AccountClientLookupId column, nvarchar(63), not null
                AccountClientLookupId = reader.GetString(i++);

                // Part_Manufacturer column, nvarchar(63), not null
                Part_Manufacturer = reader.GetString(i++);

                // Part_ManufacturerId column, nvarchar(63), not null
                Part_ManufacturerId = reader.GetString(i++);
                


            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PurchaseOrderLineItemId"].ToString(); }
                catch { missing.Append("PurchaseOrderLineItemId "); }

                try { reader["PurchaseOrderId"].ToString(); }
                catch { missing.Append("PurchaseOrderId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["LineNumber"].ToString(); }
                catch { missing.Append("LineNumber "); }

                try { reader["OrderQuantity"].ToString(); }
                catch { missing.Append("OrderQuantity "); }

                try { reader["UnitOfMeasure"].ToString(); }
                catch { missing.Append("UnitOfMeasure "); }

                try { reader["UnitCost"].ToString(); }
                catch { missing.Append("UnitCost "); }

                try { reader["TotalCost"].ToString(); }
                catch { missing.Append("TotalCost "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["AccountClientLookupId"].ToString(); }
                catch { missing.Append("AccountClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }


        #endregion
        #region V2-1047
        public void PurchaseOrderLineItem_RetrieveByPurchaseOrderIdForDirectLineItem_V2(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,

           ref List<b_PurchaseOrderLineItem> purchaseOrderLineItemList
       )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                purchaseOrderLineItemList =Database.StoredProcedure.usp_PurchaseOrderLineItem_RetrieveByPurchaseOrderIdForDirectLineItems_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }
        public void LoadFromDatabaseExtendedForDirectItem_V2(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {

                if (false == reader.IsDBNull(i))
                {
                    ChargeToClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToClientLookupId = "";
                }
                i++;
               
                if (false == reader.IsDBNull(i))
                {
                    AccountClientLookupId = reader.GetString(i);
                }
                else
                {
                    AccountClientLookupId = "";
                }

            }

            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["AccountClientLookupId"].ToString(); }
                catch { missing.Append("AccountClientLookupId "); }
            
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        #endregion

        #region V2-1112 Process of Row For PurchaseOrder LineItem EPM Print
        public static b_PurchaseOrderLineItem ProcessRowForPurchaseOrderLineItemEPMPrint(SqlDataReader reader)
        {
            // Create instance of object
            b_PurchaseOrderLineItem obj = new b_PurchaseOrderLineItem();

            // Load the object from the database
            obj.LoadFromDatabaseForPurchaseOrderLineItemEPMPrint(reader);

            // Return result
            return obj;
        }

        public void LoadFromDatabaseForPurchaseOrderLineItemEPMPrint(SqlDataReader reader)
        {
            //   int i = this.LoadFromDatabase(reader);
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PurchaseOrderLineItemId  column, bigint, not null
                PurchaseOrderLineItemId = reader.GetInt64(i++);

                // PurchaseOrderId  column, bigint, not null
                PurchaseOrderId = reader.GetInt64(i++);

                // LineNumber column, int, not null
                LineNumber = reader.GetInt32(i++);

                // EPMPart column, nvarchar(max), not null
                EPMPart = reader.GetString(i++);

                // SUPPart column, nvarchar(max), not null
                SUPPart = reader.GetString(i++);

                // Description column, nvarchar(max), not null
                Description = reader.GetString(i++);

                // Manufacturer column, nvarchar(max), not null
                Manufacturer = reader.GetString(i++);

                // ChargeToClientLookupId column, nvarchar(15), not null
                ChargeToClientLookupId = reader.GetString(i++);

                // EstimatedDelivery column, DateTime, not null
                if (false == reader.IsDBNull(i))
                {
                    EstimatedDelivery = reader.GetDateTime(i);
                }
                else
                {
                    EstimatedDelivery = DateTime.MinValue;
                }
                i++;

                // UnitOfMeasure column, nvarchar(15), not null
                UnitOfMeasure = reader.GetString(i++);
                // OrderQuantity column, decimal(15,6), not null
                OrderQuantity = reader.GetDecimal(i++);
                // UnitCost column, decimal(15,5), not null
                UnitCost = reader.GetDecimal(i++);
                // Extension column, decimal(15,5), not null
                Extension = reader.GetDecimal(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PurchaseOrderLineItemId"].ToString(); }
                catch { missing.Append("PurchaseOrderLineItemId "); }

                try { reader["PurchaseOrderId"].ToString(); }
                catch { missing.Append("PurchaseOrderId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["LineNumber"].ToString(); }
                catch { missing.Append("LineNumber "); }

                try { reader["OrderQuantity"].ToString(); }
                catch { missing.Append("OrderQuantity "); }

                try { reader["UnitOfMeasure"].ToString(); }
                catch { missing.Append("UnitOfMeasure "); }

                try { reader["UnitCost"].ToString(); }
                catch { missing.Append("UnitCost "); }

                try { reader["EPMPart"].ToString(); }
                catch { missing.Append("EPMPart "); }

                try { reader["SUPPart"].ToString(); }
                catch { missing.Append("SUPPart "); }

                try { reader["Manufacturer"].ToString(); }
                catch { missing.Append("Manufacturer "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["EstimatedDelivery"].ToString(); }
                catch { missing.Append("EstimatedDelivery "); }

                try { reader["Extension"].ToString(); }
                catch { missing.Append("Extension "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        #endregion
    }
}
