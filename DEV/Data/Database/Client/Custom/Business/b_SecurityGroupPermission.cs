/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ClientGroupPermission table.
    /// </summary>
    public partial class b_SecurityGroupPermission 
    {
        /// <summary>
        /// Department property
        /// </summary>
        public string Site { get; set; }

        /// <summary>
        /// Area property
        /// </summary>
        public string Area { get; set; }

        /// <summary>
        /// Department property
        /// </summary>
        public string Department { get; set; }

        /// <summary>
        /// Storeroom property
        /// </summary>
        public string Storeroom { get; set; }

        public static b_SecurityGroupPermission ProcessRowWithNames(SqlDataReader reader)
        {
            // Create instance of object
            b_SecurityGroupPermission obj = new b_SecurityGroupPermission();

            // Load the object from the database
            obj.LoadFromDatabaseWithNames(reader);

            // Return result
            return obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_ClientGroupPermission object.
        /// This routine should be applied to the usp_ClientGroupPermission_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_ClientGroupPermission_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadFromDatabaseWithNames(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // SecurityGroupPermissionId column, bigint, not null

                SecurityGroupPermissionId = reader.GetInt64(i++);

                // SecurityGroupId column, bigint, not null
                SecurityGroupId = reader.GetInt64(i++);

                // SiteId column, bigint, not null
                if (!reader.IsDBNull(i))
                {
                    SiteId = reader.GetInt64(i);
                }
                i++;

                // AreaId column, bigint, not null
                if (!reader.IsDBNull(i))
                {
                    AreaId = reader.GetInt64(i);
                }
                i++;

                // DepartmentId column, bigint, not null
                if (!reader.IsDBNull(i))
                {
                    DepartmentId = reader.GetInt64(i);
                }
                i++;

                // StoreroomId column, bigint, not null
                if (!reader.IsDBNull(i))
                {
                    StoreroomId = reader.GetInt64(i);
                }
                i++;

                // PermissionType column, nvarchar(1), not null
                PermissionType = reader.GetString(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                // Site column, nvarchar(15), null
                if (!reader.IsDBNull(i))
                {
                    Site = reader.GetString(i);
                }
                else
                {
                    Site = string.Empty;
                }
                i++;

                // Area column, nvarchar(15), null
                if (!reader.IsDBNull(i))
                { 
                    Area = reader.GetString(i);
                }
                else
                {
                    Area = string.Empty;
                }
                i++;

                // Department column, nvarchar(15), null
                if (!reader.IsDBNull(i))
                {
                    Department = reader.GetString(i);
                }
                else
                {
                    Department = string.Empty;
                }
                i++;

                // Storeroom column, nvarchar(15), null
                if (!reader.IsDBNull(i))
                {
                    Storeroom = reader.GetString(i);
                }
                else
                {
                    Storeroom = string.Empty;
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["SecurityGroupPermissionId"].ToString(); }
                catch { missing.Append("SecurityGroupPermissionId "); }

                try { reader["SecurityGroupId"].ToString(); }
                catch { missing.Append("SecurityGroupId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["PermissionType"].ToString(); }
                catch { missing.Append("PermissionType "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["Site"].ToString(); }
                catch { missing.Append("Site "); }

                try { reader["Area"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["Department"].ToString(); }
                catch { missing.Append("Department "); }

                try { reader["Storeroom"].ToString(); }
                catch { missing.Append("Storeroom "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        /// <summary>
        /// Retrieve all SecurityGroupPermission table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_SecurityGroupPermission[] that contains the results</param>
        public void RetrieveByGroupIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref b_SecurityGroupPermission[] data
        )
        {
            Database.SqlClient.ProcessRow<b_SecurityGroupPermission> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_SecurityGroupPermission[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SecurityGroupPermission>(reader => { b_SecurityGroupPermission obj = new b_SecurityGroupPermission(); obj.LoadFromDatabaseWithNames(reader); return obj; });
                results = Database.StoredProcedure.usp_SecurityGroupPermission_RetrieveByGroupId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                // Extract the results
                if (null != results)
                {
                    data = (b_SecurityGroupPermission[])results.ToArray(typeof(b_SecurityGroupPermission));
                }
                else
                {
                    data = new b_SecurityGroupPermission[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

     
    }
}
