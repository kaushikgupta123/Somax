/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the ReportListing table.InsertIntoDatabase
    /// </summary>

    public partial class b_ReportListing
    {
        #region Properties
        public int IsFavorite { get; set; }
        public long ReportFavoritesId { get; set; }
        public int EventLogResultCount { get; set; }
        public long SiteId { get; set; }
        public long PersonnelId { get; set; }
        public long ReportEventLogId { get; set; }
        public bool IsUserReport { get; set; }
        #endregion
        public void RetrieveReportGroup(
             SqlConnection connection,
             SqlTransaction transaction,
             long callerUserInfoId,
       string callerUserName,
             ref List<b_ReportListing> data
         )
        {
            Database.SqlClient.ProcessRow<b_ReportListing> processRow = null;
            List<b_ReportListing> results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new List<b_ReportListing>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReportListing>(reader => { b_ReportListing obj = new b_ReportListing(); obj.LoadFromDatabaseReportGroup(reader); return obj; });
                results = Database.StoredProcedure.usp_ReportListing_RetrieveReportGroup.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName);

                // Extract the results
                if (null != results)
                {
                    data = results;
                }
                else
                {
                    data = null;
                }


            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public int LoadFromDatabaseReportGroup(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // ReportGroup column, nvarchar(30), not null
                ReportGroup = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ReportGroup"].ToString(); }
                catch { missing.Append("ReportGroup "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public void RetrieveByGroup(
             SqlConnection connection,
             SqlTransaction transaction,
             long callerUserInfoId,
       string callerUserName,
             ref List<b_ReportListing> data
         )
        {
            Database.SqlClient.ProcessRow<b_ReportListing> processRow = null;
            List<b_ReportListing> results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new List<b_ReportListing>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReportListing>(reader => { b_ReportListing obj = new b_ReportListing(); obj.LoadFromDatabaseByGroup(reader); return obj; });
                results = Database.StoredProcedure.usp_ReportListing_RetrieveByGroup.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                // Extract the results
                if (null != results)
                {
                    data = results;
                }
                else
                {
                    data = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public int LoadFromDatabaseByGroup(SqlDataReader reader)
        {
            int i = LoadFromDatabase(reader);
            try
            {

                IsFavorite = reader.GetInt32(i++);

                ReportFavoritesId = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["IsFavorite"].ToString(); }
                catch { missing.Append("IsFavorite "); }

                try { reader["ReportFavoritesId"].ToString(); }
                catch { missing.Append("IsFavorite "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public void RetrieveRecentReports(
     SqlConnection connection,
     SqlTransaction transaction,
     long callerUserInfoId,
string callerUserName,
long clientId,
     ref List<b_ReportListing> data
 )
        {
            Database.SqlClient.ProcessRow<b_ReportListing> processRow = null;
            List<b_ReportListing> results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new List<b_ReportListing>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ReportListing>(reader => { b_ReportListing obj = new b_ReportListing(); obj.LoadFromDatabaseRecentReports(reader); return obj; });
                results = Database.StoredProcedure.usp_ReportListing_RetrieveRecentReports.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, clientId, SiteId, PersonnelId, EventLogResultCount, this);

                // Extract the results
                if (null != results)
                {
                    data = results;
                }
                else
                {
                    data = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void LoadFromDatabaseRecentReports(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {
                ReportEventLogId = reader.GetInt64(i++);
                IsUserReport = reader.GetBoolean(i++);
            }
            catch (Exception ex)
            {
                StringBuilder missing = new StringBuilder();

                try { reader["ReportEventLogId"].ToString(); }
                catch { missing.Append("ReportEventLogId"); }

                try { reader["IsUserReport"].ToString(); }
                catch { missing.Append("IsUserReport"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

        }
    }

}
