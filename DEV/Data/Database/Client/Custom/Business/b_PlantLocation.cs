/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PlantLocation table.InsertIntoDatabase
    /// </summary>    
    public partial class b_PlantLocation : DataBusinessBase
    {
        #region Tree Description
        public void RetrieveAllForTreeList(
      SqlConnection connection,
      SqlTransaction transaction,
      long callerUserInfoId,
      string callerUserName,
      ref b_PlantLocation[] data
       )
        {
            Database.SqlClient.ProcessRow<b_PlantLocation> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PlantLocation_RetrieveAllForTreeList.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);
                // Extract the results
                if (null != results)
                {
                    data = (b_PlantLocation[])results.ToArray(typeof(b_PlantLocation));
                }
                else
                {
                    data = new b_PlantLocation[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public int LoadFromDatabaseForProcessDescription(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {

                // ProcessDescription
                if (false == reader.IsDBNull(i))
                {
                    AreaDescription = reader.GetString(i);
                }
                else
                {
                    AreaDescription = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    DepartmentDescription = reader.GetString(i);
                }
                else
                {
                    DepartmentDescription = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    LineDescription = reader.GetString(i);
                }
                else
                {
                    LineDescription = "";
                }
                i++;
            }
            catch (Exception ex)
            {
                StringBuilder missing = new StringBuilder();

                try { reader["AreaDescription"].ToString(); }
                catch { missing.Append("AreaDescription"); }

                try { reader["DepartmentDescription"].ToString(); }
                catch { missing.Append("DepartmentDescription"); }

                try { reader["LineDescription"].ToString(); }
                catch { missing.Append("LineDescription"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public static b_PlantLocation ProcessRowForProcessDescription(SqlDataReader reader)
        {
            // Create instance of object
            b_PlantLocation plList = new b_PlantLocation();

            // Load the object from the database
            plList.LoadFromDatabaseForProcessDescription(reader);
            // Return result
            return plList;
        }
        #endregion
        //public void DeleteWithValidation(SqlConnection connection,
        //   SqlTransaction transaction,
        //   long callerUserInfoId,
        //   string callerUserName,
        //   ref List<b_StoredProcValidationError> data)
        //{
        //    SqlCommand command = null;
        //    string message = String.Empty;
        //    List<b_StoredProcValidationError> results = null;
        //    data = new List<b_StoredProcValidationError>();
        //    try
        //    {
        //        command = new SqlCommand();
        //        command.Connection = connection;
        //        command.Transaction = transaction;
        //        results = Database.StoredProcedure.usp_PlantLocation_DeleteTreeListById.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

        //        if (results != null)
        //        {
        //            data = results;
        //        }
        //        else
        //        {
        //            data = new List<b_StoredProcValidationError>();
        //        }
        //    }
        //    finally
        //    {
        //        if (null != command)
        //        {
        //            command.Dispose();
        //            command = null;
        //        }

        //        message = String.Empty;
        //        callerUserInfoId = 0;
        //        callerUserName = String.Empty;
        //    }
        //}
        public string AreaDescription { get; set; }

        public string DepartmentDescription { get; set; }

        public string LineDescription { get; set; }
        #region Validate PlantLocation Equipment Charge To look up

        public string ChargeToType { get; set; }
        public string ChargeTo { get; set; }
        public string ChargeToName { get; set; }

      //  public void ValidatePlantEquipChargeTo(
      //    SqlConnection connection,
      //    SqlTransaction transaction,
      //    long callerUserInfoId,
      //    string callerUserName
      //)
      //  {
      //      Database.SqlClient.ProcessRow<b_PlantLocation> processRow = null;
      //      SqlCommand command = null;
      //      string message = String.Empty;

      //      try
      //      {
      //          // Create the command to use in calling the stored procedures
      //          command = new SqlCommand();
      //          command.Connection = connection;
      //          command.Transaction = transaction;

      //          // Call the stored procedure to retrieve the data
      //          processRow = new Database.SqlClient.ProcessRow<b_PlantLocation>(reader => { this.LoadFromDatabaseForValidatePlantEquipChargeTo(reader); return this; });
      //          Database.StoredProcedure.usp_PlantLocation_ValidatePlantEquipChargeTo.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

      //      }
      //      finally
      //      {
      //          if (null != command)
      //          {
      //              command.Dispose();
      //              command = null;
      //          }
      //          processRow = null;
      //          message = String.Empty;
      //          callerUserInfoId = 0;
      //          callerUserName = String.Empty;
      //      }
      //  }

        public int LoadFromDatabaseForValidatePlantEquipChargeTo(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ChargeToType column, nvarchar(15), not null
                ChargeToType = reader.GetString(i++);
                // ChargeTo column, nvarchar(31), not null
                ChargeTo = reader.GetString(i++);
                // ChargeToName column, nvarchar(63), not null
                ChargeToName = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ChargeToType"].ToString(); }
                catch { missing.Append("ChargeToType "); }

                try { reader["ChargeTo"].ToString(); }
                catch { missing.Append("ChargeTo "); }

                try { reader["ChargeToName"].ToString(); }
                catch { missing.Append("ChargeToName "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }
        #endregion
    }
}
