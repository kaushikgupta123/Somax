/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{
    public partial class b_Menu
    {
        #region Property
        public bool ItemAccess { get; set; }
        public Int64 SecurityItemId { get; set; }
        public Int64 UserInfoId { get; set; }
        public string LocalizedName { get; set; }
        public string LocaleId { get; set; }
        public string ResourceSet { get; set; }
        public System.Data.DataTable StatusData = new System.Data.DataTable();
        public string ModuleName { get; set; }
        public string ItemCount { get; set; }
        public Int64 SiteId { get; set; }

        #endregion
        public void RetrieveAllFromDatabaseCustomAdmin(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Menu> data,            
            string UserType
        )
        {
            Database.SqlClient.ProcessRow<b_Menu> processRow = null;
            List<b_Menu> results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new List<b_Menu>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                //processRow = new Database.SqlClient.ProcessRow<b_Menu>(reader => { b_Menu obj = new b_Menu(); obj.LoadFromDatabaseCustom(reader); return obj; });
                //results = Database.StoredProcedure.usp_Menu_RetrieveAllCustom.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);
                results = StoredProcedure.usp_AdminMenu_RetrieveAllCustom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this, UserType);
                // Extract the results
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Menu>();
                }

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                //results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_Menu ProcessRowGetALLCustomAdmin(SqlDataReader reader)
        {
            // Create instance of object
            b_Menu obj = new b_Menu();

            // Load the object from the database
            obj.LoadFromDatabaseCustomAdmin(reader);

            // Return result
            return obj;
        }
        public int LoadFromDatabaseCustomAdmin(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // ClientId column, bigint, not null
                ClientId = reader.GetInt32(i++);

                // MenuId column, bigint, not null
                MenuId = reader.GetInt64(i++);

                // MenuName column, nvarchar(300), not null
                MenuName = reader.GetString(i++);

                // ParentMenuId column, bigint, not null
                ParentMenuId = reader.GetInt64(i++);

                // MenuLevel column, bigint, not null
                MenuLevel = reader.GetInt64(i++);

                // MenuUrl column, nvarchar(MAX), not null
                MenuUrl = reader.GetString(i++);

                // MenuPosition column, int, not null
                MenuPosition = reader.GetInt32(i++);

                // ToolTip column, nvarchar(500), not null
                ToolTip = reader.GetString(i++);

                // CssClass column, nvarchar(256), not null
                CssClass = reader.GetString(i++);

                // MenuType column, nvarchar(64), not null
                MenuType = reader.GetString(i++);

                // InactiveFlag column, bit, not null
                InactiveFlag = reader.GetBoolean(i++);

                // ItemAccess column, bit
                ItemAccess = reader.GetBoolean(i++);

                LocalizedName = reader.GetString(i++);

                LocaleId = reader.GetString(i++);

                SecurityItemId = reader.GetInt32(i++);

                UserInfoId = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["MenuId"].ToString(); }
                catch { missing.Append("MenuId "); }

                try { reader["MenuName"].ToString(); }
                catch { missing.Append("MenuName "); }

                try { reader["ParentMenuId"].ToString(); }
                catch { missing.Append("ParentMenuId "); }

                try { reader["MenuLevel"].ToString(); }
                catch { missing.Append("MenuLevel "); }

                try { reader["MenuUrl"].ToString(); }
                catch { missing.Append("MenuUrl "); }

                try { reader["MenuPosition"].ToString(); }
                catch { missing.Append("MenuPosition "); }

                try { reader["ToolTip"].ToString(); }
                catch { missing.Append("ToolTip "); }

                try { reader["CssClass"].ToString(); }
                catch { missing.Append("CssClass "); }

                try { reader["MenuType"].ToString(); }
                catch { missing.Append("MenuType "); }

                try { reader["InactiveFlag"].ToString(); }
                catch { missing.Append("InactiveFlag "); }

                try { reader["ItemAccess"].ToString(); }
                catch { missing.Append("ItemAccess "); }
                try { reader["LocalizedName"].ToString(); }
                catch { missing.Append("LocalizedName "); }
                try { reader["LocaleId"].ToString(); }
                catch { missing.Append("LocaleId "); }
                try { reader["SecurityItemId"].ToString(); }
                catch { missing.Append("SecurityItemId "); }
                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }
        public void RetrieveAllFromDatabaseCustom(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Menu> data,
            string PackageLevel,
            string BusinessType,
            bool APM,
            bool CMMS,
            bool Sanitation,
            string UserType
        )
        {
            Database.SqlClient.ProcessRow<b_Menu> processRow = null;
            List<b_Menu> results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new List<b_Menu>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                //processRow = new Database.SqlClient.ProcessRow<b_Menu>(reader => { b_Menu obj = new b_Menu(); obj.LoadFromDatabaseCustom(reader); return obj; });
                //results = Database.StoredProcedure.usp_Menu_RetrieveAllCustom.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);
                results = StoredProcedure.usp_Menu_RetrieveAllCustom.CallStoredProcedure(command, callerUserInfoId, callerUserName, this, PackageLevel, BusinessType, APM, CMMS, Sanitation, UserType);
                // Extract the results
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Menu>();
                }
               
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                //results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_Menu ProcessRowGetALLCustom(SqlDataReader reader)
        {
            // Create instance of object
            b_Menu obj = new b_Menu();

            // Load the object from the database
            obj.LoadFromDatabaseCustom(reader);

            // Return result
            return obj;
        }
        public int LoadFromDatabaseCustom(SqlDataReader reader)
        {
            int i = LoadFromDatabase(reader);
            try
            {

                // ItemAccess column, bit
                ItemAccess = reader.GetBoolean(i++);
                LocalizedName = reader.GetString(i++);
                LocaleId = reader.GetString(i++);
                SecurityItemId = reader.GetInt64(i++);
                UserInfoId = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ItemAccess"].ToString(); }
                catch { missing.Append("ItemAccess "); }
                try { reader["LocalizedName"].ToString(); }
                catch { missing.Append("LocalizedName "); }
                try { reader["LocaleId"].ToString(); }
                catch { missing.Append("LocaleId "); }
                try { reader["SecurityItemId"].ToString(); }
                catch { missing.Append("SecurityItemId "); }
                try { reader["UserInfoId"].ToString(); }
                catch { missing.Append("UserInfoId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public void RetrievePageStatusCount(
  SqlConnection connection,
  SqlTransaction transaction,
  long callerUserInfoId,
  string callerUserName,
  ref List<b_Menu> data
  )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_Menu> results;

            try
            {

                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_Menu_RetrieveByPageInfoStatusCount_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName,this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Menu>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }

        }

        public static b_Menu ProcessRowMenuStatus(SqlDataReader reader)
        {           
            b_Menu obj = new b_Menu();            
            obj.LoadFromDatabaseMenuStatus(reader);           
            return obj;
        }
        public int LoadFromDatabaseMenuStatus(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                ModuleName = reader.GetString(i++);
                ItemCount = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                StringBuilder missing = new StringBuilder();
                try { reader["ModuleName"].ToString(); }
                catch { missing.Append("ModuleName "); }
                try { reader["ItemCount"].ToString(); }
                catch { missing.Append("ItemCount "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }
    }
}
