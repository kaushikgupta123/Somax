/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{

    public partial class b_SensorReading : DataBusinessBase
    {
        #region Properties
        public DateTime BackDate { get; set; }
        public DateTime CurrentDate { get; set; }

        #endregion

        public void RetrieveBySensorIDFromDatabase(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          ref List<b_SensorReading> data)
        {
            Database.SqlClient.ProcessRow<b_SensorReading> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;
            List<b_SensorReading> results = null;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_SensorReading_RetrieveBySensorId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_SensorReading>();
                }

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveAllByDate(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          ref List<b_SensorReading> data)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_SensorReading> results = null;
            data = new List<b_SensorReading>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_SensorReading_RetrieveAllByDate.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_SensorReading>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveBySensorIDForTimeSeriesChart(
  SqlConnection connection,
  SqlTransaction transaction,
  long callerUserInfoId,
  string callerUserName,
  ref List<b_SensorReading> data)
        {
            Database.SqlClient.ProcessRow<b_SensorReading> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;
            List<b_SensorReading> results = null;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_SensorReading_RetrieveBySensorIdForTimeSeriesChart.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_SensorReading>();
                }

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public static b_SensorReading LoadFromDatabaseForTimeSeriesChart(SqlDataReader reader)
        {
            // Create instance of object
            b_SensorReading obj = new b_SensorReading();
            int i = 0;
            try
            {
                if (false == reader.IsDBNull(i))
                {
                    obj.MessageDate = reader.GetDateTime(i);
                }
                else
                {
                    obj.MessageDate = DateTime.MinValue;
                }
                i++;
                // PlotValues column, decimal(12,3), not null
                obj.PlotValues = reader.GetDecimal(i++);

                // PlotLabels column, nvarchar(255), not null
                obj.PlotLabels = reader.GetString(i++);
                return obj;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["MessageDate"].ToString(); }
                catch { missing.Append("MessageDate "); }

                try { reader["PlotValues"].ToString(); }
                catch { missing.Append("PlotValues "); }

                try { reader["PlotLabels"].ToString(); }
                catch { missing.Append("PlotLabels "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);

            }
        }
    }
}
