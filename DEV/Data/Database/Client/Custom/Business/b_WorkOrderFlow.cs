/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{

    [Serializable()]
    public partial class b_WorkOrderFlow
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_WorkOrderFlow()
        {
            WorkflowInstance = new b_WorkFlowInstance();
            WorkOrder = new b_WorkOrder();
        }

        public long ClientId { get; set; }
        public long SiteId { get; set; }
        public long CurrentUser_PersonnelId { get; set; }
        public long AssignTo_PersonnelId { get; set; }
        public long DelegateTo_PersonnelId { get; set; }
        public b_WorkFlowInstance WorkflowInstance { get; set; }
        public b_WorkOrder WorkOrder { get; set; }
        public string AssignTo_PersonnelClientLookupId { get; set; }
        public string DelegateTo_PersonnelClientLookupId { get; set; }
        public string AssignToType { get; set; }

        /// <summary>
        /// Retrieve User table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerId">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_User[] that contains the results</param>
        public void RetrieveFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<Object> results = null;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WorkOrderFlow_Retrieve.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);


                // Extract the results

                if (results.Count > 0 && results[0] != null)
                {
                    WorkflowInstance = results[0] as b_WorkFlowInstance;
                }

                if (results.Count > 1 && results[1] != null)
                {
                    CurrentUser_PersonnelId = (long) results[1];
                }

                if (results.Count > 2 && results[2] != null)
                {
                    AssignTo_PersonnelId = (long) results[2];
                }

                if (results.Count > 3 && results[3] != null)
                {
                    DelegateTo_PersonnelId = (long) results[3];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }


            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void ValidateByClientLookupIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_StoredProcValidationError> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WorkOrderFlow_ValidateByClientLookupId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void RetrievePersonnelIdsByClientLookupIdsFromDatabase(
    SqlConnection connection,
    SqlTransaction transaction,
    long callerUserInfoId,
    string callerUserName
)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<Object> results = null;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WorkOrderFlow_Retrieve.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);


                // Extract the results
                if (results.Count > 0 && results[0] != null)
                {
                    AssignTo_PersonnelId = (long)results[0];
                }

                if (results.Count > 1 && results[1] != null)
                {
                    DelegateTo_PersonnelId = (long)results[1];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }


            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

    }
}
