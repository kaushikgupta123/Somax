/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2016 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartImport table.InsertIntoDatabase
    /// </summary>

    public partial class b_Localizations
    {

        public int LoadFromDbExtended(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // Localizationd column, bigint, not null
                if (false == reader.IsDBNull(i))
                {
                    LocalizationId = reader.GetInt64(i);
                }
                else
                {
                    LocalizationId = 0;
                }
                i++;
                // ResourceId column, nvarchar(1024), not null
                if (false == reader.IsDBNull(i))
                {
                    ResourceId = reader.GetString(i);
                }
                else
                {
                    ResourceId = string.Empty;
                }
                i++;
                // Value column, nvarchar(MAX), not null
                if (false == reader.IsDBNull(i))
                {
                    Value = reader.GetString(i);
                }
                else
                {
                    Value = string.Empty;
                }
                i++;
                // LocaleId column, nvarchar(10), not null
                if (false == reader.IsDBNull(i))
                {
                    LocaleId = reader.GetString(i);
                }
                else
                {
                    LocaleId = string.Empty;
                }
                i++;
                // ResourceSet column, nvarchar(512), not null
                if (false == reader.IsDBNull(i))
                {
                    ResourceSet = reader.GetString(i);
                }
                else
                {
                    ResourceSet = string.Empty;
                }
                i++;

                // Updated column, datetime, not null
                if (false == reader.IsDBNull(i))
                {
                    Updated = reader.GetDateTime(i);
                }
                else
                {
                    Updated = DateTime.MinValue;
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["Localizationd"].ToString(); }
                catch { missing.Append("Localizationd "); }

                try { reader["ResourceId"].ToString(); }
                catch { missing.Append("ResourceId "); }

                try { reader["Value"].ToString(); }
                catch { missing.Append("Value "); }

                try { reader["LocaleId"].ToString(); }
                catch { missing.Append("LocaleId "); }

                try { reader["ResourceSet"].ToString(); }
                catch { missing.Append("ResourceSet "); }                

                try { reader["Updated"].ToString(); }
                catch { missing.Append("Updated "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }


        public void RetrieveByResourceSetFromDatabase(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName,
ref List<b_Localizations> results
)
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_Localizations_RetrieveByResourceSet.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
    }
}
