/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Notes table.
    /// </summary>
    public partial class b_Notes
    {

        /// <summary>
        /// ClientId property
        /// </summary>
        #region Property
        public DateTime ModifiedDate { get; set; }

        public long SiteId { get; set; }
        public DateTime CreateDate { get; set; }
        public string PersonnelInitial
        {
            // 2020-Jul-21 - Fails if OwnerName has only one word
            // 
            get
            {
                String[] spearator = { " " };
                string[] FullName = null;
                FullName = OwnerName.Split(spearator, StringSplitOptions.None);
                string InitFirstName =String.IsNullOrEmpty(FullName[0].ToString()) == true ? "" : FullName[0].ToString().Trim().Substring(0, 1);
                string InitLastName = string.Empty;
                if (FullName.Length > 1)
                  InitLastName = String.IsNullOrEmpty(FullName[1].ToString()) == true ? "" : FullName[1].ToString().Trim().Substring(0, 1);
                return (InitFirstName + InitLastName);
            }
        }
        #endregion
        public static object ProcessRowExtended(SqlDataReader reader)
        {
            // Create instance of object
            b_Notes obj = new b_Notes();

            // Load the object from the database
            obj.LoadExtendedFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Notes object.
        /// This routine should be applied to the usp_Notes_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Notes_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadExtendedFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // NotesId column, bigint, not null
                NotesId = reader.GetInt64(i++);

                // OwnerId column, bigint, not null
                OwnerId = reader.GetInt64(i++);

                // OwnerName column, nvarchar(127), not null
                OwnerName = reader.GetString(i++);

                // Subject column, nvarchar(255), not null
                Subject = reader.GetString(i++);

                // Content column, nvarchar(MAX), not null
                Content = reader.GetString(i++);

                // Type column, nvarchar(255), not null
                Type = reader.GetString(i++);

                ObjectId = reader.GetInt64(i++);

                TableName = reader.GetString(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);

                // ModifiedDate column, datetime2, not null
                ModifiedDate = reader.GetDateTime(i++);

                // CreateDate column, datetime2, not null
                CreateDate = reader.GetDateTime(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["NotesId"].ToString(); }
                catch { missing.Append("NotesId "); }

                try { reader["OwnerId"].ToString(); }
                catch { missing.Append("OwnerId "); }

                try { reader["OwnerName"].ToString(); }
                catch { missing.Append("OwnerName "); }

                try { reader["Subject"].ToString(); }
                catch { missing.Append("Subject "); }

                try { reader["Content"].ToString(); }
                catch { missing.Append("Content "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["ObjectId"].ToString(); }
                catch { missing.Append("ObjectId "); }

                try { reader["TableName"].ToString(); }
                catch { missing.Append("TableName "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["ModifiedDate"].ToString(); }
                catch { missing.Append("ModifiedDate "); }

                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void RetrieveByOwnerIdFromDatabase(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
   string callerUserName,
         ref b_Notes[] data
     )
        {
            Database.SqlClient.ProcessRow<b_Notes> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Notes[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Notes>(reader => { b_Notes obj = new b_Notes(); obj.LoadExtendedFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Notes_RetrieveByOwnerId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId, OwnerId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Notes[])results.ToArray(typeof(b_Notes));
                }
                else
                {
                    data = new b_Notes[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveByObjectIdFromDatabase(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
   string callerUserName,
         ref b_Notes[] data
     )
        {
            Database.SqlClient.ProcessRow<b_Notes> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Notes[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Notes>(reader => { b_Notes obj = new b_Notes(); obj.LoadExtendedFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Notes_RetrieveByObjectId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId, ObjectId, TableName);

                // Extract the results
                if (null != results)
                {
                    data = (b_Notes[])results.ToArray(typeof(b_Notes));
                }
                else
                {
                    data = new b_Notes[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveByObjectIdForPurchaseOrder_V2(
    SqlConnection connection,
    SqlTransaction transaction,
    long callerUserInfoId,
string callerUserName,
    ref b_Notes[] data
)
        {
            Database.SqlClient.ProcessRow<b_Notes> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Notes[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Notes>(reader => { b_Notes obj = new b_Notes(); obj.LoadExtendedFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Notes_RetrieveByObjectIdForPurchaseOrder_V2.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId,SiteId, ObjectId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Notes[])results.ToArray(typeof(b_Notes));
                }
                else
                {
                    data = new b_Notes[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

    }
}
