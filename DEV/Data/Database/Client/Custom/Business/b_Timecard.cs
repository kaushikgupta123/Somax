/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Timecard table.
    /// </summary>
    public partial class b_Timecard
    {
        public string PersonnelClientLookupId { get; set; }
        public string AccountClientLookupId { get; set; }
        public string ChargeToPrimeClientLookupId { get; set; }
        public string CraftClientLookupId { get; set; }
        public string NameFirst { get; set; }
        public string NameMiddle { get; set; }
        public string NameLast { get; set; }
        public string NameFull { get; set; }
        public long SiteId { get; set; }
        public string VMRSWorkAccomplishedCode { get; set; }
        public string Name { get; set; }
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        public int OffSetVal { get; set; }
        public int NextRow { get; set; }
        public int TotalCount { get; set; }
        public long SanitationJobId { get; set; } //V2-1071
        public static object ProcessRowByWorkOrderId(SqlDataReader reader)
        {
            // Create instance of object
            b_Timecard obj = new b_Timecard();

            // Load the object from the database
            obj.LoadFromDatabaseClientLookupId(reader);

            // Return result
            return (object)obj;
        }
        public static object ProcessRowByPersonnelId(SqlDataReader reader)
        {
            // Create instance of object
            b_Timecard obj = new b_Timecard();

            // Load the object from the database
            obj.LoadFromDatabaseByPersonnelId(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Timecard object.
        /// This routine should be applied to the usp_Timecard_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Timecard_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadFromDatabaseClientLookupId(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // TimecardId column, bigint, not null
                TimecardId = reader.GetInt64(i++);

                // ChargeType_Primary column, nvarchar(15), not null
                ChargeType_Primary = reader.GetString(i++);

                // ChargeToId_Primary column, bigint, not null
                ChargeToId_Primary = reader.GetInt64(i++);

                // ChargeType_Secondary column, nvarchar(15), not null
                ChargeType_Secondary = reader.GetString(i++);

                // ChargeToId_Secondary column, bigint, not null
                ChargeToId_Secondary = reader.GetInt64(i++);

                // AccountId column, bigint, not null
                AccountId = reader.GetInt64(i++);

                // ActionTakenCode column, nvarchar(15), not null
                ActionTakenCode = reader.GetString(i++);

                // BasePay column, decimal(10,2), not null
                BasePay = reader.GetDecimal(i++);

                // Comments column, nvarchar(MAX), not null
                Comments = reader.GetString(i++);

                // CompleteWorkOrder column, bit, not null
                CompleteWorkOrder = reader.GetBoolean(i++);

                // Craft column, nvarchar(15), not null
                Craft = reader.GetString(i++);

                // Crew column, nvarchar(15), not null
                Crew = reader.GetString(i++);

                // DifferentialCode column, nvarchar(15), not null
                DifferentialCode = reader.GetString(i++);

                // DifferentialMult column, bit, not null
                DifferentialMult = reader.GetBoolean(i++);

                // DifferentialValue column, decimal(10,2), not null
                DifferentialValue = reader.GetDecimal(i++);

                // FailureCode column, nvarchar(15), not null
                FailureCode = reader.GetString(i++);

                // FinishDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    FinishDate = reader.GetDateTime(i);
                }
                else
                {
                    FinishDate = DateTime.MinValue;
                }
                i++;
                // Hours column, decimal(10,2), not null
                Hours = reader.GetDecimal(i++);

                // OvertimeCode column, nvarchar(15), not null
                OvertimeCode = reader.GetString(i++);

                // OvertimeMult column, bit, not null
                OvertimeMult = reader.GetBoolean(i++);

                // OvertimeValue column, decimal(10,2), not null
                OvertimeValue = reader.GetDecimal(i++);

                // PersonnelId column, bigint, not null
                PersonnelId = reader.GetInt64(i++);

                // ReasonNotDone column, nvarchar(15), not null
                ReasonNotDone = reader.GetString(i++);

                // Shift column, nvarchar(15), not null
                Shift = reader.GetString(i++);

                // StartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    StartDate = reader.GetDateTime(i);
                }
                else
                {
                    StartDate = DateTime.MinValue;
                }
                i++;
                // Value column, decimal(10,2), not null
                Value = reader.GetDecimal(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameLast = reader.GetString(i);
                }
                else
                {
                    NameLast = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameFirst = reader.GetString(i);
                }
                else
                {
                    NameFirst = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameMiddle = reader.GetString(i);
                }
                else
                {
                    NameMiddle = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    AccountClientLookupId = reader.GetString(i);
                }
                else
                {
                    AccountClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    CraftClientLookupId = reader.GetString(i);
                }
                else
                {
                    CraftClientLookupId = string.Empty;
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["TimecardId"].ToString(); }
                catch { missing.Append("TimecardId "); }

                try { reader["ChargeType_Primary"].ToString(); }
                catch { missing.Append("ChargeType_Primary "); }

                try { reader["ChargeToId_Primary"].ToString(); }
                catch { missing.Append("ChargeToId_Primary "); }

                try { reader["ChargeType_Secondary"].ToString(); }
                catch { missing.Append("ChargeType_Secondary "); }

                try { reader["ChargeToId_Secondary"].ToString(); }
                catch { missing.Append("ChargeToId_Secondary "); }

                try { reader["AccountId"].ToString(); }
                catch { missing.Append("AccountId "); }

                try { reader["ActionTakenCode"].ToString(); }
                catch { missing.Append("ActionTakenCode "); }

                try { reader["BasePay"].ToString(); }
                catch { missing.Append("BasePay "); }

                try { reader["Comments"].ToString(); }
                catch { missing.Append("Comments "); }

                try { reader["CompleteWorkOrder"].ToString(); }
                catch { missing.Append("CompleteWorkOrder "); }

                try { reader["Craft"].ToString(); }
                catch { missing.Append("Craft "); }

                try { reader["Crew"].ToString(); }
                catch { missing.Append("Crew "); }

                try { reader["DifferentialCode"].ToString(); }
                catch { missing.Append("DifferentialCode "); }

                try { reader["DifferentialMult"].ToString(); }
                catch { missing.Append("DifferentialMult "); }

                try { reader["DifferentialValue"].ToString(); }
                catch { missing.Append("DifferentialValue "); }

                try { reader["FailureCode"].ToString(); }
                catch { missing.Append("FailureCode "); }

                try { reader["FinishDate"].ToString(); }
                catch { missing.Append("FinishDate "); }

                try { reader["Hours"].ToString(); }
                catch { missing.Append("Hours "); }

                try { reader["OvertimeCode"].ToString(); }
                catch { missing.Append("OvertimeCode "); }

                try { reader["OvertimeMult"].ToString(); }
                catch { missing.Append("OvertimeMult "); }

                try { reader["OvertimeValue"].ToString(); }
                catch { missing.Append("OvertimeValue "); }

                try { reader["PersonnelId"].ToString(); }
                catch { missing.Append("PersonnelId "); }

                try { reader["ReasonNotDone"].ToString(); }
                catch { missing.Append("ReasonNotDone "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["StartDate"].ToString(); }
                catch { missing.Append("StartDate "); }

                try { reader["Value"].ToString(); }
                catch { missing.Append("Value "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["NameLast"].ToString(); }
                catch { missing.Append("NameLast "); }

                try { reader["NameFirst"].ToString(); }
                catch { missing.Append("NameFirst "); }

                try { reader["NameMiddle"].ToString(); }
                catch { missing.Append("NameMiddle "); }

                try { reader["AccountClientLookupId"].ToString(); }
                catch { missing.Append("AccountClientLookupId "); }

                try { reader["CraftClientLookupId"].ToString(); }
                catch { missing.Append("CraftClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void LoadFromDatabaseByPersonnelId(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                this.LoadFromDatabase(reader);
                i = 28;
                if (false == reader.IsDBNull(i))
                {
                    AccountClientLookupId = reader.GetString(i);
                }
                else
                {
                    AccountClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    ChargeToPrimeClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToPrimeClientLookupId = string.Empty;
                }
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["AccountClientLookupId"].ToString(); }
                catch { missing.Append("AccountClientLookupId "); }

                try { reader["ChargeToPrimeClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToPrimeClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        /*****
         ** Added By Indusnet Technologies
         **/

        public static object ProcessRowByPKWithPersonal(SqlDataReader reader)
        {
            // Create instance of object
            b_Timecard obj = new b_Timecard();

            // Load the object from the database
            obj.LoadFromDatabaseByPKWithPersonal(reader);

            // Return result
            return (object)obj;
        }

        public void LoadFromDatabaseByPKWithPersonal(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // TimecardId column, bigint, not null
                TimecardId = reader.GetInt64(i++);

                // ChargeType_Primary column, nvarchar(15), not null
                ChargeType_Primary = reader.GetString(i++);

                // ChargeToId_Primary column, bigint, not null
                ChargeToId_Primary = reader.GetInt64(i++);

                // FinishDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    FinishDate = reader.GetDateTime(i);
                }
                else
                {
                    FinishDate = DateTime.MinValue;
                }
                i++;
                // Hours column, decimal(10,2), not null
                Hours = reader.GetDecimal(i++);


                // PersonnelId column, bigint, not null
                PersonnelId = reader.GetInt64(i++);


                // StartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    StartDate = reader.GetDateTime(i);
                }
                else
                {
                    StartDate = DateTime.MinValue;
                }
                i++;

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameLast = reader.GetString(i);
                }
                else
                {
                    NameLast = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameFirst = reader.GetString(i);
                }
                else
                {
                    NameFirst = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameMiddle = reader.GetString(i);
                }
                else
                {
                    NameMiddle = string.Empty;
                }
                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["TimecardId"].ToString(); }
                catch { missing.Append("TimecardId "); }

                try { reader["ChargeType_Primary"].ToString(); }
                catch { missing.Append("ChargeType_Primary "); }

                try { reader["ChargeToId_Primary"].ToString(); }
                catch { missing.Append("ChargeToId_Primary "); }

                try { reader["FinishDate"].ToString(); }
                catch { missing.Append("FinishDate "); }

                try { reader["Hours"].ToString(); }
                catch { missing.Append("Hours "); }

                try { reader["PersonnelId"].ToString(); }
                catch { missing.Append("PersonnelId "); }

                try { reader["StartDate"].ToString(); }
                catch { missing.Append("StartDate "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["NameLast"].ToString(); }
                catch { missing.Append("NameLast "); }

                try { reader["NameFirst"].ToString(); }
                catch { missing.Append("NameFirst "); }

                try { reader["NameMiddle"].ToString(); }
                catch { missing.Append("NameMiddle "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }


        public void RetrieveByPKWithPersonal(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_Timecard> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Timecard> results = null;
            data = new List<b_Timecard>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Timecard_RetrieveByPKWithPersonal.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Timecard>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /*********************************************************/

        public void RetrieveByWorkOrderIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Timecard> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Timecard> results = null;
            data = new List<b_Timecard>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Timecard_RetrieveByWorkOrderId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Timecard>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void RetrieveBySanIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Timecard> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Timecard> results = null;
            data = new List<b_Timecard>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Timecard_RetrieveBySanId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Timecard>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveByPersonnelIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Timecard> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Timecard> results = null;
            data = new List<b_Timecard>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Timecard_RetrieveByPersonnelId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Timecard>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveByPKForeignKeysFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_Timecard> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Timecard>(reader => { this.LoadFromDatabaseClientLookupId(reader); return this; });
                Database.StoredProcedure.usp_Timecard_RetrieveByPKForeignKeys.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void ValidateByClientLookupIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_StoredProcValidationError> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Timecard_ValidateByClientLookupId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void InsertByForeignKeysIntoDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Timecard_CreateByForeignKeys.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void UpdateByForeignKeysIntoDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Timecard_UpdateByForeignKeys.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void InsertByForeignKeysForWorkOrderCompletionIntoDatabase(
   SqlConnection connection,
   SqlTransaction transaction,
   long callerUserInfoId,
   string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_TimeCard_CreateByForeignKeysForWorkOrder.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        /*
        // Removed by RKL - Not Needed
        public void InsertTimeCardWorkOrderCompletionByWorkOrderId(
     SqlConnection connection,
     SqlTransaction transaction,
     long callerUserInfoId,
     string callerUserName
  )
          {
              SqlCommand command = null;

              try
              {
                  command = connection.CreateCommand();
                  if (null != transaction)
                  {
                      command.Transaction = transaction;
                  }
                  Database.StoredProcedure.usp_TimeCard_CreateForCompleteWorkOrder.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
              }
              finally
              {
                  if (null != command)
                  {
                      command.Dispose();
                      command = null;
                  }
              }
          }
        */
        public void RetrieveBy_SanitationJobIdFromDatabase(
                   SqlConnection connection,
                   SqlTransaction transaction,
                   long callerUserInfoId,
                   string callerUserName,
                   ref List<b_Timecard> data
               )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Timecard> results = null;
            data = new List<b_Timecard>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Timecard_RetrieveBySanitationJobId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Timecard>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static object ProcessRowByServiceOrderId(SqlDataReader reader)
        {
            // Create instance of object
            b_Timecard obj = new b_Timecard();

            // Load the object from the database
            obj.LoadFromDatabaseForServiceOrder(reader);

            // Return result
            return (object)obj;
        }
        public void LoadFromDatabaseForServiceOrder(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // TimecardId column, bigint, not null
                TimecardId = reader.GetInt64(i++);

                // ChargeType_Primary column, nvarchar(15), not null
                ChargeType_Primary = reader.GetString(i++);

                // ChargeToId_Primary column, bigint, not null
                ChargeToId_Primary = reader.GetInt64(i++);

                // ChargeType_Secondary column, nvarchar(15), not null
                ChargeType_Secondary = reader.GetString(i++);

                // ChargeToId_Secondary column, bigint, not null
                ChargeToId_Secondary = reader.GetInt64(i++);

                // AccountId column, bigint, not null
                AccountId = reader.GetInt64(i++);

                // ActionTakenCode column, nvarchar(15), not null
                ActionTakenCode = reader.GetString(i++);

                // BasePay column, decimal(10,2), not null
                BasePay = reader.GetDecimal(i++);

                // Comments column, nvarchar(MAX), not null
                Comments = reader.GetString(i++);

                // CompleteWorkOrder column, bit, not null
                CompleteWorkOrder = reader.GetBoolean(i++);

                // Craft column, nvarchar(15), not null
                Craft = reader.GetString(i++);

                // Crew column, nvarchar(15), not null
                Crew = reader.GetString(i++);

                // DifferentialCode column, nvarchar(15), not null
                DifferentialCode = reader.GetString(i++);

                // DifferentialMult column, bit, not null
                DifferentialMult = reader.GetBoolean(i++);

                // DifferentialValue column, decimal(10,2), not null
                DifferentialValue = reader.GetDecimal(i++);

                // FailureCode column, nvarchar(15), not null
                FailureCode = reader.GetString(i++);

                // FinishDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    FinishDate = reader.GetDateTime(i);
                }
                else
                {
                    FinishDate = DateTime.MinValue;
                }
                i++;
                // Hours column, decimal(10,2), not null
                Hours = reader.GetDecimal(i++);

                // OvertimeCode column, nvarchar(15), not null
                OvertimeCode = reader.GetString(i++);

                // OvertimeMult column, bit, not null
                OvertimeMult = reader.GetBoolean(i++);

                // OvertimeValue column, decimal(10,2), not null
                OvertimeValue = reader.GetDecimal(i++);

                // PersonnelId column, bigint, not null
                PersonnelId = reader.GetInt64(i++);

                // ReasonNotDone column, nvarchar(15), not null
                ReasonNotDone = reader.GetString(i++);

                // Shift column, nvarchar(15), not null
                Shift = reader.GetString(i++);

                // StartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    StartDate = reader.GetDateTime(i);
                }
                else
                {
                    StartDate = DateTime.MinValue;
                }
                i++;
                // Value column, decimal(10,2), not null
                Value = reader.GetDecimal(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameLast = reader.GetString(i);
                }
                else
                {
                    NameLast = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameFirst = reader.GetString(i);
                }
                else
                {
                    NameFirst = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameMiddle = reader.GetString(i);
                }
                else
                {
                    NameMiddle = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    AccountClientLookupId = reader.GetString(i);
                }
                else
                {
                    AccountClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    CraftClientLookupId = reader.GetString(i);
                }
                else
                {
                    CraftClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    VMRSWorkAccomplished = reader.GetString(i);
                }
                else
                {
                    VMRSWorkAccomplished = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    VMRSWorkAccomplishedCode = reader.GetString(i);
                }
                else
                {
                    VMRSWorkAccomplishedCode = string.Empty;
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["TimecardId"].ToString(); }
                catch { missing.Append("TimecardId "); }

                try { reader["ChargeType_Primary"].ToString(); }
                catch { missing.Append("ChargeType_Primary "); }

                try { reader["ChargeToId_Primary"].ToString(); }
                catch { missing.Append("ChargeToId_Primary "); }

                try { reader["ChargeType_Secondary"].ToString(); }
                catch { missing.Append("ChargeType_Secondary "); }

                try { reader["ChargeToId_Secondary"].ToString(); }
                catch { missing.Append("ChargeToId_Secondary "); }

                try { reader["AccountId"].ToString(); }
                catch { missing.Append("AccountId "); }

                try { reader["ActionTakenCode"].ToString(); }
                catch { missing.Append("ActionTakenCode "); }

                try { reader["BasePay"].ToString(); }
                catch { missing.Append("BasePay "); }

                try { reader["Comments"].ToString(); }
                catch { missing.Append("Comments "); }

                try { reader["CompleteWorkOrder"].ToString(); }
                catch { missing.Append("CompleteWorkOrder "); }

                try { reader["Craft"].ToString(); }
                catch { missing.Append("Craft "); }

                try { reader["Crew"].ToString(); }
                catch { missing.Append("Crew "); }

                try { reader["DifferentialCode"].ToString(); }
                catch { missing.Append("DifferentialCode "); }

                try { reader["DifferentialMult"].ToString(); }
                catch { missing.Append("DifferentialMult "); }

                try { reader["DifferentialValue"].ToString(); }
                catch { missing.Append("DifferentialValue "); }

                try { reader["FailureCode"].ToString(); }
                catch { missing.Append("FailureCode "); }

                try { reader["FinishDate"].ToString(); }
                catch { missing.Append("FinishDate "); }

                try { reader["Hours"].ToString(); }
                catch { missing.Append("Hours "); }

                try { reader["OvertimeCode"].ToString(); }
                catch { missing.Append("OvertimeCode "); }

                try { reader["OvertimeMult"].ToString(); }
                catch { missing.Append("OvertimeMult "); }

                try { reader["OvertimeValue"].ToString(); }
                catch { missing.Append("OvertimeValue "); }

                try { reader["PersonnelId"].ToString(); }
                catch { missing.Append("PersonnelId "); }

                try { reader["ReasonNotDone"].ToString(); }
                catch { missing.Append("ReasonNotDone "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["StartDate"].ToString(); }
                catch { missing.Append("StartDate "); }

                try { reader["Value"].ToString(); }
                catch { missing.Append("Value "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["NameLast"].ToString(); }
                catch { missing.Append("NameLast "); }

                try { reader["NameFirst"].ToString(); }
                catch { missing.Append("NameFirst "); }

                try { reader["NameMiddle"].ToString(); }
                catch { missing.Append("NameMiddle "); }

                try { reader["AccountClientLookupId"].ToString(); }
                catch { missing.Append("AccountClientLookupId "); }

                try { reader["CraftClientLookupId"].ToString(); }
                catch { missing.Append("CraftClientLookupId "); }

                try { reader["VMRSWorkAccomplished"].ToString(); }
                catch { missing.Append("VMRSWorkAccomplished "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void RetrieveByServiceOrderId(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Timecard> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Timecard> results = null;
            data = new List<b_Timecard>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Timecard_RetrieveByServiceOrderId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Timecard>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void UpdateByForeignKeysIntoDatabase_V2(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Timecard_UpdateByForeignKeys_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void InsertByForeignKeysIntoDatabase_V2(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Timecard_CreateByForeignKeys_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }


        public void RetrieveByWorkOrderIdForMaintananceWorkbenchDetails(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Timecard> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Timecard> results = null;
            data = new List<b_Timecard>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Timecard_RetrieveByWorkOrderIdForMaintananceWorkbenchDetails_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Timecard>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public static object ProcessRowByWorkOrderIdForMaintananceWorkbenchDetails(SqlDataReader reader)
        {
            // Create instance of object
            b_Timecard obj = new b_Timecard();

            // Load the object from the database
            obj.LoadFromDatabaseForMaintananceWorkbenchDetails(reader);

            // Return result
            return (object)obj;
        }

        public void LoadFromDatabaseForMaintananceWorkbenchDetails(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // TimecardId column, bigint, not null
                TimecardId = reader.GetInt64(i++);

                // ChargeType_Primary column, nvarchar(15), not null
                ChargeType_Primary = reader.GetString(i++);

                // ChargeToId_Primary column, bigint, not null
                ChargeToId_Primary = reader.GetInt64(i++);

                // ChargeType_Secondary column, nvarchar(15), not null
                ChargeType_Secondary = reader.GetString(i++);

                // ChargeToId_Secondary column, bigint, not null
                ChargeToId_Secondary = reader.GetInt64(i++);

                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    Name = reader.GetString(i);
                }
                else
                {
                    Name = string.Empty;
                }
                i++;

                // StartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    StartDate = reader.GetDateTime(i);
                }
                else
                {
                    StartDate = DateTime.MinValue;
                }
                i++;

                // Hours column, decimal(10,2), not null
                Hours = reader.GetDecimal(i++);

                // Value column, decimal(10,2), not null
                Value = reader.GetDecimal(i++);

                // BasePay column, decimal(10,2), not null
                BasePay = reader.GetDecimal(i++);

                // OvertimeValue column, decimal(10,2), not null
                OvertimeValue = reader.GetDecimal(i++);

                // PersonnelId column, bigint, not null
                PersonnelId = reader.GetInt64(i++);

                TotalCount = reader.GetInt32(i++);

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["TimecardId"].ToString(); }
                catch { missing.Append("TimecardId "); }

                try { reader["ChargeType_Primary"].ToString(); }
                catch { missing.Append("ChargeType_Primary "); }

                try { reader["ChargeToId_Primary"].ToString(); }
                catch { missing.Append("ChargeToId_Primary "); }

                try { reader["ChargeType_Secondary"].ToString(); }
                catch { missing.Append("ChargeType_Secondary "); }

                try { reader["ChargeToId_Secondary"].ToString(); }
                catch { missing.Append("ChargeToId_Secondary "); }

                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["Name"].ToString(); }
                catch { missing.Append("Name "); }

                try { reader["StartDate"].ToString(); }
                catch { missing.Append("StartDate "); }

                try { reader["Hours"].ToString(); }
                catch { missing.Append("Hours "); }

                try { reader["Value"].ToString(); }
                catch { missing.Append("Value "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public static object ProcessRowForRetrieveTimeCardSumOfLabourHours(SqlDataReader reader)
        {

            // Create instance of object
            b_Timecard obj = new b_Timecard();

            // Load the object from the database
            obj.LoadFromDatabaseForRetrieveTimeCardSumOfLabourHours(reader);

            // Return result
            return (object)obj;
        }

        public void LoadFromDatabaseForRetrieveTimeCardSumOfLabourHours(SqlDataReader reader)
        {
            //int i = this.LoadFromDatabase(reader);
            int i = 0;
            try
            {
                // name 
                Name = reader.GetString(i++);
                // TotalCount column, bigint, not null
                TotalCount = reader.GetInt32(i++);

                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void RetrieveSumLabourHours(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
            ref List<b_Timecard> data
       )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_Timecard> results = null;
            data = new List<b_Timecard>();
            try
            {
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                results = Database.StoredProcedure.usp_TimeCard_RetrieveSumOfLabourHours_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Timecard>();
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
            }
        }

        public static b_Timecard ProcessRowForTimeCardPrint(SqlDataReader reader)
        {
            // Create instance of object
            b_Timecard obj = new b_Timecard();

            // Load the object from the database
            obj.LoadFromDatabaseForTimeCardPrint(reader);

            // Return result
            return obj;
        }
        public void LoadFromDatabaseForTimeCardPrint(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // ChargeToId_Primary column, bigint, not null
                ChargeToId_Primary = reader.GetInt64(i++);

                // Hours column, decimal(10,2), not null
                Hours = reader.GetDecimal(i++);

                // StartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    StartDate = reader.GetDateTime(i);
                }
                else
                {
                    StartDate = DateTime.MinValue;
                }
                i++;
                // BasePay column, decimal(10,2), not null
                BasePay = reader.GetDecimal(i++);
                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameLast = reader.GetString(i);
                }
                else
                {
                    NameLast = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameFirst = reader.GetString(i);
                }
                else
                {
                    NameFirst = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameMiddle = reader.GetString(i);
                }
                else
                {
                    NameMiddle = string.Empty;
                }
                i++;


            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ChargeToId_Primary"].ToString(); }
                catch { missing.Append("ChargeToId_Primary "); }

                try { reader["Hours"].ToString(); }
                catch { missing.Append("Hours "); }

                try { reader["StartDate"].ToString(); }
                catch { missing.Append("StartDate "); }

                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["NameLast"].ToString(); }
                catch { missing.Append("NameLast "); }

                try { reader["NameFirst"].ToString(); }
                catch { missing.Append("NameFirst "); }

                try { reader["NameMiddle"].ToString(); }
                catch { missing.Append("NameMiddle "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        #region V2-1071
        public static b_Timecard ProcessRowForDevExpressTimeCardPrint(SqlDataReader reader)
        {
            // Create instance of object
            b_Timecard obj = new b_Timecard();

            // Load the object from the database
            obj.LoadFromDatabaseForDevExpressTimeCardPrint(reader);

            // Return result
            return obj;
        }
        public void LoadFromDatabaseForDevExpressTimeCardPrint(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                //SanitationJobId or ChargeToId_Primary column, bigint, not null
                SanitationJobId = reader.GetInt64(i++);

                // TimecardId column, bigint, not null
                TimecardId = reader.GetInt64(i++);

                // Hours column, decimal(10,2), not null
                Hours = reader.GetDecimal(i++);


                // PersonnelId column, datetime2, not null
                PersonnelId = reader.GetInt64(i++);

                // StartDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    StartDate = reader.GetDateTime(i);
                }
                else
                {
                    StartDate = DateTime.MinValue;
                }
                i++;
                // BasePay column, decimal(10,2), not null
                Value = reader.GetDecimal(i++);
                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameLast = reader.GetString(i);
                }
                else
                {
                    NameLast = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameFirst = reader.GetString(i);
                }
                else
                {
                    NameFirst = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameMiddle = reader.GetString(i);
                }
                else
                {
                    NameMiddle = string.Empty;
                }
                i++;


            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["SanitationJobId"].ToString(); }
                catch { missing.Append("SanitationJobId "); }

                try { reader["TimecardId"].ToString(); }
                catch { missing.Append("TimecardId "); }

                try { reader["Hours"].ToString(); }
                catch
                {
                    missing.Append("Hours ");


                    try { reader["StartDate"].ToString(); }
                    catch { missing.Append("StartDate "); }

                    try { reader["PersonnelClientLookupId"].ToString(); }
                    catch { missing.Append("PersonnelClientLookupId "); }

                    try { reader["NameLast"].ToString(); }
                    catch { missing.Append("NameLast "); }

                    try { reader["NameFirst"].ToString(); }
                    catch { missing.Append("NameFirst "); }

                    try { reader["NameMiddle"].ToString(); }
                    catch { missing.Append("NameMiddle "); }


                    StringBuilder msg = new StringBuilder();
                    msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                    if (missing.Length > 0)
                    {
                        msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                    }

                    throw new Exception(msg.ToString(), ex);
                }
            }
            #endregion

        }
    }
}


