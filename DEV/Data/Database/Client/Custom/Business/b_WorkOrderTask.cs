/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Equipment_TechSpecs table.
    /// </summary>
    public partial class b_WorkOrderTask
    {
        public string WorkOrderClientLookupId { get; set; }
        public string AssignedTo_PersonnelClientLookupId { get; set; }
        public string ChargeToClientLookupId { get; set; }
        public string CompleteBy_PersonnelClientLookupId { get; set; }
        public string MeterId_ClientLookupId { get; set; }
        public long ParentSiteId { get; set; }
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        public int OffSetVal { get; set; }
        public int NextRow { get; set; }
        public int TotalCount { get; set; }

        public static object ProcessRowByDashboardRetrieveWorkTaskByWorkOrderId(SqlDataReader reader)
        {
            // Create instance of object
            b_WorkOrderTask obj = new b_WorkOrderTask();

            // Load the object from the database
            obj.LoadFromDatabaseByDashboardRetrieveWorkTaskByWorkOrderId(reader);

            // Return result
            return (object)obj;
        }
        public void LoadFromDatabaseByDashboardRetrieveWorkTaskByWorkOrderId(SqlDataReader reader)
        {
          // int i = this.LoadFromDatabase(reader);
           int i = 0;
            try
            {    // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // WorkOrderTaskId column, bigint, not null
                WorkOrderTaskId = reader.GetInt64(i++);

                // WorkOrderId column, bigint, not null
                WorkOrderId = reader.GetInt64(i++);

                // Description column, nvarchar(MAX), not null
                Description = reader.GetString(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // TaskNumber column, nvarchar(7), not null
                TaskNumber = reader.GetString(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                if (false == reader.IsDBNull(i))
                {
                    ChargeToClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToClientLookupId = string.Empty;
                }
                i++;

                // TotalCount column, int, not null
                TotalCount = reader.GetInt32(i++);

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["WorkOrderTaskId"].ToString(); }
                catch { missing.Append("WorkOrderTaskId "); }

                try { reader["WorkOrderId"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["TaskNumber"].ToString(); }
                catch { missing.Append("TaskNumber "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public static object ProcessRowByClientLookupId(SqlDataReader reader)
        {
            // Create instance of object
            b_WorkOrderTask obj = new b_WorkOrderTask();

            // Load the object from the database
            obj.LoadFromDatabaseByClientLookupId(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_WorkOrderTask object.
        /// This routine should be applied to the usp_WorkOrderTask_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_WorkOrderTask_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadFromDatabaseByClientLookupId(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            //int i = 0;
            try
            {

                if (false == reader.IsDBNull(i))
                {
                    AssignedTo_PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    AssignedTo_PersonnelClientLookupId = string.Empty;
                }
                i++;


                if (false == reader.IsDBNull(i))
                {
                    ChargeToClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToClientLookupId = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                  CompleteBy_PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                  CompleteBy_PersonnelClientLookupId = string.Empty;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                  MeterId_ClientLookupId = reader.GetString(i);
                }
                else
                {
                  MeterId_ClientLookupId = string.Empty;
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["AssignedTo_PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("AssignedTo_PersonnelClientLookupId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                try { reader["CompleteBy_PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("CompleteBy_PersonnelClientLookupId "); }

                try { reader["MeterId_ClientLookupId"].ToString(); }
                catch { missing.Append("MeterId_ClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Downtime object.
        /// This routine should be applied to the usp_Downtime_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Downtime_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_WorkOrderTask object</returns>
        public static object ProcessRowForEquipmentCrossReference(SqlDataReader reader)
        {
            // Create instance of object
            b_WorkOrderTask obj = new b_WorkOrderTask();

            // Load the object from the database
            obj.LoadFromDatabaseForEquipmentCrossReference(reader);

            // Return result
            return (object)obj;
        }

        public void LoadFromDatabaseForEquipmentCrossReference(SqlDataReader reader)
        {
          int i = this.LoadFromDatabase(reader);
          //int i = 0;
          try
            {

                if (false == reader.IsDBNull(i))
                {
                    WorkOrderClientLookupId = reader.GetString(i);
                }
                else
                {
                    WorkOrderClientLookupId = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                  MeterId_ClientLookupId = reader.GetString(i);
                }
                else
                {
                  MeterId_ClientLookupId = "";
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["MeterId_ClientLookupId"].ToString(); }
                catch { missing.Append("MeterId_ClientLookupId "); }

                try { reader["MeterId_ClientLookupId"].ToString(); }
                catch { missing.Append("MeterId_ClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void RetrieveByEquipmentIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_WorkOrderTask> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_WorkOrderTask> results = null;
            data = new List<b_WorkOrderTask>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WorkOrderTask_RetrieveByEquipmentId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_WorkOrderTask>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveByWorkOrderIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_WorkOrderTask> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_WorkOrderTask> results = null;
            data = new List<b_WorkOrderTask>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WorkOrderTask_RetrieveByWorkOrderId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_WorkOrderTask>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void RetrieveWorkOrderTaskByWorkOrderIdV2FromDatabase(
   SqlConnection connection,
   SqlTransaction transaction,
   long callerUserInfoId,
   string callerUserName,
   ref List<b_WorkOrderTask> data
)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_WorkOrderTask> results = null;
            data = new List<b_WorkOrderTask>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WorkOrderTask_DashboardRetrieveByWorkOrderId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_WorkOrderTask>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void RetrieveByPKForeignKeysFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            Database.SqlClient.ProcessRow<b_WorkOrderTask> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_WorkOrderTask>(reader => { this.LoadFromDatabaseByClientLookupId(reader); return this; });
                Database.StoredProcedure.usp_WorkOrderTask_RetrieveByPKForeignKeys.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void ValidateByClientLookupIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_StoredProcValidationError> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WorkOrderTask_ValidateByClientLookupId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void InsertByForeignKeysIntoDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrderTask_CreateByForeignKeys.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void UpdateByForeignKeysIntoDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrderTask_UpdateByForeignKeys.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void UpdateByForeignKeysIntoDatabaseForTask(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WOWorkOrderTask_UpdateByForeignKeysforTask.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void ReOrderTask(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_WorkOrderTask_ReOrderTask.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public static b_WorkOrderTask ProcessRowForChargeToClientIdLookup(SqlDataReader reader)
        {
            // Create instance of object
            b_WorkOrderTask workOrderTask = new b_WorkOrderTask();

            // Load the object from the database
            workOrderTask.LoadFromDatabaseForChargeToClientIdLookup(reader);

            // Return result
            return workOrderTask;
        }

        public void LoadFromDatabaseForChargeToClientIdLookup(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // LocationId column, bigint, not null
                ChargeToId = reader.GetInt64(i++);

                // ClientLookupId column, nvarchar(31), not null
                ChargeToClientLookupId = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ChargeToId"].ToString(); }
                catch { missing.Append("ChargeToId "); }

                try { reader["ChargeToClientLookupId"].ToString(); }
                catch { missing.Append("ChargeToClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        /// <summary>
        /// Retrieve User table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public void RetrieveChargeToClientLookupIdBySearchCriteriaFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_WorkOrderTask> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_WorkOrderTask> results = null;
            data = new List<b_WorkOrderTask>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WorkOrderTask_RetrieveChargeToClientLookupIdBySearchCriteria.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_WorkOrderTask>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public static b_WorkOrderTask ProcessRowForWorkOrderTaskPrint(SqlDataReader reader)
        {
            // Create instance of object
            b_WorkOrderTask obj = new b_WorkOrderTask();

            // Load the object from the database
            obj.LoadFromDatabaseForWorkOrderTaskPrint(reader);

            // Return result
            return obj;
        }
        public void LoadFromDatabaseForWorkOrderTaskPrint(SqlDataReader reader)
        {
         //   int i = this.LoadFromDatabase(reader);
            int i = 0;
            try
            {

                // WorkOrderId column, bigint, not null
                WorkOrderId = reader.GetInt64(i++);

                // Description column, nvarchar(MAX), not null
                Description = reader.GetString(i++);

                // ScheduledDuration column, decimal(8,2), not null
                ScheduledDuration = reader.GetDecimal(i++);

                // Status column, nvarchar(15), not null
                Status = reader.GetString(i++);

                // TaskNumber column, nvarchar(7), not null
                TaskNumber = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["WorkOrderId"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["ScheduledDuration"].ToString(); }
                catch { missing.Append("ScheduledDuration "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["TaskNumber"].ToString(); }
                catch { missing.Append("TaskNumber "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
    }
}
