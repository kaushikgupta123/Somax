/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{

    public partial class b_SensorAlertProcedure : DataBusinessBase
    {
        #region Properties
        public DateTime CreateDate { get; set; }
        #region V2-536
        public int OffSetVal { get; set; }
        public int NextRow { get; set; }
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        public int TotalCount { get; set; }
        #endregion
        #endregion



        public int LoadFromDB(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {

                // CreateDate column, DateTime2, null
                if (false == reader.IsDBNull(i))
                {
                    this.CreateDate = reader.GetDateTime(i);
                }
                else
                {
                    this.CreateDate = DateTime.MinValue;
                }
                i++;


            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        
        public void RetrieveAllForSensorAlertData(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
      string callerUserName,
            ref b_SensorAlertProcedure[] data
        )
        {
            Database.SqlClient.ProcessRow<b_SensorAlertProcedure> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_SensorAlertProcedure[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_SensorAlertProcedure>(reader => { b_SensorAlertProcedure obj = new b_SensorAlertProcedure(); obj.LoadFromDB(reader); return obj; });
                results = Database.StoredProcedure.usp_SensorAlertProcedure_RetrieveAllForSensorAlertData.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId , SiteId);

                // Extract the results
                if (null != results)
                {
                    data = (b_SensorAlertProcedure[])results.ToArray(typeof(b_SensorAlertProcedure));
                }
                else
                {
                    data = new b_SensorAlertProcedure[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void ValidateByClientLookupIdFromDatabase(SqlConnection connection,
              SqlTransaction transaction,
              long callerUserInfoId,
              string callerUserName,
              ref List<b_StoredProcValidationError> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();
            try
            {
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                results = Database.StoredProcedure.usp_SensorAlertProcedure_ValidateByClientLookupId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        #region V2-950
        public void RetrieveForActiveTableLookupList_V2(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName,
ref List<b_SensorAlertProcedure> results
)
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_SensorAlertProcedure_RetrieveActiveChunkSearchLookupList_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static b_SensorAlertProcedure ProcessRowRetrieveForActiveTableLookupList_V2(SqlDataReader reader)
        {
            // Create instance of object
            b_SensorAlertProcedure meters = new b_SensorAlertProcedure();

            // Load the object from the database
            meters.LoadFromDatabaseRetrieveForActiveTableLookupList_V2(reader);

            // Return result
            return meters;
        }

        public void LoadFromDatabaseRetrieveForActiveTableLookupList_V2(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                ClientId = reader.GetInt64(i++);

                // SensorAlertProcedureId column, bigint, not null
                SensorAlertProcedureId = reader.GetInt64(i++);

                SiteId = reader.GetInt64(i++);

                // ClientLookUpId column, nvarchar(31), not null
                ClientLookUpId = reader.GetString(i++);

                Description = reader.GetString(i++);
                Type = reader.GetString(i++);
                TotalCount = reader.GetInt32(i++);



            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["SensorAlertProcedureId"].ToString(); }
                catch { missing.Append("SensorAlertProcedureId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["ClientLookUpId"].ToString(); }
                catch { missing.Append("ClientLookUpId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["Type"].ToString(); }
                catch { missing.Append("Type "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        #endregion
    }
}
