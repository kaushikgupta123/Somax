/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Equipment_TechSpecs table.
    /// </summary>
    public partial class b_Downtime
    {
        public string PersonnelClientLookupId { get; set; }

        public string WorkOrderClientLookupId { get; set; }

        public long ParentSiteId { get; set; }
        #region V2-695
        public string ReasonForDownDescription { get; set; }
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        #endregion

        //**V2-695 -wo Downtime
        public string orderbyColumn { get; set; }
        public string orderBy { get; set; }
        public int offset1 { get; set; }
        public int nextrow { get; set; }
        public int TotalCount { get; set; }

        public decimal TotalMinutesDown { get; set; }
        //**

        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_Downtime object.
        /// This routine should be applied to the usp_Downtime_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Downtime_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_Downtime object</returns>
        public static object ProcessRowForEquipmentCrossReference(SqlDataReader reader)
        {
            // Create instance of object
            b_Downtime obj = new b_Downtime();

            // Load the object from the database
            obj.LoadFromDatabaseForEquipmentCrossReference(reader);

            // Return result
            return (object)obj;
        }

       
        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Downtime object.
        /// This routine should be applied to the usp_Downtime_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Downtime_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadFromDatabaseForEquipmentCrossReference(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // DowntimeId column, bigint, not null
                DowntimeId = reader.GetInt64(i++);

                // EquipmentID column, bigint, not null
                EquipmentId = reader.GetInt64(i++);

                // ActionCode column, nvarchar(15), not null
                ActionCode = reader.GetString(i++);

                // DateDown column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateDown = reader.GetDateTime(i);
                }
                else
                {
                    DateDown = DateTime.MinValue;
                }
                i++;
                // DateUp column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateUp = reader.GetDateTime(i);
                }
                else
                {
                    DateUp = DateTime.MinValue;
                }
                i++;
                // FailureCode column, nvarchar(15), not null
                FailureCode = reader.GetString(i++);

                // MinutesDown column, decimal(15,4), not null
                MinutesDown = reader.GetDecimal(i++);

                // Notes column, nvarchar(2047), not null
                Notes = reader.GetString(i++);

                // Operator_PersonnelID column, bigint, not null
                Operator_PersonnelId = reader.GetInt64(i++);

                // ReasonForDown column, nvarchar(15), not null
                ReasonForDown = reader.GetString(i++);

                // WorkOrderID column, bigint, not null
                WorkOrderId = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    WorkOrderClientLookupId = reader.GetString(i);
                }
                else
                {
                    WorkOrderClientLookupId = "";
                }
                i++;
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["DowntimeId"].ToString(); }
                catch { missing.Append("DowntimeId "); }

                try { reader["SiteID"].ToString(); }
                catch { missing.Append("SiteID "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreRoomId"].ToString(); }
                catch { missing.Append("StoreRoomId "); }

                try { reader["EquipmentID"].ToString(); }
                catch { missing.Append("EquipmentID "); }

                try { reader["ActionCode"].ToString(); }
                catch { missing.Append("ActionCode "); }

                try { reader["DateDown"].ToString(); }
                catch { missing.Append("DateDown "); }

                try { reader["DateUp"].ToString(); }
                catch { missing.Append("DateUp "); }

                try { reader["FailureCode"].ToString(); }
                catch { missing.Append("FailureCode "); }

                try { reader["MinutesDown"].ToString(); }
                catch { missing.Append("MinutesDown "); }

                try { reader["Notes"].ToString(); }
                catch { missing.Append("Notes "); }

                try { reader["Operator_PersonnelId"].ToString(); }
                catch { missing.Append("Operator_PersonnelId "); }

                try { reader["ReasonForDown"].ToString(); }
                catch { missing.Append("ReasonForDown "); }

                try { reader["WorkOrderID"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["WorkOrderClientLookupId"].ToString(); }
                catch { missing.Append("WorkOrderClientLookupId"); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        /// <summary>
        /// Retrieve User table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public void RetrieveByEquipmentIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Downtime> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Downtime> results = null;
            data = new List<b_Downtime>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Downtime_RetrieveByEquipmentId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Downtime>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        //**V2-695
        public void RetrieveByWorkOrderId_V2FromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Downtime> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Downtime> results = null;
            data = new List<b_Downtime>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Downtime_RetrieveByWorkOrderId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Downtime>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public static object ProcessRowForWorkOrderId_V2(SqlDataReader reader)
        {
            // Create instance of object
            b_Downtime obj = new b_Downtime();

            // Load the object from the database
            //obj.LoadFromDatabaseForEquipmentCrossReference(reader);
            obj.LoadFromDatabaseForWorkOrderId_V2(reader);
            // Return result
            return (object)obj;
        }
        public void LoadFromDatabaseForWorkOrderId_V2(SqlDataReader reader)
        {
            int i = 0;
            try
            {               
                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // DowntimeId column, bigint, not null
                DowntimeId = reader.GetInt64(i++);

                // EquipmentID column, bigint, not null
                EquipmentId = reader.GetInt64(i++);

                // ActionCode column, nvarchar(15), not null
                ActionCode = reader.GetString(i++);

                // DateDown column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateDown = reader.GetDateTime(i);
                }
                else
                {
                    DateDown = DateTime.MinValue;
                }
                i++;
                // DateUp column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateUp = reader.GetDateTime(i);
                }
                else
                {
                    DateUp = DateTime.MinValue;
                }
                i++;
                // FailureCode column, nvarchar(15), not null
                FailureCode = reader.GetString(i++);

                // MinutesDown column, decimal(15,4), not null
                MinutesDown = reader.GetDecimal(i++);

                // Notes column, nvarchar(2047), not null
                Notes = reader.GetString(i++);

                // Operator_PersonnelID column, bigint, not null
                Operator_PersonnelId = reader.GetInt64(i++);

                // ReasonForDown column, nvarchar(15), not null
                ReasonForDown = reader.GetString(i++);

                // WorkOrderID column, bigint, not null
                WorkOrderId = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    WorkOrderClientLookupId = reader.GetString(i);
                }
                else
                {
                    WorkOrderClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    ReasonForDownDescription = reader.GetString(i);
                }
                else
                {
                    ReasonForDownDescription = "";
                }
                i++;
                //TotalCount
                TotalCount = reader.GetInt32(i++);
                TotalMinutesDown=reader.GetDecimal(i++);

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["DowntimeId"].ToString(); }
                catch { missing.Append("DowntimeId "); }

                try { reader["SiteID"].ToString(); }
                catch { missing.Append("SiteID "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreRoomId"].ToString(); }
                catch { missing.Append("StoreRoomId "); }

                try { reader["EquipmentID"].ToString(); }
                catch { missing.Append("EquipmentID "); }

                try { reader["ActionCode"].ToString(); }
                catch { missing.Append("ActionCode "); }

                try { reader["DateDown"].ToString(); }
                catch { missing.Append("DateDown "); }

                try { reader["DateUp"].ToString(); }
                catch { missing.Append("DateUp "); }

                try { reader["FailureCode"].ToString(); }
                catch { missing.Append("FailureCode "); }

                try { reader["MinutesDown"].ToString(); }
                catch { missing.Append("MinutesDown "); }

                try { reader["Notes"].ToString(); }
                catch { missing.Append("Notes "); }

                try { reader["Operator_PersonnelId"].ToString(); }
                catch { missing.Append("Operator_PersonnelId "); }

                try { reader["ReasonForDown"].ToString(); }
                catch { missing.Append("ReasonForDown "); }

                try { reader["WorkOrderID"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["WorkOrderClientLookupId"].ToString(); }
                catch { missing.Append("WorkOrderClientLookupId"); }

                try { reader["ReasonForDownDescription"].ToString(); }
                catch { missing.Append("ReasonForDownDescription "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }

                try { reader["TotalSumMinutesDown"].ToString(); }
                catch { missing.Append("TotalSumMinutesDown "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        //**end v2-695
        /// <summary>
        /// Retrieve User table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public void ValidateByClientLookupIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_StoredProcValidationError> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Downtime_ValidateByClientLookupId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        /// <summary>
        /// Insert this object into the database as a Downtime table record.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public void InsertIntoDatabaseByPKForeignKeys(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Downtime_CreateByPKForeignKeys.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        /// <summary>
        /// Update the Downtime table record represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public void UpdateInDatabaseByPKForeignKeys(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_Downtime_UpdateByPKForeignKeys.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void RetrieveByWorkOrderIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_Downtime> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Downtime> results = null;
            data = new List<b_Downtime>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Downtime_RetrieveByWorkOrderId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Downtime>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        #region V2-695
        public static object ProcessRowForEquipmentCrossReference_V2(SqlDataReader reader)
        {
            // Create instance of object
            b_Downtime obj = new b_Downtime();

            // Load the object from the database
            obj.LoadFromDatabaseForEquipmentCrossReference_V2(reader);

            // Return result
            return (object)obj;
        }


        public void LoadFromDatabaseForEquipmentCrossReference_V2(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // DowntimeId column, bigint, not null
                DowntimeId = reader.GetInt64(i++);

                // EquipmentID column, bigint, not null
                EquipmentId = reader.GetInt64(i++);

                // ActionCode column, nvarchar(15), not null
                ActionCode = reader.GetString(i++);

                // DateDown column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateDown = reader.GetDateTime(i);
                }
                else
                {
                    DateDown = DateTime.MinValue;
                }
                i++;
                // DateUp column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    DateUp = reader.GetDateTime(i);
                }
                else
                {
                    DateUp = DateTime.MinValue;
                }
                i++;
                // FailureCode column, nvarchar(15), not null
                FailureCode = reader.GetString(i++);

                // MinutesDown column, decimal(15,4), not null
                MinutesDown = reader.GetDecimal(i++);

                // Notes column, nvarchar(2047), not null
                Notes = reader.GetString(i++);

                // Operator_PersonnelID column, bigint, not null
                Operator_PersonnelId = reader.GetInt64(i++);

                // ReasonForDown column, nvarchar(15), not null
                ReasonForDown = reader.GetString(i++);

                // WorkOrderID column, bigint, not null
                WorkOrderId = reader.GetInt64(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }
                else
                {
                    PersonnelClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    WorkOrderClientLookupId = reader.GetString(i);
                }
                else
                {
                    WorkOrderClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    ReasonForDownDescription = reader.GetString(i);
                }
                else
                {
                    ReasonForDownDescription = "";
                }
                i++;
                //TotalCount
                TotalCount = reader.GetInt32(i++);
                TotalMinutesDown=reader.GetDecimal(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["DowntimeId"].ToString(); }
                catch { missing.Append("DowntimeId "); }

                try { reader["SiteID"].ToString(); }
                catch { missing.Append("SiteID "); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["StoreRoomId"].ToString(); }
                catch { missing.Append("StoreRoomId "); }

                try { reader["EquipmentID"].ToString(); }
                catch { missing.Append("EquipmentID "); }

                try { reader["ActionCode"].ToString(); }
                catch { missing.Append("ActionCode "); }

                try { reader["DateDown"].ToString(); }
                catch { missing.Append("DateDown "); }

                try { reader["DateUp"].ToString(); }
                catch { missing.Append("DateUp "); }

                try { reader["FailureCode"].ToString(); }
                catch { missing.Append("FailureCode "); }

                try { reader["MinutesDown"].ToString(); }
                catch { missing.Append("MinutesDown "); }

                try { reader["Notes"].ToString(); }
                catch { missing.Append("Notes "); }

                try { reader["Operator_PersonnelId"].ToString(); }
                catch { missing.Append("Operator_PersonnelId "); }

                try { reader["ReasonForDown"].ToString(); }
                catch { missing.Append("ReasonForDown "); }

                try { reader["WorkOrderID"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["PersonnelClientLookupId"].ToString(); }
                catch { missing.Append("PersonnelClientLookupId "); }

                try { reader["WorkOrderClientLookupId"].ToString(); }
                catch { missing.Append("WorkOrderClientLookupId"); } 
                
                try { reader["ReasonForDownDescription"].ToString(); }
                catch { missing.Append("ReasonForDownDescription"); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount"); }

                try { reader["TotalSumMinutesDown"].ToString(); }
                catch { missing.Append("TotalSumMinutesDown "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        #endregion

        #region V2-695
        public void RetrieveByEquipmentIdFromDatabase_V2(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Downtime> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Downtime> results = null;
            data = new List<b_Downtime>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Downtime_RetrieveByEquipmentId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Downtime>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        #endregion
    }
}
