/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the FileAttachmentInfo table.
    /// </summary>
    public partial class b_FileInfo
    {


        public DateTime CreateDate { get; set; }

        public string OwnerName { get; set; }

        public long OwnerId { get; set; }

        public long FileAttachmentId { get; set; }
        public long AttachmentId { get; set; }
        public string AttachmentURL { get; set; }

        public long ObjectId { get; set; }

        public string TableName { get; set; }

        public string Subject { get; set; }
        public string Description { get; set; }
        public long SiteId { get; set; }

        public static object ProcessRowExtended(SqlDataReader reader)
        {
            // Create instance of object
            b_FileInfo obj = new b_FileInfo();

            // Load the object from the database
            obj.LoadExtendedFromDatabase(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_FileAttachmentInfo object.
        /// This routine should be applied to the usp_FileAttachmentInfo_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_FileAttachmentInfo_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadExtendedFromDatabase(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // FileAttachmentInfoId column, bigint, not null
                FileInfoId = reader.GetInt64(i++);

                // FileName column, nvarchar(255), not null
                FileName = reader.GetString(i++);

                // FileSize column, int, not null
                FileSize = reader.GetInt32(i++);

                // FileType column, nvarchar(64), not null
                FileType = reader.GetString(i++);

                // ContentType column, nvarchar(32), not null
                ContentType = reader.GetString(i++);

                // OnDemandData column, varbinary(MAX), not null
                OnDemandData = reader.GetSqlBytes(i++).Value;

                // Category column, nvarchar(255), not null
                Category = reader.GetString(i++);

                // Subcategory1 column, nvarchar(255), not null
                Subcategory1 = reader.GetString(i++);

                // Subcategory2 column, nvarchar(255), not null
                Subcategory2 = reader.GetString(i++);

                // KeyWords column, nvarchar(255), not null
                KeyWords = reader.GetString(i++);

                // UpdateIndex column, bigint, not null
                UpdateIndex = reader.GetInt64(i++);

                FileAttachmentId = reader.GetInt64(i++);

                OwnerId = reader.GetInt64(i++);

                OwnerName = reader.GetString(i++);

                ObjectId = reader.GetInt64(i++);

                TableName = reader.GetString(i++);

                CreateDate = reader.GetDateTime(i++);

                Subject = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["FileAttachmentInfoId"].ToString(); }
                catch { missing.Append("FileAttachmentInfoId "); }

                try { reader["FileName"].ToString(); }
                catch { missing.Append("FileName "); }

                try { reader["FileSize"].ToString(); }
                catch { missing.Append("FileSize "); }

                try { reader["FileType"].ToString(); }
                catch { missing.Append("FileType "); }

                try { reader["ContentType"].ToString(); }
                catch { missing.Append("ContentType "); }

                try { reader["OnDemandData"].ToString(); }
                catch { missing.Append("OnDemandData "); }

                try { reader["Category"].ToString(); }
                catch { missing.Append("Category "); }

                try { reader["Subcategory1"].ToString(); }
                catch { missing.Append("Subcategory1 "); }

                try { reader["Subcategory2"].ToString(); }
                catch { missing.Append("Subcategory2 "); }

                try { reader["KeyWords"].ToString(); }
                catch { missing.Append("KeyWords "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["FileAttachmentId"].ToString(); }
                catch { missing.Append("FileAttachmentId "); }

                try { reader["OwnerId"].ToString(); }
                catch { missing.Append("OwnerId "); }

                try { reader["OwnerName"].ToString(); }
                catch { missing.Append("OwnerName "); }

                try { reader["ObjectId"].ToString(); }
                catch { missing.Append("ObjectId "); }

                try { reader["TableName"].ToString(); }
                catch { missing.Append("TableName "); }

                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void LoadFromAttachmentDetailsDB(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // FileAttachmentInfoId column, bigint, not null
                FileInfoId = reader.GetInt64(i++);

                FileAttachmentId = reader.GetInt64(i++);

                AttachmentId = reader.GetInt64(i++);

                ObjectId = reader.GetInt64(i++);

                // OnDemandData column, varbinary(MAX), not null
                OnDemandData = reader.GetSqlBytes(i++).Value;

                // FileName column, nvarchar(255), not null
                FileName = reader.GetString(i++);

                // FileSize column, int, not null
                FileSize = reader.GetInt32(i++);

                // FileType column, nvarchar(64), not null
                FileType = reader.GetString(i++);

                // ContentType column, nvarchar(32), not null
                ContentType = reader.GetString(i++);

                TableName = reader.GetString(i++);

                Subject = reader.GetString(i++);

                AttachmentURL = reader.GetString(i++);

                Description = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["FileAttachmentInfoId"].ToString(); }
                catch { missing.Append("FileAttachmentInfoId "); }

                try { reader["FileName"].ToString(); }
                catch { missing.Append("FileName "); }

                try { reader["FileSize"].ToString(); }
                catch { missing.Append("FileSize "); }

                try { reader["FileType"].ToString(); }
                catch { missing.Append("FileType "); }

                try { reader["ContentType"].ToString(); }
                catch { missing.Append("ContentType "); }

                try { reader["OnDemandData"].ToString(); }
                catch { missing.Append("OnDemandData "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["FileAttachmentId"].ToString(); }
                catch { missing.Append("FileAttachmentId "); }

                try { reader["ObjectId"].ToString(); }
                catch { missing.Append("ObjectId "); }

                try { reader["TableName"].ToString(); }
                catch { missing.Append("TableName "); }

                try { reader["CreateDate"].ToString(); }
                catch { missing.Append("CreateDate "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void LoadFromDBForMigrate(SqlDataReader reader)
        {
            int i = LoadFromDatabase(reader);
            try
            {
                // Table Name - From Attachment - First Recorc
                TableName = reader.GetString(i++);
                // Object Name - Object that blob is associated to (i.e. equipment/workorder/etc,)
                ObjectId = reader.GetInt64(i++);
                // Site Id - Used to create the container for the attachment 
                SiteId = reader.GetInt64(i++);
                // Attachment ID - Used to make sure that attachment is "attached" to something
                AttachmentId = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["TableName"].ToString(); }
                catch { missing.Append("TableName "); }

                try { reader["ObjectId"].ToString(); }
                catch { missing.Append("ObjectId "); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId "); }

                try { reader["AttachmentId"].ToString(); }
                catch { missing.Append("AttachmentId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }


        public void RetrieveByOwnerIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
     string callerUserName,
           ref b_FileInfo[] data
       )
        {
            Database.SqlClient.ProcessRow<b_FileInfo> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_FileInfo[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FileInfo>(reader => { b_FileInfo obj = new b_FileInfo(); obj.LoadExtendedFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_FileInfo_RetrieveByOwnerId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId, OwnerId);

                // Extract the results
                if (null != results)
                {
                    data = (b_FileInfo[])results.ToArray(typeof(b_FileInfo));
                }
                else
                {
                    data = new b_FileInfo[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveByObjectIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
     string callerUserName,
           ref b_FileInfo[] data
       )
        {
            Database.SqlClient.ProcessRow<b_FileInfo> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_FileInfo[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FileInfo>(reader => { b_FileInfo obj = new b_FileInfo(); obj.LoadExtendedFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_FileInfo_RetrieveByObjectId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId, ObjectId, TableName);

                // Extract the results
                if (null != results)
                {
                    data = (b_FileInfo[])results.ToArray(typeof(b_FileInfo));
                }
                else
                {
                    data = new b_FileInfo[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void RetrieveForClient(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
     string callerUserName,
           ref b_FileInfo[] data
       )
        {
            Database.SqlClient.ProcessRow<b_FileInfo> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_FileInfo[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FileInfo>(reader => { b_FileInfo obj = new b_FileInfo(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_FileInfo_RetrieveForClient.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId, ObjectId, TableName);

                // Extract the results
                if (null != results)
                {
                    data = (b_FileInfo[])results.ToArray(typeof(b_FileInfo));
                }
                else
                {
                    data = new b_FileInfo[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }


        public void RetrieveByFileInfoIdFromDatabase(
                SqlConnection connection,
                SqlTransaction transaction,
                long callerUserInfoId,
          string callerUserName
            )
        {
            Database.SqlClient.ProcessRow<b_FileInfo> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FileInfo>(reader => { this.LoadFromAttachmentDetailsDB(reader); return this; });
                Database.StoredProcedure.usp_FileInfo_RetrieveByFileInfoId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public void RetrieveForMigrate(
                SqlConnection connection,
                SqlTransaction transaction,
                long callerUserInfoId,
          string callerUserName
            )
        {
            Database.SqlClient.ProcessRow<b_FileInfo> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_FileInfo>(reader => { this.LoadFromDBForMigrate(reader); return this; });
                Database.StoredProcedure.usp_FileInfo_RetrieveForMigrate.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
    }
}
