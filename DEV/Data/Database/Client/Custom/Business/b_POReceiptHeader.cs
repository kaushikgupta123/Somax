/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Timecard table.
    /// </summary>
    public partial class b_POReceiptHeader
    {

        public long PurchaseOrderLineItemId { get; set; }
        public string ReceiveBy_PersonnelName { get; set; }
        public decimal QuantityReceived { get; set; }
        public bool Reversed { get; set; }
        public string ReversedComments { get; set; }
        public long POReceiptItemId { get; set; }
        public long ExReceiptTxnId { get; set; }

        public decimal UOMConversion { get; set; }
        //For APi Call

        public long POReceiptImportId { get; set; }
        public string ChargeType { get; set; }

        public long ChargeToId { get; set; }
        public static object ProcessRowByPurchaseOrderLineItemId(SqlDataReader reader)
        {
            // Create instance of object
            b_POReceiptHeader obj = new b_POReceiptHeader();

            // Load the object from the database
            obj.LoadFromDatabasePurchaseOrderLineItemId(reader);

            // Return result
            return (object)obj;
        }
        public static object ProcessRowByPurchaseOrderId(SqlDataReader reader)
        {
            // Create instance of object
            b_POReceiptHeader obj = new b_POReceiptHeader();

            // Load the object from the database
            obj.LoadFromDatabasePurchaseOrderId(reader);

            // Return result
            return (object)obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_Timecard object.
        /// This routine should be applied to the usp_Timecard_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_Timecard_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadFromDatabasePurchaseOrderLineItemId(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // POReceiptHeaderId column, bigint, not null
                POReceiptHeaderId = reader.GetInt64(i++);

                // PurchaseOrderId column, bigint, not null
                PurchaseOrderId = reader.GetInt64(i++);

                // Carrier column, nvarchar(15), not null
                Carrier = reader.GetString(i++);

                // Comments column, nvarchar(254), not null
                Comments = reader.GetString(i++);

                // FreightAmount column, decimal(12,2), not null
                FreightAmount = reader.GetDecimal(i++);

                // FreightBill column, nvarchar(31), not null
                FreightBill = reader.GetString(i++);

                // PackingSlip column, nvarchar(31), not null
                PackingSlip = reader.GetString(i++);

                // ReceiptNumber column, int, not null
                ReceiptNumber = reader.GetInt32(i++);

                // ReceiveBy_PersonnelID column, bigint, not null
                ReceiveBy_PersonnelID = reader.GetInt64(i++);

                // ReceiveDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ReceiveDate = reader.GetDateTime(i);
                }
                else
                {
                    ReceiveDate = DateTime.MinValue;
                }
                i++;
                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
                QuantityReceived = reader.GetDecimal(i++);
                Reversed = reader.GetBoolean(i++);
                ReversedComments = reader.GetString(i++);
                POReceiptItemId = reader.GetInt64(i++);

                if (false == reader.IsDBNull(i))
                {
                    ReceiveBy_PersonnelName = reader.GetString(i);
                }
                else
                {
                    ReceiveBy_PersonnelName = "";
                }
                i++;
                // RKL - 2017-09-29
                ExReceiptNo = reader.GetString(i++);
                ExReceiptTxnId = reader.GetInt64(i++);
                UOMConversion = reader.GetDecimal(i++);
                ChargeType = reader.GetString(i++);
                ChargeToId = reader.GetInt64(i++);
            }
      catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["POReceiptHeaderId"].ToString(); }
                catch { missing.Append("POReceiptHeaderId "); }

                try { reader["PurchaseOrderId"].ToString(); }
                catch { missing.Append("PurchaseOrderId "); }

                try { reader["Carrier"].ToString(); }
                catch { missing.Append("Carrier "); }

                try { reader["Comments"].ToString(); }
                catch { missing.Append("Comments "); }

                try { reader["FreightAmount"].ToString(); }
                catch { missing.Append("FreightAmount "); }

                try { reader["FreightBill"].ToString(); }
                catch { missing.Append("FreightBill "); }

                try { reader["PackingSlip"].ToString(); }
                catch { missing.Append("PackingSlip "); }

                try { reader["ReceiptNumber"].ToString(); }
                catch { missing.Append("ReceiptNumber "); }

                try { reader["ReceiveBy_PersonnelID"].ToString(); }
                catch { missing.Append("ReceiveBy_PersonnelID "); }

                try { reader["ReceiveDate"].ToString(); }
                catch { missing.Append("ReceiveDate "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["QuantityReceived"].ToString(); }
                catch { missing.Append("QuantityReceived "); }

                try { reader["Reversed"].ToString(); }
                catch { missing.Append("Reversed "); }

                try { reader["ReversedComments"].ToString(); }
                catch { missing.Append("ReversedComments "); }

                try { reader["ReversedComments"].ToString(); }
                catch { missing.Append("ReversedComments "); }

                try { reader["ReceiveBy_PersonnelName"].ToString(); }
                catch { missing.Append("ReceiveBy_PersonnelName "); }

                try { reader["ExReceiptNo"].ToString(); }
                catch { missing.Append("ExReceiptNo "); }

                try { reader["ExReceiptTxnId"].ToString(); }
                catch { missing.Append("ExReceiptTxnId "); }

                try { reader["UOMConversion"].ToString(); }
                catch { missing.Append("UOMConversion "); }

                try { reader["ChargeType"].ToString(); }
                catch { missing.Append("ChargeType "); }

                try { reader["ChargeToId"].ToString(); }
                catch { missing.Append("ChargeToId "); }
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

        }

        public void LoadFromDatabasePurchaseOrderId(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // POReceiptHeaderId column, bigint, not null
                POReceiptHeaderId = reader.GetInt64(i++);

                // PurchaseOrderId column, bigint, not null
                PurchaseOrderId = reader.GetInt64(i++);

                // Carrier column, nvarchar(15), not null
                Carrier = reader.GetString(i++);

                // Comments column, nvarchar(254), not null
                Comments = reader.GetString(i++);

                // FreightAmount column, decimal(12,2), not null
                FreightAmount = reader.GetDecimal(i++);

                // FreightBill column, nvarchar(31), not null
                FreightBill = reader.GetString(i++);

                // PackingSlip column, nvarchar(31), not null
                PackingSlip = reader.GetString(i++);

                // ReceiptNumber column, int, not null
                ReceiptNumber = reader.GetInt32(i++);

                // ReceiveBy_PersonnelID column, bigint, not null
                ReceiveBy_PersonnelID = reader.GetInt64(i++);

                // ReceiveDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    ReceiveDate = reader.GetDateTime(i);
                }
                else
                {
                    ReceiveDate = DateTime.MinValue;
                }
                i++;
                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);
               
                if (false == reader.IsDBNull(i))
                {
                    ReceiveBy_PersonnelName = reader.GetString(i);
                }
                else
                {
                    ReceiveBy_PersonnelName = "";
                }
                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["POReceiptHeaderId"].ToString(); }
                catch { missing.Append("POReceiptHeaderId "); }

                try { reader["PurchaseOrderId"].ToString(); }
                catch { missing.Append("PurchaseOrderId "); }

                try { reader["Carrier"].ToString(); }
                catch { missing.Append("Carrier "); }

                try { reader["Comments"].ToString(); }
                catch { missing.Append("Comments "); }

                try { reader["FreightAmount"].ToString(); }
                catch { missing.Append("FreightAmount "); }

                try { reader["FreightBill"].ToString(); }
                catch { missing.Append("FreightBill "); }

                try { reader["PackingSlip"].ToString(); }
                catch { missing.Append("PackingSlip "); }

                try { reader["ReceiptNumber"].ToString(); }
                catch { missing.Append("ReceiptNumber "); }

                try { reader["ReceiveBy_PersonnelID"].ToString(); }
                catch { missing.Append("ReceiveBy_PersonnelID "); }

                try { reader["ReceiveDate"].ToString(); }
                catch { missing.Append("ReceiveDate "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

        }
        /*********************************************************/

        public void RetrieveByPurchaseOrderLineItemFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_POReceiptHeader> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_POReceiptHeader> results = null;
            data = new List<b_POReceiptHeader>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_POReceiptHeader_RetrieveReceiptItem_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_POReceiptHeader>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveByPurchaseOrderIdFromDatabase(
             SqlConnection connection,
             SqlTransaction transaction,
             long callerUserInfoId,
             string callerUserName,
             ref List<b_POReceiptHeader> data
         )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_POReceiptHeader> results = null;
            data = new List<b_POReceiptHeader>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_POReceiptHeader_RetrieveReceiptItemByPurchaseOrderId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_POReceiptHeader>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }       
 //--------------Call From API SOM 938-------------------------------------------------------------------------------------
        public void ValidatePOAndUOMFromDatabase(SqlConnection connection,
      SqlTransaction transaction,
      long callerUserInfoId,
      string callerUserName,
      ref List<b_StoredProcValidationError> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();
            try
            {
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                results = Database.StoredProcedure.usp_POReceiptHeader_ValidatePOAndUOM.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public  void InsertIntoDatabaseByPk(
              SqlConnection connection,
              SqlTransaction transaction,
              long callerUserInfoId,
          string callerUserName
          )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_POReceiptHeader_Create.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
                Database.StoredProcedure.usp_POReceiptHeader_UpdateByPO.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
      
}

    }


