/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Permission tables.
    /// </summary>
    [Serializable()]
    public partial class b_PermissionSet
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public b_PermissionSet()
        {
            ClientId = 0;
            Sites = new List<b_Site>();
            Areas = new List<b_Area>();
            Departments = new List<b_Department>();
            Storerooms = new List<b_Storeroom>();
        }

        #region  Properties
        public long ClientId { get; set; }
        public List<b_Site> Sites { get; set; }
        public List<b_Area> Areas { get; set; }
        public List<b_Department> Departments { get; set; }
        public List<b_Storeroom> Storerooms { get; set; }
        #endregion


        /// <summary>
        /// Retrieve User table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="key">System.Guid that contains the key to use in the lookup</param>
        /// <param name="data">b_User[] that contains the results</param>
        public void RetrieveByClientIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
			string callerUserName
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<ArrayList> results = null;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PermissionSet_RetrieveByClientId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                // Extract the results
                if (results.Count > 0 && results[0] != null )
                {
                    Sites = new List<b_Site>((b_Site[])results[0].ToArray(typeof(b_Site))); 
                }


                if (results.Count > 1 && results[1] != null)
                {
                    Areas = new List<b_Area>((b_Area[])results[1].ToArray(typeof(b_Area))); 
                }

                if (results.Count > 2 && results[2] != null)
                {
                    Departments = new List<b_Department>((b_Department[])results[2].ToArray(typeof(b_Department))); 
                }

                if (results.Count > 3 && results[3] != null)
                {
                    Storerooms = new List<b_Storeroom>((b_Storeroom[])results[3].ToArray(typeof(b_Storeroom))); 
                }


                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }


            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

    }
}
