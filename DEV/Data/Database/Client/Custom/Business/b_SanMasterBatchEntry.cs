
/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{
    public partial class b_SanMasterBatchEntry
    {
        public string MasterJob { get; set; }
        public string MasterDescription { get; set; }
        public string ChargeType { get; set; }
        public string ChargeTo { get; set; }
        public string Shift { get; set; }
        public long Frequency { get; set; }
        public long siteid { get; set; }
        public string EquipmentClientLookupId { get; set; }
        public string EquipmentName { get; set; }
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }

        public long OffSetVal { get; set; }
        public long NextRow { get; set; }

        public DateTime? ScheduleThroughDate { get; set; }

        public string ScheduleType { get; set; }
        public string ScheduleThroughDateString { get; set; }
        public string OnDemandgroup { get; set; }
        public bool PrintSanitationJobs { get; set; }
        public bool PrintAttachments { get; set; }
        public string AssetGroup1Ids { get; set; }
        public string AssetGroup2Ids { get; set; }
        public string AssetGroup3Ids { get; set; }
        public int TotalCount { get; set; }

        public List<b_SanMasterBatchEntry> listOfSanMasterBatchEntries { get; set; }

        public static b_SanMasterBatchEntry ProcessRowAfterBatchEntry(SqlDataReader reader)
        {
            // Create instance of object
            b_SanMasterBatchEntry be = new b_SanMasterBatchEntry();

            // Load the object from the database
            be.LoadFromDatabaseAfterBatchEntry(reader);

            // Return result
            return be;
        }
        public static b_SanMasterBatchEntry ProcessRowAfterBatchEntryChunkSearch(SqlDataReader reader)
        {
            // Create instance of object
            b_SanMasterBatchEntry be = new b_SanMasterBatchEntry();

            // Load the object from the database
            be.LoadFromDatabaseAfterBatchEntryChunkSearch(reader);

            // Return result
            return be;
        }
        public void LoadFromDatabaseAfterBatchEntry(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                SanMasterId = reader.GetInt64(i++);

                SanMasterBatchEntryId = reader.GetInt64(i++);

                if (false == reader.IsDBNull(i))
                {
                    DueDate = reader.GetDateTime(i);
                }
                else
                {
                    DueDate = DateTime.MinValue;
                }
                i++;
               
                MasterDescription = reader.GetString(i++);

                ChargeType = reader.GetString(i++);

                EquipmentClientLookupId = reader.GetString(i++);

                EquipmentName = reader.GetString(i++);
                if (false == reader.IsDBNull(i))
                {
                    Shift = reader.GetString(i);
                }
                else
                {
                    Shift = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    SanMasterBatchHeaderId = reader.GetInt64(i);
                }
                else
                {
                    SanMasterBatchHeaderId = 0;
                }
                i++;

               

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["SanMasterId"].ToString(); }
                catch { missing.Append("SanMasterId "); }

                try { reader["SanMasterBatchEntryId"].ToString(); }
                catch { missing.Append("SanMasterBatchEntryId "); }

                try { reader["DueDate"].ToString(); }
                catch { missing.Append("DueDate "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["ChargeType"].ToString(); }
                catch { missing.Append("ChargeType "); }

                try { reader["EquipmentClientLookupId"].ToString(); }
                catch { missing.Append("EquipmentClientLookupId "); }

                try { reader["EquipmentName"].ToString(); }
                catch { missing.Append("EquipmentName "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["SanMasterBatchHeaderId"].ToString(); }
                catch { missing.Append("SanMasterBatchHeaderId "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void LoadFromDatabaseAfterBatchEntryChunkSearch(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                SanMasterId = reader.GetInt64(i++);

                SanMasterBatchEntryId = reader.GetInt64(i++);

                if (false == reader.IsDBNull(i))
                {
                    DueDate = reader.GetDateTime(i);
                }
                else
                {
                    DueDate = DateTime.MinValue;
                }
                i++;
               

                MasterDescription = reader.GetString(i++);

                ChargeType = reader.GetString(i++);

                EquipmentClientLookupId = reader.GetString(i++);

                EquipmentName = reader.GetString(i++);
                if (false == reader.IsDBNull(i))
                {
                    Shift = reader.GetString(i);
                }
                else
                {
                    Shift = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    SanMasterBatchHeaderId = reader.GetInt64(i);
                }
                else
                {
                    SanMasterBatchHeaderId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    TotalCount = reader.GetInt32(i);
                }
                else
                {
                    TotalCount = 0;
                }
                i++;


            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["SanMasterId"].ToString(); }
                catch { missing.Append("SanMasterId "); }

                try { reader["SanMasterBatchEntryId"].ToString(); }
                catch { missing.Append("SanMasterBatchEntryId "); }

                try { reader["DueDate"].ToString(); }
                catch { missing.Append("DueDate "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["ChargeType"].ToString(); }
                catch { missing.Append("ChargeType "); }

                try { reader["EquipmentClientLookupId"].ToString(); }
                catch { missing.Append("EquipmentClientLookupId "); }

                try { reader["EquipmentName"].ToString(); }
                catch { missing.Append("EquipmentName "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["SanMasterBatchHeaderId"].ToString(); }
                catch { missing.Append("SanMasterBatchHeaderId "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }


                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }


        


        public void SanMasterBatchEntry_ForSanitationMasterFromSanitationJob_V2(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          long clientId,
          long siteid,
          string ScheduleType,
          DateTime ScheduleThroughDate,
          string OnDemandgroup,
          bool PrintSanitationJobs,
          bool PrintAttachments,
           string AssetGroup1Ids,
           string AssetGroup2Ids,
          string AssetGroup3Ids,
          ref List<b_SanMasterBatchEntry> data
      )
        {
            SqlCommand command = null;
            data = new List<b_SanMasterBatchEntry>();
            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                data = Database.StoredProcedure.usp_SanMasterBatchEntry_ForSanitationMasterFromSanitationJob_V2.CallStoredProcedure
                    (command, callerUserInfoId, callerUserName, clientId, siteid, ScheduleType, ScheduleThroughDate
                    , OnDemandgroup, PrintSanitationJobs, PrintAttachments, AssetGroup1Ids, AssetGroup2Ids, AssetGroup3Ids);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }


        public void SanMasterBatchEntry_ForSanitationJobFromSanitationMasterChunkSearch_V2(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
        string callerUserName,
        ref b_SanMasterBatchEntry results

    )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_SanMasterBatchEntry_ForSanitationJobFromSanitationMasterChunkSearch_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
           
        }
        
    }
}
