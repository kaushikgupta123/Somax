/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;
using System.Security.Principal;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Equipment_TechSpecs table.
    /// </summary>
    public partial class b_EstimatedCosts
    {
        public string ClientLookupId { get; set; }
        public string VendorClientLookupId { get; set; }
        public decimal TotalPartCost { get; set; }
        public decimal TotalCraftCost { get; set; }
        public decimal TotalLaborHours { get; set; }
        public decimal TotalExternalCost { get; set; }
        public decimal TotalInternalCost { get; set; }
        #region V2-691
        public decimal TotalCost { get; set; }
        public string Unit { get; set; }//V2-1068
        public string AccountClientLookupId { get; set; }//V2-1068
        public string VClientLookupId { get; set; } //V2-1068
        public string PartCategoryClientLookupId { get; set; } //V2-1068
        public long PartCategoryMasterId { get; set; }//V2-1068

        public string PartClientLookupId { get; set; }
        #endregion
        public static object ProcessRowForEstimatedCostsCrossReference(SqlDataReader reader)
        {
            // Create instance of object
            b_EstimatedCosts obj = new b_EstimatedCosts();

            // Load the object from the database
            obj.LoadFromDatabaseByClientLookupId(reader);

            // Return result
            return (object)obj;
        }
        public static object ProcessRowForEstimatedCostsSummeryCrossReference(SqlDataReader reader)
        {
            // Create instance of object
            b_EstimatedCosts obj = new b_EstimatedCosts();

            // Load the object from the database
            obj.LoadSummeryFromDatabaseByClientLookupId(reader);

            // Return result
            return (object)obj;

        }
        public void LoadSummeryFromDatabaseByClientLookupId(SqlDataReader reader)
        {
            int i = 0;
            if (false == reader.IsDBNull(i))
            {
                TotalPartCost = reader.GetDecimal(i);
            }
            else
            {
                TotalPartCost = 0;
            }
            i++;
            if (false == reader.IsDBNull(i))
            {
                TotalLaborHours = reader.GetDecimal(i);
            }
            else
            {
                TotalLaborHours = 0;
            }
            i++;
            if (false == reader.IsDBNull(i))
            {
                TotalCraftCost = reader.GetDecimal(i);
            }
            else
            {
                TotalCraftCost = 0;
            }
            i++;
            if (false == reader.IsDBNull(i))
            {
                TotalExternalCost = reader.GetDecimal(i);
            }
            else
            {
                TotalExternalCost = 0;
            }
            i++;
            if (false == reader.IsDBNull(i))
            {
                TotalInternalCost = reader.GetDecimal(i);
            }
            else
            {
                TotalInternalCost = 0;
            }
            i++;
            if (false == reader.IsDBNull(i))
            {
                TotalPurchaseCost = reader.GetDecimal(i);
            }
            else
            {
                TotalPurchaseCost = 0;
            }
            i++;


        }

        public void LoadFromDatabaseByClientLookupId(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            //int i = 0;
            try
            {

                if (false == reader.IsDBNull(i))
                {
                    ClientLookupId = reader.GetString(i);
                }
                else
                {
                    ClientLookupId = string.Empty;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    VendorClientLookupId = reader.GetString(i);
                }
                else
                {
                    VendorClientLookupId = string.Empty;
                }
                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["VendorClientLookupId"].ToString(); }
                catch { missing.Append("VendorClientLookupId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void RetrieveByObjectIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_EstimatedCosts> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_EstimatedCosts> results = null;
            data = new List<b_EstimatedCosts>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_EstimatedCosts_RetrieveByObjectId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_EstimatedCosts>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void SummeryRetrieveByObjectIdFromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_EstimatedCosts> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_EstimatedCosts> results = null;
            data = new List<b_EstimatedCosts>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_EstimatedCosts_SummeryRetrieveByObjectId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_EstimatedCosts>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }


        /*ADDED BY INDUSNET TECHNOLOGIES*/
        public static object ProcessRowForPrevMaint(SqlDataReader reader)
        {
            // Create instance of object
            b_EstimatedCosts obj = new b_EstimatedCosts();

            // Load the object from the database
            obj.LoadFromDatabaseByClientLookupId(reader);

            // Return result
            return (object)obj;
        }

        public void RetrieveForPrevMaintFromDatabase(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
           long clientId,
           long PrevMaintMasterId,
           string Category,
          ref List<b_EstimatedCosts> data
      )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_EstimatedCosts> results = null;
            data = new List<b_EstimatedCosts>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_EstimatedCosts_RetrieveForPrevMaintMaster.CallStoredProcedure
                    (command, callerUserInfoId, callerUserName, clientId, PrevMaintMasterId, Category);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_EstimatedCosts>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public decimal TotalPurchaseCost { get; set; }

        public void EstimateCostValidateAdd(
    SqlConnection connection,
    SqlTransaction transaction,
    long callerUserInfoId,
    string callerUserName,
    ref List<b_StoredProcValidationError> data
    )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            //data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_EstimatedCost_ValidateAdd_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void EstimateCostValidateUpdate(
    SqlConnection connection,
    SqlTransaction transaction,
    long callerUserInfoId,
    string callerUserName,
    ref List<b_StoredProcValidationError> data
    )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            //data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_EstimatedCost_ValidateUpdate_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        #region V2-691

        public void EstimatedCosts_RetrieveForChildGridByObjectId(
             SqlConnection connection,
             SqlTransaction transaction,
             long callerUserInfoId,
             string callerUserName,

             ref List<b_EstimatedCosts> materialRequestChildList
         )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;
                // Call the stored procedure to retrieve the data
                materialRequestChildList = Database.StoredProcedure.usp_EstimatedCosts_RetrieveForChildGridByObjectId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
                ClientId = 0;
            }
        }

        public void LoadFromDatabaseExtended(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                //this.TotalCost = reader.GetString(i++);


                if (false == reader.IsDBNull(i))
                {
                    PartClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartClientLookupId = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    EstimatedCostsId = reader.GetInt64(i);
                }
                else
                {
                    EstimatedCostsId = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    ObjectId = reader.GetInt64(i);
                }
                else
                {
                    ObjectId = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    CategoryId = reader.GetInt64(i);
                }
                else
                {
                    CategoryId = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    Description = reader.GetString(i);
                }
                else
                {
                    Description = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    UnitCost = reader.GetDecimal(i);
                }
                else
                {
                    UnitCost = 0;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    Quantity = reader.GetDecimal(i);
                }
                else
                {
                    Quantity = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    Unit = reader.GetString(i);
                }
                else
                {
                    Unit = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    TotalCost = reader.GetDecimal(i);
                }
                else
                {
                    TotalCost = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    AccountClientLookupId = reader.GetString(i);
                }
                else
                {
                    AccountClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    VClientLookupId = reader.GetString(i);
                }
                else
                {
                    VClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    Status = reader.GetString(i);
                }
                else
                {
                    Status = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PurchaseRequestId = reader.GetInt64(i);
                }
                else
                {
                    PurchaseRequestId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PartCategoryClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartCategoryClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    AccountId = reader.GetInt64(i++);
                }
                else
                {
                    AccountId = 0; i++;
                }
                if (false == reader.IsDBNull(i))
                {
                    VendorId = reader.GetInt64(i++);
                }
                else
                {
                    VendorId = 0; i++;
                }
                if (false == reader.IsDBNull(i))
                {
                    PartCategoryMasterId = reader.GetInt64(i++);
                }
                else
                {
                    PartCategoryMasterId = 0; i++;
                }
            }

            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["EstimatedCostsId"].ToString(); }
                catch { missing.Append("EstimatedCostsId "); }

                try { reader["CategoryId"].ToString(); }
                catch { missing.Append("CategoryId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["UnitCost"].ToString(); }
                catch { missing.Append("UnitCost "); }

                try { reader["Quantity"].ToString(); }
                catch { missing.Append("Quantity "); }

                try { reader["Unit"].ToString(); }
                catch { missing.Append("Unit "); }

                try { reader["TotalCost"].ToString(); }
                catch { missing.Append("TotalCost "); }

                try { reader["AccountClientLookupId"].ToString(); }
                catch { missing.Append("AccountClientLookupId "); }

                try { reader["VClientLookupId"].ToString(); }
                catch { missing.Append("VClientLookupId "); }

                try { reader["Status"].ToString(); }
                catch { missing.Append("Status "); }

                try { reader["PurchaseRequestId"].ToString(); }
                catch { missing.Append("PurchaseRequestId "); }

                try { reader["PartCategoryClientLookupId"].ToString(); }
                catch { missing.Append("PartCategoryClientLookupId "); }

                try { reader["AccountId"].ToString(); }
                catch { missing.Append("AccountId "); }

                try { reader["VendorId"].ToString(); }
                catch { missing.Append("VendorId "); }

                try { reader["PartCategoryMasterId"].ToString(); }
                catch { missing.Append("PartCategoryMasterId "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        #endregion

        #region V2-690
        public void CreateFromShoppingCart(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_EstimatedCost_CreateFromShoppingCart_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion

        #region V2-732
        public void CreateFromShoppingCartMultiStoreroom(SqlConnection connection, SqlTransaction transaction, long callerUserInfoId, string callerUserName)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_EstimatedCost_CreateFromShoppingCart_MutiStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion

        #region V2-1204
        public void RetrieveByObjectId_V2FromDatabase(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_EstimatedCosts> data
       )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_EstimatedCosts> results = null;
            data = new List<b_EstimatedCosts>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_EstimatedCosts_RetrieveByObjectId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_EstimatedCosts>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
        public static object ProcessRowForEstimatedCostsByOrderId(SqlDataReader reader)
        {
            // Create instance of object
            b_EstimatedCosts obj = new b_EstimatedCosts();

            // Load the object from the database
            obj.LoadFromDatabase(reader);

            // Return result
            return (object)obj;
        }
        #endregion
    }
}
