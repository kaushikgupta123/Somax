/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the Equipment_TechSpecs table.
    /// </summary>
    public partial class b_Equipment_TechSpecs
    {
        public string ClientLookupId { get; set; }

        public string Description { get; set; }

        public string UnitOfMeasure { get; set; }


        public static object ProcessRowForEquipmentCrossReference(SqlDataReader reader)
        {
            // Create instance of object
            b_Equipment_TechSpecs obj = new b_Equipment_TechSpecs();

            // Load the object from the database
            obj.LoadFromDatabaseForCrossReference(reader);

            // Return result
            return (object)obj;
        }


        public void LoadFromDatabaseForCrossReference(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // Equipment_TechSpecsId column, bigint, not null
                Equipment_TechSpecsId = reader.GetInt64(i++);

                // EquipmentID column, bigint, not null
                EquipmentId = reader.GetInt64(i++);

                // TechSpecID column, bigint, not null
                TechSpecId = reader.GetInt64(i++);

                // SpecValue column, nvarchar(31), not null
                SpecValue = reader.GetString(i++);

                // Comments column, nvarchar(2047), not null
                Comments = reader.GetString(i++);

                // UpdateIndex column, int, not null
                UpdateIndex = reader.GetInt32(i++);

                ClientLookupId = reader.GetString(i++);

                Description = reader.GetString(i++);

                UnitOfMeasure = reader.GetString(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["Equipment_TechSpecsId"].ToString(); }
                catch { missing.Append("Equipment_TechSpecsId "); }

                try { reader["EquipmentID"].ToString(); }
                catch { missing.Append("EquipmentID "); }

                try { reader["TechSpecID"].ToString(); }
                catch { missing.Append("TechSpecID "); }

                try { reader["SpecValue"].ToString(); }
                catch { missing.Append("SpecValue "); }

                try { reader["Comments"].ToString(); }
                catch { missing.Append("Comments "); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex "); }

                try { reader["ClientLookupId"].ToString(); }
                catch { missing.Append("ClientLookupId "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["UnitOfMeasure"].ToString(); }
                catch { missing.Append("UnitOfMeasure "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }


        public void RetrieveByEquipmentIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_Equipment_TechSpecs> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_Equipment_TechSpecs> results = null;
            data = new List<b_Equipment_TechSpecs>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Equipment_TechSpecs_RetrieveByEquipmentId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_Equipment_TechSpecs>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }


        public void ValidateByClientLookupIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref List<b_StoredProcValidationError> data
        )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_Equipment_TechSpecs_ValidateByClientLookupId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void RetrieveOfList(
                   SqlConnection connection,
                   SqlTransaction transaction,
                   long callerUserInfoId,
             string callerUserName,
             long ClientId,
                   ref b_Equipment_TechSpecs[] data
               )
        {
            Database.SqlClient.ProcessRow<b_Equipment_TechSpecs> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_Equipment_TechSpecs[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_Equipment_TechSpecs>(reader => { b_Equipment_TechSpecs obj = new b_Equipment_TechSpecs(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_Equipment_TechSpecs_RetrieveAll.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, ClientId);

                // Extract the results
                if (null != results)
                {
                    data = (b_Equipment_TechSpecs[])results.ToArray(typeof(b_Equipment_TechSpecs));
                }
                else
                {
                    data = new b_Equipment_TechSpecs[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }
    }
}
