/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartMasterResponse table.InsertIntoDatabase
    /// </summary>
   
    public partial class b_PartMasterResponse
    {
        #region Property
        public Int64 PerformById { get; set; }
        public string TransactionType { get; set; }
        public Int64 OutPartHistoryId { get; set; }
        public Int64 OutPartId { get; set; }
        public Int64 OutPartMasterResponseId { get; set; }
        public Int64 OutPartStoreroomId { get; set; }
        public bool ImportError { get;set;}
        #endregion


        public static object ProcessRowImport (SqlDataReader reader)
        {
            // Create instance of object
            b_PartMasterResponse obj = new b_PartMasterResponse();

            // Load the object from the database
            obj.LoadFromDatabaseImport(reader);

            // Return result
            return (object) obj;
        }
      
        public int LoadFromDatabaseImport (SqlDataReader reader)
        {
        int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // PartMasterResponseId column, bigint, not null
                        PartMasterResponseId = reader.GetInt64(i++);

                        // PartMasterRequestId column, bigint, not null
                        PartMasterRequestId = reader.GetInt64(i++);

                        // RequestType column, nvarchar(31), not null
                        RequestType = reader.GetString(i++);

                        // EXPartNumber column, nvarchar(31), not null
                        EXPartNumber = reader.GetString(i++);

                        // EXPartId column, bigint, not null
                        EXPartId = reader.GetInt64(i++);

                        // Status column, nvarchar(31), not null
                        Status = reader.GetString(i++);

                        // ErrorMessage column, nvarchar(511), not null
                        ErrorMessage = reader.GetString(i++);

            // LastProcessed column, datetime2, not null
            if (false == reader.IsDBNull(i))
            {
                    LastProcessed = reader.GetDateTime(i);
            }
            else
            {
                    LastProcessed = DateTime.MinValue;
            }
            i++;
                        // ImportLogId column, bigint, not null
                        ImportLogId = reader.GetInt64(i++);

                        // UpdateIndex column, bigint, not null
                        UpdateIndex = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["PartMasterResponseId"].ToString(); }
            catch { missing.Append("PartMasterResponseId "); }
            
            try { reader["PartMasterRequestId"].ToString(); }
            catch { missing.Append("PartMasterRequestId "); }
            
            try { reader["RequestType"].ToString(); }
            catch { missing.Append("RequestType "); }
            
            try { reader["EXPartNumber"].ToString(); }
            catch { missing.Append("EXPartNumber "); }
            
            try { reader["EXPartId"].ToString(); }
            catch { missing.Append("EXPartId "); }
            
            try { reader["Status"].ToString(); }
            catch { missing.Append("Status "); }
            
            try { reader["ErrorMessage"].ToString(); }
            catch { missing.Append("ErrorMessage "); }
            
            try { reader["LastProcessed"].ToString(); }
            catch { missing.Append("LastProcessed "); }
            
            try { reader["ImportLogId"].ToString(); }
            catch { missing.Append("ImportLogId "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }
            
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
     return i;
}

        public void ImportData (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartMasterResponse_ImportData.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }


    }
}
