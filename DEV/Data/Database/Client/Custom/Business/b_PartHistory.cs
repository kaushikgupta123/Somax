/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections.Generic;
using System.Text;
using System.Data.SqlClient;
using Database;
using Database.Business;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the PartHistory table.InsertIntoDatabase
    /// </summary>
    public partial class b_PartHistory : DataBusinessBase
    {
        public string IssueToClientLookupId { get; set; }
        public string Storeroom { get; set; }
        public string ChargeToClientLookupId { get; set; }
        public string PartClientLookupId { get; set; }
        public long SiteId { get; set; }
        public bool IsPartIssue { get; set; }
        public int InventoryReceiptId { get; set; }
        public bool IsPerformAdjustment { get; set; }
        public bool IsInventoryReceipt { get; set; }
        public long PersonnelId { get; set; }
        //public decimal Cost { get; set; }
        public string PartUPCCode { get; set; }
        public decimal PartAverageCost { get; set; }
        public string Part_ClientLookupID { get; set; }
        public DateTime DateRequired { get; set; }
        public decimal NetQty { get; set; }
        public decimal Reserved { get; set; }
        public decimal Issued { get; set; }
        public int Items { get; set; }
        public int PhysicalInventoryId { get; set; }
        public bool IsPhysicalInventory { get; set; }
        public string PartDescription { get; set; }
        public decimal PartStoreroomQtyOnHand { get; set; }
        public decimal PartQtyCounted { get; set; }
        public string PartStorerommLocation1_1 { get; set; }
        public string PartStorerommLocation1_2 { get; set; }
        public string PartStorerommLocation1_3 { get; set; }
        public string PartStorerommLocation1_4 { get; set; }
        public int PartStoreroomUpdateIndex { get; set; }
        public string Personnel { get; set; }
        public string IssuedTo { get; set; }
        public string Flag { get; set; }
        //---------SOM-924-Api--------------------
        public DateTime StartDate { get; set; }
        public DateTime FinishDate { get; set; }

        //--v2-289--
        public string PersonnelClientLookupId { get; set; }
        public string NameLast { get; set; }
        public string NameFirst { get; set; }
        public string NameMiddle { get; set; }
     
        public string PersonnelInitial
        {
            get
            {
                string InitFirstName = string.Empty;
                string InitLastName = string.Empty;
                if (!string.IsNullOrEmpty(NameFirst))
                {
                    InitFirstName = NameFirst.Trim().Substring(0, 1);
                }
                if (!string.IsNullOrEmpty(NameLast))
                {
                    InitLastName = NameLast.Trim().Substring(0, 1);
                }
                return (InitFirstName + InitLastName);
            }
        }
        public string VMRSFailureCode { get; set; }

        //v2-610 part grid
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        public int TotalCount { get; set; }
        public string UPCCode { get; set; }

        public string PerformBy { get; set; }//V2-1034
        public int Offset { get; set; }
        public int NextRow { get; set; }
        public bool IspartIssueStockOut { get; set; } //V2-1031

        //public int TotalCount { get; private set; }
        //V2-751 StoreroomTransfer
        public System.Data.DataTable StoreroomTransferList { get; set; }
        public long StoreroomTransferId { get; set; }

        public void RetrieveByWorkOrderIdFromDatabase(SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          ref List<b_PartHistory> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_PartHistory> results = null;
            data = new List<b_PartHistory>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_RetrieveByWorkOrderId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_PartHistory>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }

        }

        public void RetrieveByReturnWorkOrderIdFromDatabase(SqlConnection connection,
       SqlTransaction transaction,
       long callerUserInfoId,
       string callerUserName,
       ref List<b_PartHistory> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_PartHistory> results = null;
            data = new List<b_PartHistory>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_ReturnRetrieveByWorkOrderId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_PartHistory>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }

        }

        public void RetriveByEquipmentIdFromDatabase(SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           ref List<b_PartHistory> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_PartHistory> results = null;
            data = new List<b_PartHistory>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_RetrieveByEquipmentId.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_PartHistory>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }

        }

        public static object ProcessRowPartIssueNew(SqlDataReader reader)// added on 25-06-2014 by Indusnet
        {
            // Create instance of object           
            b_PartHistory obj = new b_PartHistory();
            obj.LoadFromDatabasePartIssueNew(reader);
            // Return result
            return (object)obj;
        }

        public void LoadFromDatabasePartIssueNew(SqlDataReader reader)// added on 25-06-2014 by Indusnet
        {
            int i = 0;

            try
            {

                //ClientId
                this.ClientId = reader.GetInt64(i++);
                if (false == reader.IsDBNull(i))
                {
                    PartId = reader.GetInt64(i);
                }
                else
                {
                    PartId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PartClientLookupId = reader.GetString(i);
                }
                else
                {
                    PartClientLookupId = "";
                }
                i++;
                // PartClientLookupId

                if (false == reader.IsDBNull(i))
                {
                    Description = reader.GetString(i);
                }
                else
                {
                    Description = "";
                }
                i++;

                this.RequestorId = reader.GetInt64(i++);

                //TransactionDate
                if (false == reader.IsDBNull(i))
                {
                    TransactionDate = reader.GetDateTime(i);
                }
                else
                {
                    TransactionDate = DateTime.MinValue;
                }
                i++;
                //TransactionQuantity
                TransactionQuantity = reader.GetDecimal(i++);

                // UnitofMeasure
                if (false == reader.IsDBNull(i))
                {
                    UnitofMeasure = reader.GetString(i);
                }
                else
                {
                    UnitofMeasure = "";
                }
                i++;

                Cost = reader.GetDecimal(i++);

                if (false == reader.IsDBNull(i))
                {
                    Personnel = reader.GetString(i);
                }
                else
                {
                    Personnel = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    IssuedTo = reader.GetString(i);
                }
                else
                {
                    IssuedTo = "";
                }
                i++;
                ChargeToId_Primary = reader.GetInt64(i++);

                if (false == reader.IsDBNull(i))
                {
                    ChargeToClientLookupId = reader.GetString(i);
                }
                else
                {
                    ChargeToClientLookupId = "";
                }
                i++;


            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId"); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId"); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId"); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description"); }

                try { reader["RequestorId"].ToString(); }
                catch { missing.Append("RequestorId"); }

                try { reader["TransactionDate"].ToString(); }
                catch { missing.Append("TransactionDate"); }

                try { reader["TransactionQuantity"].ToString(); }
                catch { missing.Append("TransactionQuantity"); }

                try { reader["UnitofMeasure"].ToString(); }
                catch { missing.Append("UnitofMeasure"); }

                try { reader["Cost"].ToString(); }
                catch { missing.Append("Cost"); }

                try { reader["Personnel"].ToString(); }
                catch { missing.Append("Personnel"); }

                try { reader["IssuedTo"].ToString(); }
                catch { missing.Append("IssuedTo"); }



                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }


        public static object ProcessRowPartIssue(SqlDataReader reader)// added on 25-06-2014 by Indusnet
        {
            // Create instance of object           
            b_PartHistory obj = new b_PartHistory();
            obj.LoadFromDatabasePartIssue(reader);
            // Return result
            return (object)obj;
        }
        public void LoadFromDatabasePartIssue(SqlDataReader reader)// added on 25-06-2014 by Indusnet
        {
            int i = this.LoadFromDatabase(reader);

            try { PartDescription = reader.GetString(i++); }
            catch { PartDescription = ""; }

            try { PartClientLookupId = reader.GetString(i++); }
            catch { PartClientLookupId = ""; }
            //int i = 0;
            try
            {
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public static object ProcessRowPartReturn_V2(SqlDataReader reader)
        {
            // Create instance of object           
            b_PartHistory obj = new b_PartHistory();
            obj.LoadFromDatabasePartReturn_V2(reader);
            // Return result
            return (object)obj;
        }
        public void LoadFromDatabasePartReturn_V2(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);

            try { PartDescription = reader.GetString(i++); }
            catch { PartDescription = ""; }

            try { PartClientLookupId = reader.GetString(i++); }
            catch { PartClientLookupId = ""; }

            try { UPCCode = reader.GetString(i++); }
            catch { UPCCode = ""; }

            try { PerformBy = reader.GetString(i++); }
            catch { PerformBy = ""; }
            //int i = 0;
            try
            {
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                StringBuilder msg = new StringBuilder();
                try { reader["PartDescription"].ToString(); }
                catch { missing.Append("PartDescription"); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId"); }

                try { reader["UPCCode"].ToString(); }
                catch { missing.Append("UPCCode "); }

                try { reader["PerformBy"].ToString(); }
                catch { missing.Append("PerformBy "); }

                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        #region V2-610
        public static object ProcessRowPartIssue_V2(SqlDataReader reader)
        {
            // Create instance of object           
            b_PartHistory obj = new b_PartHistory();
            obj.LoadFromDatabasePartIssue_V2(reader);
            // Return result
            return (object)obj;
        }
        public void LoadFromDatabasePartIssue_V2(SqlDataReader reader)
        {
            //int i = this.LoadFromDatabase(reader);
            int i = 0;
            try
            {
                ClientId = reader.GetInt64(i++);
                PartHistoryId = reader.GetInt64(i++);
                PartId = reader.GetInt64(i++);
                Cost = reader.GetDecimal(i++);
                Description = reader.GetString(i++);
                if (false == reader.IsDBNull(i))
                {
                    TransactionDate = reader.GetDateTime(i);
                }
                else
                {
                    TransactionDate = DateTime.MinValue;
                }
                i++;
                TransactionQuantity = reader.GetDecimal(i++);
                TransactionType = reader.GetString(i++);
                UnitofMeasure = reader.GetString(i++);
                PartClientLookupId = reader.GetString(i++);
                UPCCode = reader.GetString(i++);
                TotalCount = reader.GetInt32(i++);
                StoreroomId = reader.GetInt64(i++);
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                StringBuilder msg = new StringBuilder();
                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }
                try { reader["PartHistoryId"].ToString(); }
                catch { missing.Append("PartHistoryId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["Cost"].ToString(); }
                catch { missing.Append("Cost "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["TransactionDate"].ToString(); }
                catch { missing.Append("TransactionDate "); }

                try { reader["TransactionQuantity"].ToString(); }
                catch { missing.Append("TransactionQuantity "); }

                try { reader["TransactionType"].ToString(); }
                catch { missing.Append("TransactionType "); }

                try { reader["UnitofMeasure"].ToString(); }
                catch { missing.Append("UnitofMeasure "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                try { reader["UPCCode"].ToString(); }
                catch { missing.Append("UPCCode "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }

        }
        #endregion

        public void InventoryReceipt(
  SqlConnection connection,
  SqlTransaction transaction,
  long callerUserInfoId,
string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_InventoryReceipt.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }


        public void ValidateProcessFromDatabase(
       SqlConnection connection,
       SqlTransaction transaction,
       long callerUserInfoId,
       string callerUserName,
       ref List<b_StoredProcValidationError> data
   )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_ValidateProcess.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void ValidateInventoryReceiptAddFromDatabase(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          ref List<b_StoredProcValidationError> data
      )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_ValidateInventoryReceiptAdd.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void ValidateInventoryReceiptConfirmFromDatabase(
      SqlConnection connection,
      SqlTransaction transaction,
      long callerUserInfoId,
      string callerUserName,
      ref List<b_StoredProcValidationError> data
  )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_ValidateInventoryReceiptConfirm.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }


        public void ValidatePhysicalInventoryRecordCountFromDatabase(
   SqlConnection connection,
   SqlTransaction transaction,
   long callerUserInfoId,
   string callerUserName,
   ref List<b_StoredProcValidationError> data
)
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_ValidatePhysicalInventoryRecordCount.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }
        public void ValidateWOCompletionPartsAddFromDatabase(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
         string callerUserName,
         ref List<b_StoredProcValidationError> data
     )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WOCompletionPartHistory_Addvalidation.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }
        public void ValidateWOCompletionPartsProcessFromDatabase(
      SqlConnection connection,
      SqlTransaction transaction,
      long callerUserInfoId,
      string callerUserName,
      ref List<b_StoredProcValidationError> data
  )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_WOCompletionPartHistory_ValidateProcess.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void ValidateAddFromDatabase(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
         string callerUserName,
         ref List<b_StoredProcValidationError> data
     )
        {

            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_ValidateAdd.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;

            }
        }

        public void PhysicalInventory(
  SqlConnection connection,
  SqlTransaction transaction,
  long callerUserInfoId,
string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_PhysicalInventory.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void UpdatePartCount(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_UpdatePartCounts_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void InsertPartHistoryDetailsIntoDatabase(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
     string callerUserName
     )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_PartIssue.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void InsertPartHistoryDetailsV2624IntoDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
    string callerUserName
    )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_PartIssue_V2_624.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void InsertPartHistoryReturnDetailsIntoDatabase(
     SqlConnection connection,
     SqlTransaction transaction,
     long callerUserInfoId,
 string callerUserName
 )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_ReturnPart_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void RetrieveByPartIdFromDatabase(SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
         string callerUserName,
         ref List<b_PartHistory> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_PartHistory> results = null;
            data = new List<b_PartHistory>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_RetrieveByPartId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_PartHistory>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }

        }

        public static object ProcessRowforPartId(SqlDataReader reader)
        {
            // Create instance of object           
            b_PartHistory obj = new b_PartHistory();
            obj.LoadFromDatabaseforPartId(reader);
            // Return result
            return (object)obj;
        }

        public void LoadFromDatabaseforPartId(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                if (false == reader.IsDBNull(i))

                {
                    Comments = reader.GetString(i);
                }

                else
                {
                    Comments = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    TransactionType = reader.GetString(i);
                }

                else
                {
                    TransactionType = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    TransactionDate = reader.GetDateTime(i);
                }

                else
                {
                    TransactionDate = DateTime.Now;
                }
                i++;


                TransactionQuantity = reader.GetDecimal(i++);

                if (false == reader.IsDBNull(i))
                {
                    PersonnelClientLookupId = reader.GetString(i);
                }

                else
                {
                    PersonnelClientLookupId = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameLast = reader.GetString(i);
                }

                else
                {
                    NameLast = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameFirst = reader.GetString(i);
                }

                else
                {
                    NameFirst = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    NameMiddle = reader.GetString(i);
                }

                else
                {
                    NameMiddle = "";
                }
                i++;

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["Comments"].ToString(); }
                catch { missing.Append("Comments "); }


                try { reader["TransactionType"].ToString(); }
                catch { missing.Append("TransactionType "); }


                try { reader["TransactionDate"].ToString(); }
                catch { missing.Append("TransactionDate "); }

                try { reader["TransactionQuantity "].ToString(); }
                catch { missing.Append("TransactionQuantity  "); }

                try { reader["PersonnelClientLookupId "].ToString(); }
                catch { missing.Append("PersonnelClientLookupId  "); }

                try { reader["NameLast "].ToString(); }
                catch { missing.Append("NameLast  "); }

                try { reader["NameFirst "].ToString(); }
                catch { missing.Append("NameFirst  "); }

                try { reader["NameMiddle "].ToString(); }
                catch { missing.Append("NameMiddle  "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void RetrieveByServiceOrderId(SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          ref List<b_PartHistory> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_PartHistory> results = null;
            data = new List<b_PartHistory>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_RetrieveByServiceOrderId_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_PartHistory>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }

        }
        public static object ProcessRowServiceOrder(SqlDataReader reader)// added on 25-06-2014 by Indusnet
        {
            // Create instance of object           
            b_PartHistory obj = new b_PartHistory();
            obj.LoadFromDatabaseServiceOrder(reader);
            // Return result
            return (object)obj;
        }
        public void LoadFromDatabaseServiceOrder(SqlDataReader reader)// added on 25-06-2014 by Indusnet
        {
            int i = 0;
            try
            {
                // ClientId column, bigint, not null
                ClientId = reader.GetInt64(i++);

                // PartHistoryId column, bigint, not null
                PartHistoryId = reader.GetInt64(i++);

                // PartId column, bigint, not null
                PartId = reader.GetInt64(i++);

                // PartStoreroomId column, bigint, not null
                PartStoreroomId = reader.GetInt64(i++);

                // AccountId column, bigint, not null
                AccountId = reader.GetInt64(i++);

                // AverageCostBefore column, decimal(15,5), not null
                AverageCostBefore = reader.GetDecimal(i++);

                // AverageCostAfter column, decimal(15,5), not null
                AverageCostAfter = reader.GetDecimal(i++);

                // ChargeType_Primary column, nvarchar(15), not null
                ChargeType_Primary = reader.GetString(i++);

                // ChargeToId_Primary column, bigint, not null
                ChargeToId_Primary = reader.GetInt64(i++);

                // Comments column, nvarchar(254), not null
                Comments = reader.GetString(i++);

                // Cost column, decimal(15,5), not null
                Cost = reader.GetDecimal(i++);

                // CostAfter column, decimal(15,5), not null
                CostAfter = reader.GetDecimal(i++);

                // CostBefore column, decimal(15,5), not null
                CostBefore = reader.GetDecimal(i++);

                // Description column, nvarchar(127), not null
                Description = reader.GetString(i++);

                // DepartmentId column, bigint, not null
                DepartmentId = reader.GetInt64(i++);

                // PerformedById column, bigint, not null
                PerformedById = reader.GetInt64(i++);

                // QtyAfter column, decimal(15,6), not null
                QtyAfter = reader.GetDecimal(i++);

                // QtyBefore column, decimal(15,6), not null
                QtyBefore = reader.GetDecimal(i++);

                // RequestorId column, bigint, not null
                RequestorId = reader.GetInt64(i++);

                // StockType column, nvarchar(15), not null
                StockType = reader.GetString(i++);

                // StoreroomId column, bigint, not null
                StoreroomId = reader.GetInt64(i++);

                // TransactionDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    TransactionDate = reader.GetDateTime(i);
                }
                else
                {
                    TransactionDate = DateTime.MinValue;
                }
                i++;
                // TransactionQuantity column, decimal(15,6), not null
                TransactionQuantity = reader.GetDecimal(i++);

                // TransactionType column, nvarchar(31), not null
                TransactionType = reader.GetString(i++);

                // UnitofMeasure column, nvarchar(15), not null
                UnitofMeasure = reader.GetString(i++);

                // CreatedBy column, nvarchar(254), not null
                CreatedBy = reader.GetString(i++);

                // CreatedDate column, datetime2, not null
                if (false == reader.IsDBNull(i))
                {
                    CreatedDate = reader.GetDateTime(i);
                }
                else
                {
                    CreatedDate = DateTime.MinValue;
                }
                i++;

                PartDescription = reader.GetString(i++);
                PartClientLookupId = reader.GetString(i++);

                if (false == reader.IsDBNull(i))
                {
                    VMRSFailure = reader.GetString(i);
                }
                else
                {
                    VMRSFailure = string.Empty;
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    VMRSFailureCode = reader.GetString(i);
                }
                else
                {
                    VMRSFailureCode = string.Empty;
                }
            }
            catch (Exception ex)
            {
                StringBuilder missing = new StringBuilder();


                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId "); }

                try { reader["PartHistoryId"].ToString(); }
                catch { missing.Append("PartHistoryId "); }

                try { reader["PartId"].ToString(); }
                catch { missing.Append("PartId "); }

                try { reader["PartStoreroomId"].ToString(); }
                catch { missing.Append("PartStoreroomId "); }

                try { reader["AccountId"].ToString(); }
                catch { missing.Append("AccountId "); }

                try { reader["AverageCostBefore"].ToString(); }
                catch { missing.Append("AverageCostBefore "); }

                try { reader["AverageCostAfter"].ToString(); }
                catch { missing.Append("AverageCostAfter "); }

                try { reader["ChargeType_Primary"].ToString(); }
                catch { missing.Append("ChargeType_Primary "); }

                try { reader["ChargeToId_Primary"].ToString(); }
                catch { missing.Append("ChargeToId_Primary "); }

                try { reader["Comments"].ToString(); }
                catch { missing.Append("Comments "); }

                try { reader["Cost"].ToString(); }
                catch { missing.Append("Cost "); }

                try { reader["CostAfter"].ToString(); }
                catch { missing.Append("CostAfter "); }

                try { reader["CostBefore"].ToString(); }
                catch { missing.Append("CostBefore "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId "); }

                try { reader["PerformedById"].ToString(); }
                catch { missing.Append("PerformedById "); }

                try { reader["QtyAfter"].ToString(); }
                catch { missing.Append("QtyAfter "); }

                try { reader["QtyBefore"].ToString(); }
                catch { missing.Append("QtyBefore "); }

                try { reader["RequestorId"].ToString(); }
                catch { missing.Append("RequestorId "); }

                try { reader["StockType"].ToString(); }
                catch { missing.Append("StockType "); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId "); }

                try { reader["TransactionDate"].ToString(); }
                catch { missing.Append("TransactionDate "); }

                try { reader["TransactionQuantity"].ToString(); }
                catch { missing.Append("TransactionQuantity "); }

                try { reader["TransactionType"].ToString(); }
                catch { missing.Append("TransactionType "); }

                try { reader["UnitofMeasure"].ToString(); }
                catch { missing.Append("UnitofMeasure "); }

                try { reader["CreatedBy"].ToString(); }
                catch { missing.Append("CreatedBy "); }

                try { reader["CreatedDate"].ToString(); }
                catch { missing.Append("CreatedDate "); }

                try { reader["PartDescription"].ToString(); }
                catch { missing.Append("PartDescription "); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                // Diagnostics
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void InsertPartHistoryDetailsIntoDatabase_V2(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
     string callerUserName
     )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_PartIssue_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        #region V2-610
        public void RetrieveForMaintenanceTechinicianFromDatabase_V2(SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          ref List<b_PartHistory> data)
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_PartHistory> results = null;
            data = new List<b_PartHistory>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_PartHistory_RetrieveForCompletionWorkbench_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_PartHistory>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }

        }

        #endregion

        public static b_PartHistory ProcessRowFortmpPartHistoryPrint(SqlDataReader reader)
        {
            // Create instance of object
            b_PartHistory obj = new b_PartHistory();

            // Load the object from the database
            obj.LoadFromDatabaseForPartHistoryPrint(reader);

            // Return result
            return obj;
        }

        public void LoadFromDatabaseForPartHistoryPrint(SqlDataReader reader)
        {
            // int i = this.LoadFromDatabase(reader);
            int i = 0;
           
            //int i = 0;
            try
            {
                // ChargeToId_Primary column, bigint, not null
                ChargeToId_Primary = reader.GetInt64(i++);

                // Cost column, decimal(15,5), not null
                Cost = reader.GetDecimal(i++);

                // TransactionQuantity column, decimal(15,6), not null
                TransactionQuantity = reader.GetDecimal(i++);

                // UnitofMeasure column, nvarchar(15), not null
                UnitofMeasure = reader.GetString(i++);

                // Description column, nvarchar(127), not null
                Description = reader.GetString(i++);

                try { PartClientLookupId = reader.GetString(i++); }
                catch { PartClientLookupId = ""; }
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                StringBuilder msg = new StringBuilder();
                try { reader["ChargeToId_Primary"].ToString(); }
                catch { missing.Append("ChargeToId_Primary"); }

                try { reader["Cost"].ToString(); }
                catch { missing.Append("Cost"); }

                try { reader["TransactionQuantity"].ToString(); }
                catch { missing.Append("TransactionQuantity "); }

                try { reader["UnitofMeasure"].ToString(); }
                catch { missing.Append("UnitofMeasure"); }

                try { reader["PartClientLookupId"].ToString(); }
                catch { missing.Append("PartClientLookupId "); }

                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        #region Inventory Receipt V2-687
        public void InventoryReceipt_V2(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName 
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_InventoryReceipt_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion
        #region Physical Inventory V2-687
        public void PhysicalInventory_V2(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_PhysicalInventory_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion
        #region V2-687 Multistoreroom Implementation
        public void InsertPartHistoryForMultiStoreroom_V2IntoDatabase(
     SqlConnection connection,
     SqlTransaction transaction,
     long callerUserInfoId,
 string callerUserName
 )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_PartIssueForMultiStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void InsertPartHistoryReturnDetailsForMultiStoreroomIntoDatabase(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_ReturnPartForMultiStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public void UpdatePartCountForMultiStoreroom(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_UpdatePartCountsForMultiStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion

        #region V2-751 Storeroom Transfer
        #region Outgoing Transfer
        public void ProcessIssue(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
        string callerUserName
            )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_OutgoingTransfers_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion

        #region Incoming Transfer
        public void ProcessReceipt(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
        string callerUserName
            )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_IncomingTransfers_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion

        #region Force Complete

        public void StoreroomTransferForceComplete(
SqlConnection connection,
SqlTransaction transaction,
long callerUserInfoId,
string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_StoreroomTransfer_ForceComplete_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion
        #endregion
        #region V2-1031
        public void InsertPartHistoryDetailsStockOutIntoDatabase(
      SqlConnection connection,
      SqlTransaction transaction,
      long callerUserInfoId,
  string callerUserName
  )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_PartIssueStockOut_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void InsertPartHistoryDetailsStockOutForMultiStoreroomIntoDatabase(
    SqlConnection connection,
    SqlTransaction transaction,
    long callerUserInfoId,
string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_PartHistory_PartIssueStockOutForMultiStoreroom_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        #endregion
    }
}