/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object that stores a record from the UserSecurityGroup table.
    /// </summary>
    public partial class b_UserSecurityGroup 
    {

        /// <summary>
        /// UserInfoId property
        /// </summary>
        public string SecurityGroupName { get; set; }


        /// <summary>
        /// Process the current row in the input SqlDataReader into a b_UserSecurityGroup object.
        /// This routine should be applied to the usp_UserSecurityGroup_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_UserSecurityGroup_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        /// <returns>object cast of the b_UserSecurityGroup object</returns>
        public static object ProcessAdditionalRow (SqlDataReader reader)
        {
            // Create instance of object
            b_UserSecurityGroup obj = new b_UserSecurityGroup();

            // Load the object from the database
            obj.LoadAdditionalDataFromDatabase(reader);

            // Return result
            return (object) obj;
        }

        /// <summary>
        /// Load the current row in the input SqlDataReader into a b_UserSecurityGroup object.
        /// This routine should be applied to the usp_UserSecurityGroup_RetrieveByPK stored procedure.
        /// This routine should be applied to the usp_UserSecurityGroup_RetrieveAll. stored procedure.
        /// </summary>
        /// <param name="reader">SqlDataReader containing the reader to process for the next row</param>
        public void LoadAdditionalDataFromDatabase(SqlDataReader reader)
        {int i = 0;
        try
        {

                        // ClientId column, bigint, not null
                        ClientId = reader.GetInt64(i++);

                        // UserSecurityGroupId column, bigint, not null
                        UserSecurityGroupId = reader.GetInt64(i++);

                        // SecurityGroupId column, bigint, not null
                        SecurityGroupId = reader.GetInt64(i++);

                        // UserInfoId column, bigint, not null
                        UserInfoId = reader.GetInt64(i++);

                        // UpdateIndex column, int, not null
                        UpdateIndex = reader.GetInt32(i++);

                        SecurityGroupName = reader.GetString(i++);
                        
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();
                
                
            try { reader["ClientId"].ToString(); }
            catch { missing.Append("ClientId "); }
            
            try { reader["UserSecurityGroupId"].ToString(); }
            catch { missing.Append("UserSecurityGroupId "); }
            
            try { reader["SecurityGroupId"].ToString(); }
            catch { missing.Append("SecurityGroupId "); }
            
            try { reader["UserInfoId"].ToString(); }
            catch { missing.Append("UserInfoId "); }
            
            try { reader["UpdateIndex"].ToString(); }
            catch { missing.Append("UpdateIndex "); }

            try { reader["GroupName"].ToString(); }
            catch { missing.Append("GroupName"); }
                
                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
}

        /// <summary>
        /// Retrieve all UserSecurityGroup table records represented by this object in the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
		/// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="data">b_UserSecurityGroup[] that contains the results</param>
        public void RetrieveByGroupIdFromDatabase (
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
			string callerUserName,
            ref b_UserSecurityGroup[] data
        )
        {
            Database.SqlClient.ProcessRow<b_UserSecurityGroup> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_UserSecurityGroup[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_UserSecurityGroup>(reader => { b_UserSecurityGroup obj = new b_UserSecurityGroup(); obj.LoadFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_UserSecurityGroup_RetrieveByGroupId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                // Extract the results
                if (null != results)
                {
                    data = (b_UserSecurityGroup[])results.ToArray(typeof(b_UserSecurityGroup));
                }
                else
                {
                    data = new b_UserSecurityGroup[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
				callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void RetrieveByUserInfoIdFromDatabase(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            ref b_UserSecurityGroup[] data
        )
        {
            Database.SqlClient.ProcessRow<b_UserSecurityGroup> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            // Initialize the results
            data = new b_UserSecurityGroup[0];

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_UserSecurityGroup>(reader => { b_UserSecurityGroup obj = new b_UserSecurityGroup(); obj.LoadAdditionalDataFromDatabase(reader); return obj; });
                results = Database.StoredProcedure.usp_UserSecurityGroup_RetrieveByUserInfoId.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

                // Extract the results
                if (null != results)
                {
                    data = (b_UserSecurityGroup[])results.ToArray(typeof(b_UserSecurityGroup));
                }
                else
                {
                    data = new b_UserSecurityGroup[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                results = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        /****************************Added By Indusnet Technologies********************************/
        public void CreateFromAdmin(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
        string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UserSecurityGroup_CrateFromAdmin.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void DeleteFromAdmin(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
     string callerUserName
       )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_UserSecurityGroup_DeleteFromAdmin.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        /****************************End Added By Indusnet Technologies********************************/
    
    }
}
