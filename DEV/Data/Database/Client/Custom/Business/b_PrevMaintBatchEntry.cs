/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using Database.SqlClient;
using System.Collections.Generic;

namespace Database.Business
{
    public partial class b_PrevMaintBatchEntry
    {
        public string MasterJob { get; set; }
        public string MasterDescription { get; set; }
        public string ChargeType { get; set; }
        public string ChargeTo { get; set; }
        public string WorkOrderClientLookupId { get; set; }
        public long Frequency { get; set; }
        public long siteid { get; set; }
        public string EquipmentClientLookupId { get; set; }
        public string EquipmentName { get; set; }
        public string PrevMaintMasterClientLookupId { get; set; }
        public string PrevMaintMasterDescription { get; set; }

        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }

        public long OffSetVal { get; set; }
        public long NextRow { get; set; }

        public DateTime ? ScheduleThroughDate { get; set; }

        public string ScheduleType { get; set; }
        public string ScheduleThroughDateString { get; set; }
        public string OnDemandgroup { get; set; }
        public bool PrintWorkOrders { get; set; }
        public bool PrintAttachments { get; set; }
        public string AssetGroup1Ids { get; set; }
        public string AssetGroup2Ids { get; set; }
        public string AssetGroup3Ids { get; set; }
        public string PrevMaintSchedType { get; set; }
        public string PrevMaintMasterType { get; set; }

        public DateTime? PrevBEDueDate { get; set; }
        public int TotalCount { get; set; }
        public DateTime? PMRequiredDate { get; set; }
        public int ChildCount { get; set; }
        public string AssignedTo_Name { get; set; }
        public string AssignedMultiple { get; set; }
        #region V2-1082
        public string Shift { get; set; }
        public bool? DownRequired { get; set; }
        #endregion
        public bool? PlanningRequired { get; set; }
        public List<b_PrevMaintBatchEntry> listOfPrevMaintBatchEntries { get; set; }

        public static b_PrevMaintBatchEntry ProcessRowAfterBatchEntry(SqlDataReader reader)
        {
            // Create instance of object
            b_PrevMaintBatchEntry be = new b_PrevMaintBatchEntry();

            // Load the object from the database
            be.LoadFromDatabaseAfterBatchEntry(reader);

            // Return result
            return be;
        }
        public static b_PrevMaintBatchEntry ProcessRowAfterBatchEntryChunkSearch(SqlDataReader reader)
        {
            // Create instance of object
            b_PrevMaintBatchEntry be = new b_PrevMaintBatchEntry();

            // Load the object from the database
            be.LoadFromDatabaseAfterBatchEntryChunkSearch(reader);

            // Return result
            return be;
        }
        public void LoadFromDatabaseAfterBatchEntry(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                PrevMaintBatchEntryId = reader.GetInt64(i++);

                if (false == reader.IsDBNull(i))
                {
                    DueDate = reader.GetDateTime(i);
                }
                else
                {
                    DueDate = DateTime.MinValue;
                }
                i++;
                //DueDate = reader.GetDateTime(i++);

                MasterJob = reader.GetString(i++);

                MasterDescription = reader.GetString(i++);

                ChargeType = reader.GetString(i++);

                ChargeTo = reader.GetString(i++);

                if (false == reader.IsDBNull(i))
                {
                    WorkOrderId = reader.GetInt64(i);
                }
                else
                {
                    WorkOrderId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    WorkOrderClientLookupId = reader.GetString(i);
                }
                else
                {
                    WorkOrderClientLookupId = "";
                }
                i++;

                Frequency = reader.GetInt32(i++);

                PrevMaintBatchHeaderId = reader.GetInt64(i++);

            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["PrevMaintBatchEntryId"].ToString(); }
                catch { missing.Append("PrevMaintBatchEntryId "); }

                try { reader["DueDate"].ToString(); }
                catch { missing.Append("DueDate "); }

                try { reader["MasterJob"].ToString(); }
                catch { missing.Append("MasterJob "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["ChargeType"].ToString(); }
                catch { missing.Append("ChargeType "); }

                try { reader["ChargeToId"].ToString(); }
                catch { missing.Append("ChargeToId "); }

                try { reader["WorkOrderId"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["WorkOrderClientLookupId"].ToString(); }
                catch { missing.Append("WorkOrderClientLookupId "); }

                try { reader["Frequency"].ToString(); }
                catch { missing.Append("Frequency "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }

        public void LoadFromDatabaseAfterBatchEntryChunkSearch(SqlDataReader reader)
        {
            int i = 0;
            try
            {

                PrevMaintBatchEntryId = reader.GetInt64(i++);

                if (false == reader.IsDBNull(i))
                {
                    DueDate = reader.GetDateTime(i);
                }
                else
                {
                    DueDate = DateTime.MinValue;
                }
                i++;
                //DueDate = reader.GetDateTime(i++);

                MasterJob = reader.GetString(i++);

                MasterDescription = reader.GetString(i++);

                ChargeType = reader.GetString(i++);

                ChargeTo = reader.GetString(i++);

                if (false == reader.IsDBNull(i))
                {
                    WorkOrderId = reader.GetInt64(i);
                }
                else
                {
                    WorkOrderId = 0;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    WorkOrderClientLookupId = reader.GetString(i);
                }
                else
                {
                    WorkOrderClientLookupId = "";
                }
                i++;

                Frequency = reader.GetInt32(i++);

                PrevMaintBatchHeaderId = reader.GetInt64(i++);
                if (false == reader.IsDBNull(i))
                {
                    EquipmentClientLookupId = reader.GetString(i);
                }
                else
                {
                    EquipmentClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    EquipmentName = reader.GetString(i);
                }
                else
                {
                    EquipmentName = "";
                }
                i++;

                if (false == reader.IsDBNull(i))
                {
                    PrevMaintMasterClientLookupId = reader.GetString(i);
                }
                else
                {
                    PrevMaintMasterClientLookupId = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PrevMaintMasterDescription = reader.GetString(i);
                }
                else
                {
                    PrevMaintMasterDescription = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    PMRequiredDate = reader.GetDateTime(i);
                }
                else
                {
                    PMRequiredDate = DateTime.MinValue;
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    AssignedTo_Name = reader.GetString(i);
                }
                else
                {
                    AssignedTo_Name = "";
                }
                i++;
                ChildCount = reader.GetInt32(i++);
                if (false == reader.IsDBNull(i))
                {
                    AssignedMultiple = reader.GetString(i);
                }
                else
                {
                    AssignedMultiple = string.Empty;
                }
                i++;
                Shift = reader.GetString(i++);
                DownRequired = reader.GetBoolean(i++);
                PrevMaintSchedId=reader.GetInt64(i++);
                PlanningRequired = reader.GetBoolean(i++);
                TotalCount = reader.GetInt32(i++);
               
            }
            catch (Exception ex)
            {
                // Diagnostics
                StringBuilder missing = new StringBuilder();


                try { reader["PrevMaintBatchEntryId"].ToString(); }
                catch { missing.Append("PrevMaintBatchEntryId "); }

                try { reader["DueDate"].ToString(); }
                catch { missing.Append("DueDate "); }

                try { reader["MasterJob"].ToString(); }
                catch { missing.Append("MasterJob "); }

                try { reader["Description"].ToString(); }
                catch { missing.Append("Description "); }

                try { reader["ChargeType"].ToString(); }
                catch { missing.Append("ChargeType "); }

                try { reader["ChargeToId"].ToString(); }
                catch { missing.Append("ChargeToId "); }

                try { reader["WorkOrderId"].ToString(); }
                catch { missing.Append("WorkOrderId "); }

                try { reader["WorkOrderClientLookupId"].ToString(); }
                catch { missing.Append("WorkOrderClientLookupId "); }

                try { reader["Frequency"].ToString(); }
                catch { missing.Append("Frequency "); }

                try { reader["EquipmentClientLookupId"].ToString(); }
                catch { missing.Append("EquipmentClientLookupId "); }

                try { reader["EquipmentName"].ToString(); }
                catch { missing.Append("EquipmentName "); }

                try { reader["PrevMaintMasterClientLookupId"].ToString(); }
                catch { missing.Append("PrevMaintMasterClientLookupId "); }

                try { reader["PrevMaintMasterDescription"].ToString(); }
                catch { missing.Append("PrevMaintMasterDescription "); }

                try { reader["PMRequiredDate"].ToString(); }
                catch { missing.Append("PMRequiredDate "); }

                try { reader["AssignedTo_Name"].ToString(); }
                catch { missing.Append("AssignedTo_Name "); }

                try { reader["ChildCount"].ToString(); }
                catch { missing.Append("ChildCount "); }

                try { reader["AssignedMultiple"].ToString(); }
                catch { missing.Append("AssignedMultiple "); }

                try { reader["Shift"].ToString(); }
                catch { missing.Append("Shift "); }

                try { reader["DownRequired"].ToString(); }
                catch { missing.Append("DownRequired "); }
                
                try { reader["PrevMaintSchedId"].ToString(); }
                catch { missing.Append("PrevMaintSchedId "); }

                try { reader["TotalCount"].ToString(); }
                catch { missing.Append("TotalCount "); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }

                throw new Exception(msg.ToString(), ex);
            }
        }
        public void PrevMaintBatchEntry_ForWorkOrder(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            long clientId,
            long siteid,
            string ScheduleType,
            DateTime ScheduleThroughDate,
            string OnDemandgroup,
            bool PrintWorkOrders,
            bool PrintAttachments,
            ref List<b_PrevMaintBatchEntry> data
        )
        {
            SqlCommand command = null;
            data = new List<b_PrevMaintBatchEntry>();
            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                data = Database.StoredProcedure.usp_PrevMaintBatchEntry_ForWorkOrder.CallStoredProcedure
                    (command, callerUserInfoId, callerUserName, clientId, siteid, ScheduleType, ScheduleThroughDate
                    ,OnDemandgroup,PrintWorkOrders,PrintAttachments);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
        public void PrevMaintBatchEntry_ForWorkOrderFromPrevMaintLibrary(
           SqlConnection connection,
           SqlTransaction transaction,
           long callerUserInfoId,
           string callerUserName,
           long clientId,
           long siteid,
           string ScheduleType,
           DateTime ScheduleThroughDate,
           string OnDemandgroup,
           bool PrintWorkOrders,
           bool PrintAttachments,
           ref List<b_PrevMaintBatchEntry> data
       )
        {
            SqlCommand command = null;
            data = new List<b_PrevMaintBatchEntry>();
            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                data = Database.StoredProcedure.usp_PrevMaintBatchEntry_ForWorkOrderFromPrevMaintLibrary.CallStoredProcedure
                    (command, callerUserInfoId, callerUserName, clientId, siteid, ScheduleType, ScheduleThroughDate
                    , OnDemandgroup, PrintWorkOrders, PrintAttachments);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }


        public void PrevMaintBatchEntry_ForWorkOrderFromPrevMaintLibrary_V2(
          SqlConnection connection,
          SqlTransaction transaction,
          long callerUserInfoId,
          string callerUserName,
          long clientId,
          long siteid,
          string ScheduleType,
          DateTime ScheduleThroughDate,
          string OnDemandgroup,
          bool PrintWorkOrders,
          bool PrintAttachments,
           string AssetGroup1Ids,
           string AssetGroup2Ids,
          string AssetGroup3Ids,
         string PrevMaintSchedType,
          string PrevMaintMasterType,
          ref List<b_PrevMaintBatchEntry> data
      )
        {
            SqlCommand command = null;
            data = new List<b_PrevMaintBatchEntry>();
            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                data = Database.StoredProcedure.usp_PrevMaintBatchEntry_ForWorkOrderFromPrevMaintLibrary_V2.CallStoredProcedure
                    (command, callerUserInfoId, callerUserName, clientId, siteid, ScheduleType, ScheduleThroughDate
                    , OnDemandgroup, PrintWorkOrders, PrintAttachments, AssetGroup1Ids, AssetGroup2Ids, AssetGroup3Ids, PrevMaintSchedType, PrevMaintMasterType);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }


        public void PrevMaintBatchEntry_ForWorkOrderFromPrevMaintLibraryChunkSearch_V2(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
        string callerUserName,
        ref b_PrevMaintBatchEntry results
       
    )
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data

                results = Database.StoredProcedure.usp_PrevMaintBatchEntry_ForWorkOrderFromPrevMaintLibraryChunkSearch_V2.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
            //SqlCommand command = null;
            //data = new List<b_PrevMaintBatchEntry>();
            //try
            //{
            //    command = connection.CreateCommand();
            //    if (null != transaction)
            //    {
            //        command.Transaction = transaction;
            //    }
            //    data = Database.StoredProcedure.usp_PrevMaintBatchEntry_ForWorkOrderFromPrevMaintLibraryChunkSearch_V2.CallStoredProcedure
            //        (command, callerUserInfoId, callerUserName, clientId, siteid, ScheduleType, ScheduleThroughDate
            //        , OnDemandgroup, PrintWorkOrders, PrintAttachments, AssetGroup1Id, AssetGroup2Id, AssetGroup3Id, PrevMaintSchedType, PrevMaintMasterType);
            //}
            //finally
            //{
            //    if (null != command)
            //    {
            //        command.Dispose();
            //        command = null;
            //    }
            //}
        }
        public void PrevMaintBatchEntry_ForWorkOrder(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName,
            long PrevMaintBatchHeaderId,
            ref List<b_PrevMaintBatchEntry> data
        )
        {
            SqlCommand command = null;
            data = new List<b_PrevMaintBatchEntry>();
            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                data = Database.StoredProcedure.usp_PrevMaintBatchEntry_RetrieveByBatchHeaderId.CallStoredProcedure
                    (command, callerUserInfoId, callerUserName, PrevMaintBatchHeaderId);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }
    }
}
