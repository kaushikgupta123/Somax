/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;
using Database.SqlClient;

namespace Database.Business
{
    /// <summary>
    /// Business object thay>t stores a record from the TechSpecs table.
    /// </summar
    public partial class b_ProcessSystem
    {
        /// <summary>
        /// Retrieve User table records with specified primary key from the database.
        /// </summary>
        /// <param name="connection">SqlConnection containing the database connection</param>
        /// <param name="transaction">SqlTransaction containing the database transaction</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>

        public string SiteName { get; set; }
        public long ClientId { get; set; }
        public string Account { get; set; }
        public string LaborAccountClientLookupId { get; set; }

        public string ProcessSystemDesc { get; set; }
        public string ProcessDesc { get; set; }
        public string SystemDesc { get; set; }
        public void Validate(
         SqlConnection connection,
         SqlTransaction transaction,
         long callerUserInfoId,
         string callerUserName,
         ref List<b_StoredProcValidationError> data
      )
        {
            SqlCommand command = null;
            string message = String.Empty;
            List<b_StoredProcValidationError> results = null;
            //data = new List<b_StoredProcValidationError>();

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_ProcessSystem_Validate.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);

                if (results != null)
                {
                    data = results;
                }
                else
                {
                    data = new List<b_StoredProcValidationError>();
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void UpdateByPKForeignKey(
            SqlConnection connection,
            SqlTransaction transaction,
            long callerUserInfoId,
            string callerUserName
        )
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ProcessSystem_UpdateByPKForeignKey.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }


        public void RetrieveForSearch(SqlConnection sqlConnection, SqlTransaction sqlTransaction, long callerUserInfoId, string callerUserName, ref List<b_ProcessSystem> results)
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = sqlConnection;
                command.Transaction = sqlTransaction;
                // Call the stored procedure to retrieve the data
                results = Database.StoredProcedure.usp_ProcessSystem_RetrieveForSearch.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        

        public void RetrieveByPKForeignKeysFromDatabase(
        SqlConnection connection,
        SqlTransaction transaction,
        long callerUserInfoId,
        string callerUserName
         )
        {
            Database.SqlClient.ProcessRow<b_ProcessSystem> processRow = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
                processRow = new Database.SqlClient.ProcessRow<b_ProcessSystem>(reader => { this.LoadFromDatabaseForProcessSystemRetriveByPkForeignKey(reader); return this; });
                Database.StoredProcedure.usp_ProcessSystem_RetrieveByPKForeignKey.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);

            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public void CreateByPkForeignKey(
       SqlConnection connection,
       SqlTransaction transaction,
       long callerUserInfoId,
       string callerUserName
)
        {
            SqlCommand command = null;

            try
            {
                command = connection.CreateCommand();
                if (null != transaction)
                {
                    command.Transaction = transaction;
                }
                Database.StoredProcedure.usp_ProcessSystem_CreateByPkForeignKey.CallStoredProcedure(command, callerUserInfoId, callerUserName, this);
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
            }
        }

        public int LoadFromDatabaseForProcessSystemRetriveByPkForeignKey(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // ClientId
                ClientId = reader.GetInt64(i++);

                // ProcessSystemId
                ProcessSystemId = reader.GetInt64(i++);
                //SiteId
                SiteId = reader.GetInt64(i++);
                AreaId = reader.GetInt64(i++);
                DepartmentId = reader.GetInt64(i++);
                StoreroomId = reader.GetInt64(i++);
                InActiveFlag = reader.GetBoolean(i++);
                if (false == reader.IsDBNull(i))
                {
                    Labor_AccountId = reader.GetInt64(i++);
                }
                else
                {
                    Labor_AccountId = 0; i++;
                }


                // Process
                if (false == reader.IsDBNull(i))
                {
                    Process = reader.GetString(i++);
                }
                else
                {
                    Process = ""; i++;
                }

                // System
                if (false == reader.IsDBNull(i))
                {
                    System = reader.GetString(i++);
                }
                else
                {
                    System = ""; i++;
                }
                UpdateIndex = reader.GetInt32(i++);
                // Account
                if (false == reader.IsDBNull(i))
                {
                    Account = reader.GetString(i++);
                }
                else
                {
                    Account = ""; i++;
                }
                // SiteName
                if (false == reader.IsDBNull(i))
                {
                    SiteName = reader.GetString(i++);
                }
                else
                {
                    SiteName = ""; i++;
                }
                i++;
            }
            catch (Exception ex)
            {
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId"); }

                try { reader["ProcessSystemId"].ToString(); }
                catch { missing.Append("ProcessSystemId"); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId"); }

                try { reader["AreaId"].ToString(); }
                catch { missing.Append("AreaId"); }

                try { reader["DepartmentId"].ToString(); }
                catch { missing.Append("DepartmentId"); }

                try { reader["StoreroomId"].ToString(); }
                catch { missing.Append("StoreroomId"); }

                try { reader["InActiveFlag"].ToString(); }
                catch { missing.Append("InActiveFlag"); }

                try { reader["Labor_AccountId"].ToString(); }
                catch { missing.Append("Labor_AccountId"); }

                try { reader["Process"].ToString(); }
                catch { missing.Append("Process"); }

                try { reader["System"].ToString(); }
                catch { missing.Append("System"); }

                try { reader["UpdateIndex"].ToString(); }
                catch { missing.Append("UpdateIndex"); }

                try { reader["Account"].ToString(); }
                catch { missing.Append("Account"); }

                try { reader["SiteName"].ToString(); }
                catch { missing.Append("SiteName"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public int LoadFromDatabaseForProcessSystemRetrieveForSearch(SqlDataReader reader)
        {
            int i = 0;
            try
            {
                // ClientId
                ClientId = reader.GetInt64(i++);

                //SiteId
                SiteId = reader.GetInt64(i++);

                // Description
                if (false == reader.IsDBNull(i))
                {
                    SiteName = reader.GetString(i++);
                }
                else
                {
                    SiteName = ""; i++;
                }

                // ProcessSystemId
                ProcessSystemId = reader.GetInt64(i++);

                // Process
                if (false == reader.IsDBNull(i))
                {
                    Process = reader.GetString(i++);
                }
                else
                {
                    Process = ""; i++;
                }

                // System
                if (false == reader.IsDBNull(i))
                {
                    System = reader.GetString(i++);
                }
                else
                {
                    System = ""; i++;
                }


                //InactiveFlag
                InActiveFlag = reader.GetBoolean(i++);

                // Labor_AccountId
                if (false == reader.IsDBNull(i))
                {
                    Labor_AccountId = reader.GetInt64(i++);
                }
                else
                {
                    Labor_AccountId = 0; i++;
                }

                // Account
                if (false == reader.IsDBNull(i))
                {
                    Account = reader.GetString(i++);
                }
                else
                {
                    Account = ""; i++;
                }
                
                i++;
            }
            catch (Exception ex)
            {
                StringBuilder missing = new StringBuilder();

                try { reader["ClientId"].ToString(); }
                catch { missing.Append("ClientId"); }

                try { reader["SiteId"].ToString(); }
                catch { missing.Append("SiteId"); }

                try { reader["SiteName"].ToString(); }
                catch { missing.Append("SiteName"); }

                try { reader["Process"].ToString(); }
                catch { missing.Append("Process"); }

                try { reader["ProcessSystemId"].ToString(); }
                catch { missing.Append("ProcessSystemId"); }

                try { reader["System"].ToString(); }
                catch { missing.Append("System"); }

                try { reader["InActiveFlag"].ToString(); }
                catch { missing.Append("InActiveFlag"); }

                try { reader["Labor_AccountId"].ToString(); }
                catch { missing.Append("Labor_AccountId"); }

                try { reader["Account"].ToString(); }
                catch { missing.Append("Account"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        #region Tree Description
        public void RetrieveAllForProcess(
      SqlConnection connection,
      SqlTransaction transaction,
      long callerUserInfoId,
      string callerUserName,
      ref b_ProcessSystem[] data
       )
        {
            Database.SqlClient.ProcessRow<b_ProcessSystem> processRow = null;
            ArrayList results = null;
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand();
                command.Connection = connection;
                command.Transaction = transaction;

                // Call the stored procedure to retrieve the data
               // processRow = new Database.SqlClient.ProcessRow<b_ProcessSystem>(reader => { this.LoadFromDatabaseForProcessDescription(reader); return this; });
                results = Database.StoredProcedure.usp_ProcessSystem_RetrieveAllForProcess.CallStoredProcedure(command, processRow, callerUserInfoId, callerUserName, this);
                // Extract the results
                if (null != results)
                {
                    data = (b_ProcessSystem[])results.ToArray(typeof(b_ProcessSystem));
                }
                else
                {
                    data = new b_ProcessSystem[0];
                }

                // Clear the results collection
                if (null != results)
                {
                    results.Clear();
                    results = null;
                }
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }
                processRow = null;
                message = String.Empty;
                callerUserInfoId = 0;
                callerUserName = String.Empty;
            }
        }

        public int LoadFromDatabaseForProcessDescription(SqlDataReader reader)
        {
            int i = this.LoadFromDatabase(reader);
            try
            {

                // ProcessDescription
                if (false == reader.IsDBNull(i))
                {
                     ProcessDesc = reader.GetString(i);
                }
                else
                {
                    ProcessDesc = "";
                }
                i++;
                if (false == reader.IsDBNull(i))
                {
                    SystemDesc = reader.GetString(i);
                }
                else
                {
                    SystemDesc = "";
                }
                i++;
            }
            catch (Exception ex)
            {
                StringBuilder missing = new StringBuilder();

                try { reader["ProcessDesc"].ToString(); }
                catch { missing.Append("ProcessDesc"); }

                try { reader["SystemDesc"].ToString(); }
                catch { missing.Append("SystemDesc"); }

                StringBuilder msg = new StringBuilder();
                msg.Append(string.Format("Exception occurred at index {0}: {1}", i, ex.Message));
                if (missing.Length > 0)
                {
                    msg.Append(string.Format(" The following columns were expected but not found: {0}", missing.ToString()));
                }
                throw new Exception(msg.ToString(), ex);
            }
            return i;
        }

        public static b_ProcessSystem ProcessRowForProcessDescription(SqlDataReader reader)
        {
            // Create instance of object
            b_ProcessSystem procsys = new b_ProcessSystem();

            // Load the object from the database
            // RKL - Do not need the LoadFromDatabaseWithDepartName method
            procsys.LoadFromDatabaseForProcessDescription(reader);
            // Return result
            return procsys;
        }
        #endregion
    }
}
