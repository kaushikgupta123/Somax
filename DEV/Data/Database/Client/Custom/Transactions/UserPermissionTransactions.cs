/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;


namespace Database
{

    public class UserPermission_RetrieveByUserInfoId : UserPermission_TransactionBaseClass
    {
	
        public List<b_UserPermission> UserPermissionList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            b_UserPermission[] tmpArray = null;

            UserPermission.RetrieveByUserInfoIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            UserPermissionList = new List<b_UserPermission>();
            foreach (b_UserPermission tmpObj in tmpArray)
            {
                UserPermissionList.Add(tmpObj);
            }
        }
    }

    public class UserPermission_RetrieveWithGroupPermissionByUserInfoId : UserPermission_TransactionBaseClass
    {

        public List<b_UserPermission> UserPermissionList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            b_UserPermission[] tmpArray = null;

            UserPermission.RetrieveWithGroupPermissionByUserInfoIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            UserPermissionList = new List<b_UserPermission>();
            foreach (b_UserPermission tmpObj in tmpArray)
            {
                UserPermissionList.Add(tmpObj);
            }
        }
    }

    //-------------------------------Added By Indusnet Technologies--------------------------------------
    public class UserPermission_RetrieveByPermissionTypeAndUser : UserPermission_TransactionBaseClass
    {

        public List<b_UserPermission> UserPermissionList { get; set; }

        //---- Clinet connection string is required for accessing it from admin application as somax can access data of different client
        public string ClientConnectionString { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
           
            //--- To avoid taking connection string from dbKey as it provide current logged in user's client connection string
            //---- From admin a logged in user of somax can access data of different client
            if (!string.IsNullOrEmpty(ClientConnectionString))
            {
                base.ConnectionString = ClientConnectionString;
            }
        }

        public override void PerformWorkItem()
        {
            b_UserPermission[] tmpArray = null;

            UserPermission.RetrieveByPermissionTypeAndUser(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            UserPermissionList = new List<b_UserPermission>();
            foreach (b_UserPermission tmpObj in tmpArray)
            {
                UserPermissionList.Add(tmpObj);
            }
        }
    }

    public class UserPermission_DeleteBySiteAndUser : UserPermission_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (UserPermission.SiteId<=0)
            {
                string message = "UserPermission has an invalid site ID.";
                throw new Exception(message);
            }
            if (UserPermission.SiteId <= 0 && UserPermission.UserInfoId<=0)
            {
                string message = "UserPermission has an invalid user ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            UserPermission.DeleteBySiteAndUser(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    //-------------------------------End Added By Indusnet Technologies----------------------------------
    public class UserPermission_RetrieveByGrant : UserPermission_TransactionBaseClass
    {

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

            //--- To avoid taking connection string from dbKey as it provide current logged in user's client connection string
            //---- From admin a logged in user of somax can access data of different client
           
        }

        public override void PerformWorkItem()
        {

          UserPermission.RetrieveUserCountsByGrant(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);

        }
    }
    #region V2-962
    public class UserPermission_DeleteBySiteAndUserForAdmin : UserPermission_TransactionBaseClass
    {
        public long customClientId { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (UserPermission.SiteId <= 0)
            {
                string message = "UserPermission has an invalid site ID.";
                throw new Exception(message);
            }
            if (UserPermission.SiteId <= 0 && UserPermission.UserInfoId <= 0)
            {
                string message = "UserPermission has an invalid user ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            UserPermission.ClientId = customClientId;
            UserPermission.DeleteBySiteAndUser(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
    public class UserPermission_CreateForAdmin : UserPermission_TransactionBaseClass
    {
        public long customClientId { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (UserPermission.UserPermissionId > 0)
            {
                string message = "UserPermission has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            UserPermission.ClientId = customClientId;
            UserPermission.InsertIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
            System.Diagnostics.Debug.Assert(UserPermission.UserPermissionId > 0);
        }
    }
    #endregion
}
