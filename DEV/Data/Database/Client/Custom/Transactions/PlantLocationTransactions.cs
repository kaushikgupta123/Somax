/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;
using Common.Enumerations;
using System.Data.SqlClient;

namespace Database
{
    public class PlantLocation_RetrieveAllForTreeList : PlantLocation_TransactionBaseClass
    {
        public List<b_PlantLocation> PlantLocationList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();            
        }
        public override void PerformWorkItem()
        {

            b_PlantLocation[] tmpArray = null;


            PlantLocation.RetrieveAllForTreeList(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);
            PlantLocationList = new List<b_PlantLocation>(tmpArray);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    //public class PlantLocation_DeleteWithValidation : PlantLocation_TransactionBaseClass
    //{
    //    public override void PerformLocalValidation()
    //    {
    //        base.PerformLocalValidation();
    //    }

    //    // Result Sets
    //    public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

    //    public override void PerformWorkItem()
    //    {
    //        SqlCommand command = null;
    //        string message = String.Empty;

    //        try
    //        {
    //            List<b_StoredProcValidationError> errors = null;
    //            PlantLocation.DeleteWithValidation(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref errors);

    //            StoredProcValidationErrorList = errors;
    //        }
    //        finally
    //        {
    //            if (null != command)
    //            {
    //                command.Dispose();
    //                command = null;
    //            }

    //            message = String.Empty;
    //        }
    //    }

    //    public override void Preprocess()
    //    {
    //        // throw new NotImplementedException();
    //    }

    //    public override void Postprocess()
    //    {
    //        // throw new NotImplementedException();
    //    }

    //}
    //public class ValidatePlantEquipChargeTo : PlantLocation_TransactionBaseClass
    //{
    //    public override void PerformLocalValidation()
    //    {
    //        base.PerformLocalValidation();
    //    }
    //    public override void PerformWorkItem()
    //    {
    //        PlantLocation.ValidatePlantEquipChargeTo(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
    //    }

    //    public override void Preprocess()
    //    {
    //        // throw new NotImplementedException();
    //    }

    //    public override void Postprocess()
    //    {
    //        // throw new NotImplementedException();
    //    }

    //}
}
