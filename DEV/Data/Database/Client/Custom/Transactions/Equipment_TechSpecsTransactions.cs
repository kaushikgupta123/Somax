/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;

using Database;
using Database.Business;
using Database.StoredProcedure;
using Common.Enumerations;

namespace Database
{
    public class Equipment_TechSpecs_RetrieveByEquipmentId : Equipment_TechSpecs_TransactionBaseClass
    {
        public List<b_Equipment_TechSpecs> Equipment_TechSpecsList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            List<b_Equipment_TechSpecs> tmpArray = null;

            Equipment_TechSpecs.RetrieveByEquipmentIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            Equipment_TechSpecsList = new List<b_Equipment_TechSpecs>();
            foreach (b_Equipment_TechSpecs tmpObj in tmpArray)
            {
                Equipment_TechSpecsList.Add(tmpObj);
            }
        }
    }

    public class Equipment_TechSpecs_ValidateByClientLookupId : Equipment_TechSpecs_TransactionBaseClass
    {
        public Equipment_TechSpecs_ValidateByClientLookupId()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                List<b_StoredProcValidationError> errors = null;

                Equipment_TechSpecs.ValidateByClientLookupIdFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class Equipment_TechSpecs_RetrieveOfList : AbstractTransactionManager
    {

        public Equipment_TechSpecs_RetrieveOfList()
        {
            // Set the database in which this table resides.
            // This must be called prior to base.PerformLocalValidation(), 
            // since that process will validate that the appropriate 
            // connection string is set.
            UseDatabase = DatabaseTypeEnum.Client;
        }


        public List<b_Equipment_TechSpecs> Equipment_TechSpecsList { get; set; }
        public long ClientId { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            b_Equipment_TechSpecs[] tmpArray = null;
            b_Equipment_TechSpecs o = new b_Equipment_TechSpecs();

            o.RetrieveOfList(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ClientId, ref tmpArray);

            Equipment_TechSpecsList = new List<b_Equipment_TechSpecs>(tmpArray);
        }
    }


}
