/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;


namespace Database
{
    public class PermissionSet_TransactionBaseClass : AbstractTransactionManager
    {
        public PermissionSet_TransactionBaseClass()
        {
            UseDatabase = Common.Enumerations.DatabaseTypeEnum.Client;
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PermissionSet == null)
            {
                string message = "UserData has not been set.";
                throw new Exception(message);
            }
        }

        public b_PermissionSet PermissionSet { get; set; }

        public override void PerformWorkItem()
        {
            // 
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PermissionSet_RetrieveByClientId : PermissionSet_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {

            base.PerformLocalValidation();
            if (PermissionSet.ClientId == 0)
            {
                string message = "PermissionSet has an invalid Client Id.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            PermissionSet.RetrieveByClientIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
}
