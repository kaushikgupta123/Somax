/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using Database.Business;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace Database
{


    public class PartHistory_RetriveByEquipmentId : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_PartHistory> tmpArray = null;


            PartHistory.RetriveByEquipmentIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            PartHistoryList = new List<b_PartHistory>();
            foreach (b_PartHistory tmpObj in tmpArray)
            {
                PartHistoryList.Add(tmpObj);
            }
        }

    }

    public class PartHistory_RetrieveByWorkOrderId : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_PartHistory> tmpArray = null;


            PartHistory.RetrieveByWorkOrderIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            PartHistoryList = new List<b_PartHistory>();
            foreach (b_PartHistory tmpObj in tmpArray)
            {
                PartHistoryList.Add(tmpObj);
            }
        }
    }

    public class PartHistory_ReturnRetrieveByWorkOrderId : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_PartHistory> tmpArray = null;


            PartHistory.RetrieveByReturnWorkOrderIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            PartHistoryList = new List<b_PartHistory>();
            foreach (b_PartHistory tmpObj in tmpArray)
            {
                PartHistoryList.Add(tmpObj);
            }
        }
    }
    public class PartHistory_InventotyReceipt : PartHistory_TransactionBaseClass
        {
            public List<b_PartHistory> PartHistoryList { get; set; }

            public PartHistory_InventotyReceipt()
            {
            }

            public override void PerformLocalValidation()
            {
                base.PerformLocalValidation();
                foreach (b_PartHistory parthistory in PartHistoryList)
                {
                    if (PartHistory.PartHistoryId > 0)
                    {
                        string message = "PartHistory has an invalid ID.";
                        throw new Exception(message);
                    }
                }
            }


            public override void PerformWorkItem()
            {
                foreach (b_PartHistory parthistory in PartHistoryList)
                {
                    parthistory.ClientId = dbKey.Client.ClientId;
                    parthistory.InventoryReceipt(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
                }
            }

            public override void Postprocess()
            {
                base.Postprocess();
                //System.Diagnostics.Debug.Assert(PartHistory.PartHistoryId > 0);
            }
        }




    public class PartHistory_ValidateProcess : PartHistory_TransactionBaseClass
    {
        public PartHistory_ValidateProcess()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;

                PartHistory.ValidateProcessFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PartHistory_ValidateAdd : PartHistory_TransactionBaseClass
    {
        public PartHistory_ValidateAdd()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;

                PartHistory.ValidateAddFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PartHistory_ValidateInventoryReceiptAdd : PartHistory_TransactionBaseClass
    {
        public PartHistory_ValidateInventoryReceiptAdd()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;

                PartHistory.ValidateInventoryReceiptAddFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PartHistory_ValidateInventoryReceiptConfirm : PartHistory_TransactionBaseClass
    {
        public PartHistory_ValidateInventoryReceiptConfirm()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;

                PartHistory.ValidateInventoryReceiptConfirmFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PartHistory_ValidatePhysicalInventoryRecordCount : PartHistory_TransactionBaseClass
    {
        public PartHistory_ValidatePhysicalInventoryRecordCount()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;

                PartHistory.ValidatePhysicalInventoryRecordCountFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PartHistory_WOPartsAdd : PartHistory_TransactionBaseClass
    {
        public PartHistory_WOPartsAdd()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;

                PartHistory.ValidateWOCompletionPartsAddFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PartHistory_WOPartsValidateProcess : PartHistory_TransactionBaseClass
    {
        public PartHistory_WOPartsValidateProcess()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;

                PartHistory.ValidateWOCompletionPartsProcessFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PartHistory_PhysicalInventory : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public PartHistory_PhysicalInventory()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (PartHistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }
        }


        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.PhysicalInventory(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }
        }

        public override void Postprocess()
        {
            base.Postprocess();
            //System.Diagnostics.Debug.Assert(PartHistory.PartHistoryId > 0);
        }
    }

    public class PartHistory_UpdatePartCount : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public PartHistory_UpdatePartCount()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (PartHistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }
        }


        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.UpdatePartCount(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }
        }

        public override void Postprocess()
        {
            base.Postprocess();
            //System.Diagnostics.Debug.Assert(PartHistory.PartHistoryId > 0);
        }
    }

    public class PartHistory_CreateByPartDetails : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (parthistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }

        }
        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.InsertPartHistoryDetailsIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }

        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PartHistory_CreateByPartDetailsV2624 : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (parthistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }

        }
        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.InsertPartHistoryDetailsV2624IntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }

        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PartReturn_CreateByPartDetails : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (parthistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }

        }
        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.InsertPartHistoryReturnDetailsIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }

        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PartHistory_RetrieveByPartId : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_PartHistory> tmpArray = null;


            PartHistory.RetrieveByPartIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            PartHistoryList = new List<b_PartHistory>();
            foreach (b_PartHistory tmpObj in tmpArray)
            {
                PartHistoryList.Add(tmpObj);
            }
        }
    }

    public class PartHistory_RetrieveByServiceOrderId : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_PartHistory> tmpArray = null;


            PartHistory.RetrieveByServiceOrderId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            PartHistoryList = new List<b_PartHistory>();
            foreach (b_PartHistory tmpObj in tmpArray)
            {
                PartHistoryList.Add(tmpObj);
            }
        }

        //public class PartHistory_InventotyReceipt : PartHistory_TransactionBaseClass
        //{
        //    public List<b_PartHistory> PartHistoryList { get; set; }

        //    public PartHistory_InventotyReceipt()
        //    {
        //    }

        //    public override void PerformLocalValidation()
        //    {
        //        base.PerformLocalValidation();
        //        foreach (b_PartHistory parthistory in PartHistoryList)
        //        {
        //            if (PartHistory.PartHistoryId > 0)
        //            {
        //                string message = "PartHistory has an invalid ID.";
        //                throw new Exception(message);
        //            }
        //        }
        //    }


        //    public override void PerformWorkItem()
        //    {
        //        foreach (b_PartHistory parthistory in PartHistoryList)
        //        {
        //            parthistory.ClientId = dbKey.Client.ClientId;
        //            parthistory.InventoryReceipt(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        //        }
        //    }

        //    public override void Postprocess()
        //    {
        //        base.Postprocess();
        //        //System.Diagnostics.Debug.Assert(PartHistory.PartHistoryId > 0);
        //    }
        //}


    }
    public class PartHistory_CreateByPartDetails_V2 : PartHistory_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }
        public override void PerformWorkItem()
        {
            PartHistory.SiteId = dbKey.Personnel.SiteId;
            PartHistory.InsertPartHistoryDetailsIntoDatabase_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #region V2-610
    public class PartHistory_RetrieveForMaintenanceTechinician_V2 : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_PartHistory> tmpArray = null;


            PartHistory.RetrieveForMaintenanceTechinicianFromDatabase_V2(this.Connection, this.Transaction,CallerUserInfoId, CallerUserName, ref tmpArray);

            PartHistoryList = new List<b_PartHistory>();
            foreach (b_PartHistory tmpObj in tmpArray)
            {
                PartHistoryList.Add(tmpObj);
            }
        }

      

    }

    #endregion
    #region  Inventoty Receipt For V2-687
    public class PartHistory_InventotyReceipt_V2 : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public PartHistory_InventotyReceipt_V2()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (PartHistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }
        }


        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.InventoryReceipt_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }
        }

        public override void Postprocess()
        {
            base.Postprocess();
            //System.Diagnostics.Debug.Assert(PartHistory.PartHistoryId > 0);
        }
    }
    #endregion
    #region PartHistory PhysicalInventory V2-687
    public class PartHistory_PhysicalInventory_V2 : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public PartHistory_PhysicalInventory_V2()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (PartHistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }
        }


        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.PhysicalInventory_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }
        }

        public override void Postprocess()
        {
            base.Postprocess();
            //System.Diagnostics.Debug.Assert(PartHistory.PartHistoryId > 0);
        }
    }
    #endregion

    #region  V2-687 Multistoreroom Implementation
    public class PartHistory_CreateByPartDetailsV2ForMultiStoreroom : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (parthistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }

        }
        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.InsertPartHistoryForMultiStoreroom_V2IntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }

        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }

    public class PartReturn_CreateByPartDetailsForMultiStoreroom : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (parthistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }

        }
        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.InsertPartHistoryReturnDetailsForMultiStoreroomIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }

        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PartHistory_UpdatePartCountForMultiStoreroom : PartHistory_TransactionBaseClass
    {
        public List<b_PartHistory> PartHistoryList { get; set; }

        public PartHistory_UpdatePartCountForMultiStoreroom()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                if (PartHistory.PartHistoryId > 0)
                {
                    string message = "PartHistory has an invalid ID.";
                    throw new Exception(message);
                }
            }
        }


        public override void PerformWorkItem()
        {
            foreach (b_PartHistory parthistory in PartHistoryList)
            {
                parthistory.ClientId = dbKey.Client.ClientId;
                parthistory.UpdatePartCountForMultiStoreroom(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }
        }

        public override void Postprocess()
        {
            base.Postprocess();
            //System.Diagnostics.Debug.Assert(PartHistory.PartHistoryId > 0);
        }
    }
    #endregion
    #region V2-751 StoreroomTransfer
    #region Outgoing Transfer
    public class PartHistory_ProcessIssues : PartHistory_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PartHistory.PartHistoryId > 0)
            {
                string message = "StoreroomTransfer has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            PartHistory.ProcessIssue(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
    #region Incoming Transfer
    public class PartHistory_ProcessReceipt : PartHistory_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PartHistory.PartHistoryId > 0)
            {
                string message = "StoreroomTransfer has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            PartHistory.ProcessReceipt(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
    #region Force Complete
    public class PartHistory_StoreroomTransferForceComplete : PartHistory_TransactionBaseClass
    {

        public PartHistory_StoreroomTransferForceComplete()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PartHistory.PartHistoryId > 0)
            {
                string message = "PartHistory has an invalid ID.";
                throw new Exception(message);
            }
        }


        public override void PerformWorkItem()
        {
            PartHistory.ClientId = dbKey.Client.ClientId;
            PartHistory.StoreroomTransferForceComplete(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
    #endregion
    #region V2-1031
    public class PartHistory_CreateByPartDetailsStockOut : PartHistory_TransactionBaseClass
    {
     
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PartHistory.PartId == 0)
            {
                string message = "PartId is an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
                PartHistory.ClientId = dbKey.Client.ClientId;
                PartHistory.InsertPartHistoryDetailsStockOutIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PartHistory_CreateByPartDetailsStockOutForMultiStoreroom : PartHistory_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PartHistory.StoreroomId == 0 || PartHistory.PartId == 0)
            {
                string message = "StoreroomId and PartId are an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            PartHistory.ClientId = dbKey.Client.ClientId;
            PartHistory.InsertPartHistoryDetailsStockOutForMultiStoreroomIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
}