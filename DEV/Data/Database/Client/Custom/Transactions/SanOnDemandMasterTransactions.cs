/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;
using Common.Enumerations;
using System.Data.SqlClient;
using Database.StoredProcedure;

namespace Database
{
    public class SanOnDemandMaster_RetrieveAllForSearch : SanOnDemandMaster_TransactionBaseClass
    {
        public List<b_SanOnDemandMaster> SanOnDemandMasterList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (SanOnDemandMaster.SanOnDemandMasterId > 0)
            {
                string message = "SanOnDemandMaster has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }
        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }
        public override void PerformWorkItem()
        {
            List<b_SanOnDemandMaster> tmpList = null;

            SanOnDemandMaster.RetrieveAllForSearchPage(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);

            SanOnDemandMasterList = tmpList;
        }
    }
    public class SanOnDemandMaster_RetrieveAllForSearch_V2 : SanOnDemandMaster_TransactionBaseClass
    {
        public List<b_SanOnDemandMaster> SanOnDemandMasterList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (SanOnDemandMaster.SanOnDemandMasterId > 0)
            {
                string message = "SanOnDemandMaster has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }
        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }
        public override void PerformWorkItem()
        {
            List<b_SanOnDemandMaster> tmpList = null;

            SanOnDemandMaster.RetrieveAllForSearchPage_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);

            SanOnDemandMasterList = tmpList;
        }
    }
    public class SanOnDemandMaster_CreateByForeignKeys : SanOnDemandMaster_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (SanOnDemandMaster.SanOnDemandMasterId > 0)
            {
                string message = "SanOnDemandMaster has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            SanOnDemandMaster.InsertByForeignKeysIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
            System.Diagnostics.Debug.Assert(SanOnDemandMaster.SanOnDemandMasterId > 0);
        }
    }


    public class SanOnDemandMaster_ValidateClientLookupId : SanOnDemandMaster_TransactionBaseClass
    {
        public SanOnDemandMaster_ValidateClientLookupId()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }
        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;


                SanOnDemandMaster.ValidateByClientLookupIdFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class SanOnDemandMaster_RetrieveBy_SanOnDemandMasterId : SanOnDemandMaster_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (SanOnDemandMaster.SanOnDemandMasterId == 0)
            {
                string message = "Sanitation OnDemand Master has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            SanOnDemandMaster.RetrieveBy_SanOnDemandMasterId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);

        }
    }

    public class SanOnDemandMaster_UpdateBy_SanOnDemandMasterId : SanOnDemandMaster_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (SanOnDemandMaster.SanOnDemandMasterId == 0)
            {
                string message = "Sanitation OnDemand Master has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            SanOnDemandMaster.UpdateBy_SanOnDemandMasterId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            // If no have been made, no change log is created
            if (ChangeLog != null) { ChangeLog.InsertIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName); }
        }
    }

    public class SanOnDemandMaster_RetrieveAllByInactiveFlag : SanOnDemandMaster_TransactionBaseClass
    {
        public List<b_SanOnDemandMaster> SanOnDemandMasterList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (SanOnDemandMaster.SanOnDemandMasterId > 0)
            {
                string message = "SanOnDemandMaster has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }
        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }
        public override void PerformWorkItem()
        {
            List<b_SanOnDemandMaster> tmpList = null;

            SanOnDemandMaster.RetrieveAllForActiveFlag(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);

            SanOnDemandMasterList = tmpList;
        }
    }
}
