/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2014 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;
using Common.Enumerations;
using System.Data.SqlClient;
using Database.StoredProcedure;

namespace Database
{
    public class PurchaseOrder_CreateByForeignKeys : PurchaseOrder_TransactionBaseClass
    {
       //public b_WorkFlowLog objworkflow  b_WorkFlowLog();
        //public b_WorkFlowLog objworkflow { get { return new b_WorkFlowLog(); } set; }
        public b_WorkFlowLog objworkflow { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
           // base.UseTransaction = false;
            PurchaseOrder.InsertByForeignKeysIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, objworkflow);
        }
    }
    public class PurchaseOrder_CreateByForeignKeys_V2 : PurchaseOrder_TransactionBaseClass
    {
        //public b_WorkFlowLog objworkflow  b_WorkFlowLog();
        //public b_WorkFlowLog objworkflow { get { return new b_WorkFlowLog(); } set; }
        public b_WorkFlowLog objworkflow { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            // base.UseTransaction = false;
            PurchaseOrder.InsertByForeignKeysIntoDatabase_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, objworkflow);
        }
    }

    public class PurchaseOrder_ValidateByClientLookupId : PurchaseOrder_TransactionBaseClass
    {
       // public bool CreateMode { get; set; }
       // public string Requestor_PersonnelClientLookupId { get; set; }

        public PurchaseOrder_ValidateByClientLookupId()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                List<b_StoredProcValidationError> errors = null;

                PurchaseOrder.ValidateByClientLookupIdFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class PurchaseOrder_RetrieveByForeignKeys : PurchaseOrder_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.UseTransaction = false;    // moved from PerformWorkItem
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId == 0)
            {
                string message = "Purchase Order ID is invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            //base.UseTransaction = false;  this is too late - connection and txn are started before performworkitem executed
            PurchaseOrder.RetrieveByForeignKeysFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class PurchaseOrder_RetrieveAllForSearch : PurchaseOrder_TransactionBaseClass
    {       
        public Int64 FilterValue { get; set; }
        public List<b_PurchaseOrder> PurchaseOrderList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseOrder> tmpList = null;
            PurchaseOrder.RetrieveAllForSearch(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            //WorkOrder.LoadFromDatabaseWithDepartName(
            PurchaseOrderList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }

    public class PurchaseOrder_RetrieveByClientIDAndSiteIdAndClientLookUpId : PurchaseOrder_TransactionBaseClass
    {

        public List<b_PurchaseOrder> POList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseOrder> tmpList = null;

            PurchaseOrder.RetrieveByClientIDAndSiteIdAndClientLookUpId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);

            POList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PurchaseOrder_UpdateStatus : PurchaseOrder_TransactionBaseClass
    {
      public b_POReceiptHeader receiptheader;

      public override void PerformLocalValidation()
      {
        base.PerformLocalValidation();
        if (PurchaseOrder.PurchaseOrderId == 0)
        {
          string message = "PurchaseOrder has an invalid ID.";
          throw new Exception(message);
        }
      }

      public override void PerformWorkItem()
      {
        PurchaseOrder.UpdateStatus(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, receiptheader);
      }
    }

    public class PurchaseOrderLineItems_Update : PurchaseOrder_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            
        }

        public override void PerformWorkItem()
        {
            PurchaseOrder.UpdatePurchaseOrderLineItemByPurchaseOrderId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            // If no have been made, no change log is created
            if (ChangeLog != null) { ChangeLog.InsertIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName); }
        }
    }


    #region V2-331
    public class PurchaseOrderReceipt_RetrieveChunkSearch : PurchaseOrder_TransactionBaseClass
    {

        public List<b_PurchaseOrder> PurchaseOrderList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseOrder> tmpList = null;
            PurchaseOrder.RetrievePOReceiptChunkSearch(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseOrderList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
    public class PurchaseOrder_ValidateByVendorPartNumberPurchaseRequestUnitOfMeasure : PurchaseOrder_TransactionBaseClass
    {
        public PurchaseOrder_ValidateByVendorPartNumberPurchaseRequestUnitOfMeasure()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                List<b_StoredProcValidationError> errors = null;
                PurchaseOrder.ValidateByVendorPartNumberPurchaseRequestUnitOfMeasure(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }
    //-----------SOM-684---------------------------------------------------------------------
    public class PurchaseOrder_UpdateByForceComplete : PurchaseOrder_TransactionBaseClass
    {
      
        public b_WorkFlowLog objworkflow { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            PurchaseOrder.UpdateByForeignKeysForceComplete(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
    public class PurchaseOrder_RetrieveLookupListBySearchCriteria : AbstractTransactionManager
    {
        public PurchaseOrder_RetrieveLookupListBySearchCriteria()
        {
            base.UseDatabase = DatabaseTypeEnum.Client;
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        //public string PartId { get; set; }
        public string ClientLookupId { get; set; }
        public long SiteId { get; set; }
        public string PurchaseOrderId { get; set; }
        public int PageNumber { get; set; }
        public int ResultsPerPage { get; set; }
        public string OrderColumn { get; set; }
        public string OrderDirection { get; set; }

        // Result Sets
        public List<b_PurchaseOrder> PurchaseOrderList { get; set; }
        public int ResultCount { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand()
                {
                    Connection = this.Connection,
                    Transaction = this.Transaction
                };

                int tmp;

                PurchaseOrderList = usp_PurchaseOrder_RetrieveLookupListBySearchCriteria.CallStoredProcedure(command, dbKey.User.UserInfoId, dbKey.UserName, dbKey.Client.ClientId, ClientLookupId, SiteId,
                     PurchaseOrderId, PageNumber, ResultsPerPage, OrderColumn, OrderDirection, out tmp);

                ResultCount = tmp;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }
    public class PurchaseOrder_RetrieveAll_V2 : AbstractTransactionManager
    {

        public PurchaseOrder_RetrieveAll_V2()
        {
            // Set the database in which this table resides.
            // This must be called prior to base.PerformLocalValidation(), 
            // since that process will validate that the appropriate 
            // connection string is set.
            UseDatabase = DatabaseTypeEnum.Client;
        }


        public List<b_PurchaseOrder> PurchaseOrderList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            b_PurchaseOrder[] tmpArray = null;
            b_PurchaseOrder o = new b_PurchaseOrder();


            // Explicitly set tenant id from dbkey
            o.ClientId = this.dbKey.Client.ClientId;
            o.SiteId = this.dbKey.User.DefaultSiteId;


            o.RetrieveAll_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            PurchaseOrderList = new List<b_PurchaseOrder>(tmpArray);
        }
    }


    public class PurchaseOrder_RetrieveChunkSearch : PurchaseOrder_TransactionBaseClass
    {

        public List<b_PurchaseOrder> PurchaseOrderList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseOrder> tmpList = null;
            PurchaseOrder.RetrieveChunkSearch(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseOrderList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PurchaseOrder_RetrieveByForeignKeys_V2 : PurchaseOrder_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.UseTransaction = false;    // moved from PerformWorkItem
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId == 0)
            {
                string message = "Purchase Order ID is invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            //base.UseTransaction = false;  this is too late - connection and txn are started before performworkitem executed
            PurchaseOrder.RetrieveByForeignKeys_V2FromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
    public class PurchaseOrder_RetrieveAllByPurchaseOrdeV2Print : PurchaseOrder_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            b_PurchaseOrder tmpList = null;
            PurchaseOrder.RetrieveAllByPurchaseOrdeV2Print(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }


    #region Purchase Order Lookuplist chunk search V2-981
    public class PurchaseOrder_RetrieveChunkSearchLookupListV2 : PurchaseOrder_TransactionBaseClass
    {
        public List<b_PurchaseOrder> PurchaseOrderList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseOrder> tmpList = null;
            PurchaseOrder.RetrievePurchaseOrderLookuplistChunkSearchV2(this.Connection, this.Transaction,
                CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseOrderList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion

    #region V2-1073
    public class PurchaseOrder_RetrievePOByAccountReport : PurchaseOrder_TransactionBaseClass
    {

        public List<b_PurchaseOrder> PurchaseOrderList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseOrder> tmpList = null;
            PurchaseOrder.RetrievePOByAccountReport(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseOrderList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion

    #region V2-1079
    public class PurchaseOrder_RetrieveForEDIExport_V2 : PurchaseOrder_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.UseTransaction = false;    // moved from PerformWorkItem
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId == 0)
            {
                string message = "Purchase Order ID is invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            //base.UseTransaction = false;  this is too late - connection and txn are started before performworkitem executed
            PurchaseOrder.RetrieveForEDIExport_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
    public class PurchaseOrder_RetrieveByClientIDAndSiteIdAndClientLookUpId_V2 : PurchaseOrder_TransactionBaseClass
    {

        public List<b_PurchaseOrder> POList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseOrder> tmpList = null;

            PurchaseOrder.RetrieveByClientIDAndSiteIdAndClientLookUpId_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);

            POList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion

    #region V2-1112 PurchaseOrder RetrieveBy EPM PurchaseOrde Print V2 
    public class PurchaseOrder_RetrieveByEPMPurchaseOrdePrintV2 : PurchaseOrder_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseOrder.PurchaseOrderId > 0)
            {
                string message = "PurchaseOrder has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            b_PurchaseOrder tmpList = null;
            PurchaseOrder.RetrieveEPMByPurchaseOrdeV2Print(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
}
