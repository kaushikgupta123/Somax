/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using Database;
using Database.Business;
using System;
using System.Collections.Generic;

namespace Database
{
    public class Equipment_Sensor_Xref_RetriveByEquipmentId : Equipment_Sensor_Xref_TransactionBaseClass
    {
        public List<b_Equipment_Sensor_Xref> Equipment_Sensor_XrefList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            List<b_Equipment_Sensor_Xref> tmpArray = null;

            Equipment_Sensor_Xref.RetrieveByEquipmentId(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            Equipment_Sensor_XrefList = new List<b_Equipment_Sensor_Xref>();

            foreach (b_Equipment_Sensor_Xref tmpObj in tmpArray)
            {
                Equipment_Sensor_XrefList.Add(tmpObj);
            }
        }
    }


    public class Equipment_Sensor_Xref_RetrieveAllEquipmentSensor : Equipment_Sensor_Xref_TransactionBaseClass
    {
        public List<b_Equipment_Sensor_Xref> Equipment_Sensor_XrefList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            List<b_Equipment_Sensor_Xref> tmpArray = null;

            Equipment_Sensor_Xref.RetrieveAllEquipmentSensorFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            Equipment_Sensor_XrefList = new List<b_Equipment_Sensor_Xref>();

            foreach (b_Equipment_Sensor_Xref tmpObj in tmpArray)
            {
                Equipment_Sensor_XrefList.Add(tmpObj);
            }
        }
    }

    public class Equipment_Sensor_Xref_RetriveByExrefId : Equipment_Sensor_Xref_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (Equipment_Sensor_Xref.Equipment_Sensor_XrefId == 0)
            {
                string message = "Equipment_Sensor_Xref has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            Equipment_Sensor_Xref.RetriveByExrefIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }


    //public class Equipment_Sensor_Xref_RetrieveAllActive : Equipment_Sensor_Xref_TransactionBaseClass
    //{
    //    public List<b_Equipment_Sensor_Xref> Equipment_Sensor_XrefList { get; set; }

    //    public override void Preprocess()
    //    {
    //        //throw new NotImplementedException();
    //    }

    //    public override void Postprocess()
    //    {
    //        //throw new NotImplementedException();
    //    }

    //    public override void PerformLocalValidation()
    //    {
    //        base.PerformLocalValidation();
    //    }

    //    public override void PerformWorkItem()
    //    {
    //        base.UseTransaction = false;
    //        List<b_Equipment_Sensor_Xref> tmpArray = null;

    //        Equipment_Sensor_Xref.RetrieveByPMDeatilsFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

    //        Equipment_Sensor_XrefList = new List<b_Equipment_Sensor_Xref>();

    //        foreach (b_Equipment_Sensor_Xref tmpObj in tmpArray)
    //        {
    //            Equipment_Sensor_XrefList.Add(tmpObj);
    //        }
    //    }
    //}

    public class Equipment_Sensor_Xref_RetriveBySensorId : Equipment_Sensor_Xref_TransactionBaseClass
    {

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            Equipment_Sensor_Xref.RetriveBySensorIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
}
