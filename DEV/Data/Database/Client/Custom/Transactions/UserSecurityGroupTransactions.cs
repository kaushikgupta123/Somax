/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using Common.Enumerations;
using Database.Business;


namespace Database.Transactions
{
    public class UserSecurityGroup_RetrieveByUserInfoId : UserSecurityGroup_TransactionBaseClass
    {

        public List<b_UserSecurityGroup> UserSecurityGroupList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            b_UserSecurityGroup[] tmpArray = null;

            UserSecurityGroup.RetrieveByUserInfoIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            UserSecurityGroupList = new List<b_UserSecurityGroup>();
            foreach (b_UserSecurityGroup tmpObj in tmpArray)
            {
                UserSecurityGroupList.Add(tmpObj);
            }
        }
    }

    public class UserSecurityGroup_RetrieveByGroupId : UserSecurityGroup_TransactionBaseClass
    {

        public List<b_UserSecurityGroup> UserSecurityGroupList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            b_UserSecurityGroup[] tmpArray = null;

            UserSecurityGroup.RetrieveByGroupIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            UserSecurityGroupList = new List<b_UserSecurityGroup>();
            foreach (b_UserSecurityGroup tmpObj in tmpArray)
            {
                UserSecurityGroupList.Add(tmpObj);
            }
        }       

    }
    /*******************************Added By Indusnet Technologies**********************/
    public class UserSecurityGroup_CreateFromAdmin : AbstractTransactionManager
    {
        public UserSecurityGroup_CreateFromAdmin()
        {
            UseDatabase = DatabaseTypeEnum.Client;
        }
        public b_UserSecurityGroup usersecuritygroup { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (usersecuritygroup.UserSecurityGroupId > 0)
            {
                string message = "User Security group has an invalid ID.";
                throw new Exception(message);
            }

            CallerUserInfoId = dbKey.User.UserInfoId;
            CallerUserName = dbKey.UserName;
        }

        public override void PerformWorkItem()
        {
            usersecuritygroup.CreateFromAdmin(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Preprocess()
        {

        }

        public override void Postprocess()
        {

        }      
      
    }

    public class UserSecurityGroup_DeleteFromAdmin : AbstractTransactionManager
    {
        public UserSecurityGroup_DeleteFromAdmin()
        {
            UseDatabase = DatabaseTypeEnum.Client;
        }
        public b_UserSecurityGroup usersecuritygroup { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (usersecuritygroup.UserInfoId== 0)
            {
                string message = "UserInfo has an invalid ID.";
                throw new Exception(message);
            }

            CallerUserInfoId = dbKey.User.UserInfoId;
            CallerUserName = dbKey.UserName;
        }

        public override void PerformWorkItem()
        {          
            usersecuritygroup.DeleteFromAdmin(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Preprocess()
        {

        }

        public override void Postprocess()
        {

        }         
    }

    /*******************************End Added By Indusnet Technologies**********************/
}
