/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Data.Database;
using Data.Database.Business;
using Common.Enumerations;
using System.Data.SqlClient;
using Data.Database.StoredProcedure;
using Database;
using Database.Business;

namespace Data.Database
{
    public class ManufacturerMasterr_RetrieveAllForSearch : ManufacturerMaster_TransactionBaseClass
    {
        public List<b_ManufacturerMaster> ManufacturerMasterList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (ManufacturerMaster.ManufacturerMasterId > 0)
            {
                string message = "ManufacturerMaster has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }
        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }
        public override void PerformWorkItem()
        {
            List<b_ManufacturerMaster> tmpList = null;

           //ManufacturerMaster.RetrieveAllForSearchPage(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);

           // ManufacturerMasterList = tmpList;
        }
    }


    public class ManufacturerMaster_RetrieveLookupListBySearchCriteria : AbstractTransactionManager
    {
        public ManufacturerMaster_RetrieveLookupListBySearchCriteria()
        {
            base.UseDatabase = DatabaseTypeEnum.Client;
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        //public string PersonnelId { get; set; }
        public string ClientLookupId { get; set; }
        public string Name { get; set; }
        public long SiteId { get; set; }

        public int PageNumber { get; set; }
        public int ResultsPerPage { get; set; }

        public string OrderColumn { get; set; }
        public string OrderDirection { get; set; }

        // Result Sets
        public List<b_ManufacturerMaster> ManufacturerMasterList { get; set; }
        public int ResultCount { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                // Create the command to use in calling the stored procedures
                command = new SqlCommand()
                {
                    Connection = this.Connection,
                    Transaction = this.Transaction
                };

                int tmp;

                ManufacturerMasterList = usp_ManufacturerMaster_RetrieveLookupListBySearchCriteria.CallStoredProcedure(command, dbKey.User.UserInfoId, dbKey.UserName, dbKey.Client.ClientId, ClientLookupId, Name, 
                        PageNumber, ResultsPerPage, OrderColumn, OrderDirection, out tmp);

                ResultCount = tmp;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }


    public class ManufacturerMasterRetrieveAll_ByInactiveFlag : ManufacturerMaster_TransactionBaseClass
    {
        public List<b_ManufacturerMaster> ManufacturerList { get; set; }
       // public b_ManufacturerMaster Manufacturer { get; set; }
        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformWorkItem()
        {
            b_ManufacturerMaster[] tmpArray = null;

            // Explicitly set id from dbkey
            ManufacturerMaster.ClientId = this.dbKey.Client.ClientId;


            ManufacturerMaster.PartMaster_RetrieveAll_ByInactiveFlag(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            ManufacturerList = new List<b_ManufacturerMaster>(tmpArray);
        }

    }

    public class ManufacturerMaster_ValidateByClientlookupId : ManufacturerMaster_TransactionBaseClass
    {

        public ManufacturerMaster_ValidateByClientlookupId()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                List<b_StoredProcValidationError> errors = null;
                ManufacturerMaster.ValidateByClientLookupId(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }

    }

}
