/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Data.Database;
using Database.Business;
using Common.Enumerations;

namespace Database
{
  //  public class Menu_RetrieveAllCustom : AbstractTransactionManager
  //  {
  //      public Menu_RetrieveAllCustom()
  //      {
  //          // Set the database in which this table resides.
  //          // This must be called prior to base.PerformLocalValidation(), 
  //          // since that process will validate that the appropriate 
  //          // connection string is set.
  //          UseDatabase = DatabaseTypeEnum.Client;
  //      }
  //      public List<b_Menu> MenuList { get; set; }

  //      public override void PerformLocalValidation()
  //      {
  //          base.PerformLocalValidation();            
  //      }

  //      public b_Menu Menu { get; set; }
		//public b_ChangeLog ChangeLog { get; set; }

  //      public override void PerformWorkItem()
  //      {
  //          b_Menu[] tmpList = null;
  //          Menu.RetrieveAllFromDatabaseCustom(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);

  //          MenuList = tmpList.ToList();
  //      }

  //      public override void Preprocess()
  //      {
  //          // throw new NotImplementedException();
  //      }

  //      public override void Postprocess()
  //      {
  //          // throw new NotImplementedException();
  //      }
  //  }

    

    public class Menu_RetrieveAllCustom : Menu_TransactionBaseClass
    {
        public string PackageLevel { get; set; }
        public string BusinessType { get; set; }
        public bool APM { get; set; }
        public bool CMMS { get; set; }
        public bool Sanitation { get; set; }
        public string UserType { get; set; }
        
        public Menu_RetrieveAllCustom()
        {
            // Set the database in which this table resides.
            // This must be called prior to base.PerformLocalValidation(), 
            // since that process will validate that the appropriate 
            // connection string is set.
            UseDatabase = DatabaseTypeEnum.Client;
        }


        public List<b_Menu> MenuList { get; set; }
       
        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_Menu> tmpList = null;

            // Explicitly set tenant id from dbkey
            Menu.ClientId = this.dbKey.Client.ClientId;

            Menu.RetrieveAllFromDatabaseCustom(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList, PackageLevel, BusinessType, APM, CMMS, Sanitation, UserType);

            //MenuList = new List<b_Menu>(tmpArray);
            MenuList = tmpList;
        }
    }

    public class Menu_RetrieveAllCustomAdmin : Menu_TransactionBaseClass
    {
        public string UserType { get; set; }

        public Menu_RetrieveAllCustomAdmin()
        {
            // Set the database in which this table resides.
            // This must be called prior to base.PerformLocalValidation(), 
            // since that process will validate that the appropriate 
            // connection string is set.
            UseDatabase = DatabaseTypeEnum.Client;
        }


        public List<b_Menu> MenuList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_Menu> tmpList = null;

            // Explicitly set tenant id from dbkey
            Menu.ClientId = this.dbKey.Client.ClientId;

            Menu.RetrieveAllFromDatabaseCustomAdmin(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList, UserType);

            //MenuList = new List<b_Menu>(tmpArray);
            MenuList = tmpList;
        }
    }

    public class Menu_RetrieveStatusCountPage : Menu_TransactionBaseClass
    {

        public List<b_Menu> MenuStatusList { get; set; }
        public System.Data.DataTable pelist { get; set; }
        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            //if (Menu.MenuId< 0)
            //{
            //    string message = "Menu has an invalid ID.";
            //    throw new Exception(message);
            //}
        }
        public override void PerformWorkItem()
        {
            List<b_Menu> tmpList = new List<b_Menu>();
            Menu.RetrievePageStatusCount(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            MenuStatusList = tmpList;
        }
        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
}
