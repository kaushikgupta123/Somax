/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2014 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;
using Common.Enumerations;
using System.Data.SqlClient;

namespace Database
{
    public class POReceiptItem_RetrievePOFromParts : POReceiptItem_TransactionBaseClass
    {
        public List<b_POReceiptItem> POReceiptItemList { get; set; }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }
        public override void PerformWorkItem()
        {

            List<b_POReceiptItem> tmpList = null;
            POReceiptItem.RetrievePOFromParts(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref tmpList);

            POReceiptItemList = new List<b_POReceiptItem>();
            foreach (b_POReceiptItem tmpObj in tmpList)
            {
                POReceiptItemList.Add(tmpObj);
            }
        }
        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }

        public class PurchaseOrder_POReceipt : POReceiptItem_TransactionBaseClass
        {

            public override void PerformLocalValidation()
            {
                base.PerformLocalValidation();

            }

            //public b_POReceiptItem Receipt { get; set; }
            public override void PerformWorkItem()
            {
                POReceiptItem.PO_Receipt(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
                // base.UseTransaction = false;
                //  .PO_Receipt(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }

            public override void Preprocess()
            {
                // throw new NotImplementedException();
            }

            public override void Postprocess()
            {
                // throw new NotImplementedException();
            }
        }
        public class POReceiptItem_RetrieveAllNonInvoiced : POReceiptItem_TransactionBaseClass
        {
            public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }
            public List<b_POReceiptItem> POReceiptItemList { get; set; }
            public override void PerformLocalValidation()
            {
                base.PerformLocalValidation();
            }

            public override void PerformWorkItem()
            {

                List<b_POReceiptItem> tmpList = null;
                POReceiptItem.RetrieveAllNonInvoicedList(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref tmpList);

                POReceiptItemList = new List<b_POReceiptItem>();
                foreach (b_POReceiptItem tmpObj in tmpList)
                {
                    POReceiptItemList.Add(tmpObj);
                }
            }
            public override void Preprocess()
            {
                // throw new NotImplementedException();
            }

            public override void Postprocess()
            {
                // throw new NotImplementedException();
            }
        }

        public class PurchaseOrder_POReceiptCreateHeader : POReceiptItem_TransactionBaseClass
        {
            public override void PerformLocalValidation()
            {
                base.PerformLocalValidation();

            }

            //public b_POReceiptItem Receipt { get; set; }
            public override void PerformWorkItem()
            {
                POReceiptItem.Create_POReceiptHeader(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
                // base.UseTransaction = false;
                //  .PO_Receipt(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }

            public override void Preprocess()
            {
                // throw new NotImplementedException();
            }

            public override void Postprocess()
            {
                // throw new NotImplementedException();
            }
        }
        public class PurchaseOrder_POReverseReceipt : POReceiptItem_TransactionBaseClass
        {
            public override void PerformLocalValidation()
            {
                base.PerformLocalValidation();

            }

            //public b_POReceiptItem Receipt { get; set; }
            public override void PerformWorkItem()
            {
                POReceiptItem.PO_ReverseReceipt(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
                // base.UseTransaction = false;
                //  .PO_Receipt(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            }

            public override void Preprocess()
            {
                // throw new NotImplementedException();
            }

            public override void Postprocess()
            {
                // throw new NotImplementedException();
            }
        }

        public class POReceiptRetrieveAllPrint : POReceiptItem_TransactionBaseClass
        {
            public List<b_POReceiptItem> POReceiptItemList { get; set; }
            public override void PerformLocalValidation()
            {
                base.PerformLocalValidation();
            }

            public override void PerformWorkItem()
            {

                b_POReceiptItem tmpList = null;
                POReceiptItem.RetrieveAllPrint(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref tmpList);

            }
            public override void Preprocess()
            {
                // throw new NotImplementedException();
            }

            public override void Postprocess()
            {
                // throw new NotImplementedException();
            }
        }
    }
}
