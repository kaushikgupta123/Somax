/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using Common.Enumerations;
using Database.Business;

namespace Database.Transactions
{
    
    public class ChangeLog_RetrieveByObjectId : ChangeLog_TransactionBaseClass
    {

        public ChangeLog_RetrieveByObjectId()
        {
            // Set the database in which this table resides.
            // This must be called prior to base.PerformLocalValidation(), 
            // since that process will validate that the appropriate 
            // connection string is set.
            UseDatabase = DatabaseTypeEnum.Client;
        }

        public List<b_ChangeLog> ChangeLogList { get; set; }
    
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (ChangeLog.ObjectId == 0 || string.IsNullOrEmpty(ChangeLog.TableName))
            {
                string message = "ChangeLog has an invalid object ID or table name.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
          
            b_ChangeLog[] tmpArray = null;

            ChangeLog.RetrieveByObjectIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            ChangeLogList = new List<b_ChangeLog>(tmpArray);
        }

    }

    public class ChangeLog_RetrieveExtended : ChangeLog_TransactionBaseClass
    {

        public ChangeLog_RetrieveExtended()
        {
            // Set the database in which this table resides.
            // This must be called prior to base.PerformLocalValidation(), 
            // since that process will validate that the appropriate 
            // connection string is set.
            UseDatabase = DatabaseTypeEnum.Client;
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (ChangeLog.ChangeLogId == 0)
            {
                string message = "ChangeLog has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            ChangeLog.RetrieveExtendedByPKFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

}
