/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;
using Common.Enumerations;
using System.Data.SqlClient;

namespace Database
{

    public class SensorAlertProcedure_ValidateByClientLookupId : SensorAlertProcedure_TransactionBaseClass
    {
        public SensorAlertProcedure_ValidateByClientLookupId()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                List<b_StoredProcValidationError> errors = null;
                SensorAlertProcedure.ValidateByClientLookupIdFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }

    }

    public class SensorAlertProcedure_RetrieveAllForSensorAlertData : SensorAlertProcedure_TransactionBaseClass
    {

        public SensorAlertProcedure_RetrieveAllForSensorAlertData()
        {
           
        }
  
        public List<b_SensorAlertProcedure> SensorAlertProcedureList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            b_SensorAlertProcedure[] tmpArray = null;
            b_SensorAlertProcedure o = new b_SensorAlertProcedure();
			
			  
            // Explicitly set tenant id from dbkey
               o.ClientId = this.dbKey.Client.ClientId;
            o.SiteId = this.dbKey.User.DefaultSiteId;

            o.RetrieveAllForSensorAlertData(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            SensorAlertProcedureList = new List<b_SensorAlertProcedure>(tmpArray);
        }
    }
    #region V2-536
    public class SensorAlertProcedure_RetrieveForActiveTableLookupList_V2 : SensorAlertProcedure_TransactionBaseClass
    {

        public List<b_SensorAlertProcedure> SensorAlertProcedureList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (SensorAlertProcedure.SensorAlertProcedureId > 0)
            {
                string message = "Meter has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_SensorAlertProcedure> tmpList = null;
            SensorAlertProcedure.RetrieveForActiveTableLookupList_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);

            SensorAlertProcedureList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
}
