/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;
using Common.Enumerations;

namespace Database
{
    public class AccessControl_TransactionsBaseClass : AbstractTransactionManager
    {

        public List<b_AccessControl> AccessControlList { get; set; }
        public b_AccessControl AccessControl { get; set; }

        public AccessControl_TransactionsBaseClass()
        {
            UseDatabase = DatabaseTypeEnum.Client;
        }
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            CallerUserInfoId = dbKey.User.UserInfoId;
            CallerUserName = dbKey.UserName;
            // Explicitly set tenant id from dbkey
            this.AccessControl.ClientId = this.dbKey.Client.ClientId;
        }

        public override void PerformWorkItem()
        {
            //
        }

        public override void Postprocess()
        {
            throw new NotImplementedException();
        }

        public override void Preprocess()
        {
            throw new NotImplementedException();
        }
    }
    public class AccessControl_IsUserAuthorized : AccessControl_TransactionsBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            
        }

        public override void PerformWorkItem()
        {
            base.UseTransaction = false;
            List<b_AccessControl> temlList = null;
            b_AccessControl tem = null;
            AccessControl.IsUserAuthorized(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tem);
            this.AccessControl = tem;
        }

        public override void Postprocess()
        {
           // throw new NotImplementedException();
        }

        public override void Preprocess()
        {
          //  throw new NotImplementedException();
        }

    }

}
