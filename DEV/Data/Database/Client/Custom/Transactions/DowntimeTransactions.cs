/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;

using Database;
using Database.Business;

namespace Database
{
    public class Downtime_RetrieveByEquipmentId : Downtime_TransactionBaseClass
    {
        public List<b_Downtime> DowntimeList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_Downtime> tmpArray = null;

            Downtime.RetrieveByEquipmentIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            DowntimeList = new List<b_Downtime>();
            foreach (b_Downtime tmpObj in tmpArray)
            {
                DowntimeList.Add(tmpObj);
            }
        }
    }

    //**V2-695
    public class Downtime_RetrieveByWorkOrderId_V2 : Downtime_TransactionBaseClass
    {
        public List<b_Downtime> DowntimeList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_Downtime> tmpArray = null;

            Downtime.RetrieveByWorkOrderId_V2FromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            DowntimeList = new List<b_Downtime>();
            foreach (b_Downtime tmpObj in tmpArray)
            {
                DowntimeList.Add(tmpObj);
            }
        }
    }
    //END

    public class Downtime_ValidateByClientLookupId : Downtime_TransactionBaseClass
    {
        public Downtime_ValidateByClientLookupId()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {

                List<b_StoredProcValidationError> errors = null;


                Downtime.ValidateByClientLookupIdFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName,
                        ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class Downtime_CreatePKForeignKeys : Downtime_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (Downtime.DowntimeId > 0)
            {
                string message = "Downtime has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            Downtime.InsertIntoDatabaseByPKForeignKeys(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
            System.Diagnostics.Debug.Assert(Downtime.DowntimeId > 0);
        }
    }

    public class Downtime_UpdatePKForeignKeys : Downtime_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (Downtime.DowntimeId == 0)
            {
                string message = "Downtime has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            Downtime.UpdateInDatabaseByPKForeignKeys(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class Downtime_RetrieveByWorkOrderId : Downtime_TransactionBaseClass
    {
        public List<b_Downtime> DowntimeList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_Downtime> tmpArray = null;

            Downtime.RetrieveByWorkOrderIdFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            DowntimeList = new List<b_Downtime>();
            foreach (b_Downtime tmpObj in tmpArray)
            {
                DowntimeList.Add(tmpObj);
            }
        }
    }

    #region V2-695
    public class Downtime_RetrieveByEquipmentId_V2 : Downtime_TransactionBaseClass
    {
        public List<b_Downtime> DowntimeList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_Downtime> tmpArray = null;

            Downtime.RetrieveByEquipmentIdFromDatabase_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            DowntimeList = new List<b_Downtime>();
            foreach (b_Downtime tmpObj in tmpArray)
            {
                DowntimeList.Add(tmpObj);
            }
        }
    }
    #endregion
}
