/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2014 by SOMAX Inc.
 * All rights reserved. 
 ***************************************************************************************************
 * Date         JIRA Item Person           Description
 * ===========  ========= ================ ========================================================

 * 2015-Oct-05  SOM-823   Indus Net      Purchase Request Form 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;
using Common.Enumerations;
using System.Data.SqlClient;

namespace Database.Client.Custom.Transactions
{
    public class PurchaseRequest_CreateByForeignKeys : PurchaseRequest_TransactionBaseClass
    {
       
       
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId > 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
           // base.UseTransaction = false;
            PurchaseRequest.InsertByForeignKeysIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    public class PurchaseRequest_ValidateByClientLookupId : PurchaseRequest_TransactionBaseClass
    {
       // public bool CreateMode { get; set; }
       // public string Requestor_PersonnelClientLookupId { get; set; }

        public PurchaseRequest_ValidateByClientLookupId()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {
            SqlCommand command = null;
            string message = String.Empty;

            try
            {
                List<b_StoredProcValidationError> errors = null;

                PurchaseRequest.ValidateByClientLookupIdFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref errors);

                StoredProcValidationErrorList = errors;
            }
            finally
            {
                if (null != command)
                {
                    command.Dispose();
                    command = null;
                }

                message = String.Empty;
            }
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }
    public class PurchaseRequest_RetrieveAllWorkbenchSearch : PurchaseRequest_TransactionBaseClass
    {

        public List<b_PurchaseRequest> purchaseRequestList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            //if (WorkOrder.WorkOrderId > 0)
            //{
            //    string message = "WorkOrder has an invalid ID.";
            //    throw new Exception(message);
            //}
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpList = null;
            PurchaseRequest.RetrieveAllWorkbenchSearch(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            //WorkOrder.LoadFromDatabaseWithDepartName(
            purchaseRequestList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }

        public string Created { get; set; }

        public string StatusDrop { get; set; }

        public long UserInfoId { get; set; }
    }

    public class PurchaseRequest_RetrieveByForeignKeys : PurchaseRequest_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.UseTransaction = false;    // moved from PerformWorkItem
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId == 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            //base.UseTransaction = false;  this is too late - connection and txn are started before performworkitem executed
            PurchaseRequest.RetrieveByForeignKeysFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
  // RKL - 2019-10-17 - Added for Coupa Interface
  public class PurchaseRequest_RetrieveForCoupaExport : PurchaseRequest_TransactionBaseClass
  {

    public override void PerformLocalValidation()
    {
      base.UseTransaction = false;    // moved from PerformWorkItem
      base.PerformLocalValidation();
      if (PurchaseRequest.PurchaseRequestId == 0)
      {
        string message = "PurchaseRequest has an invalid ID.";
        throw new Exception(message);
      }
    }

    public override void PerformWorkItem()
    {
      //base.UseTransaction = false;  this is too late - connection and txn are started before performworkitem executed
      PurchaseRequest.RetrieveForCoupaExport(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
    }
  }

  public class PurchaseRequest_RetrieveAllForSearch : PurchaseRequest_TransactionBaseClass
    {

        public List<b_PurchaseRequest> PurchaseRequestList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId > 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpList = null;
            PurchaseRequest.RetrieveAllForSearch(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);           
            PurchaseRequestList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }

    public class PurchaseRequest_RetrieveChunkSearch : PurchaseRequest_TransactionBaseClass
    {

        public List<b_PurchaseRequest> PurchaseRequestList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId > 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpList = null;
            PurchaseRequest.RetrieveChunkSearch(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseRequestList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }

    public class PurchaseRequest_RetrieveByStatus : PurchaseRequest_TransactionBaseClass
    {

        public List<b_PurchaseRequest> PurchaseRequestList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
         
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpList = null;
            PurchaseRequest.RetrieveByStatus(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseRequestList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }

    public class PurchaseRequest_RetrieveForInformation : PurchaseRequest_TransactionBaseClass
    {

        public List<b_PurchaseRequest> PurchaseRequestList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpList = null;
            PurchaseRequest.RetrieveForInformation(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseRequestList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PurchaseRequest_Convert : PurchaseRequest_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
          
        }
        public override void PerformWorkItem()
        {            
            PurchaseRequest.ConvertPurchaseRequest(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }

    public class PurchaseRequest_ConvertV2 : PurchaseRequest_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }
        public override void PerformWorkItem()
        {
            PurchaseRequest.ConvertPurchaseRequestV2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    public class PurchaseRequest_AutoGeneration : PurchaseRequest_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }
        public override void PerformWorkItem()
        {
            PurchaseRequest.PurchaseRequestAutoGeneration(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    //public class PurchaseOrder_ReceiptSeacrh : PurchaseOrder_TransactionBaseClass
    //{

    //    public List<b_PurchaseOrder> PurchaseOrderList { get; set; }

    //    public override void PerformLocalValidation()
    //    {
    //        base.PerformLocalValidation();
    //        if (PurchaseOrder.PurchaseOrderId > 0)
    //        {
    //            string message = "PurchaseOrder has an invalid ID.";
    //            throw new Exception(message);
    //        }
    //    }
    //    public override void PerformWorkItem()
    //    {
    //        List<b_PurchaseOrder> tmpList = null;
    //        PurchaseOrder.POReceiptSearch(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
    //        //WorkOrder.LoadFromDatabaseWithDepartName(
    //        PurchaseOrderList = tmpList;
    //    }

    //    public override void Postprocess()
    //    {
    //        base.Postprocess();
    //    }
    //}

    public class PurchaseRequest_RetrieveByForeignKeysForReport : PurchaseRequest_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.UseTransaction = false;    // moved from PerformWorkItem
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId == 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            //base.UseTransaction = false;  this is too late - connection and txn are started before performworkitem executed
            PurchaseRequest.RetrieveByForeignKeysFromDatabaseForReport(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }

    //----------------Call--from --APi---SOM -1029-----------------------------------------------------
    public class PurchaseRequest_RetrieveForExtraction : PurchaseRequest_TransactionBaseClass
    {
        public List<b_PurchaseRequest> PRList { get; set; }

        public override void Preprocess()
        {
            //throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            //throw new NotImplementedException();
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }

        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpArray = null;


            PurchaseRequest.RetrieveForExtraction(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpArray);

            PRList = new List<b_PurchaseRequest>();
            foreach (b_PurchaseRequest tmpObj in tmpArray)
            {
                PRList.Add(tmpObj);
            }
        }

    }

    public class PurchaseRequest_UpdateByPKForeignKeys : PurchaseRequest_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId == 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }

        public override void PerformWorkItem()
        {
            PurchaseRequest.UpdateByPKForeignKeysInDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
            // If no have been made, no change log is created
            if (ChangeLog != null) { ChangeLog.InsertIntoDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName); }
        }
    }

    public class PurchaseRequest_RetrieveChunkSearchAutoPRGeneration : PurchaseRequest_TransactionBaseClass
    {

        public List<b_PurchaseRequest> PurchaseRequestList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId > 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpList = null;
            PurchaseRequest.RetrieveChunkSearchForAutoPRGeneration(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseRequestList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }

    public class PurchaseRequest_AutoGeneration_V2 : PurchaseRequest_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }
        public System.Data.DataTable lulist { get; set; }

        public override void PerformWorkItem()
        {
            PurchaseRequest.PurchaseRequestAutoGeneration_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, lulist);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #region V2-693 SOMAX to SAP Purchase request export
    public class PurchaseRequest_RetrieveByIdForExportSAP : PurchaseRequest_TransactionBaseClass
    {
        public override void PerformLocalValidation()
        {
            base.UseTransaction = false;    // moved from PerformWorkItem
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId == 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            //base.UseTransaction = false;  this is too late - connection and txn are started before performworkitem executed
            PurchaseRequest.RetrieveByIdForExportSAP(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);
        }
    }
    #endregion

    #region V2-820
    public class PurchaseRequest_RetrieveAllWorkbenchSearch_V2 : PurchaseRequest_TransactionBaseClass
    {

        public List<b_PurchaseRequest> purchaseRequestList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpList = null;
            PurchaseRequest.RetrieveAllWorkbenchSearch_V2(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            purchaseRequestList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }

        //public string Created { get; set; }

        //public string StatusDrop { get; set; }

        //public long UserInfoId { get; set; }
    }
    #endregion

    #region V2-945
    public class PurchaseRequest_RetrieveAllByPurchaseRequestV2Print : PurchaseRequest_TransactionBaseClass
    {

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId > 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            b_PurchaseRequest tmpList = null;
            PurchaseRequest.RetrieveAllByPurchaseRequestV2Print(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
    #region V2-1196
    public class PurchaseRequest_RetrieveChunkSearchMultiStoreroomAutoPRGeneration : PurchaseRequest_TransactionBaseClass
    {

        public List<b_PurchaseRequest> PurchaseRequestList { get; set; }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            if (PurchaseRequest.PurchaseRequestId > 0)
            {
                string message = "PurchaseRequest has an invalid ID.";
                throw new Exception(message);
            }
        }
        public override void PerformWorkItem()
        {
            List<b_PurchaseRequest> tmpList = null;
            PurchaseRequest.RetrieveChunkSearchForMultiStoreroomAutoPRGeneration(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName, ref tmpList);
            PurchaseRequestList = tmpList;
        }

        public override void Postprocess()
        {
            base.Postprocess();
        }
    }
    #endregion
}
