/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Database;
using Database.Business;


namespace Database
{
    public class WorkOrderFlowTransactions : AbstractTransactionManager
    {
        public WorkOrderFlowTransactions()
        {
            UseDatabase = Common.Enumerations.DatabaseTypeEnum.Client;
            WorkOrderFlow = new b_WorkOrderFlow();
            
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();
            WorkOrderFlow.ClientId = dbKey.Client.ClientId;
        }

        public b_WorkOrderFlow WorkOrderFlow { get; set; }

        public override void PerformWorkItem()
        {
            
        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class WorkOrderFlow_Retrieve : WorkOrderFlowTransactions
    {
        public WorkOrderFlow_Retrieve()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        public override void PerformWorkItem()
        {

            base.UseTransaction = false;

            WorkOrderFlow.RetrieveFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);

        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class WorkOrderFlow_ValidateByClientLookupId : WorkOrderFlowTransactions
    {
        public WorkOrderFlow_ValidateByClientLookupId()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        // Result Sets
        public List<b_StoredProcValidationError> StoredProcValidationErrorList { get; set; }

        public override void PerformWorkItem()
        {

            List<b_StoredProcValidationError> errors = null;

            WorkOrderFlow.ValidateByClientLookupIdFromDatabase(this.Connection, this.Transaction, this.CallerUserInfoId, this.CallerUserName, ref errors);


            StoredProcValidationErrorList = errors;

        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

    public class WorkOrderFlow_RetrievePersonnelIdsByClientLookupIds : WorkOrderFlowTransactions
    {
        public WorkOrderFlow_RetrievePersonnelIdsByClientLookupIds()
        {
        }

        public override void PerformLocalValidation()
        {
            base.PerformLocalValidation();

        }

        public override void PerformWorkItem()
        {

            base.UseTransaction = false;

            WorkOrderFlow.RetrievePersonnelIdsByClientLookupIdsFromDatabase(this.Connection, this.Transaction, CallerUserInfoId, CallerUserName);

        }

        public override void Preprocess()
        {
            // throw new NotImplementedException();
        }

        public override void Postprocess()
        {
            // throw new NotImplementedException();
        }
    }

}
