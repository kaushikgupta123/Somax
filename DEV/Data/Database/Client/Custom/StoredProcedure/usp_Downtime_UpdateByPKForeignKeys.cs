/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using Database.Business;
using Database.SqlClient;
using System;
using System.Data;
using System.Data.SqlClient;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_Downtime_UpdateByPKForeignKeys stored procedure.
    /// </summary>
    public class usp_Downtime_UpdateByPKForeignKeys
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_Downtime_UpdateByPKForeignKeys";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_Downtime_UpdateByPKForeignKeys()
        {
        }

        /// <summary>
        /// Static method to call the usp_Downtime_UpdateByPKForeignKeys stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        /// <param name="clientId">long that contains the value of the @ClientId parameter</param>
        /// <param name="downtimeId">long that contains the value of the @DowntimeId parameter</param>
        /// <param name="siteID">long that contains the value of the @SiteID parameter</param>
        /// <param name="areaId">Nullable<Int64> that contains the value of the @AreaId parameter</param>
        /// <param name="departmentId">Nullable<Int64> that contains the value of the @DepartmentId parameter</param>
        /// <param name="storeRoomId">Nullable<Int64> that contains the value of the @StoreRoomId parameter</param>
        /// <param name="equipmentID">long that contains the value of the @EquipmentID parameter</param>
        /// <param name="actionCode">string that contains the value of the @ActionCode parameter</param>
        /// <param name="dateDown">Nullable<DateTime> that contains the value of the @DateDown parameter</param>
        /// <param name="dateUp">Nullable<DateTime> that contains the value of the @DateUp parameter</param>
        /// <param name="failureCode">string that contains the value of the @FailureCode parameter</param>
        /// <param name="minutesDown">decimal that contains the value of the @MinutesDown parameter</param>
        /// <param name="notes">string that contains the value of the @Notes parameter</param>
        /// <param name="operator_PersonnelID">long that contains the value of the @Operator_PersonnelID parameter</param>
        /// <param name="reasonForDown">string that contains the value of the @ReasonForDown parameter</param>
        /// <param name="workOrderID">long that contains the value of the @WorkOrderID parameter</param>
        /// <param name="updateIndex">int that contains the value of the @UpdateIndex parameter</param>
        /// <param name="updateIndexOut">int that contains the value of the @UpdateIndexOut parameter</param>
        public static void CallStoredProcedure(
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_Downtime obj
        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            SqlParameter updateIndexOut_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetInputParameter(SqlDbType.BigInt, "ParentSiteId", obj.ParentSiteId);
            command.SetInputParameter(SqlDbType.BigInt, "DowntimeId", obj.DowntimeId);
            command.SetInputParameter(SqlDbType.BigInt, "EquipmentId", obj.EquipmentId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ActionCode", obj.ActionCode, 15);
            command.SetInputParameter(SqlDbType.DateTime2, "DateDown", obj.DateDown);
            command.SetInputParameter(SqlDbType.DateTime2, "DateUp", obj.DateUp);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FailureCode", obj.FailureCode, 15);
            command.SetInputParameter(SqlDbType.Decimal, "MinutesDown", obj.MinutesDown);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Notes", obj.Notes, 2047);
            command.SetInputParameter(SqlDbType.BigInt, "Operator_PersonnelId", obj.Operator_PersonnelId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ReasonForDown", obj.ReasonForDown, 15);
            command.SetInputParameter(SqlDbType.BigInt, "WorkOrderId", obj.WorkOrderId);
            command.SetInputParameter(SqlDbType.Int, "UpdateIndex", obj.UpdateIndex);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PersonnelClientLookupId", obj.PersonnelClientLookupId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "WorkOrderClientLookupId", obj.WorkOrderClientLookupId, 15);

            updateIndexOut_parameter = command.Parameters.Add("@UpdateIndexOut", SqlDbType.Int);
            updateIndexOut_parameter.Direction = ParameterDirection.Output;

            // Execute stored procedure.
            command.ExecuteNonQuery();

            obj.UpdateIndex = (int)updateIndexOut_parameter.Value;

            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}