/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;
using Database.Business;
using Database.SqlClient;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_Downtime_Create stored procedure.
    /// </summary>
    public class usp_Downtime_CreateByPKForeignKeys
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_Downtime_CreateByPKForeignKeys";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_Downtime_CreateByPKForeignKeys()
        {
        }

        /// <summary>
        /// Static method to call the usp_Downtime_CreateByPKForeignKeys stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public static void CallStoredProcedure(
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_Downtime obj
        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            int retCode = 0;


            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetInputParameter(SqlDbType.BigInt, "ParentSiteId", obj.ParentSiteId);
            command.SetOutputParameter(SqlDbType.BigInt, "DowntimeId");
            command.SetInputParameter(SqlDbType.BigInt, "EquipmentId", obj.EquipmentId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ActionCode", obj.ActionCode, 15);
            command.SetInputParameter(SqlDbType.DateTime2, "DateDown", obj.DateDown);
            command.SetInputParameter(SqlDbType.DateTime2, "DateUp", obj.DateUp);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FailureCode", obj.FailureCode, 15);
            command.SetInputParameter(SqlDbType.Decimal, "MinutesDown", obj.MinutesDown);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Notes", obj.Notes, 2047);
            command.SetInputParameter(SqlDbType.BigInt, "Operator_PersonnelId", obj.Operator_PersonnelId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ReasonForDown", obj.ReasonForDown, 15);
            command.SetInputParameter(SqlDbType.BigInt, "WorkOrderId", obj.WorkOrderId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "PersonnelClientLookupId", obj.PersonnelClientLookupId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "WorkOrderClientLookupId", obj.WorkOrderClientLookupId, 31);

            // Execute stored procedure.
            command.ExecuteNonQuery();

            obj.DowntimeId = (long)command.Parameters["@DowntimeId"].Value;

            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}