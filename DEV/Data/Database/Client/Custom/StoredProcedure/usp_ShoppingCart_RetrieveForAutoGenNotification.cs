/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND. MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;
using Database.SqlClient;
using Database.Business;
using System.Collections.Generic;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_Area_Create stored procedure.
    /// </summary>
    public class usp_ShoppingCart_RetrieveForAutoGenNotification
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_ShoppingCart_RetrieveForAutoGenNotification";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_ShoppingCart_RetrieveForAutoGenNotification()
        {
        }

        /// <summary>
        /// Static method to call the usp_Area_Create stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        //public static b_Shopping CallStoredProcedure (
        //    SqlCommand command,
        //    long callerUserInfoId,
        //    string callerUserName,
        //    b_ShoppingCart obj
        //)
        //{
        //    b_Shopping records = new b_Shopping();
        //    SqlDataReader reader = null;
        //    SqlParameter RETURN_CODE_parameter = null;
        //    int retCode = 0;

        //    // Setup command.
        //    command.SetProcName(STOREDPROCEDURE_NAME);
        //    RETURN_CODE_parameter = command.GetReturnCodeParameter();
        //    command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
        //    command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
        //    command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
        //    command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
        //    command.SetInputParameter(SqlDbType.BigInt, "PersonnelId", obj.PersonnelId);
        //    command.SetInputParameter(SqlDbType.BigInt, "ProcessLogId", obj.ProcessLogId);
        //    try
        //    {
        //        // Execute stored procedure.
        //        records.CartList = new List<b_ShoppingCart>();
        //        records.CartItemList = new List<b_ShoppingCartLineItem>();
        //        reader = command.ExecuteReader();
        //        while (reader.Read())
        //        {
        //            // Add the record to the list.0
                   
        //            b_ShoppingCart tmpCart = b_Shopping.ProcessCartAutoGenNotification(reader);
        //            tmpCart.ClientId = obj.ClientId;
        //            records.CartList.Add(tmpCart);
                    
        //        }
        //        if (reader.NextResult())
        //        {
        //            while (reader.Read())
        //            {
                       
        //               b_ShoppingCartLineItem tmpItem = b_Shopping.ProcessCartItemsAutoGenNotification(reader);
        //               tmpItem.ClientId = obj.ClientId;
        //               records.CartItemList.Add(tmpItem);
        //            }
        //        }


        //    }
        //    catch(Exception ex)
        //    {

        //    }
        //    finally
        //    {
        //        if (null != reader)
        //        {
        //            if (false == reader.IsClosed)
        //            {
        //                reader.Close();
        //            }
        //            reader = null;
        //        }

        //    }
           
        //    // Process the RETURN_CODE parameter value
        //    retCode = (int) RETURN_CODE_parameter.Value;
        //    AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        //    return records;
        //}
    }
}