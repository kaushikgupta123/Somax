/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Data;
using System.Data.SqlClient;
using Database.Business;
using Database.SqlClient;

namespace Database.StoredProcedure
{
    /// <summary>
    /// Access the usp_WorkOrder_CreateByForeignKeys stored procedure.
    /// </summary>
    public class usp_WorkOrder_CreateByForeignKeys
    {
        /// <summary>
        /// Constants.
        /// </summary>
        private static string STOREDPROCEDURE_NAME = "usp_WorkOrder_CreateByForeignKeys";

        /// <summary>
        /// Default constructor.
        /// </summary>
        public usp_WorkOrder_CreateByForeignKeys()
        {
        }

        /// <summary>
        /// Static method to call the usp_WorkOrder_CreateByForeignKeys stored procedure using SqlClient.
        /// </summary>
        /// <param name="command">SqlCommand object to use to call the stored procedure</param>
        /// <param name="callerUserInfoId">long that identifies the user calling the database</param>
        /// <param name="callerUserName">string that identifies the user calling the database</param>
        public static void CallStoredProcedure(
            SqlCommand command,
            long callerUserInfoId,
            string callerUserName,
            b_WorkOrder obj

        )
        {
            SqlParameter RETURN_CODE_parameter = null;
            SqlParameter chargeTo_Name_parameter = null;
            int retCode = 0;

            // Setup command.
            command.SetProcName(STOREDPROCEDURE_NAME);
            RETURN_CODE_parameter = command.GetReturnCodeParameter();
            command.SetInputParameter(SqlDbType.BigInt, "CallerUserInfoId", callerUserInfoId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CallerUserName", callerUserName, 256);
            command.SetInputParameter(SqlDbType.BigInt, "ClientId", obj.ClientId);
            command.SetOutputParameter(SqlDbType.BigInt, "WorkOrderId");
            command.SetInputParameter(SqlDbType.BigInt, "SiteId", obj.SiteId);
            command.SetInputParameter(SqlDbType.BigInt, "AreaId", obj.AreaId);
            command.SetInputParameter(SqlDbType.BigInt, "DepartmentId", obj.DepartmentId);
            command.SetInputParameter(SqlDbType.BigInt, "StoreRoomId", obj.StoreroomId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ClientLookupId", obj.ClientLookupId, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ActionCode", obj.ActionCode, 15);
            command.SetInputParameter(SqlDbType.Decimal, "ActualDuration", obj.ActualDuration);
            command.SetInputParameter(SqlDbType.DateTime2, "ActualFinishDate", obj.ActualFinishDate);
            command.SetInputParameter(SqlDbType.Decimal, "ActualLaborCosts", obj.ActualLaborCosts);
            command.SetInputParameter(SqlDbType.Decimal, "ActualLaborHours", obj.ActualLaborHours);
            command.SetInputParameter(SqlDbType.Decimal, "ActualMaterialCosts", obj.ActualMaterialCosts);
            command.SetInputParameter(SqlDbType.Decimal, "ActualOutsideServiceCosts", obj.ActualOutsideServiceCosts);
            command.SetInputParameter(SqlDbType.DateTime2, "ActualStartDate", obj.ActualStartDate);
            command.SetInputParameter(SqlDbType.Decimal, "ActualTotalCosts", obj.ActualTotalCosts);
            command.SetInputParameter(SqlDbType.Bit, "ApprovalRequired", obj.ApprovalRequired);
            command.SetInputParameter(SqlDbType.BigInt, "ApproveBy_PersonnelId", obj.ApproveBy_PersonnelId);
            command.SetInputParameter(SqlDbType.DateTime2, "ApproveDate", obj.ApproveDate);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CancelReason", obj.CancelReason, 15);
            command.SetInputParameter(SqlDbType.BigInt, "ChargeToId", obj.ChargeToId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ChargeType", obj.ChargeType, 15);
            command.SetInputParameter(SqlDbType.BigInt, "CloseBy_PersonnelId", obj.CloseBy_PersonnelId);
            command.SetInputParameter(SqlDbType.DateTime2, "CloseDate", obj.CloseDate);
            command.SetInputParameter(SqlDbType.Bit, "CompleteAllTasks", obj.CompleteAllTasks);
            command.SetInputParameter(SqlDbType.BigInt, "CompleteBy_PersonnelId", obj.CompleteBy_PersonnelId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CompleteComments", obj.CompleteComments,256);
            command.SetInputParameter(SqlDbType.DateTime2, "CompleteDate", obj.CompleteDate);
            command.SetInputParameter(SqlDbType.BigInt, "Creator_PersonnelId", obj.Creator_PersonnelId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Crew", obj.Crew, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Description", obj.Description, 1073741823);
            command.SetInputParameter(SqlDbType.Bit, "DownRequired", obj.DownRequired);
            command.SetInputParameter(SqlDbType.Bit, "EquipDown", obj.EquipDown);
            command.SetInputParameter(SqlDbType.DateTime2, "EquipDownDate", obj.EquipDownDate);
            command.SetInputParameter(SqlDbType.Decimal, "EquipDownHours", obj.EquipDownHours);
            command.SetInputParameter(SqlDbType.DateTime2, "EquipUpDate", obj.EquipUpDate);
            command.SetInputParameter(SqlDbType.Decimal, "EstimatedLaborCosts", obj.EstimatedLaborCosts);
            command.SetInputParameter(SqlDbType.Decimal, "EstimatedLaborHours", obj.EstimatedLaborHours);
            command.SetInputParameter(SqlDbType.Decimal, "EstimatedMaterialCosts", obj.EstimatedMaterialCosts);
            command.SetInputParameter(SqlDbType.Decimal, "EstimatedOutsideServiceCosts", obj.EstimatedOutsideServiceCosts);
            command.SetInputParameter(SqlDbType.Decimal, "EstimatedPurchaseMaterialCosts", obj.EstimatedPurchaseMaterialCosts);
            command.SetInputParameter(SqlDbType.Decimal, "EstimatedTotalCosts", obj.EstimatedTotalCosts);
            command.SetStringInputParameter(SqlDbType.NVarChar, "FailureCode", obj.FailureCode, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "JobPlan", obj.JobPlan, 1073741823);
            command.SetInputParameter(SqlDbType.BigInt, "Labor_AccountId", obj.Labor_AccountId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Location", obj.Location, 63);
            command.SetInputParameter(SqlDbType.BigInt, "Material_AccountId", obj.Material_AccountId);
            command.SetInputParameter(SqlDbType.BigInt, "MeterId", obj.MeterId);
            command.SetInputParameter(SqlDbType.Decimal, "MeterReadingDone", obj.MeterReadingDone);
            command.SetInputParameter(SqlDbType.Decimal, "MeterReadingDue", obj.MeterReadingDue);
            command.SetInputParameter(SqlDbType.BigInt, "Other_AccountId", obj.Other_AccountId);
            command.SetInputParameter(SqlDbType.BigInt, "Planner_PersonnelId", obj.Planner_PersonnelId);
            command.SetInputParameter(SqlDbType.BigInt, "PrevMaintBatchId", obj.PrevMaintBatchId);
            command.SetInputParameter(SqlDbType.Int, "PrimaveraProjectNumber", obj.PrimaveraProjectNumber);
            command.SetInputParameter(SqlDbType.Int, "Printed", obj.Printed);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Priority", obj.Priority, 15);
            command.SetInputParameter(SqlDbType.BigInt, "ProjectId", obj.ProjectId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ReasonforDown", obj.ReasonforDown, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ReasonNotDone", obj.ReasonNotDone, 15);
            command.SetInputParameter(SqlDbType.BigInt, "ReleaseBy_PersonnelId", obj.ReleaseBy_PersonnelId);
            command.SetInputParameter(SqlDbType.DateTime2, "ReleaseDate", obj.ReleaseDate);
            command.SetInputParameter(SqlDbType.DateTime2, "RequestDate", obj.RequestDate);
            command.SetInputParameter(SqlDbType.BigInt, "Requestor_PersonnelId", obj.Requestor_PersonnelId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RequestorLocation", obj.RequestorLocation, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RequestorPhone", obj.RequestorPhone, 31);
            command.SetInputParameter(SqlDbType.DateTime2, "RequiredDate", obj.RequiredDate);
            command.SetInputParameter(SqlDbType.Int, "RIMEAssetCriticality", obj.RIMEAssetCriticality);
            command.SetInputParameter(SqlDbType.Int, "RIMEPriority", obj.RIMEPriority);
            command.SetInputParameter(SqlDbType.Int, "RIMEWorkClass", obj.RIMEWorkClass);
            command.SetInputParameter(SqlDbType.Decimal, "ScheduledDuration", obj.ScheduledDuration);
            command.SetInputParameter(SqlDbType.DateTime2, "ScheduledFinishDate", obj.ScheduledFinishDate);
            command.SetInputParameter(SqlDbType.DateTime2, "ScheduledStartDate", obj.ScheduledStartDate);
            command.SetInputParameter(SqlDbType.BigInt, "Scheduler_PersonnelId", obj.Scheduler_PersonnelId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Section", obj.Section, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Shift", obj.Shift, 15);
            command.SetInputParameter(SqlDbType.DateTime2, "SignOffDate", obj.SignOffDate);
            command.SetInputParameter(SqlDbType.BigInt, "SignoffBy_PersonnelId", obj.SignoffBy_PersonnelId);
            command.SetInputParameter(SqlDbType.BigInt, "SourceId", obj.SourceId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SourceType", obj.SourceType, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Status", obj.Status,15);
            command.SetInputParameter(SqlDbType.Decimal, "SuspendDuration", obj.SuspendDuration);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Type", obj.Type, 15);
            command.SetInputParameter(SqlDbType.BigInt, "WorkAssigned_PersonnelId", obj.WorkAssigned_PersonnelId);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Requestor_PersonnelClientLookupId", obj.Requestor_PersonnelClientLookupId, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Creator_PersonnelClientLookupId", obj.Creator_PersonnelClientLookupId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ChargeToClientLookupId", obj.ChargeToClientLookupId, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ApproveBy_PersonnelClientLookupId", obj.ApproveBy_PersonnelClientLookupId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Planner_PersonnelClientLookupId", obj.Planner_PersonnelClientLookupId, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Scheduler_PersonnelClientLookupId", obj.Scheduler_PersonnelClientLookupId, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "SignoffBy_PersonnelClientLookupId", obj.SignoffBy_PersonnelClientLookupId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "WorkAssigned_PersonnelClientLookupId", obj.WorkAssigned_PersonnelClientLookupId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CompleteBy_PersonnelClientLookupId", obj.CompleteBy_PersonnelClientLookupId, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "CloseBy_PersonnelClientLookupId", obj.CloseBy_PersonnelClientLookupId, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "ReleaseBy_PersonnelClientLookupId", obj.ReleaseBy_PersonnelClientLookupId, 31);
            command.SetInputParameter(SqlDbType.Bit, "EmergencyWorkOrder", obj.EmergencyWorkOrder);
            chargeTo_Name_parameter = command.Parameters.Add("@ChargeTo_Name", SqlDbType.NVarChar, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "Category", obj.Category, 15);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RequestorName", obj.RequestorName, 63);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RequestorPhoneNumber", obj.RequestorPhoneNumber, 31);
            command.SetStringInputParameter(SqlDbType.NVarChar, "RequestorEmail", obj.RequestorEmail, 255);
            chargeTo_Name_parameter.Direction = ParameterDirection.Output;


            // Execute stored procedure.
            command.ExecuteNonQuery();

            obj.ChargeTo_Name = (string)chargeTo_Name_parameter.Value;

            if (!string.IsNullOrEmpty(command.Parameters["@WorkOrderId"].Value.ToString()))
            {
                obj.WorkOrderId = (long)command.Parameters["@WorkOrderId"].Value;
            }

            // Process the RETURN_CODE parameter value
            retCode = (int)RETURN_CODE_parameter.Value;
            AbstractTransactionManager.CheckReturnCodeStatus(STOREDPROCEDURE_NAME, retCode);
        }
    }
}
