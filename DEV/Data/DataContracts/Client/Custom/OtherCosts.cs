/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

using Database;
using Database.Business;
using Database.Client.Custom.Transactions;

namespace DataContracts
{

    public partial class OtherCosts : DataContractBase, IStoredProcedureValidation
    {
        public List<b_OtherCosts> OtherList { get; set; }
        public string VendorClientLookupId { get; set; }
        public decimal TotalPartCost { get; set; }
        public decimal TotalCraftCost { get; set; }
        public decimal TotalExternalCost { get; set; }
        public decimal TotalInternalCost { get; set; }
        public decimal TotalCost { get; set; }
        public decimal TotalSummeryCost { get; set; }
        public static List<OtherCosts> UpdateFromDatabaseObjectList(List<b_OtherCosts> dbObjs)
        {
            List<OtherCosts> result = new List<OtherCosts>();

            foreach (b_OtherCosts dbObj in dbObjs)
            {
                OtherCosts tmp = new OtherCosts();
                tmp.UpdateFromExtendedDatabaseObject(dbObj);
                tmp.TotalCost = Convert.ToDecimal(dbObj.UnitCost * dbObj.Quantity);
                result.Add(tmp);
            }
            return result;
        }
        public void UpdateFromExtendedDatabaseObject(b_OtherCosts dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.VendorClientLookupId = string.IsNullOrEmpty(dbObj.VendorClientLookupId) ? "" : dbObj.VendorClientLookupId;
            this.TotalPartCost = dbObj.TotalPartCost;
            this.TotalCraftCost = dbObj.TotalCraftCost;
            this.TotalExternalCost = dbObj.TotalExternalCost;
            this.TotalInternalCost = dbObj.TotalInternalCost;
            this.TotalSummeryCost = this.TotalPartCost + this.TotalCraftCost + this.TotalExternalCost + this.TotalInternalCost;
        }

        public List<OtherCosts> SummeryRetriveByObjectId(DatabaseKey dbKey)
        {
            OtherCosts_SummeryRetrieveByObjectId trans = new OtherCosts_SummeryRetrieveByObjectId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.OtherCosts = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return OtherCosts.UpdateFromDatabaseObjectList(trans.OtherCostsList);
        }

        public List<b_OtherCosts> ToDatabaseObjectList()
        {
            List<b_OtherCosts> dbObj = new List<b_OtherCosts>();
            dbObj = this.OtherList;
            return dbObj;
        }




        public List<OtherCosts> RetriveByObjectId(DatabaseKey dbKey)
        {
            OtherCosts_RetrieveByObjectId trans = new OtherCosts_RetrieveByObjectId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.OtherCosts = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return OtherCosts.UpdateFromDatabaseObjectList(trans.OtherCostList);
        }

       

        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            //WorkOrderSchedule_ValidateByClientLookupId trans = new WorkOrderSchedule_ValidateByClientLookupId()
            //{
            //    CallerUserInfoId = dbKey.User.UserInfoId,
            //    CallerUserName = dbKey.UserName,
            //};
            //trans.WorkOrderTask = this.ToDatabaseObject();            
            //trans.dbKey = dbKey.ToTransDbKey();
            //trans.Execute();

            List<StoredProcValidationError> errors = new List<StoredProcValidationError>();

            //if (trans.StoredProcValidationErrorList != null)
            //{
            //    foreach (b_StoredProcValidationError error in trans.StoredProcValidationErrorList)
            //    {
            //        StoredProcValidationError tmp = new StoredProcValidationError();
            //        tmp.UpdateFromDatabaseObject(error);
            //        errors.Add(tmp);
            //    }
            //}

            return errors;
        }

        public List<OtherCosts> RetriveByTypeAndObjectId(DatabaseKey dbKey)
        {
            OtherCosts_RetrieveByTypeAndObjectId trans = new OtherCosts_RetrieveByTypeAndObjectId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.OtherCosts = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return OtherCosts.UpdateFromDatabaseObjectList(trans.OtherCostList);
        }


        public List<OtherCosts> RetrieveByObjectIdandOtherCostId(DatabaseKey dbKey)
        {
            OtherCosts_RetrieveByObjectIdandOtherCostId trans = new OtherCosts_RetrieveByObjectIdandOtherCostId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.OtherCosts = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return OtherCosts.UpdateFromDatabaseObjectList(trans.OtherCostList);
        }


        public void UpdateFromDatabaseObjectOtherCostsPrintExtended(b_OtherCosts dbObj)
        {
            //  this.UpdateFromDatabaseObject(dbObj);
            this.VendorClientLookupId = string.IsNullOrEmpty(dbObj.VendorClientLookupId) ? "" : dbObj.VendorClientLookupId;
            this.ObjectId = dbObj.ObjectId;
            this.Description = dbObj.Description;
            this.UnitCost = dbObj.UnitCost;
            this.Quantity = dbObj.Quantity;
            this.Source = dbObj.Source;
            this.TotalCost = Convert.ToDecimal(dbObj.UnitCost * dbObj.Quantity);
            this.VendorClientLookupId = string.IsNullOrEmpty(dbObj.VendorClientLookupId) ? "" : dbObj.VendorClientLookupId;
            this.TotalPartCost = dbObj.TotalPartCost;
            this.TotalCraftCost = dbObj.TotalCraftCost;
            this.TotalExternalCost = dbObj.TotalExternalCost;
            this.TotalInternalCost = dbObj.TotalInternalCost;
            this.TotalSummeryCost = this.TotalPartCost + this.TotalCraftCost + this.TotalExternalCost + this.TotalInternalCost;
            this.TotalCost = Convert.ToDecimal(dbObj.UnitCost * dbObj.Quantity);

        }


    }
}
