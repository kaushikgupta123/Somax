/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Contact table.
    /// </summary>
    public partial class AccessControl : DataContractBase 
    {
        #region  Properties
        public Int64 ClientId { get; set; }
        public Int64 AccessControlId { get; set; }
        public Int64 SiteId { get; set; }
        public Int64 UserInfoId { get; set; }
        public Int64 PersonnelId { get; set; }
        public string ControlType { get; set; }
        public bool Enabled { get; set; }
        public bool IsAuthorized { get; set; }
        #endregion
        #region public Methods
        public bool IsUserAuthorized(DatabaseKey dbKey)
        {
            AccessControl_IsUserAuthorized trans = new AccessControl_IsUserAuthorized()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.AccessControl = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            IsAuthorized = trans.AccessControl.IsAuthorized;
            return (UpdateFromDatabaseObjectList(trans.AccessControl));

        }
        public b_AccessControl ToDatabaseObject()
        {
            b_AccessControl dbObj = new b_AccessControl();
            dbObj.ClientId = this.ClientId;
            dbObj.AccessControlId = this.AccessControlId;
            dbObj.SiteId = this.SiteId;
            dbObj.UserInfoId = this.UserInfoId;
            dbObj.PersonnelId = this.PersonnelId;
            dbObj.ControlType = this.ControlType;
            dbObj.Enabled = this.Enabled;
            return dbObj;
        }
        public static bool UpdateFromDatabaseObjectList(b_AccessControl dbObj)
        {                     
                AccessControl tmp = new AccessControl();
                {
                    tmp.ClientId = dbObj.ClientId;
                    tmp.AccessControlId = dbObj.AccessControlId;
                    tmp.SiteId = dbObj.SiteId;
                    tmp.PersonnelId = dbObj.PersonnelId;
                    tmp.UserInfoId = dbObj.UserInfoId;
                    tmp.ControlType = dbObj.ControlType;
                    tmp.Enabled = dbObj.Enabled;
                    tmp.IsAuthorized = dbObj.IsAuthorized;
                
                } 
                          
          
            return tmp.IsAuthorized;
        }
        #endregion



    }
}
