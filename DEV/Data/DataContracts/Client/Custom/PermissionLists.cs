/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the LoginAuditing table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PermissionLists : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PermissionLists()
        {
            Initialize();
        }

        private void UpdateFromDatabaseObject(b_PermissionLists dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.Sites = dbObj.Sites;
            this.Areas = dbObj.Areas;
            this.Departments = dbObj.Departments;
            this.Storerooms = dbObj.Storerooms;

            this.SiteList = new List<KeyValuePair<string,string>>();
            if (this.Sites != null)
            {
                foreach (b_Site li in this.Sites)
                {
                    Site site = new Site();
                    site.UpdateFromDatabaseObject(li);
                    this.SiteList.Add(new KeyValuePair<string, string>(li.SiteId.ToString(), site.FullName));
                }
            }
        
            this.AreaList = new List<KeyValuePair<string, string>>();
            if (this.Areas != null)
            {
                foreach (b_Area li in this.Areas)
                {
                    Area area = new Area();
                    area.UpdateFromDatabaseObject(li);
                    this.AreaList.Add(new KeyValuePair<string, string>(li.AreaId.ToString(), area.Description));
                }
            }

            this.DepartmentList = new List<KeyValuePair<string, string>>();
            if (this.Departments != null)
            {
                foreach (b_Department li in this.Departments)
                {
                    Department department = new Department();
                    department.UpdateFromDatabaseObject(li);
                    this.DepartmentList.Add(new KeyValuePair<string, string>(li.DepartmentId.ToString(), department.FullName));
                }
            }

            this.StoreroomList = new List<KeyValuePair<string, string>>();
            if (this.Storerooms !=  null)
            {
                foreach (b_Storeroom li in this.Storerooms)
                {
                    Storeroom storeroom = new Storeroom();
                    storeroom.UpdateFromDatabaseObject(li);
                    this.StoreroomList.Add(new KeyValuePair<string, string>(li.StoreroomId.ToString(), storeroom.FullName));
                }
            }
        }

        private void Initialize()
        {
            b_PermissionLists dbObj = new b_PermissionLists();
            UpdateFromDatabaseObject(dbObj);
        }

        public b_PermissionLists ToDatabaseObject()
        {
            b_PermissionLists dbObj = new b_PermissionLists();
            dbObj.ClientId = this.ClientId;
            this.Sites = dbObj.Sites;
            this.Areas = dbObj.Areas;
            this.Departments = dbObj.Departments;
            this.Storerooms = dbObj.Storerooms;
            return dbObj;
        }

        #endregion

        #region Transaction Methods
        public void RetreiveLists(DatabaseKey dbKey)
        {
            Database.PermissionLists trans = new Database.PermissionLists()
            {
                dbKey = dbKey.ToTransDbKey()
            };
            trans.Execute();
            b_PermissionLists temp = trans.result;
            this.UpdateFromDatabaseObject(temp);
        }
        #endregion

        public long ClientId { get; set; }
        public List<KeyValuePair<string, string>> SiteList { get; set; }
        public List<KeyValuePair<string, string>> AreaList { get; set; }
        public List<KeyValuePair<string, string>> DepartmentList { get; set; }
        public List<KeyValuePair<string, string>> StoreroomList { get; set; }
        public List<b_Site> Sites { get; set; }
        public List<b_Area> Areas { get; set; }
        public List<b_Department> Departments { get; set; }
        public List<b_Storeroom> Storerooms { get; set; }
    }
}
