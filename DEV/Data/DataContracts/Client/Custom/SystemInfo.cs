/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System.Collections.Generic;
using Database.Business;
using Database.Transactions;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SystemInfo table.
    /// </summary>
    public partial class SystemInfo : DataContractBase, IStoredProcedureValidation
    {
        #region Properties    
        string ValidateFor = string.Empty;
        private bool m_validateClientLookupId;
        #endregion
        public List<SystemInfo> RetrieveSystemInfoByClientIdSiteId(DatabaseKey dbKey)
        {
            RetrieveSystemInfoByClientIdSiteId trans = new RetrieveSystemInfoByClientIdSiteId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.SystemInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SystemInfo);
            List<SystemInfo> SystemInfoList = new List<SystemInfo>();
            foreach (b_SystemInfo ln in trans.SystemInfoList)
            {
                SystemInfo tmpSystemInfo = new SystemInfo()
                {
                    SystemInfoId = ln.SystemInfoId,
                    ClientId = ln.ClientId,
                    SiteId = ln.SiteId,
                    Description = ln.Description,
                    InactiveFlag = ln.InactiveFlag,
                    ClientLookupId = ln.ClientLookupId,
                };
                SystemInfoList.Add(tmpSystemInfo);
            }
            return SystemInfoList;
        }
        public void RetrieveBySystemInfoId(DatabaseKey dbKey)
        {
            RetrieveBySystemInfoId trans = new RetrieveBySystemInfoId();
            trans.SystemInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SystemInfo);
        }

        public List<SystemInfo> RetrieveByInActiveFlag(DatabaseKey dbKey)
        {
            RetrieveByInActiveFlag trans = new RetrieveByInActiveFlag()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.SystemInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SystemInfo);
            List<SystemInfo> SystemInfoList = new List<SystemInfo>();
            foreach (b_SystemInfo ln in trans.SystemInfoList)
            {
                SystemInfo tmpSystemInfo = new SystemInfo()
                {
                    SystemInfoId = ln.SystemInfoId,
                    ClientId = ln.ClientId,
                    SiteId = ln.SiteId,
                    Description = ln.Description,
                    InactiveFlag = ln.InactiveFlag,
                    ClientLookupId = ln.ClientLookupId,
                };
                SystemInfoList.Add(tmpSystemInfo);
            }
            return SystemInfoList;
        }

      
        public bool ValidateNewClientLookUpId(DatabaseKey dbKey)
        {
            ValidateFor = "ValidateNewClientLookUpId";
            Validate<SystemInfo>(dbKey);
            return IsValid;
        }
        public bool ValidateOldClientLookUpId(DatabaseKey dbKey)
        {
            ValidateFor = "ValidateOldClientLookUpId";
            Validate<SystemInfo>(dbKey);
            return IsValid;
        }
        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            List<StoredProcValidationError> errors = new List<StoredProcValidationError>();


            if (ValidateFor == "ValidateNewClientLookUpId")
            {
                ValidateNewClientLookupIdSystemInfoTransaction vtrans = new ValidateNewClientLookupIdSystemInfoTransaction()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                vtrans.SystemInfo = this.ToDatabaseObject();
                vtrans.dbKey = dbKey.ToTransDbKey();
                vtrans.Execute();
                if (vtrans.StoredProcValidationErrorList != null)
                {
                    foreach (b_StoredProcValidationError error in vtrans.StoredProcValidationErrorList)
                    {
                        StoredProcValidationError tmp = new StoredProcValidationError();
                        tmp.UpdateFromDatabaseObject(error);
                        errors.Add(tmp);
                    }
                }
            }
            else if (ValidateFor == "ValidateOldClientLookUpId")
            {
                ValidateOldClientLookupIdSystemInfoTransaction vtrans = new ValidateOldClientLookupIdSystemInfoTransaction()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                vtrans.SystemInfo = this.ToDatabaseObject();
                vtrans.dbKey = dbKey.ToTransDbKey();
                vtrans.Execute();
                if (vtrans.StoredProcValidationErrorList != null)
                {
                    foreach (b_StoredProcValidationError error in vtrans.StoredProcValidationErrorList)
                    {
                        StoredProcValidationError tmp = new StoredProcValidationError();
                        tmp.UpdateFromDatabaseObject(error);
                        errors.Add(tmp);
                    }
                }
            }
            return errors;
        }

        public List<SystemInfo> RetrieveAllCustom(DatabaseKey dbKey)
        {
            SystemInfo_RetrieveAllCustom trans = new SystemInfo_RetrieveAllCustom()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.SystemInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return SystemInfo.UpdateFromDatabaseObjectList(trans.SystemInfoList);
        }
        public static List<SystemInfo> UpdateFromDatabaseObjectList(List<b_SystemInfo> dbObjs)
        {
            List<SystemInfo> result = new List<SystemInfo>();

            foreach (b_SystemInfo dbObj in dbObjs)
            {
                SystemInfo tmp = new SystemInfo();
                tmp.UpdateFromDatabaseObject(dbObj);
                result.Add(tmp);

            }
            return result;
        }

    }
}
