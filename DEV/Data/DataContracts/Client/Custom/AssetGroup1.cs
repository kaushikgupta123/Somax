/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections.Generic;
using Database.Business;
using Database.Transactions;
using Database;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Department table.
    /// </summary>
    public partial class AssetGroup1 : DataContractBase, IStoredProcedureValidation
    {
        #region Properties
        public string ValidateFor = string.Empty;
        public string ObjectName { get; set; }
        public Int64 ObjectId { get; set; }

        public string ClientLookup_Desc { get; set; }
        #endregion

        public List<AssetGroup1> RetrieveAssetGroup1ByClientIdSiteId(DatabaseKey dbKey)
        {
            RetrieveAssetGroup1ByClientIdSiteId trans = new RetrieveAssetGroup1ByClientIdSiteId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.AssetGroup1 = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.AssetGroup1);
            List<AssetGroup1> AssetGroup1List = new List<AssetGroup1>();
            foreach (b_AssetGroup1 Asset in trans.AssetGroup1List)
            {
                AssetGroup1 tmpAssetGroup1 = new AssetGroup1()
                {
                    AssetGroup1Id = Asset.AssetGroup1Id,
                    ClientId = Asset.ClientId,
                    SiteId = Asset.SiteId,
                    Description = Asset.Description,
                    InactiveFlag = Asset.InactiveFlag,
                    ClientLookupId = Asset.ClientLookupId,
                    ClientLookup_Desc = Asset.ClientLookup_Desc
                };
                AssetGroup1List.Add(tmpAssetGroup1);
            }
            return AssetGroup1List;
        }


        public AssetGroup1 RetrieveAssetGroup1ByAssetGroup1Id(DatabaseKey dbKey)
        {
            Retrieve_AssetGroup1ByAssetGroup1Id trans = new Retrieve_AssetGroup1ByAssetGroup1Id()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.AssetGroup1 = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.AssetGroup1);
            List<AssetGroup1> AssetGroup1List = new List<AssetGroup1>();
            if(trans.AssetGroup1List!=null && trans.AssetGroup1List.Count>0)
            {
                foreach (b_AssetGroup1 Asset in trans.AssetGroup1List)
                {
                    AssetGroup1 tmpAssetGroup1 = new AssetGroup1()
                    {
                        AssetGroup1Id = Asset.AssetGroup1Id,
                        ClientId = Asset.ClientId,
                        SiteId = Asset.SiteId,
                        Description = Asset.Description,
                        InactiveFlag = Asset.InactiveFlag,
                        ClientLookupId = Asset.ClientLookupId,
                        ClientLookup_Desc = Asset.ClientLookup_Desc

                    };
                    AssetGroup1List.Add(tmpAssetGroup1);

                    this.AssetGroup1Id = trans.AssetGroup1List[0].AssetGroup1Id;
                    this.ClientId = trans.AssetGroup1List[0].ClientId;
                    this.SiteId = trans.AssetGroup1List[0].SiteId;
                    this.Description = trans.AssetGroup1List[0].Description;
                    this.InactiveFlag = trans.AssetGroup1List[0].InactiveFlag;
                    this.ClientLookupId = trans.AssetGroup1List[0].ClientLookupId;
                    this.ClientLookup_Desc = trans.AssetGroup1List[0].ClientLookup_Desc;
                }
            }
            return this;
        }
        public List<AssetGroup1> RetrieveAssetGroup1ByByInActiveFlag_V2(DatabaseKey dbKey)
        {
            Retrieve_AssetGroup1ByInActiveFlag_V2 trans = new Retrieve_AssetGroup1ByInActiveFlag_V2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.AssetGroup1 = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();            
            trans.Execute();
            UpdateFromDatabaseObject(trans.AssetGroup1);
            List<AssetGroup1> AssetGroup1List = new List<AssetGroup1>();
            foreach (b_AssetGroup1 Asset in trans.AssetGroup1List)
            {
                AssetGroup1 tmpAssetGroup1 = new AssetGroup1()
                {
                    AssetGroup1Id = Asset.AssetGroup1Id,
                    ClientId = Asset.ClientId,
                    SiteId = Asset.SiteId,
                    Description = Asset.Description,
                    InactiveFlag = Asset.InactiveFlag,
                    ClientLookupId = Asset.ClientLookupId,
                    ClientLookup_Desc = Asset.ClientLookup_Desc
                };
                AssetGroup1List.Add(tmpAssetGroup1);
            }
            return AssetGroup1List;
        }


        public List<AssetGroup1> RetrieveAllAssetGroup1ByInActiveFlag_V2(DatabaseKey dbKey)
        {
            RetrieveAll_AssetGroup1ByInActiveFlag_V2 trans = new RetrieveAll_AssetGroup1ByInActiveFlag_V2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.AssetGroup1 = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.AssetGroup1);
            List<AssetGroup1> AssetGroup1List = new List<AssetGroup1>();
            foreach (b_AssetGroup1 Asset in trans.AssetGroup1List)
            {
                AssetGroup1 tmpAssetGroup1 = new AssetGroup1()
                {
                    AssetGroup1Id = Asset.AssetGroup1Id,
                    ClientId = Asset.ClientId,
                    SiteId = Asset.SiteId,
                    Description = Asset.Description,
                    InactiveFlag = Asset.InactiveFlag,
                    ClientLookupId = Asset.ClientLookupId,
                    ClientLookup_Desc = Asset.ClientLookup_Desc
                };
                AssetGroup1List.Add(tmpAssetGroup1);
            }
            return AssetGroup1List;
        }
        public bool ValidateOldClientLookupIdforAssetGroup1(DatabaseKey dbKey)
        {
            ValidateFor = "ValidateOldClientLookupIdforAssetGroup1";
            Validate<AssetGroup1>(dbKey);
            return IsValid;
        }

        public bool ValidateNewClientLookupIdforAssetGroup1(DatabaseKey dbKey)
        {
            ValidateFor = "ValidateNewClientLookupIdforAssetGroup1";
            Validate<AssetGroup1>(dbKey);
            return IsValid;
        }
        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            List<StoredProcValidationError> errors = new List<StoredProcValidationError>();
            

            if (ValidateFor == "ValidateOldClientLookupIdforAssetGroup1")
            {
                AssetGroup1_ValidateOldClientLookupIdV2 trans = new AssetGroup1_ValidateOldClientLookupIdV2()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName
                };
                trans.AssetGroup1 = this.ToDatabaseObject();                
                trans.dbKey = dbKey.ToTransDbKey();
                trans.Execute();

                if (trans.StoredProcValidationErrorList != null)
                {
                    foreach (b_StoredProcValidationError error in trans.StoredProcValidationErrorList)
                    {
                        StoredProcValidationError tmp = new StoredProcValidationError();
                        tmp.UpdateFromDatabaseObject(error);
                        errors.Add(tmp);
                    }
                }                
            }           

            if (ValidateFor == "ValidateNewClientLookupIdforAssetGroup1")
            {
                AssetGroup1_ValidateNewClientLookupIdV2 trans = new AssetGroup1_ValidateNewClientLookupIdV2()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName
                };
                trans.AssetGroup1 = this.ToDatabaseObject();               
                trans.dbKey = dbKey.ToTransDbKey();
                trans.Execute();
                if (trans.StoredProcValidationErrorList != null)
                {
                    foreach (b_StoredProcValidationError error in trans.StoredProcValidationErrorList)
                    {
                        StoredProcValidationError tmp = new StoredProcValidationError();
                        tmp.UpdateFromDatabaseObject(error);
                        errors.Add(tmp);
                    }
                }
               
            }            

            return errors;
        }

        }
}
     