/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2016 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
  /// <summary>
  /// Business object that stores a record from the VendorImport table.
  /// </summary>

  public partial class POImport2 : DataContractBase, IStoredProcedureValidation
  {
    string ValidateFor = string.Empty;
    public long PersonnelId { get; set; }
    public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
    {
      List<StoredProcValidationError> errors = new List<StoredProcValidationError>();
      if (ValidateFor == "ValidateByPOImport2Id")
      {

        POImport2_ValidateByPOImport2Id ptrans = new POImport2_ValidateByPOImport2Id()
        {
          CallerUserInfoId = dbKey.User.UserInfoId,
          CallerUserName = dbKey.UserName,
        };
        ptrans.POImport2 = this.ToDatabaseObject();
        ptrans.dbKey = dbKey.ToTransDbKey();
        ptrans.UseTransaction = false;
        ptrans.Execute();
        if (ptrans.StoredProcValidationErrorList != null)
        {
          foreach (b_StoredProcValidationError error in ptrans.StoredProcValidationErrorList)
          {
            StoredProcValidationError tmp = new StoredProcValidationError();
            tmp.UpdateFromDatabaseObject(error);
            errors.Add(tmp);
          }
        }
      }
      return errors;

    }

    #region Transaction Methods
    public void RetrieveForImportCompare(DatabaseKey dbKey)
    {
      POImport2_RetrieveForImportCompare trans = new POImport2_RetrieveForImportCompare();
      trans.POImport2 = this.ToDatabaseObject();
      trans.dbKey = dbKey.ToTransDbKey();
      trans.UseTransaction = false;
      trans.Execute();
      UpdateFromDatabaseObject(trans.POImport2);
    }

    public List<POImport2> POImport2_RetrieveAll(DatabaseKey dbKey)
    {
      POImport2_RetrieveAll trans = new POImport2_RetrieveAll()
      {
        CallerUserInfoId = dbKey.User.UserInfoId,
        CallerUserName = dbKey.UserName,
      };
      trans.dbKey = dbKey.ToTransDbKey();
      trans.Execute();

      List<POImport2> POImport2List = new List<POImport2>();
      foreach (b_POImport2 POImport2 in trans.POImport2List)
      {
        POImport2 tmpPOImport2 = new POImport2();

        tmpPOImport2.UpdateFromDatabaseObject(POImport2);
        POImport2List.Add(tmpPOImport2);
      }
      return POImport2List;
    }

    public void ValidatePOImport(DatabaseKey dbKey)
    {
      ValidateFor = "ValidateByPOImport2Id";
      Validate<POImport2>(dbKey);

    }
    public void Create_POImport2ProcessInterface(DatabaseKey dbKey)
    {
      POImport2_ProcessInterface trans = new POImport2_ProcessInterface()
      {
        CallerUserInfoId = dbKey.User.UserInfoId,
        CallerUserName = dbKey.UserName,
      };
      trans.POImport2 = this.ToDatabaseObject();
      trans.PersonnelId = this.PersonnelId;
      trans.dbKey = dbKey.ToTransDbKey();
      trans.Execute();

      // The create procedure may have populated an auto-incremented key. 
      UpdateFromDatabaseObject(trans.POImport2);

    }
    #endregion




  }
}
