/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2016 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    public partial class Line : DataContractBase, IStoredProcedureValidation
    {

        #region Properties    
        string ValidateFor = string.Empty;
        private bool m_validateClientLookupId;
        #endregion
        public List<Line> RetrieveLineByClientIdSiteId(DatabaseKey dbKey)
        {
            RetrieveLineByClientIdSiteId trans = new RetrieveLineByClientIdSiteId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Line = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Line);
            List<Line> LineList = new List<Line>();
            foreach (b_Line ln in trans.LineList)
            {
                Line tmpLine = new Line()
                {
                    LineId = ln.LineId,
                    ClientId = ln.ClientId,
                    SiteId = ln.SiteId,
                    Description = ln.Description,
                    InactiveFlag = ln.InactiveFlag,
                    ClientLookupId = ln.ClientLookupId,
                };
                LineList.Add(tmpLine);
            }
            return LineList;
        }
        public void RetrieveByLineId(DatabaseKey dbKey)
        {
            RetrieveByLineId trans = new RetrieveByLineId();
            trans.Line = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Line);
        }


        public List<Line> RetrieveLineByInActiveFlag(DatabaseKey dbKey)
        {
            RetrieveLineByInActiveFlag trans = new RetrieveLineByInActiveFlag()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Line = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Line);
            List<Line> LineList = new List<Line>();
            foreach (b_Line ln in trans.LineList)
            {
                Line tmpLine = new Line()
                {
                    LineId = ln.LineId,
                    ClientId = ln.ClientId,
                    SiteId = ln.SiteId,
                    Description = ln.Description,
                    InactiveFlag = ln.InactiveFlag,
                    ClientLookupId = ln.ClientLookupId,
                };
                LineList.Add(tmpLine);
            }
            return LineList;
        }
        public bool ValidateNewClientLookUpId(DatabaseKey dbKey)
        {
            ValidateFor = "ValidateNewClientLookUpId";
            Validate<Line>(dbKey);
            return IsValid;
        }
        public bool ValidateOldClientLookUpId(DatabaseKey dbKey)
        {
            ValidateFor = "ValidateOldClientLookUpId";
            Validate<Line>(dbKey);
            return IsValid;
        }
        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            List<StoredProcValidationError> errors = new List<StoredProcValidationError>();


            if (ValidateFor == "ValidateNewClientLookUpId")
            {
                ValidateNewClientLookupIdTransaction vtrans = new ValidateNewClientLookupIdTransaction()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                vtrans.Line = this.ToDatabaseObject();
                vtrans.dbKey = dbKey.ToTransDbKey();
                vtrans.Execute();
                if (vtrans.StoredProcValidationErrorList != null)
                {
                    foreach (b_StoredProcValidationError error in vtrans.StoredProcValidationErrorList)
                    {
                        StoredProcValidationError tmp = new StoredProcValidationError();
                        tmp.UpdateFromDatabaseObject(error);
                        errors.Add(tmp);
                    }
                }
            }
            else if (ValidateFor == "ValidateOldClientLookUpId")
            {
                ValidateOldClientLookupIdTransaction vtrans = new ValidateOldClientLookupIdTransaction()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                vtrans.Line = this.ToDatabaseObject();
                vtrans.dbKey = dbKey.ToTransDbKey();
                vtrans.Execute();
                if (vtrans.StoredProcValidationErrorList != null)
                {
                    foreach (b_StoredProcValidationError error in vtrans.StoredProcValidationErrorList)
                    {
                        StoredProcValidationError tmp = new StoredProcValidationError();
                        tmp.UpdateFromDatabaseObject(error);
                        errors.Add(tmp);
                    }
                }
            }
            return errors;
        }


        public List<Line> RetrieveAllCustom(DatabaseKey dbKey)
        {
            Line_RetrieveAllCustom trans = new Line_RetrieveAllCustom()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Line = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return Line.UpdateFromDatabaseObjectList(trans.LineList);
        }

        public static List<Line> UpdateFromDatabaseObjectList(List<b_Line> dbObjs)
        {
            List<Line> result = new List<Line>();

            foreach (b_Line dbObj in dbObjs)
            {
                Line tmp = new Line();
                tmp.UpdateFromDatabaseObject(dbObj);
                result.Add(tmp);

            }
            return result;
        }
    }
}
