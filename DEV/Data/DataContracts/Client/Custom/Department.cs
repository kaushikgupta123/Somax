/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System.Collections.Generic;
using Database.Business;
using Database.Transactions;
using Database;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Department table.
    /// </summary>
    public partial class Department : DataContractBase, IStoredProcedureValidation
    {
        #region Properties
        public string FullName
        {
            get { return string.Format("{0}", Description.Trim()); }
        }
        public bool Flag { get; set; }
        string ValidateFor = string.Empty;
        private bool m_validateClientLookupId;
        #endregion

      
        public static List<Department> UpdateFromDatabaseObjectList(List<b_Department> dbObjs)
        {
            List<Department> result = new List<Department>();

            foreach (b_Department dbObj in dbObjs)
            {
                Department tmp = new Department();
                tmp.UpdateFromDatabaseObject(dbObj);
                result.Add(tmp);

            }
            return result;
        }

        public List<Department> RetrieveAllTemplatesWithClient(DatabaseKey dbKey)
        {
            Department_RetrieveAllTemplatesWithClient trans = new Department_RetrieveAllTemplatesWithClient()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Department = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return Department.UpdateFromDatabaseObjectList(trans.DepartmentList);
        }
        public void CheckKeyAndDeleteByPk(DatabaseKey dbKey)
        {

            Department_CheckKeyAndDeleteByPk trans = new Department_CheckKeyAndDeleteByPk()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Department = this.ToDatabaseObject();
            trans.Department.DepartmentId = this.DepartmentId;
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            this.Flag = trans.Flag;

        }

        public List<Department> RetrieveDepartmentByClientIdSiteId(DatabaseKey dbKey)
        {
            RetrieveDepartmentByClientIdSiteId trans = new RetrieveDepartmentByClientIdSiteId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Department = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Department);
            List<Department> DepartmentList = new List<Department>();
            foreach (b_Department dp in trans.DepartmentList)
            {
                Department tmpDepartment = new Department()
                {
                    DepartmentId = dp.DepartmentId,
                    ClientId = dp.ClientId,
                    SiteId = dp.SiteId,
                    Description = dp.Description,
                    InactiveFlag = dp.InactiveFlag,
                    ClientLookupId = dp.ClientLookupId
                };
                DepartmentList.Add(tmpDepartment);
            }
            return DepartmentList;
        }
        public void RetrieveByDepartmentId(DatabaseKey dbKey)
        {
            RetrieveDepartmentId trans = new RetrieveDepartmentId();
            trans.Department = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Department);
        }


        public List<Department> RetrieveByInActiveFlag(DatabaseKey dbKey)
        {
            RetrieveInActiveFlag trans = new RetrieveInActiveFlag()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Department = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Department);
            List<Department> DepartmentList = new List<Department>();
            foreach (b_Department dp in trans.DepartmentList)
            {
                Department tmpDepartment = new Department()
                {
                    DepartmentId = dp.DepartmentId,
                    ClientId = dp.ClientId,
                    SiteId = dp.SiteId,
                    Description = dp.Description,
                    InactiveFlag = dp.InactiveFlag,
                    ClientLookupId = dp.ClientLookupId
                };
                DepartmentList.Add(tmpDepartment);
            }
            return DepartmentList;
        }

        
        public bool ValidateNewClientLookUpId(DatabaseKey dbKey)
        {
            ValidateFor = "ValidateNewClientLookUpId";
            Validate<Department>(dbKey);
            return IsValid;
        }
        public bool ValidateOldClientLookUpId(DatabaseKey dbKey)
        {
            ValidateFor = "ValidateOldClientLookUpId";
            Validate<Department>(dbKey);
            return IsValid;
        }
        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            List<StoredProcValidationError> errors = new List<StoredProcValidationError>();


            if (ValidateFor == "ValidateNewClientLookUpId")
            {
                Database.Transactions.ValidateNewClientLookupIdTransaction vtrans = new Database.Transactions.ValidateNewClientLookupIdTransaction()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                vtrans.Department = this.ToDatabaseObject();
                vtrans.dbKey = dbKey.ToTransDbKey();
                vtrans.Execute();
                if (vtrans.StoredProcValidationErrorList != null)
                {
                    foreach (b_StoredProcValidationError error in vtrans.StoredProcValidationErrorList)
                    {
                        StoredProcValidationError tmp = new StoredProcValidationError();
                        tmp.UpdateFromDatabaseObject(error);
                        errors.Add(tmp);
                    }
                }
            }
           else if (ValidateFor == "ValidateOldClientLookUpId")
            {
                Database.Transactions.ValidateOldClientLookupIdTransaction vtrans = new Database.Transactions.ValidateOldClientLookupIdTransaction()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                vtrans.Department = this.ToDatabaseObject();
                vtrans.dbKey = dbKey.ToTransDbKey();
                vtrans.Execute();
                if (vtrans.StoredProcValidationErrorList != null)
                {
                    foreach (b_StoredProcValidationError error in vtrans.StoredProcValidationErrorList)
                    {
                        StoredProcValidationError tmp = new StoredProcValidationError();
                        tmp.UpdateFromDatabaseObject(error);
                        errors.Add(tmp);
                    }
                }
            }
            return errors;
        }


        public List<Department> RetrieveAllCustom(DatabaseKey dbKey)
        {
            Department_RetrieveAllCustom trans = new Department_RetrieveAllCustom()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Department = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return Department.UpdateFromDatabaseObjectList(trans.DepartmentList);
        }
    }
}
