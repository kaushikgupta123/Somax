/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ReportListing table.
    /// </summary>

    public partial class ReportListing : DataContractBase
    {
        #region Properties
        public int IsFavorite { get; set; }
        public long ReportFavoritesId { get; set; }
        public int EventLogResultCount { get; set; }
        public long SiteId { get; set; }
        public long PersonnelId { get; set; }
        public long ReportEventLogId { get; set; }
        public bool IsUserReport { get; set; }
        #endregion

        public List<ReportListing> RetrieveReportGroup(DatabaseKey dbKey)
        {
            ReportListing_RetrieveReportGroup trans = new ReportListing_RetrieveReportGroup();
            trans.ReportListing = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return UpdateFromDatabaseReportListing(trans.ReportListingList);
        }
        public List<ReportListing> UpdateFromDatabaseReportListing(List<b_ReportListing> dbObjs)
        {
            List<ReportListing> result = new List<ReportListing>();

            foreach (b_ReportListing dbObj in dbObjs)
            {
                ReportListing tmp = new ReportListing();
                tmp.UpdateFromDatabaseObject(dbObj);
                result.Add(tmp);
            }
            return result;
        }
        public List<ReportListing> RetrieveByGroup(DatabaseKey dbKey)
        {
            ReportListing_RetrieveByGroup trans = new ReportListing_RetrieveByGroup();
            trans.ReportListing = this.ToDatabaseForRetrieveByGroup();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return UpdateFromDatabaseReportListingForRetrieveByGroup(trans.ReportListingList);
        }
        public b_ReportListing ToDatabaseForRetrieveByGroup()
        {
            b_ReportListing dbObj = new b_ReportListing();
            dbObj.SiteId = this.SiteId;
            dbObj.ReportGroup = this.ReportGroup;
            dbObj.PersonnelId = this.PersonnelId;
            return dbObj;
        }
        public List<ReportListing> UpdateFromDatabaseReportListingForRetrieveByGroup(List<b_ReportListing> dbObjs)
        {
            List<ReportListing> result = new List<ReportListing>();

            foreach (b_ReportListing dbObj in dbObjs)
            {
                ReportListing tmp = new ReportListing();
                tmp.UpdateFromDatabaseObject(dbObj);
                tmp.IsFavorite = dbObj.IsFavorite;
                tmp.ReportFavoritesId = dbObj.ReportFavoritesId;
                result.Add(tmp);
            }
            return result;
        }
        public List<ReportListing> RetrieveRecentReports(DatabaseKey dbKey)
        {
            usp_ReportListing_RetrieveRecentReports trans = new usp_ReportListing_RetrieveRecentReports();
            trans.ReportListing = this.ToDatabaseForRecentReports();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return UpdateFromDatabaseRecentReports(trans.ReportListingList);
        }
        public b_ReportListing ToDatabaseForRecentReports()
        {
            b_ReportListing dbObj = new b_ReportListing();
            dbObj.SiteId = this.SiteId;
            dbObj.PersonnelId = this.PersonnelId;
            dbObj.EventLogResultCount = this.EventLogResultCount;
            return dbObj;
        }
        public List<ReportListing> UpdateFromDatabaseRecentReports(List<b_ReportListing> dbObjs)
        {
            List<ReportListing> result = new List<ReportListing>();

            foreach (b_ReportListing dbObj in dbObjs)
            {
                ReportListing tmp = new ReportListing();
                tmp.UpdateFromDatabaseObject(dbObj);
                tmp.ReportEventLogId = dbObj.ReportEventLogId;
                tmp.IsUserReport = dbObj.IsUserReport;
                result.Add(tmp);
            }
            return result;
        }
    }
}
