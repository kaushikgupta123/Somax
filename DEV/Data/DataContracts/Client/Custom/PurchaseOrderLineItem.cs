/*
***************************************************************************************************
* PROPRIETARY DATA 
***************************************************************************************************
* This work is PROPRIETARY to SOMAX Inc. and is protected 
* under Federal Law as an unpublished Copyrighted work and under State Law as 
* a Trade Secret. 
***************************************************************************************************
* Copyright (c) 2015 by SOMAX Inc.. All rights reserved. 
***************************************************************************************************
* Date        JIRA Item Person            Description
* =========== ========= ================= =========================================================
* 2015-Jan-02 SOM-497   Roger Lawton      Localize Status, Add Non-Stock part localization 
*                                         Added second method - should remove original method later
* 2015-Feb-04 SOM-529   Roger Lawton      Removed PartStoreRoomId (Duplicate of PartStoreroomId)
*                                         Caused issue with JSON serialization
* 2015-Mar-19 SOM-608   Roger Lawton      Changed to use custom update procedure - replication
* 2016-Oct-06 SOM-1037  Roger Lawton      Added new txt method RetrieveForAlert and new property
*                                           PurchaseRequest_ClientLookupId
* 2019-Jul-15 SOM-1713  Roger Lawton      Added ChargeToClientLookupId to the line item grid                                         
* 2020-Sep-09 V2-410   Roger Lawton       Change QuanityBackOrdered to a ReadOnly calculation                                        
***************************************************************************************************
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

using Database;
using Database.Business;
using Database.Client.Custom.Transactions;
using Common.Constants;

namespace DataContracts
{
    public partial class PurchaseOrderLineItem : DataContractBase, IStoredProcedureValidation
    {
        public string PartClientLookupId { get; set; }
        public decimal TotalCost { get; set; }
        public string ChargeToClientLookupId { get; set; }
        public string ChargeTo_Name { get; set; }
        public string AccountClientLookupId { get; set; }
        public string ErrorMessageRow { get; set; }
        public decimal QuantityReceived { get; set; }
        public decimal QuantityToDate { get; set; }
        public decimal CurrentAverageCost { get; set; }
        public decimal CurrentAppliedCost { get; set; }
        public decimal CurrentOnHandQuantity { get; set; }
        public string RequiredDate { get; set; } //V2-946
        public string ChargeTo { get; set; } //V2-946
        // SOM-529
        public string StockType { get; set; }
        // V2-410 - Change to Readonly Calculation
        public decimal QuantityBackOrdered
        {
            get
            {
                if (this.OrderQuantity >= this.QuantityToDate)
                {
                    return this.OrderQuantity - this.QuantityToDate;
                }
                else
                {
                    return 0.0M;
                }
            }
        }
        // SOM-497
        public string Status_Display { get; set; }
        public Int64 SiteId { get; set; } //--SOM-892--//
        // SOM RKL - Add to PO Report
        public string Part_Manufacturer { get; set; }
        public string Part_ManufacturerID { get; set; }
        // SOM-1037 - Added to support Sending Alert Upon Receipt
        public string PurchaseOrder_ClientLookupId { get; set; }
        public string PurchaseRequest_ClientLookupId { get; set; }
        public long PurchaseRequest_Creator_PersonnelId { get; set; }
        public bool PurchaseRequest_AutoGenerated { get; set; }
        public decimal LineTotal { get; set; }

        public string PartNumber { get; set; }
        public string PartCategoryMasterClientLookupId { get; set; }
        #region V2-1112
        public string SUPPart { get; set; }
        public string EPMPart { get; set; }
        public decimal Extension { get; set; }
        #endregion
        //V2-598
        public string Vendor_ClientLookupId { get; set; }
        public string Vendor_Name { get; set; }
        // Remove this - it is a duplicate of PartStoreroomId
        // RKL - 2020-12-12
        //public Int64 PartStoreRoomId { get; set; }
        public string RequestorName { get; set; }//V2-1115
        public void RetrieveForAlert(DatabaseKey dbKey)
        {
            PurchaseOrderLineItem_RetrieveForAlert trans = new PurchaseOrderLineItem_RetrieveForAlert()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            // All the transaction b_PurchaseOrderLineItem object needs is the client and purchaseorderlineitemid
            trans.PurchaseOrderLineItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromExtendedDatabaseObject(trans.PurchaseOrderLineItem);
        }
        public void RetrieveForAlert_V2(DatabaseKey dbKey)
        {
            PurchaseOrderLineItem_RetrieveForAlert_V2 trans = new PurchaseOrderLineItem_RetrieveForAlert_V2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            // All the transaction b_PurchaseOrderLineItem object needs is the client and purchaseorderlineitemid
            trans.PurchaseOrderLineItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromExtendedDatabaseObject(trans.PurchaseOrderLineItem);
        }

        public static List<PurchaseOrderLineItem> PurchaseOrderLineItemRetrieveByPurchaseOrderId(DatabaseKey dbKey, PurchaseOrderLineItem purchaseorderlineitem)
        {
            List<PurchaseOrderLineItem> PurchaseOrderLineItemList = new List<PurchaseOrderLineItem>();

            Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderId trans = new Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName

            };

            trans.PurchaseOrderLineItem = purchaseorderlineitem.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return PurchaseOrderLineItem.UpdateFromDatabaseObjectList(trans.PurchaseOrderLineItemList);

        }

        public static List<PurchaseOrderLineItem> PurchaseOrderLineItemRetrieveByPurchaseOrderId_V2(DatabaseKey dbKey, PurchaseOrderLineItem purchaseorderlineitem)
        {
            List<PurchaseOrderLineItem> PurchaseOrderLineItemList = new List<PurchaseOrderLineItem>();

            Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderId_V2 trans = new Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderId_V2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName

            };

            trans.PurchaseOrderLineItem = purchaseorderlineitem.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return PurchaseOrderLineItem.UpdateFromDatabaseObjectList_V2(trans.PurchaseOrderLineItemList);

        }

        //--SOM-892--//
        public static List<PurchaseOrderLineItem> PurchaseOrderLineItemFilterByPartId(DatabaseKey dbKey, PurchaseOrderLineItem purchaseorderlineitem)
        {
            List<PurchaseOrderLineItem> PurchaseOrderLineItemList = new List<PurchaseOrderLineItem>();

            Database.PurchaseOrderLineItem_FilterByPartId trans = new Database.PurchaseOrderLineItem_FilterByPartId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName

            };

            trans.PurchaseOrderLineItem = purchaseorderlineitem.ToExtendedDatabaseObjectFilterByPartId();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return PurchaseOrderLineItem.UpdateFromDatabaseObjectListFilterByPartId(trans.PurchaseOrderLineItemList);

        }
        public b_PurchaseOrderLineItem ToExtendedDatabaseObjectFilterByPartId()
        {
            b_PurchaseOrderLineItem dbObj = this.ToDatabaseObject();
            dbObj.SiteId = this.SiteId;
            return dbObj;
        }
        public static List<PurchaseOrderLineItem> UpdateFromDatabaseObjectListFilterByPartId(List<b_PurchaseOrderLineItem> dbObjs)
        {
            List<PurchaseOrderLineItem> result = new List<PurchaseOrderLineItem>();

            foreach (b_PurchaseOrderLineItem dbObj in dbObjs)
            {
                PurchaseOrderLineItem tmp = new PurchaseOrderLineItem();
                tmp.UpdateFromDataBaseObjectExtendedFilterByPartId(dbObj);
                result.Add(tmp);
            }
            return result;
        }
        public void UpdateFromDataBaseObjectExtendedFilterByPartId(b_PurchaseOrderLineItem dbObj)
        {
            //this.UpdateFromDatabaseObject(dbObj);
            this.PartClientLookupId = dbObj.PartClientLookupId;
            this.PartId = dbObj.PartId;
            this.Description = dbObj.Description;
        }


        // SOM-497 - Begin 
        //  Added second PurchaseOrderLineItemRetrieveByPurchaseOrderId method
        //  Added localization parameter so can localize the status as well as the non-stock part id
        //public static List<PurchaseOrderLineItem> PurchaseOrderLineItemRetrieveByPurchaseOrderId(DatabaseKey dbKey, PurchaseOrderLineItem pol)
        //{
        //    List<PurchaseOrderLineItem> PurchaseOrderLineItemList = new List<PurchaseOrderLineItem>();

        //    Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderId trans = new Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderId()
        //    {
        //        CallerUserInfoId = dbKey.User.UserInfoId,
        //        CallerUserName = dbKey.UserName
        //    };
        //    trans.PurchaseOrderLineItem = pol.ToDatabaseObject();
        //    trans.dbKey = dbKey.ToTransDbKey();
        //    trans.Execute();
        //    return PurchaseOrderLineItem.UpdateFromDatabaseObjectList(trans.PurchaseOrderLineItemList);
        //}
        // SOM-497 - End

        //public void UpdateFromDataBaseObjectExtended(b_PurchaseOrderLineItem dbObj)
        //{
        //    this.UpdateFromDatabaseObject(dbObj);
        //    this.TotalCost = dbObj.TotalCost;
        //    this.PartClientLookupId = dbObj.PartClientLookupId;
        //    this.QuantityReceived = dbObj.QuantityReceived;
        //    this.QuantityToDate = dbObj.QuantityToDate;
        //    this.CurrentAverageCost = dbObj.CurrentAverageCost;
        //    this.CurrentAppliedCost = dbObj.CurrentAppliedCost;
        //    this.CurrentOnHandQuantity = dbObj.CurrentOnHandQuantity;
        //    this.StockType = dbObj.StockType;
        //    // SOM-529

        //    this.QuantityBackOrdered = dbObj.QuantityBackOrdered;
        //    this.Part_Manufacturer = dbObj.Part_Manufacturer;
        //    this.Part_ManufacturerID = dbObj.Part_ManufacturerId;
        //    this.PartNumber = dbObj.PartNumber;
        //    this.LineTotal = dbObj.LineTotal;
        //}

        // SOM-497 - Begin 
        //  Added second UpdateFromDataBaseObjectExtended method
        //  Added localization parameter so can localize the status as well as the non-stock part id
        public void UpdateFromDataBaseObjectExtended(b_PurchaseOrderLineItem dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.TotalCost = dbObj.TotalCost;
            if (this.PartId == 0)
            {
                this.PartClientLookupId = "Non Stock";
            }
            else
            {
                this.PartClientLookupId = dbObj.PartClientLookupId;
            }
            //SOM-1713 - begin
            this.ChargeToClientLookupId = dbObj.ChargeToClientLookupId;
            this.Part_Manufacturer = dbObj.Part_Manufacturer;
            this.Part_ManufacturerID = dbObj.Part_ManufacturerId;
            this.LineTotal = dbObj.LineTotal;
            //SOM-1713 - end
            this.QuantityReceived = dbObj.QuantityReceived;
            this.QuantityToDate = dbObj.QuantityToDate;
            this.CurrentAverageCost = dbObj.CurrentAverageCost;
            this.CurrentAppliedCost = dbObj.CurrentAppliedCost;
            this.CurrentOnHandQuantity = dbObj.CurrentOnHandQuantity;
            this.StockType = dbObj.StockType;
            this.PartNumber = dbObj.PartNumber;
            // SOM-529
            //this.PartStoreRoomId = dbObj.PartStoreRoomId;
            // V2-410
            //this.QuantityBackOrdered = dbObj.QuantityBackOrdered;
            // Status
            switch (this.Status)
            {
                case PurchaseOrderStatusConstants.Open:
                    this.Status_Display = "Open";
                    break;
                case PurchaseOrderStatusConstants.Partial:
                    this.Status_Display = "Partial";
                    break;
                case PurchaseOrderStatusConstants.Complete:
                    this.Status_Display = "Complete";
                    break;
                case PurchaseOrderStatusConstants.Void:
                    this.Status_Display = "Void";
                    break;
                default:
                    this.Status_Display = string.Empty;
                    break;
            }
        }

        public void UpdateFromDataBaseObjectExtended_V2(b_PurchaseOrderLineItem dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.TotalCost = dbObj.TotalCost;
            if (this.PartId == 0)
            {
                this.PartClientLookupId = "Non Stock";
            }
            else
            {
                this.PartClientLookupId = dbObj.PartClientLookupId;
            }
            //SOM-1713 - begin
            this.ChargeToClientLookupId = dbObj.ChargeToClientLookupId;
            this.Part_Manufacturer = dbObj.Part_Manufacturer;
            this.Part_ManufacturerID = dbObj.Part_ManufacturerId;
            this.LineTotal = dbObj.LineTotal;
            //SOM-1713 - end
            this.AccountClientLookupId = dbObj.AccountClientLookupId;
            this.QuantityReceived = dbObj.QuantityReceived;
            this.QuantityToDate = dbObj.QuantityToDate;
            this.CurrentAverageCost = dbObj.CurrentAverageCost;
            this.CurrentAppliedCost = dbObj.CurrentAppliedCost;
            this.CurrentOnHandQuantity = dbObj.CurrentOnHandQuantity;
            this.StockType = dbObj.StockType;
            this.PartNumber = dbObj.PartNumber;
            // SOM-529
            //this.PartStoreRoomId = dbObj.PartStoreRoomId;
            // V2-410
            //this.QuantityBackOrdered = dbObj.QuantityBackOrdered;
            // Status
            switch (this.Status)
            {
                case PurchaseOrderStatusConstants.Open:
                    this.Status_Display = "Open";
                    break;
                case PurchaseOrderStatusConstants.Partial:
                    this.Status_Display = "Partial";
                    break;
                case PurchaseOrderStatusConstants.Complete:
                    this.Status_Display = "Complete";
                    break;
                case PurchaseOrderStatusConstants.Void:
                    this.Status_Display = "Void";
                    break;
                default:
                    this.Status_Display = string.Empty;
                    break;
            }
            this.RequestorName = dbObj.RequestorName;//V2-1115
        }
        // SOM-497 - End

        //public static List<PurchaseOrderLineItem> UpdateFromDatabaseObjectList(List<b_PurchaseOrderLineItem> dbObjs)
        //{
        //    List<PurchaseOrderLineItem> result = new List<PurchaseOrderLineItem>();

        //    foreach (b_PurchaseOrderLineItem dbObj in dbObjs)
        //    {
        //        PurchaseOrderLineItem tmp = new PurchaseOrderLineItem();
        //        tmp.UpdateFromDataBaseObjectExtended(dbObj);
        //        result.Add(tmp);
        //    }
        //    return result;
        //}

        // SOM-497 - Begin 
        //  Added second UpdateFromDatabaseObjectList method
        //  Added localization parameter so can localize the status as well as the non-stock part id
        public static List<PurchaseOrderLineItem> UpdateFromDatabaseObjectList(List<b_PurchaseOrderLineItem> dbObjs)
        {
            List<PurchaseOrderLineItem> result = new List<PurchaseOrderLineItem>();

            foreach (b_PurchaseOrderLineItem dbObj in dbObjs)
            {
                PurchaseOrderLineItem tmp = new PurchaseOrderLineItem();
                tmp.UpdateFromDataBaseObjectExtended(dbObj);
                result.Add(tmp);
            }
            return result;
        }
        public static List<PurchaseOrderLineItem> UpdateFromDatabaseObjectList_V2(List<b_PurchaseOrderLineItem> dbObjs)
        {
            List<PurchaseOrderLineItem> result = new List<PurchaseOrderLineItem>();

            foreach (b_PurchaseOrderLineItem dbObj in dbObjs)
            {
                PurchaseOrderLineItem tmp = new PurchaseOrderLineItem();
                tmp.UpdateFromDataBaseObjectExtended_V2(dbObj);
                result.Add(tmp);
            }
            return result;
        }
        // SOM-497 - End




        public void PurchaseOrderLineItemRetrieveByPurchaseOrderLineItemId(DatabaseKey dbKey)
        {
            PurchaseOrderLineItem_RetrieveByPurchaseOrderLineItemId trans = new PurchaseOrderLineItem_RetrieveByPurchaseOrderLineItemId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };


            trans.PurchaseOrderLineItem = this.ToExtendedDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            //UpdateFromDatabaseObject(trans.WorkOrderTask);
            UpdateFromExtendedDatabaseObject(trans.PurchaseOrderLineItem);
        }
        public void PurchaseOrderLineItemRetrieveByPurchaseOrderLineItemId_V2(DatabaseKey dbKey)
        {
            PurchaseOrderLineItem_RetrieveByPurchaseOrderLineItemId_V2 trans = new PurchaseOrderLineItem_RetrieveByPurchaseOrderLineItemId_V2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };


            trans.PurchaseOrderLineItem = this.ToExtendedDatabaseObject_V2();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            //UpdateFromDatabaseObject(trans.WorkOrderTask);
            UpdateFromExtendedDatabaseObject_V2(trans.PurchaseOrderLineItem);
        }

        public void UpdateFromExtendedDatabaseObject(b_PurchaseOrderLineItem dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.PartClientLookupId = string.IsNullOrEmpty(dbObj.PartClientLookupId) ? "" : dbObj.PartClientLookupId;
            this.TotalCost = dbObj.TotalCost;
            this.ChargeToClientLookupId = dbObj.ChargeToClientLookupId;
            this.QuantityReceived = dbObj.QuantityReceived;
            this.QuantityToDate = dbObj.QuantityToDate;
            this.CurrentAverageCost = dbObj.CurrentAverageCost;
            this.CurrentAppliedCost = dbObj.CurrentAppliedCost;
            this.CurrentOnHandQuantity = dbObj.CurrentOnHandQuantity;
            this.StockType = dbObj.StockType;
            // SOM-529
            //this.PartStoreRoomId = dbObj.PartStoreRoomId;
            // V2-410
            //this.QuantityBackOrdered = dbObj.QuantityBackOrdered;
            this.ChargeTo_Name = dbObj.ChargeTo_Name;
            // SOM-1037
            this.PurchaseOrder_ClientLookupId = dbObj.PurchaseOrder_ClientLookupId;
            this.PurchaseRequest_ClientLookupId = dbObj.PurchaseRequest_ClientLookupId;
            this.PurchaseRequest_Creator_PersonnelId = dbObj.PurchaseRequest_Creator_PersonnelId;
            this.PurchaseRequest_AutoGenerated = dbObj.PurchaseRequest_AutoGenerated;
            this.Vendor_ClientLookupId = dbObj.Vendor_ClientLookupId;
            this.Vendor_Name = dbObj.Vendor_Name;



        }
        public void UpdateFromExtendedDatabaseObject_V2(b_PurchaseOrderLineItem dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.PartClientLookupId = string.IsNullOrEmpty(dbObj.PartClientLookupId) ? "" : dbObj.PartClientLookupId;
            this.TotalCost = dbObj.TotalCost;
            this.ChargeToClientLookupId = dbObj.ChargeToClientLookupId;
            this.AccountClientLookupId = dbObj.AccountClientLookupId;
            this.QuantityReceived = dbObj.QuantityReceived;
            this.QuantityToDate = dbObj.QuantityToDate;
            this.CurrentAverageCost = dbObj.CurrentAverageCost;
            this.CurrentAppliedCost = dbObj.CurrentAppliedCost;
            this.CurrentOnHandQuantity = dbObj.CurrentOnHandQuantity;
            this.StockType = dbObj.StockType;
            this.ChargeTo_Name = dbObj.ChargeTo_Name;
            this.PurchaseOrder_ClientLookupId = dbObj.PurchaseOrder_ClientLookupId;
            this.PurchaseRequest_ClientLookupId = dbObj.PurchaseRequest_ClientLookupId;
            this.PurchaseRequest_Creator_PersonnelId = dbObj.PurchaseRequest_Creator_PersonnelId;
            this.PurchaseRequest_AutoGenerated = dbObj.PurchaseRequest_AutoGenerated;
            this.PartCategoryMasterClientLookupId = dbObj.PartCategoryMasterClientLookupId;
        }
        public b_PurchaseOrderLineItem ToExtendedDatabaseObject()
        {
            // RKL - 2016-Oct-06 
            // This makes no sense - I do not want to change 
            // Seems like we should be filling the dbobj - not the other way around
            b_PurchaseOrderLineItem dbObj = this.ToDatabaseObject();
            dbObj.TotalCost = this.TotalCost;
            dbObj.PartClientLookupId = this.PartClientLookupId;
            dbObj.ChargeToClientLookupId = this.ChargeToClientLookupId;
            dbObj.AccountClientLookupId = this.AccountClientLookupId;
            this.QuantityReceived = dbObj.QuantityReceived;
            this.QuantityToDate = dbObj.QuantityToDate;
            this.CurrentAverageCost = dbObj.CurrentAverageCost;
            this.CurrentAppliedCost = dbObj.CurrentAppliedCost;
            this.CurrentOnHandQuantity = dbObj.CurrentOnHandQuantity;
            this.StockType = dbObj.StockType;
            // SOM-529
            //this.PartStoreRoomId = dbObj.PartStoreRoomId;
            // V2-410
            //this.QuantityBackOrdered = dbObj.QuantityBackOrdered;
            this.ChargeTo_Name = dbObj.ChargeTo_Name;

            return dbObj;
        }
        public b_PurchaseOrderLineItem ToExtendedDatabaseObject_V2()
        {
            b_PurchaseOrderLineItem dbObj = this.ToDatabaseObject();
            dbObj.TotalCost = this.TotalCost;
            dbObj.PartClientLookupId = this.PartClientLookupId;
            dbObj.ChargeToClientLookupId = this.ChargeToClientLookupId;
            dbObj.AccountClientLookupId = this.AccountClientLookupId;
            dbObj.AccountClientLookupId = this.AccountClientLookupId;
            dbObj.PartCategoryMasterClientLookupId = this.PartCategoryMasterClientLookupId;
            this.QuantityReceived = dbObj.QuantityReceived;
            this.QuantityToDate = dbObj.QuantityToDate;
            this.CurrentAverageCost = dbObj.CurrentAverageCost;
            this.CurrentAppliedCost = dbObj.CurrentAppliedCost;
            this.CurrentOnHandQuantity = dbObj.CurrentOnHandQuantity;
            this.StockType = dbObj.StockType;
            this.ChargeTo_Name = dbObj.ChargeTo_Name;
            return dbObj;
        }

        public void CreateWithValidation(DatabaseKey dbKey)
        {
            //m_validateClientLookupId = true;
            Validate<PurchaseOrderLineItem>(dbKey);

            if (IsValid)
            {
                PurchaseOrderLineItem_CreateWithReplication trans = new PurchaseOrderLineItem_CreateWithReplication();
                //PurchaseOrderLineItem_Create trans = new PurchaseOrderLineItem_Create();
                trans.PurchaseOrderLineItem = this.ToDatabaseObject();
                trans.dbKey = dbKey.ToTransDbKey();
                trans.Execute();

                // The create procedure may have populated an auto-incremented key. 
                UpdateFromDatabaseObject(trans.PurchaseOrderLineItem);
            }
        }
        public void CreateWithValidation_V2(DatabaseKey dbKey)
        {
            //m_validateClientLookupId = true;
            Validate<PurchaseOrderLineItem>(dbKey);

            if (IsValid)
            {
                PurchaseOrderLineItem_CreateWithReplication_V2 trans = new PurchaseOrderLineItem_CreateWithReplication_V2();
                //PurchaseOrderLineItem_Create trans = new PurchaseOrderLineItem_Create();
                trans.PurchaseOrderLineItem = this.ToDatabaseObject();
                trans.dbKey = dbKey.ToTransDbKey();
                trans.Execute();

                // The create procedure may have populated an auto-incremented key. 
                UpdateFromDatabaseObject(trans.PurchaseOrderLineItem);
            }
        }

        public void CreateFromShoppingCart(DatabaseKey dbKey)
        {
            PurchaseOrderLineItem_CreateFromShoppingCart trans = new PurchaseOrderLineItem_CreateFromShoppingCart();
            trans.PurchaseOrderLineItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PurchaseOrderLineItem);

        }
        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            List<StoredProcValidationError> errors = new List<StoredProcValidationError>();


            PurchaseOrderLineItem_ValidationTransaction trans = new PurchaseOrderLineItem_ValidationTransaction()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.PurchaseOrderLineItem = ToExtendedDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();


            if (trans.StoredProcValidationErrorList != null)
            {
                foreach (b_StoredProcValidationError error in trans.StoredProcValidationErrorList)
                {
                    StoredProcValidationError tmp = new StoredProcValidationError();
                    tmp.UpdateFromDatabaseObject(error);
                    errors.Add(tmp);
                }
            }

            return errors;
        }

        public void ReOrderLineNumber(DatabaseKey dbKey)
        {

            PurchaseOrderLineItem_ReOrderLineNumber trans = new PurchaseOrderLineItem_ReOrderLineNumber()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.PurchaseOrderLineItem = this.ToDatabaseObject();
            // trans.WorkOrderTask.ParentSiteId = this.ParentSiteId;
            //  trans.WorkOrderTask.AssignedTo_PersonnelClientLookupId = string.IsNullOrEmpty(this.AssignedTo_PersonnelClientLookupId) ? "" : this.AssignedTo_PersonnelClientLookupId;
            //  trans.WorkOrderTask.CompleteBy_PersonnelClientLookupId = string.IsNullOrEmpty(this.CompleteBy_PersonnelClientLookupId) ? "" : this.CompleteBy_PersonnelClientLookupId;
            //  trans.WorkOrderTask.ChargeToClientLookupId = string.IsNullOrEmpty(this.ChargeToClientLookupId) ? "" : this.ChargeToClientLookupId;
            // trans.WorkOrderTask.MeterId_ClientLookupId = string.IsNullOrEmpty(this.MeterId_ClientLookupId) ? "" : this.MeterId_ClientLookupId;
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            UpdateFromDatabaseObject(trans.PurchaseOrderLineItem);

        }

        public void UpdateByPKForeignKeys(DatabaseKey dbKey)
        {
            Validate<PurchaseOrderLineItem>(dbKey);

            if (IsValid)
            {
                PurchaseOrderLineItem_Update trans = new PurchaseOrderLineItem_Update()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };

                trans.dbKey = dbKey.ToTransDbKey();
                trans.PurchaseOrderLineItem = ToExtendedDatabaseObject();
                trans.Execute();

                UpdateFromDatabaseObject(trans.PurchaseOrderLineItem);
            }
        }

        public List<PurchaseOrderLineItem> RetriveByWorkOrderId(DatabaseKey dbKey)
        {
            PurchaseOrderLineItem_RetriveByWorkOrderId trans = new PurchaseOrderLineItem_RetriveByWorkOrderId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.PurchaseOrderLineItem = this.ToDatabaseObjectDB();
            trans.PurchaseOrderLineItem = this.ToExtendedDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return PurchaseOrderLineItem.UpdateFromDatabaseObjectListPO(trans.PurchaseOrderLineItemList);
        }

        private static List<PurchaseOrderLineItem> UpdateFromDatabaseObjectListPO(List<b_PurchaseOrderLineItem> list)
        {
            List<PurchaseOrderLineItem> result = new List<PurchaseOrderLineItem>();

            foreach (b_PurchaseOrderLineItem dbObj in list)
            {
                PurchaseOrderLineItem tmp = new PurchaseOrderLineItem();
                tmp.UpdateFromDatabaseObjectDB(dbObj);
                result.Add(tmp);
            }
            return result;
        }
        private b_PurchaseOrderLineItem ToDatabaseObjectDB()
        {
            b_PurchaseOrderLineItem dbObj = new b_PurchaseOrderLineItem();
            dbObj.ClientId = this.ClientId;
            dbObj.SiteId = this.SiteId;
            dbObj.PurchaseOrderId = this.PurchaseOrderId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.Required = this.Required;
            dbObj.LineNumber = this.LineNumber;
            dbObj.Description = this.Description;
            dbObj.EstimatedDelivery = this.EstimatedDelivery;
            dbObj.Status = this.Status;
            dbObj.OrderQuantity = this.OrderQuantity;
            dbObj.UnitOfMeasure = this.UnitOfMeasure;
            dbObj.ReceivedQuantity = this.ReceivedQuantity;
            return dbObj;
        }

        private void UpdateFromDatabaseObjectDB(b_PurchaseOrderLineItem dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.SiteId = dbObj.SiteId;
            this.PartId = dbObj.PartId;
            this.ClientId = dbObj.ClientId;
            this.SiteId = dbObj.SiteId;
            this.PurchaseOrderId = dbObj.PurchaseOrderId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.Required = dbObj.Required;
            this.LineNumber = dbObj.LineNumber;
            this.Description = dbObj.Description;
            this.EstimatedDelivery = dbObj.EstimatedDelivery;
            this.Status = dbObj.Status;
            this.OrderQuantity = dbObj.OrderQuantity;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.ReceivedQuantity = dbObj.ReceivedQuantity;
            // Turn on auditing
            AuditEnabled = true;
        }


        public string ClientLookupId { get; set; }

        public DateTime Required { get; set; }

        public decimal ReceivedQuantity { get; set; }

        #region V2-738
        public void CreateFromShoppingCartForMultiStoreroom(DatabaseKey dbKey)
        {
            PurchaseOrderLineItem_CreateFromShoppingCartForMultiStoreroom trans = new PurchaseOrderLineItem_CreateFromShoppingCartForMultiStoreroom();
            trans.PurchaseOrderLineItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PurchaseOrderLineItem);

        }
        public static List<PurchaseOrderLineItem> PurchaseOrderLineItemRetrieveByPurchaseOrderIdForMultiStoreroom_V2(DatabaseKey dbKey, PurchaseOrderLineItem purchaseorderlineitem)
        {
            List<PurchaseOrderLineItem> PurchaseOrderLineItemList = new List<PurchaseOrderLineItem>();

            Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderIdForMultiStoreroom_V2 trans = new Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderIdForMultiStoreroom_V2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName

            };

            trans.PurchaseOrderLineItem = purchaseorderlineitem.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return PurchaseOrderLineItem.UpdateFromDatabaseObjectList_V2(trans.PurchaseOrderLineItemList);

        }
        #endregion

        #region V2-946
        public void UpdateFromDatabaseObjectPurchaseOrderLineItemPrintExtended(b_PurchaseOrderLineItem dbObj, string Timezone)
        { // this.UpdateFromDatabaseObject(dbObj);
            this.ClientId = dbObj.ClientId;
            this.PurchaseOrderLineItemId = dbObj.PurchaseOrderLineItemId;
            this.PurchaseOrderId = dbObj.PurchaseOrderId;
            this.Description = dbObj.Description;
            this.LineNumber = dbObj.LineNumber;
            this.OrderQuantity = dbObj.OrderQuantity;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.UnitCost = dbObj.UnitCost;
            this.TotalCost = dbObj.TotalCost;
            this.PartClientLookupId = dbObj.PartClientLookupId;
            this.ChargeToClientLookupId = dbObj.ChargeToClientLookupId;
            this.AccountClientLookupId = dbObj.AccountClientLookupId;
            this.Part_Manufacturer = dbObj.Part_Manufacturer;
            this.Part_ManufacturerID = dbObj.Part_ManufacturerId;
            switch (dbObj.Status)
            {
                case PurchaseOrderStatusConstants.Open:
                    this.Status_Display = "Open";
                    break;
                case PurchaseOrderStatusConstants.Partial:
                    this.Status_Display = "Partial";
                    break;
                case PurchaseOrderStatusConstants.Complete:
                    this.Status_Display = "Complete";
                    break;
                case PurchaseOrderStatusConstants.Void:
                    this.Status_Display = "Void";
                    break;
                default:
                    this.Status_Display = string.Empty;
                    break;
            }
        }

        #endregion
        #region V2-1047
        public static List<PurchaseOrderLineItem> PurchaseOrderLineItemRetrieveByPurchaseOrderIdForDirectLineItems(DatabaseKey dbKey, PurchaseOrderLineItem purchaseorderlineitem)
        {


            Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderIdForDirectLineItems_V2 trans = new Database.PurchaseOrderLineItem_RetrieveByPurchaseOrderIdForDirectLineItems_V2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName

            };

            trans.PurchaseOrderLineItem = purchaseorderlineitem.ToDatabaseObject();
            trans.PurchaseOrderLineItem.StockType = purchaseorderlineitem.StockType;
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return PurchaseOrderLineItem.UpdateFromDatabaseObjectListForDirectLineItem(trans.PurchaseOrderLineItemList);

        }

        public static List<PurchaseOrderLineItem> UpdateFromDatabaseObjectListForDirectLineItem(List<b_PurchaseOrderLineItem> dbObjs)
        {
            List<PurchaseOrderLineItem> result = new List<PurchaseOrderLineItem>();

            foreach (b_PurchaseOrderLineItem dbObj in dbObjs)
            {
                PurchaseOrderLineItem tmp = new PurchaseOrderLineItem();
                tmp.UpdateFromDataBaseObjectExtended_V2(dbObj);
                result.Add(tmp);
            }
            return result;
        }
        #endregion

        #region V2-1112
        public void UpdateFromDatabaseObjectPurchaseOrderLineItemEPMPrintExtended(b_PurchaseOrderLineItem dbObj, string Timezone)
        {
            this.ClientId = dbObj.ClientId;
            this.PurchaseOrderLineItemId = dbObj.PurchaseOrderLineItemId;
            this.PurchaseOrderId = dbObj.PurchaseOrderId;
            this.Description = dbObj.Description;
            this.LineNumber = dbObj.LineNumber;
            this.EPMPart = dbObj.EPMPart;
            this.SUPPart = dbObj.SUPPart;
            this.EstimatedDelivery = dbObj.EstimatedDelivery;
            this.OrderQuantity = dbObj.OrderQuantity;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.UnitCost = dbObj.UnitCost;
            this.TotalCost = dbObj.TotalCost;
            this.PartClientLookupId = dbObj.PartClientLookupId;
            this.ChargeToClientLookupId = dbObj.ChargeToClientLookupId;
            this.AccountClientLookupId = dbObj.AccountClientLookupId;
            this.Manufacturer = dbObj.Manufacturer;
            switch (dbObj.Status)
            {
                case PurchaseOrderStatusConstants.Open:
                    this.Status_Display = "Open";
                    break;
                case PurchaseOrderStatusConstants.Partial:
                    this.Status_Display = "Partial";
                    break;
                case PurchaseOrderStatusConstants.Complete:
                    this.Status_Display = "Complete";
                    break;
                case PurchaseOrderStatusConstants.Void:
                    this.Status_Display = "Void";
                    break;
                default:
                    this.Status_Display = string.Empty;
                    break;
            }
            this.Extension = dbObj.Extension;
        }
        #endregion
    }
}
