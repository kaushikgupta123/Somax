/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

using Database;
using Database.Business;
using Database.Client.Custom.Transactions;
using Newtonsoft.Json;

namespace DataContracts
{
    [JsonObject]
    public partial class WorkOrderTask : DataContractBase, IStoredProcedureValidation
    {
        #region Properties
        public string WorkOrderClientLookupId { get; set; }
        public long ParentSiteId { get; set; }
        public string AssignedTo_PersonnelClientLookupId { get; set; }
        public string ChargeToClientLookupId { get; set; }
        public string CompleteBy_PersonnelClientLookupId { get; set; }
        public string MeterId_ClientLookupId { get; set; }
        public string Complete_Mark { get; set; }
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        public int OffSetVal { get; set; }
        public int NextRow { get; set; }
        public int TotalCount { get; set; }
        public List<b_WorkOrderTask> WorkOrderTaskList { get; set; }
        #endregion

      public static List<WorkOrderTask> UpdateFromDatabasetRetriveByWorkOrderIdV2ObjectList(List<b_WorkOrderTask> dbObjs)
        {
            List<WorkOrderTask> result = new List<WorkOrderTask>();

            foreach (b_WorkOrderTask dbObj in dbObjs)
            {
                WorkOrderTask tmp = new WorkOrderTask();
                tmp.UpdateFromExtendedDatabastRetriveByWorkOrderIdV2eObject(dbObj);
                result.Add(tmp);
            }
            return result;
        }

        public void UpdateFromExtendedDatabastRetriveByWorkOrderIdV2eObject(b_WorkOrderTask dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.WorkOrderTaskId = dbObj.WorkOrderTaskId;
            this.WorkOrderId = dbObj.WorkOrderId;
            this.Description = dbObj.Description;
            this.Status = dbObj.Status;
            this.TaskNumber = dbObj.TaskNumber;
            this.UpdateIndex = dbObj.UpdateIndex;          
            this.ChargeToClientLookupId = string.IsNullOrEmpty(dbObj.ChargeToClientLookupId) ? "" : dbObj.ChargeToClientLookupId;
            this.TotalCount = dbObj.TotalCount;         

        }


        public static List<WorkOrderTask> UpdateFromDatabaseObjectList(List<b_WorkOrderTask> dbObjs)
        {
            List<WorkOrderTask> result = new List<WorkOrderTask>();

            foreach (b_WorkOrderTask dbObj in dbObjs)
            {
                WorkOrderTask tmp = new WorkOrderTask();
                tmp.UpdateFromExtendedDatabaseObject(dbObj);
                result.Add(tmp);
            }
            return result;
        }

        public void UpdateFromExtendedDatabaseObject(b_WorkOrderTask dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.WorkOrderClientLookupId = string.IsNullOrEmpty(dbObj.WorkOrderClientLookupId) ? "" : dbObj.WorkOrderClientLookupId;
            this.AssignedTo_PersonnelClientLookupId = string.IsNullOrEmpty(dbObj.AssignedTo_PersonnelClientLookupId) ? "" : dbObj.AssignedTo_PersonnelClientLookupId;
            this.CompleteBy_PersonnelClientLookupId = string.IsNullOrEmpty(dbObj.CompleteBy_PersonnelClientLookupId) ? "" : dbObj.CompleteBy_PersonnelClientLookupId;
            this.ChargeToClientLookupId = string.IsNullOrEmpty(dbObj.ChargeToClientLookupId) ? "" : dbObj.ChargeToClientLookupId;
            this.MeterId_ClientLookupId = string.IsNullOrEmpty(dbObj.MeterId_ClientLookupId) ? "" : dbObj.MeterId_ClientLookupId;
            switch(this.Status)
            {
              case Common.Constants.WorkOrderStatusConstants.Complete :
                this.Complete_Mark = "\u221A";
                break;
              case Common.Constants.WorkOrderStatusConstants.Canceled:
                this.Complete_Mark = "X";
                break;
              default :
                this.Complete_Mark = string.Empty;
                break;
            }
            //this.Complete_Mark = string.IsNullOrEmpty(dbObj.CompleteBy_PersonnelClientLookupId) ? "" : "X";

        }

        public b_WorkOrderTask ToExtendedDatabaseObject()
        {
            b_WorkOrderTask dbObj = this.ToDatabaseObject();
            dbObj.WorkOrderClientLookupId = this.WorkOrderClientLookupId;
            dbObj.AssignedTo_PersonnelClientLookupId = this.AssignedTo_PersonnelClientLookupId;
            dbObj.CompleteBy_PersonnelClientLookupId = this.CompleteBy_PersonnelClientLookupId;
            dbObj.ChargeToClientLookupId = this.ChargeToClientLookupId;
            dbObj.MeterId_ClientLookupId = this.MeterId_ClientLookupId;
            return dbObj;
        } 

        public static List<b_WorkOrderTask> ToDatabaseObjectList(List<WorkOrderTask> objs)
        {
            List<b_WorkOrderTask> result = new List<b_WorkOrderTask>();
            foreach (WorkOrderTask obj in objs)
            {
                result.Add(obj.ToExtendedDatabaseObject());
            }

            return result;
        }

        public List<b_WorkOrderTask> ToDatabaseObjectList()
        {
            List<b_WorkOrderTask> dbObj = new List<b_WorkOrderTask>();
            dbObj = this.WorkOrderTaskList;
            return dbObj;
        }

        public List<WorkOrderTask> RetrieveChargeToClientLookupIdBySearchCriteria(DatabaseKey dbKey)
        {
            WorkOrderTask_RetrieveChargeToClientLookupIdBySearchCriteria trans = new WorkOrderTask_RetrieveChargeToClientLookupIdBySearchCriteria()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.WorkOrderTaskList = this.ToDatabaseObjectList();
            trans.WorkOrderTask = this.ToDatabaseObject();
            trans.WorkOrderTask.ChargeToClientLookupId = this.ChargeToClientLookupId;
            //trans.ParentSiteId = this.ParentSiteId;
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            List<WorkOrderTask> workOrderTaskList = new List<WorkOrderTask>();
            foreach (b_WorkOrderTask workOrderTask in trans.WorkOrderTaskList)
            {
                WorkOrderTask tmpWorkOrderTask = new WorkOrderTask()
                {
                    WorkOrderTaskId = workOrderTask.WorkOrderTaskId,
                    ChargeToClientLookupId = workOrderTask.ChargeToClientLookupId
                };
                workOrderTaskList.Add(tmpWorkOrderTask);
            }

            return workOrderTaskList;
        }

        public static List<WorkOrderTask> RetriveByEquipmentId(DatabaseKey dbKey, WorkOrderTask workordertask)
        {
            WorkOrderTask_RetrieveByEquipmentId trans = new WorkOrderTask_RetrieveByEquipmentId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.WorkOrderTask = workordertask.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return WorkOrderTask.UpdateFromDatabaseObjectList(trans.WorkOrderTaskList);
        }

        public static List<WorkOrderTask> RetriveByWorkOrderId(DatabaseKey dbKey, WorkOrderTask workordertask)
        {
            WorkOrderTask_RetrieveByWorkOrderId trans = new WorkOrderTask_RetrieveByWorkOrderId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.WorkOrderTask = workordertask.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return WorkOrderTask.UpdateFromDatabaseObjectList(trans.WorkOrderTaskList);
        }
        public static List<WorkOrderTask> RetriveByWorkOrderIdV2(DatabaseKey dbKey, WorkOrderTask workordertask)
        {
            WorkOrderTask_RetrieveByWorkOrderIdV2 trans = new WorkOrderTask_RetrieveByWorkOrderIdV2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.WorkOrderTask = workordertask.ToDatabaseObjectRetriveByWorkOrderIdV2();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return WorkOrderTask.UpdateFromDatabasetRetriveByWorkOrderIdV2ObjectList(trans.WorkOrderTaskList);
        }

        public b_WorkOrderTask ToDatabaseObjectRetriveByWorkOrderIdV2()
        {
            b_WorkOrderTask dbObj = new b_WorkOrderTask();
            dbObj.ClientId = this.ClientId;          
            dbObj.WorkOrderId = this.WorkOrderId;
            dbObj.OrderbyColumn = this.OrderbyColumn;
            dbObj.OrderBy = this.OrderBy;
            dbObj.OffSetVal = this.OffSetVal;
            dbObj.NextRow = this.NextRow;
            
            return dbObj;
        }
        public void RetriveByPKForeignKeys(DatabaseKey dbKey)
        {
            WorkOrderTask_RetrieveByPKForeignKeys trans = new WorkOrderTask_RetrieveByPKForeignKeys()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            //trans.WorkOrderTask = this.ToDatabaseObject();
            trans.WorkOrderTask = this.ToExtendedDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            //UpdateFromDatabaseObject(trans.WorkOrderTask);
            UpdateFromExtendedDatabaseObject(trans.WorkOrderTask);
        }

        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            WorkOrderTask_ValidateByClientLookupId trans = new WorkOrderTask_ValidateByClientLookupId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.WorkOrderTask = this.ToDatabaseObject();
            trans.WorkOrderTask.ParentSiteId = this.ParentSiteId;
            trans.WorkOrderTask.AssignedTo_PersonnelClientLookupId = string.IsNullOrEmpty(this.AssignedTo_PersonnelClientLookupId) ? "" : this.AssignedTo_PersonnelClientLookupId;
            trans.WorkOrderTask.CompleteBy_PersonnelClientLookupId = string.IsNullOrEmpty(this.CompleteBy_PersonnelClientLookupId) ? "" : this.CompleteBy_PersonnelClientLookupId;
            trans.WorkOrderTask.ChargeToClientLookupId = string.IsNullOrEmpty(this.ChargeToClientLookupId) ? "" : this.ChargeToClientLookupId;
            trans.WorkOrderTask.MeterId_ClientLookupId = string.IsNullOrEmpty(this.MeterId_ClientLookupId) ? "" : this.MeterId_ClientLookupId;
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            List<StoredProcValidationError> errors = new List<StoredProcValidationError>();

            if (trans.StoredProcValidationErrorList != null)
            {
                foreach (b_StoredProcValidationError error in trans.StoredProcValidationErrorList)
                {
                    StoredProcValidationError tmp = new StoredProcValidationError();
                    tmp.UpdateFromDatabaseObject(error);
                    errors.Add(tmp);
                }
            }

            return errors;
        }

        public void CreateByPKForeignKeys(DatabaseKey dbKey)
        {
            Validate<WorkOrderTask>(dbKey);

            if (IsValid)
            {
                WorkOrderTask_CreateByForeignKeys trans = new WorkOrderTask_CreateByForeignKeys()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                trans.WorkOrderTask = this.ToDatabaseObject();
                trans.WorkOrderTask.ParentSiteId = this.ParentSiteId;
                trans.WorkOrderTask.AssignedTo_PersonnelClientLookupId = string.IsNullOrEmpty(this.AssignedTo_PersonnelClientLookupId) ? "" : this.AssignedTo_PersonnelClientLookupId;
                trans.WorkOrderTask.CompleteBy_PersonnelClientLookupId = string.IsNullOrEmpty(this.CompleteBy_PersonnelClientLookupId) ? "" : this.CompleteBy_PersonnelClientLookupId;
                trans.WorkOrderTask.ChargeToClientLookupId = string.IsNullOrEmpty(this.ChargeToClientLookupId) ? "" : this.ChargeToClientLookupId;
                trans.WorkOrderTask.MeterId_ClientLookupId = string.IsNullOrEmpty(this.MeterId_ClientLookupId) ? "" : this.MeterId_ClientLookupId;
                trans.dbKey = dbKey.ToTransDbKey();
                trans.Execute();

                // The create procedure may have populated an auto-incremented key. 
                UpdateFromDatabaseObject(trans.WorkOrderTask);
            }
        }

        public void UpdateByPKForeignKeys(DatabaseKey dbKey)
        {
            Validate<WorkOrderTask>(dbKey);

            if (IsValid)
            {
                WorkOrderTask_UpdateByForeignKeys trans = new WorkOrderTask_UpdateByForeignKeys()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                trans.WorkOrderTask = this.ToDatabaseObject();
                trans.WorkOrderTask.ParentSiteId = this.ParentSiteId;
                trans.WorkOrderTask.AssignedTo_PersonnelClientLookupId = string.IsNullOrEmpty(this.AssignedTo_PersonnelClientLookupId) ? "" : this.AssignedTo_PersonnelClientLookupId;
                trans.WorkOrderTask.CompleteBy_PersonnelClientLookupId = string.IsNullOrEmpty(this.CompleteBy_PersonnelClientLookupId) ? "" : this.CompleteBy_PersonnelClientLookupId;
                trans.WorkOrderTask.ChargeToClientLookupId = string.IsNullOrEmpty(this.ChargeToClientLookupId) ? "" : this.ChargeToClientLookupId;
                trans.WorkOrderTask.MeterId_ClientLookupId = string.IsNullOrEmpty(this.MeterId_ClientLookupId) ? "" : this.MeterId_ClientLookupId;
                trans.dbKey = dbKey.ToTransDbKey();
                trans.Execute();

                UpdateFromDatabaseObject(trans.WorkOrderTask);
            }
        }
        public void UpdateByPKForeignKeysTask(DatabaseKey dbKey)
        {
            Validate<WorkOrderTask>(dbKey);

            if (IsValid)
            {
                WorkOrderTask_UpdateByForeignKeysFroTask trans = new WorkOrderTask_UpdateByForeignKeysFroTask()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                trans.WorkOrderTask = this.ToDatabaseObject();
                trans.WorkOrderTask.ParentSiteId = this.ParentSiteId;
                trans.WorkOrderTask.AssignedTo_PersonnelClientLookupId = string.IsNullOrEmpty(this.AssignedTo_PersonnelClientLookupId) ? "" : this.AssignedTo_PersonnelClientLookupId;
                trans.WorkOrderTask.CompleteBy_PersonnelClientLookupId = string.IsNullOrEmpty(this.CompleteBy_PersonnelClientLookupId) ? "" : this.CompleteBy_PersonnelClientLookupId;
                trans.WorkOrderTask.ChargeToClientLookupId = string.IsNullOrEmpty(this.ChargeToClientLookupId) ? "" : this.ChargeToClientLookupId;
                trans.WorkOrderTask.MeterId_ClientLookupId = string.IsNullOrEmpty(this.MeterId_ClientLookupId) ? "" : this.MeterId_ClientLookupId;
                trans.dbKey = dbKey.ToTransDbKey();
                trans.Execute();

                UpdateFromDatabaseObject(trans.WorkOrderTask);
            }
        }
        public void ReOrderTask(DatabaseKey dbKey)
        {
            Validate<WorkOrderTask>(dbKey);

            if (IsValid)
            {
                WorkOrderTask_ReOrderTask trans = new WorkOrderTask_ReOrderTask()
                {
                    CallerUserInfoId = dbKey.User.UserInfoId,
                    CallerUserName = dbKey.UserName,
                };
                trans.WorkOrderTask = this.ToDatabaseObject();
                trans.WorkOrderTask.ParentSiteId = this.ParentSiteId;
                trans.WorkOrderTask.AssignedTo_PersonnelClientLookupId = string.IsNullOrEmpty(this.AssignedTo_PersonnelClientLookupId) ? "" : this.AssignedTo_PersonnelClientLookupId;
                trans.WorkOrderTask.CompleteBy_PersonnelClientLookupId = string.IsNullOrEmpty(this.CompleteBy_PersonnelClientLookupId) ? "" : this.CompleteBy_PersonnelClientLookupId;
                trans.WorkOrderTask.ChargeToClientLookupId = string.IsNullOrEmpty(this.ChargeToClientLookupId) ? "" : this.ChargeToClientLookupId;
                trans.WorkOrderTask.MeterId_ClientLookupId = string.IsNullOrEmpty(this.MeterId_ClientLookupId) ? "" : this.MeterId_ClientLookupId;
                trans.dbKey = dbKey.ToTransDbKey();
                trans.Execute();

                UpdateFromDatabaseObject(trans.WorkOrderTask);
            }
        }


        public void UpdateFromDatabaseObjectWoTaskPrintExtended(b_WorkOrderTask dbObj)
        {
           // this.UpdateFromDatabaseObject(dbObj);
            // 2022-Dec-08 - RKL - V2-821
            // Added the 
            this.WorkOrderId = dbObj.WorkOrderId;
            this.Description = dbObj.Description;
            this.ScheduledDuration = dbObj.ScheduledDuration;     
            this.Status = dbObj.Status;
            // The "Check" and "X" are not working as of 2022-12-09
            // MUST set the this.Status value
            //switch (dbObj.Status)
            switch (this.Status)
            {
                case Common.Constants.WorkOrderStatusConstants.Complete:
                    this.Complete_Mark = "\u221A";
                    break;
                case Common.Constants.WorkOrderStatusConstants.Canceled:
                    this.Complete_Mark = "X";
                    break;
                default:
                    this.Complete_Mark = string.Empty;
                    break;
            }
            this.TaskNumber = dbObj.TaskNumber;
        }
    }
}
