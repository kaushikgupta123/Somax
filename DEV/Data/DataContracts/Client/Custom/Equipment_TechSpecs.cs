/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System.Collections.Generic;
using System.Runtime.Serialization;
using Database.Business;
using Database;

namespace DataContracts
{
    public partial class Equipment_TechSpecs : DataContractBase, IStoredProcedureValidation
    {

        #region Properties
        [DataMember]
        public string ClientLookupId { get; set; }

        [DataMember]
        public string Description { get; set; }

        [DataMember]
        public string UnitOfMeasure { get; set; }
        #endregion

        public List<Equipment_TechSpecs> RetrieveAll(DatabaseKey dbKey)
        {
            List<Equipment_TechSpecs> result = new List<Equipment_TechSpecs>();
            Equipment_TechSpecs_RetrieveOfList trans = new Equipment_TechSpecs_RetrieveOfList
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
                ClientId = dbKey.Client.ClientId
            };

            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            result = UpdateFromDatabaseObjectList(trans.Equipment_TechSpecsList);
            return result;
        }


        public void ValidateByTechSpecId(DatabaseKey dbKey)
        {
            Validate<Equipment_TechSpecs>(dbKey);
        }

        public static List<Equipment_TechSpecs> UpdateFromDatabaseObjectList(List<b_Equipment_TechSpecs> dbObjs)
        {
            List<Equipment_TechSpecs> result = new List<Equipment_TechSpecs>();

            foreach (b_Equipment_TechSpecs dbObj in dbObjs)
            {
                Equipment_TechSpecs tmp = new Equipment_TechSpecs();
                tmp.UpdateFromExtendedDatabaseObject(dbObj);
                result.Add(tmp);
            }
            return result;
        }

        public void UpdateFromExtendedDatabaseObject(b_Equipment_TechSpecs dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.ClientLookupId = dbObj.ClientLookupId;
            this.Description = dbObj.Description;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
        }

        public b_Equipment_TechSpecs ToExtendedDatabaseObject()
        {
            b_Equipment_TechSpecs dbObj = this.ToDatabaseObject();
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.Description = this.Description;
            dbObj.UnitOfMeasure = this.UnitOfMeasure;
            return dbObj;
        }

        public static List<b_Equipment_TechSpecs> ToDatabaseObjectList(List<Equipment_TechSpecs> objs)
        {
            List<b_Equipment_TechSpecs> result = new List<b_Equipment_TechSpecs>();
            foreach (Equipment_TechSpecs obj in objs)
            {
                result.Add(obj.ToExtendedDatabaseObject());
            }

            return result;
        }

        public static List<Equipment_TechSpecs> RetriveByEquipmentId(DatabaseKey dbKey, Equipment_TechSpecs eq)
        {
            Equipment_TechSpecs_RetrieveByEquipmentId trans = new Equipment_TechSpecs_RetrieveByEquipmentId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.Equipment_TechSpecs = eq.ToExtendedDatabaseObject();

            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return Equipment_TechSpecs.UpdateFromDatabaseObjectList(trans.Equipment_TechSpecsList);
        }

        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            Equipment_TechSpecs_ValidateByClientLookupId trans = new Equipment_TechSpecs_ValidateByClientLookupId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.Equipment_TechSpecs = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            List<StoredProcValidationError> errors = new List<StoredProcValidationError>();

            if (trans.StoredProcValidationErrorList != null)
            {
                foreach (b_StoredProcValidationError error in trans.StoredProcValidationErrorList)
                {
                    StoredProcValidationError tmp = new StoredProcValidationError();
                    tmp.UpdateFromDatabaseObject(error);
                    errors.Add(tmp);
                }
            }

            return errors;
        }

    }
}
