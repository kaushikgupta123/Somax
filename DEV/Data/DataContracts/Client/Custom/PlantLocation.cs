/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PlantLocation table.
    /// </summary>    
    public partial class PlantLocation : DataContractBase/*,IStoredProcedureValidation*/
    {
        public string AreaDescription { get; set; }
        public string DepartmentDescription { get; set; }
        public string LineDescription { get; set; }

        #region  Tree list
        public List<PlantLocation> RetrieveForTreeList(DatabaseKey dbKey)
        {
            List<PlantLocation> plantLocationList = new List<PlantLocation>();
            PlantLocation_RetrieveAllForTreeList trans = new PlantLocation_RetrieveAllForTreeList()
           {
               CallerUserInfoId = dbKey.User.UserInfoId,
               CallerUserName = dbKey.UserName
           };
            trans.PlantLocation = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            // SOM-1259
            trans.UseTransaction = false;
            trans.Execute();
            foreach (b_PlantLocation plantLocation in trans.PlantLocationList)
            {
                PlantLocation tmpPlantLocation = new PlantLocation();

                tmpPlantLocation.UpdateFromDatabaseObjectExtended(plantLocation);
                plantLocationList.Add(tmpPlantLocation);

            }
            return plantLocationList;
        }

        public void UpdateFromDatabaseObjectExtended(b_PlantLocation dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.Description = dbObj.Description;
            this.AreaDescription = dbObj.AreaDescription;
            this.DepartmentDescription = dbObj.DepartmentDescription;
            this.LineDescription = dbObj.LineDescription;

        }
        #endregion

        #region Delete And Validation

        //public void DeleteWithValidation(DatabaseKey dbKey, Business.Localization.Global loc)
        //{
        //    Validate<PlantLocation>(dbKey);
        //}

        //public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        //{
        //    List<StoredProcValidationError> errors = new List<StoredProcValidationError>();

        //    PlantLocation_DeleteWithValidation trans = new PlantLocation_DeleteWithValidation()
        //    {
        //        CallerUserInfoId = dbKey.User.UserInfoId,
        //        CallerUserName = dbKey.UserName,
        //    };
        //    trans.PlantLocation = this.ToDatabaseObject();
        //    trans.dbKey = dbKey.ToTransDbKey();
        //    trans.Execute();

        //    if (trans.StoredProcValidationErrorList != null)
        //    {
        //        foreach (b_StoredProcValidationError error in trans.StoredProcValidationErrorList)
        //        {
        //            StoredProcValidationError tmp = new StoredProcValidationError();
        //            tmp.UpdateFromDatabaseObject(error);
        //            errors.Add(tmp);
        //        }
        //    }
        //    return errors;
        //}


        #endregion

        #region Validate PlantLocation Equipment Charge To look up

        [DataMember]
        public string ChargeToType { get; set; }
        [DataMember]
        public string ChargeTo { get; set; }
        [DataMember]
        public string ChargeToName { get; set; }

        //public void ValidatePlantEquipChargeTo(DatabaseKey dbKey)
        //{

        //    ValidatePlantEquipChargeTo trans = new ValidatePlantEquipChargeTo()
        //    {
        //        CallerUserInfoId = dbKey.User.UserInfoId,
        //        CallerUserName = dbKey.UserName,
        //    };
        //    trans.PlantLocation = this.ToDatabaseObjectForValidateEquipChargeTo();
        //    trans.dbKey = dbKey.ToTransDbKey();
        //    trans.Execute();
        //    UpdateFromDatabaseObjectForValidateEquipChargeTo(trans.PlantLocation);
        //}

        public b_PlantLocation ToDatabaseObjectForValidateEquipChargeTo()
        {
            b_PlantLocation dbObj = this.ToDatabaseObject();
            dbObj.ChargeTo = this.ChargeTo;
            dbObj.ChargeToType = this.ChargeToType;
            dbObj.ChargeToName = this.ChargeToName;
            return dbObj;

        }

        public void UpdateFromDatabaseObjectForValidateEquipChargeTo(b_PlantLocation dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.ChargeTo = dbObj.ChargeTo;
            this.ChargeToType = dbObj.ChargeToType;
            this.ChargeToName = dbObj.ChargeToName;
        }
        #endregion
    }





}
