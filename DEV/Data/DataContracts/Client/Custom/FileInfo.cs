/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Common.Extensions;
using Database.Business;
using Database.Transactions;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the FileAttachmentInfo table.
    /// </summary>

    public partial class FileInfo : DataContractBase 
    {
        #region Private Varaibles
        private long _userInfoId;
        #endregion

        #region Public Methods

        // SOM-1156
        public static List<FileInfo> UpdateFromDatabaseObjectList(List<b_FileInfo> dbObj, long userInfoId, bool attach_edit, string timezone)
        {
            List<FileInfo> result = new List<FileInfo>();
            foreach (b_FileInfo notes in dbObj)
            {
                FileInfo tmp = new FileInfo() { UserInfoId = userInfoId };
                tmp.UpdateFromExtendedDatabaseObject(notes,attach_edit, timezone);
                result.Add(tmp);
            }

            return result;
        }

        // SOM-1156
        public void UpdateFromExtendedDatabaseObject(b_FileInfo dbObj, bool attach_edit, string timezone)
        {
            UpdateFromDatabaseObject(dbObj);
            if (dbObj.CreateDate != null && dbObj.CreateDate != DateTime.MinValue)
            {
                this.CreateDate = dbObj.CreateDate.ToUserTimeZone(timezone);
            }
            else
            {
                this.CreateDate = dbObj.CreateDate;
            }
            this.OwnerName = dbObj.OwnerName;
            this.OwnerId = dbObj.OwnerId;
            this.FileAttachmentId = dbObj.FileAttachmentId;
            this.ObjectId = dbObj.ObjectId;
            this.TableName = dbObj.TableName;
            this.Subject = dbObj.Subject;

            //IsEditable = (UserInfoId == OwnerId); // The notes can only be edited by the owner
            IsEditable = (UserInfoId == OwnerId || attach_edit); // The notes can only be edited by the owner
            
        }

        public static List<b_FileInfo> ToDatabaseObjectList(List<FileInfo> objs)
        {
            List<b_FileInfo> result = new List<b_FileInfo>();
            foreach (FileInfo obj in objs)
            {
                result.Add(obj.ToExtendedDatabaseObject());
            }

            return result;
        }

        public b_FileInfo ToExtendedDatabaseObject()
        {
            b_FileInfo dbObj = ToDatabaseObject();
            dbObj.CreateDate = this.CreateDate;
            dbObj.OwnerName = this.OwnerName;
            dbObj.OwnerId = this.OwnerId;
            dbObj.FileAttachmentId = this.FileAttachmentId;
            dbObj.TableName = this.TableName;
            dbObj.ObjectId = this.ObjectId;
            dbObj.Subject = this.Subject;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        // SOM-1156
        public List<FileInfo> RetrieveByObjectId(DatabaseKey dbKey,string timezone)
        {
            FileInfo_RetrieveByObjectId trans = new FileInfo_RetrieveByObjectId()
            {
              CallerUserInfoId = dbKey.User.UserInfoId,
              CallerUserName = dbKey.UserName
            };
            trans.FileInfo = this.ToExtendedDatabaseObject();
            trans.FileInfoList = new List<b_FileInfo>();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            _userInfoId = dbKey.User.UserInfoId;
            return FileInfo.UpdateFromDatabaseObjectList(trans.FileInfoList, _userInfoId, dbKey.User.IsSuperUser, timezone);
        }
        
        #endregion
        
        #region Properties

        /// <summary>
        /// CreateDate property
        /// </summary>
        [DataMember]
        public DateTime CreateDate { get; set; }

        /// <summary>
        /// CreateDate property
        /// </summary>
        [DataMember]
        public string FullName 
        { 
            get {return string.Format("{0}.{1}", FileName, FileType);}
        }

        [DataMember]
        public string FileSizeWithUnit
        {
            get { return FileSize.ToFileSize(); }
        }

        [DataMember]
        public string OwnerName { get; set; }

        [DataMember]
        public long FileAttachmentId { get; set; }

        [DataMember]
        public long OwnerId { get; set; }

        [DataMember]
        public long ObjectId { get; set; }

        [DataMember]
        public string TableName { get; set; }

         [DataMember]
        public string Subject { get; set; }

         [DataMember]
         public long UserInfoId { get; set; }

         [DataMember]
         public bool IsEditable { get; set; }
        #endregion
    }
}
