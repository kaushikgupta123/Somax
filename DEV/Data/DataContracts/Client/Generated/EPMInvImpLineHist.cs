/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the EPMInvImpLineHist table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class EPMInvImpLineHist : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public EPMInvImpLineHist()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_EPMInvImpLineHist dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.EPMInvImpLineHistId = dbObj.EPMInvImpLineHistId;
            this.EPMInvImpHdrId = dbObj.EPMInvImpHdrId;
            this.LineNumber = dbObj.LineNumber;
            this.BuyerPartNumber = dbObj.BuyerPartNumber;
            this.VendorPartNumber = dbObj.VendorPartNumber;
            this.Quantity = dbObj.Quantity;
            this.UnitCost = dbObj.UnitCost;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.DateProcessed = dbObj.DateProcessed;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_EPMInvImpLineHist dbObj = new b_EPMInvImpLineHist();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_EPMInvImpLineHist ToDatabaseObject()
        {
            b_EPMInvImpLineHist dbObj = new b_EPMInvImpLineHist();
            dbObj.ClientId = this.ClientId;
            dbObj.EPMInvImpLineHistId = this.EPMInvImpLineHistId;
            dbObj.EPMInvImpHdrId = this.EPMInvImpHdrId;
            dbObj.LineNumber = this.LineNumber;
            dbObj.BuyerPartNumber = this.BuyerPartNumber;
            dbObj.VendorPartNumber = this.VendorPartNumber;
            dbObj.Quantity = this.Quantity;
            dbObj.UnitCost = this.UnitCost;
            dbObj.UnitOfMeasure = this.UnitOfMeasure;
            dbObj.DateProcessed = this.DateProcessed;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            EPMInvImpLineHist_Create trans = new EPMInvImpLineHist_Create();
            trans.EPMInvImpLineHist = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.EPMInvImpLineHist);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            EPMInvImpLineHist_Retrieve trans = new EPMInvImpLineHist_Retrieve();
            trans.EPMInvImpLineHist = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.EPMInvImpLineHist);
        }

        public void Update(DatabaseKey dbKey) 
        {
            EPMInvImpLineHist_Update trans = new EPMInvImpLineHist_Update();
            trans.EPMInvImpLineHist = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.EPMInvImpLineHist);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            EPMInvImpLineHist_Delete trans = new EPMInvImpLineHist_Delete();
            trans.EPMInvImpLineHist = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.EPMInvImpLineHistId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _EPMInvImpLineHistId;
        private long _EPMInvImpHdrId;
        private int _LineNumber;
        private string _BuyerPartNumber;
        private string _VendorPartNumber;
        private decimal _Quantity;
        private decimal _UnitCost;
        private string _UnitOfMeasure;
        private DateTime? _DateProcessed;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// EPMInvImpLineHistId property
        /// </summary>
        [DataMember]
        public long EPMInvImpLineHistId
        {
            get { return _EPMInvImpLineHistId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EPMInvImpLineHistId); }
        }

        /// <summary>
        /// EPMInvImpHdrId property
        /// </summary>
        [DataMember]
        public long EPMInvImpHdrId
        {
            get { return _EPMInvImpHdrId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EPMInvImpHdrId); }
        }

        /// <summary>
        /// LineNumber property
        /// </summary>
        [DataMember]
        public int LineNumber
        {
            get { return _LineNumber; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _LineNumber); }
        }

        /// <summary>
        /// BuyerPartNumber property
        /// </summary>
        [DataMember]
        public string BuyerPartNumber
        {
            get { return _BuyerPartNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _BuyerPartNumber); }
        }

        /// <summary>
        /// VendorPartNumber property
        /// </summary>
        [DataMember]
        public string VendorPartNumber
        {
            get { return _VendorPartNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VendorPartNumber); }
        }

        /// <summary>
        /// Quantity property
        /// </summary>
        [DataMember]
        public decimal Quantity
        {
            get { return _Quantity; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Quantity); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        [DataMember]
        public string UnitOfMeasure
        {
            get { return _UnitOfMeasure; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UnitOfMeasure); }
        }

        /// <summary>
        /// DateProcessed property
        /// </summary>
        [DataMember]
        public DateTime? DateProcessed
        {
            get { return _DateProcessed; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _DateProcessed); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
