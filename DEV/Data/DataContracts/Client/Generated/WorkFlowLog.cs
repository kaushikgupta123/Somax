/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2013 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the WorkFlowLog table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class WorkFlowLog : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public WorkFlowLog()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_WorkFlowLog dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.WorkFlowLogId = dbObj.WorkFlowLogId;
            this.ObjectName = dbObj.ObjectName;
            this.ObjectId = dbObj.ObjectId;
            this.UserName = dbObj.UserName;
            this.UserInfoId = dbObj.UserInfoId;
            this.Message = dbObj.Message;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_WorkFlowLog dbObj = new b_WorkFlowLog();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_WorkFlowLog ToDatabaseObject()
        {
            b_WorkFlowLog dbObj = new b_WorkFlowLog();
            dbObj.ClientId = this.ClientId;
            dbObj.WorkFlowLogId = this.WorkFlowLogId;
            dbObj.ObjectName = this.ObjectName;
            dbObj.ObjectId = this.ObjectId;
            dbObj.UserName = this.UserName;
            dbObj.UserInfoId = this.UserInfoId;
            dbObj.Message = this.Message;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            WorkFlowLog_Create trans = new WorkFlowLog_Create();
            trans.WorkFlowLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.WorkFlowLog);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            WorkFlowLog_Retrieve trans = new WorkFlowLog_Retrieve();
            trans.WorkFlowLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.WorkFlowLog);
        }

        public void Update(DatabaseKey dbKey) 
        {
            WorkFlowLog_Update trans = new WorkFlowLog_Update();
            trans.WorkFlowLog = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.WorkFlowLog);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            WorkFlowLog_Delete trans = new WorkFlowLog_Delete();
            trans.WorkFlowLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.WorkFlowLogId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _WorkFlowLogId;
        private string _ObjectName;
        private long _ObjectId;
        private string _UserName;
        private long _UserInfoId;
        private string _Message;
        private long _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// WorkFlowLogId property
        /// </summary>
        [DataMember]
        public long WorkFlowLogId
        {
            get { return _WorkFlowLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkFlowLogId); }
        }

        /// <summary>
        /// ObjectName property
        /// </summary>
        [DataMember]
        public string ObjectName
        {
            get { return _ObjectName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectName); }
        }

        /// <summary>
        /// ObjectId property
        /// </summary>
        [DataMember]
        public long ObjectId
        {
            get { return _ObjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectId); }
        }

        /// <summary>
        /// UserName property
        /// </summary>
        [DataMember]
        public string UserName
        {
            get { return _UserName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UserName); }
        }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        [DataMember]
        public long UserInfoId
        {
            get { return _UserInfoId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UserInfoId); }
        }

        /// <summary>
        /// Message property
        /// </summary>
        [DataMember]
        public string Message
        {
            get { return _Message; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Message); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public long UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
