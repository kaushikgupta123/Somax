/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SanitationJob table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class SanitationJob : DataContractBase, IPermission 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SanitationJob()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_SanitationJob dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.SanitationJobId = dbObj.SanitationJobId;
            this.SanitationMasterId = dbObj.SanitationMasterId;
            this.AreaId = dbObj.AreaId;
            this.SiteId = dbObj.SiteId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.SourceType = dbObj.SourceType;
            this.SourceId = dbObj.SourceId;
            this.ActualDuration = dbObj.ActualDuration;
            this.AssignedTo_PersonnelId = dbObj.AssignedTo_PersonnelId;
            this.CancelReason = dbObj.CancelReason;
            this.ChargeToId = dbObj.ChargeToId;
            this.ChargeType = dbObj.ChargeType;
            this.ChargeTo_Name = dbObj.ChargeTo_Name;
            this.CompleteBy_PersonnelId = dbObj.CompleteBy_PersonnelId;
            this.CompleteComments = dbObj.CompleteComments;
            this.CompleteDate = dbObj.CompleteDate;
            this.Description = dbObj.Description;
            this.Shift = dbObj.Shift;
            this.DownRequired = dbObj.DownRequired;
            this.ScheduledDate = dbObj.ScheduledDate;
            this.ScheduledDuration = dbObj.ScheduledDuration;
            this.Status = dbObj.Status;
            this.Creator_PersonnelId = dbObj.Creator_PersonnelId;
            this.ApproveBy_PersonnelId = dbObj.ApproveBy_PersonnelId;
            this.ApproveDate = dbObj.ApproveDate;
            this.DeniedBy_PersonnelId = dbObj.DeniedBy_PersonnelId;
            this.DeniedDate = dbObj.DeniedDate;
            this.DeniedReason = dbObj.DeniedReason;
            this.DeniedComment = dbObj.DeniedComment;
            this.PassBy_PersonnelId = dbObj.PassBy_PersonnelId;
            this.PassDate = dbObj.PassDate;
            this.FailBy_PersonnelId = dbObj.FailBy_PersonnelId;
            this.FailDate = dbObj.FailDate;
            this.FailReason = dbObj.FailReason;
            this.FailComment = dbObj.FailComment;
            this.SanOnDemandMasterId = dbObj.SanOnDemandMasterId;
            this.Extracted = dbObj.Extracted;
            this.ExportLogId = dbObj.ExportLogId;
            this.RequiredDate = dbObj.RequiredDate;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_SanitationJob dbObj = new b_SanitationJob();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_SanitationJob ToDatabaseObject()
        {
            b_SanitationJob dbObj = new b_SanitationJob();
            dbObj.ClientId = this.ClientId;
            dbObj.SanitationJobId = this.SanitationJobId;
            dbObj.SanitationMasterId = this.SanitationMasterId;
            dbObj.AreaId = this.AreaId;
            dbObj.SiteId = this.SiteId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.SourceType = this.SourceType;
            dbObj.SourceId = this.SourceId;
            dbObj.ActualDuration = this.ActualDuration;
            dbObj.AssignedTo_PersonnelId = this.AssignedTo_PersonnelId;
            dbObj.CancelReason = this.CancelReason;
            dbObj.ChargeToId = this.ChargeToId;
            dbObj.ChargeType = this.ChargeType;
            dbObj.ChargeTo_Name = this.ChargeTo_Name;
            dbObj.CompleteBy_PersonnelId = this.CompleteBy_PersonnelId;
            dbObj.CompleteComments = this.CompleteComments;
            dbObj.CompleteDate = this.CompleteDate;
            dbObj.Description = this.Description;
            dbObj.Shift = this.Shift;
            dbObj.DownRequired = this.DownRequired;
            dbObj.ScheduledDate = this.ScheduledDate;
            dbObj.ScheduledDuration = this.ScheduledDuration;
            dbObj.Status = this.Status;
            dbObj.Creator_PersonnelId = this.Creator_PersonnelId;
            dbObj.ApproveBy_PersonnelId = this.ApproveBy_PersonnelId;
            dbObj.ApproveDate = this.ApproveDate;
            dbObj.DeniedBy_PersonnelId = this.DeniedBy_PersonnelId;
            dbObj.DeniedDate = this.DeniedDate;
            dbObj.DeniedReason = this.DeniedReason;
            dbObj.DeniedComment = this.DeniedComment;
            dbObj.PassBy_PersonnelId = this.PassBy_PersonnelId;
            dbObj.PassDate = this.PassDate;
            dbObj.FailBy_PersonnelId = this.FailBy_PersonnelId;
            dbObj.FailDate = this.FailDate;
            dbObj.FailReason = this.FailReason;
            dbObj.FailComment = this.FailComment;
            dbObj.SanOnDemandMasterId = this.SanOnDemandMasterId;
            dbObj.Extracted = this.Extracted;
            dbObj.ExportLogId = this.ExportLogId;
            dbObj.RequiredDate = this.RequiredDate;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            SanitationJob_Create trans = new SanitationJob_Create();
            trans.SanitationJob = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.SanitationJob);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            SanitationJob_Retrieve trans = new SanitationJob_Retrieve();
            trans.SanitationJob = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SanitationJob);
        }

        public void Update(DatabaseKey dbKey) 
        {
            SanitationJob_Update trans = new SanitationJob_Update();
            trans.SanitationJob = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.SanitationJob);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            SanitationJob_Delete trans = new SanitationJob_Delete();
            trans.SanitationJob = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.SanitationJobId;
			AuditTargetSiteId = this.SiteId;
			AuditTargetAreaId = this.AreaId;
			AuditTargetDepartmentId = this.DepartmentId;
			AuditTargetStoreRoomId = this.StoreroomId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _SanitationJobId;
        private long _SanitationMasterId;
        private long _AreaId;
        private long _SiteId;
        private long _DepartmentId;
        private long _StoreroomId;
        private string _ClientLookupId;
        private string _SourceType;
        private long _SourceId;
        private decimal _ActualDuration;
        private long _AssignedTo_PersonnelId;
        private string _CancelReason;
        private long _ChargeToId;
        private string _ChargeType;
        private string _ChargeTo_Name;
        private long _CompleteBy_PersonnelId;
        private string _CompleteComments;
        private DateTime? _CompleteDate;
        private string _Description;
        private string _Shift;
        private bool _DownRequired;
        private DateTime? _ScheduledDate;
        private decimal _ScheduledDuration;
        private string _Status;
        private long _Creator_PersonnelId;
        private long _ApproveBy_PersonnelId;
        private DateTime? _ApproveDate;
        private long _DeniedBy_PersonnelId;
        private DateTime? _DeniedDate;
        private string _DeniedReason;
        private string _DeniedComment;
        private long _PassBy_PersonnelId;
        private DateTime? _PassDate;
        private long _FailBy_PersonnelId;
        private DateTime? _FailDate;
        private string _FailReason;
        private string _FailComment;
        private long _SanOnDemandMasterId;
        private bool _Extracted;
        private long _ExportLogId;
        private DateTime? _RequiredDate;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SanitationJobId property
        /// </summary>
        [DataMember]
        public long SanitationJobId
        {
            get { return _SanitationJobId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationJobId); }
        }

        /// <summary>
        /// SanitationMasterId property
        /// </summary>
        [DataMember]
        public long SanitationMasterId
        {
            get { return _SanitationMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationMasterId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// SourceType property
        /// </summary>
        [DataMember]
        public string SourceType
        {
            get { return _SourceType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SourceType); }
        }

        /// <summary>
        /// SourceId property
        /// </summary>
        [DataMember]
        public long SourceId
        {
            get { return _SourceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SourceId); }
        }

        /// <summary>
        /// ActualDuration property
        /// </summary>
        [DataMember]
        public decimal ActualDuration
        {
            get { return _ActualDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ActualDuration); }
        }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        [DataMember]
        public long AssignedTo_PersonnelId
        {
            get { return _AssignedTo_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssignedTo_PersonnelId); }
        }

        /// <summary>
        /// CancelReason property
        /// </summary>
        [DataMember]
        public string CancelReason
        {
            get { return _CancelReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CancelReason); }
        }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        [DataMember]
        public long ChargeToId
        {
            get { return _ChargeToId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId); }
        }

        /// <summary>
        /// ChargeType property
        /// </summary>
        [DataMember]
        public string ChargeType
        {
            get { return _ChargeType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType); }
        }

        /// <summary>
        /// ChargeTo_Name property
        /// </summary>
        [DataMember]
        public string ChargeTo_Name
        {
            get { return _ChargeTo_Name; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeTo_Name); }
        }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CompleteBy_PersonnelId
        {
            get { return _CompleteBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteBy_PersonnelId); }
        }

        /// <summary>
        /// CompleteComments property
        /// </summary>
        [DataMember]
        public string CompleteComments
        {
            get { return _CompleteComments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteComments); }
        }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        [DataMember]
        public DateTime? CompleteDate
        {
            get { return _CompleteDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteDate); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// Shift property
        /// </summary>
        [DataMember]
        public string Shift
        {
            get { return _Shift; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Shift); }
        }

        /// <summary>
        /// DownRequired property
        /// </summary>
        [DataMember]
        public bool DownRequired
        {
            get { return _DownRequired; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DownRequired); }
        }

        /// <summary>
        /// ScheduledDate property
        /// </summary>
        [DataMember]
        public DateTime? ScheduledDate
        {
            get { return _ScheduledDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledDate); }
        }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        [DataMember]
        public decimal ScheduledDuration
        {
            get { return _ScheduledDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledDuration); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        [DataMember]
        public long Creator_PersonnelId
        {
            get { return _Creator_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Creator_PersonnelId); }
        }

        /// <summary>
        /// ApproveBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long ApproveBy_PersonnelId
        {
            get { return _ApproveBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ApproveBy_PersonnelId); }
        }

        /// <summary>
        /// ApproveDate property
        /// </summary>
        [DataMember]
        public DateTime? ApproveDate
        {
            get { return _ApproveDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ApproveDate); }
        }

        /// <summary>
        /// DeniedBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long DeniedBy_PersonnelId
        {
            get { return _DeniedBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DeniedBy_PersonnelId); }
        }

        /// <summary>
        /// DeniedDate property
        /// </summary>
        [DataMember]
        public DateTime? DeniedDate
        {
            get { return _DeniedDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _DeniedDate); }
        }

        /// <summary>
        /// DeniedReason property
        /// </summary>
        [DataMember]
        public string DeniedReason
        {
            get { return _DeniedReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _DeniedReason); }
        }

        /// <summary>
        /// DeniedComment property
        /// </summary>
        [DataMember]
        public string DeniedComment
        {
            get { return _DeniedComment; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _DeniedComment); }
        }

        /// <summary>
        /// PassBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long PassBy_PersonnelId
        {
            get { return _PassBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PassBy_PersonnelId); }
        }

        /// <summary>
        /// PassDate property
        /// </summary>
        [DataMember]
        public DateTime? PassDate
        {
            get { return _PassDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PassDate); }
        }

        /// <summary>
        /// FailBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long FailBy_PersonnelId
        {
            get { return _FailBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _FailBy_PersonnelId); }
        }

        /// <summary>
        /// FailDate property
        /// </summary>
        [DataMember]
        public DateTime? FailDate
        {
            get { return _FailDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _FailDate); }
        }

        /// <summary>
        /// FailReason property
        /// </summary>
        [DataMember]
        public string FailReason
        {
            get { return _FailReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FailReason); }
        }

        /// <summary>
        /// FailComment property
        /// </summary>
        [DataMember]
        public string FailComment
        {
            get { return _FailComment; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FailComment); }
        }

        /// <summary>
        /// SanOnDemandMasterId property
        /// </summary>
        [DataMember]
        public long SanOnDemandMasterId
        {
            get { return _SanOnDemandMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanOnDemandMasterId); }
        }

        /// <summary>
        /// Extracted property
        /// </summary>
        [DataMember]
        public bool Extracted
        {
            get { return _Extracted; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Extracted); }
        }

        /// <summary>
        /// ExportLogId property
        /// </summary>
        [DataMember]
        public long ExportLogId
        {
            get { return _ExportLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExportLogId); }
        }

        /// <summary>
        /// RequiredDate property
        /// </summary>
        [DataMember]
        public DateTime? RequiredDate
        {
            get { return _RequiredDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _RequiredDate); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
