/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PartMasterResponse table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PartMasterResponse : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PartMasterResponse()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PartMasterResponse dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.PartMasterResponseId = dbObj.PartMasterResponseId;
            this.PartMasterRequestId = dbObj.PartMasterRequestId;
            this.RequestType = dbObj.RequestType;
            this.EXPartNumber = dbObj.EXPartNumber;
            this.EXPartId = dbObj.EXPartId;
            this.Status = dbObj.Status;
            this.ErrorMessage = dbObj.ErrorMessage;
            this.LastProcessed = dbObj.LastProcessed;
            this.ImportLogId = dbObj.ImportLogId;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_PartMasterResponse dbObj = new b_PartMasterResponse();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_PartMasterResponse ToDatabaseObject()
        {
            b_PartMasterResponse dbObj = new b_PartMasterResponse();
            dbObj.ClientId = this.ClientId;
            dbObj.PartMasterResponseId = this.PartMasterResponseId;
            dbObj.PartMasterRequestId = this.PartMasterRequestId;
            dbObj.RequestType = this.RequestType;
            dbObj.EXPartNumber = this.EXPartNumber;
            dbObj.EXPartId = this.EXPartId;
            dbObj.Status = this.Status;
            dbObj.ErrorMessage = this.ErrorMessage;
            dbObj.LastProcessed = this.LastProcessed;
            dbObj.ImportLogId = this.ImportLogId;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            PartMasterResponse_Create trans = new PartMasterResponse_Create();
            trans.PartMasterResponse = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PartMasterResponse);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            PartMasterResponse_Retrieve trans = new PartMasterResponse_Retrieve();
            trans.PartMasterResponse = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PartMasterResponse);
        }

        public void Update(DatabaseKey dbKey) 
        {
            PartMasterResponse_Update trans = new PartMasterResponse_Update();
            trans.PartMasterResponse = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PartMasterResponse);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            PartMasterResponse_Delete trans = new PartMasterResponse_Delete();
            trans.PartMasterResponse = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PartMasterResponseId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _PartMasterResponseId;
        private long _PartMasterRequestId;
        private string _RequestType;
        private string _EXPartNumber;
        private long _EXPartId;
        private string _Status;
        private string _ErrorMessage;
        private DateTime? _LastProcessed;
        private long _ImportLogId;
        private long _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PartMasterResponseId property
        /// </summary>
        [DataMember]
        public long PartMasterResponseId
        {
            get { return _PartMasterResponseId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartMasterResponseId); }
        }

        /// <summary>
        /// PartMasterRequestId property
        /// </summary>
        [DataMember]
        public long PartMasterRequestId
        {
            get { return _PartMasterRequestId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartMasterRequestId); }
        }

        /// <summary>
        /// RequestType property
        /// </summary>
        [DataMember]
        public string RequestType
        {
            get { return _RequestType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RequestType); }
        }

        /// <summary>
        /// EXPartNumber property
        /// </summary>
        [DataMember]
        public string EXPartNumber
        {
            get { return _EXPartNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _EXPartNumber); }
        }

        /// <summary>
        /// EXPartId property
        /// </summary>
        [DataMember]
        public long EXPartId
        {
            get { return _EXPartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EXPartId); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        [DataMember]
        public string ErrorMessage
        {
            get { return _ErrorMessage; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorMessage); }
        }

        /// <summary>
        /// LastProcessed property
        /// </summary>
        [DataMember]
        public DateTime? LastProcessed
        {
            get { return _LastProcessed; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastProcessed); }
        }

        /// <summary>
        /// ImportLogId property
        /// </summary>
        [DataMember]
        public long ImportLogId
        {
            get { return _ImportLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ImportLogId); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public long UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
