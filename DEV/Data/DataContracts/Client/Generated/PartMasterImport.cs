/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PartMasterImport table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PartMasterImport : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PartMasterImport()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PartMasterImport dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.PartMasterImportId = dbObj.PartMasterImportId;
            this.SiteId = dbObj.SiteId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.OEMPart = dbObj.OEMPart;
            this.EXPartId = dbObj.EXPartId;
            this.ExAltPartId1 = dbObj.ExAltPartId1;
            this.ExAltPartId2 = dbObj.ExAltPartId2;
            this.ExAltPartId3 = dbObj.ExAltPartId3;
            this.ExUniqueId = dbObj.ExUniqueId;
            this.Enabled = dbObj.Enabled;
            this.LongDescription = dbObj.LongDescription;
            this.Manufacturer = dbObj.Manufacturer;
            this.ManufacturerId = dbObj.ManufacturerId;
            this.ShortDescription = dbObj.ShortDescription;
            this.UnitCost = dbObj.UnitCost;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.UnitOfMeasureDesc = dbObj.UnitOfMeasureDesc;
            this.Category = dbObj.Category;
            this.CategoryDesc = dbObj.CategoryDesc;
            this.UPCCode = dbObj.UPCCode;
            this.ImageURL = dbObj.ImageURL;
            this.ErrorMessage = dbObj.ErrorMessage;
            this.LastProcessed = dbObj.LastProcessed;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_PartMasterImport dbObj = new b_PartMasterImport();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_PartMasterImport ToDatabaseObject()
        {
            b_PartMasterImport dbObj = new b_PartMasterImport();
            dbObj.ClientId = this.ClientId;
            dbObj.PartMasterImportId = this.PartMasterImportId;
            dbObj.SiteId = this.SiteId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.OEMPart = this.OEMPart;
            dbObj.EXPartId = this.EXPartId;
            dbObj.ExAltPartId1 = this.ExAltPartId1;
            dbObj.ExAltPartId2 = this.ExAltPartId2;
            dbObj.ExAltPartId3 = this.ExAltPartId3;
            dbObj.ExUniqueId = this.ExUniqueId;
            dbObj.Enabled = this.Enabled;
            dbObj.LongDescription = this.LongDescription;
            dbObj.Manufacturer = this.Manufacturer;
            dbObj.ManufacturerId = this.ManufacturerId;
            dbObj.ShortDescription = this.ShortDescription;
            dbObj.UnitCost = this.UnitCost;
            dbObj.UnitOfMeasure = this.UnitOfMeasure;
            dbObj.UnitOfMeasureDesc = this.UnitOfMeasureDesc;
            dbObj.Category = this.Category;
            dbObj.CategoryDesc = this.CategoryDesc;
            dbObj.UPCCode = this.UPCCode;
            dbObj.ImageURL = this.ImageURL;
            dbObj.ErrorMessage = this.ErrorMessage;
            dbObj.LastProcessed = this.LastProcessed;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            PartMasterImport_Create trans = new PartMasterImport_Create();
            trans.PartMasterImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PartMasterImport);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            PartMasterImport_Retrieve trans = new PartMasterImport_Retrieve();
            trans.PartMasterImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PartMasterImport);
        }

        public void Update(DatabaseKey dbKey) 
        {
            PartMasterImport_Update trans = new PartMasterImport_Update();
            trans.PartMasterImport = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PartMasterImport);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            PartMasterImport_Delete trans = new PartMasterImport_Delete();
            trans.PartMasterImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PartMasterImportId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _PartMasterImportId;
        private long _SiteId;
        private string _ClientLookupId;
        private bool _OEMPart;
        private long _EXPartId;
        private string _ExAltPartId1;
        private string _ExAltPartId2;
        private string _ExAltPartId3;
        private Guid _ExUniqueId;
        private string _Enabled;
        private string _LongDescription;
        private string _Manufacturer;
        private string _ManufacturerId;
        private string _ShortDescription;
        private decimal _UnitCost;
        private string _UnitOfMeasure;
        private string _UnitOfMeasureDesc;
        private string _Category;
        private string _CategoryDesc;
        private string _UPCCode;
        private string _ImageURL;
        private string _ErrorMessage;
        private DateTime? _LastProcessed;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PartMasterImportId property
        /// </summary>
        [DataMember]
        public long PartMasterImportId
        {
            get { return _PartMasterImportId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartMasterImportId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// OEMPart property
        /// </summary>
        [DataMember]
        public bool OEMPart
        {
            get { return _OEMPart; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _OEMPart); }
        }

        /// <summary>
        /// EXPartId property
        /// </summary>
        [DataMember]
        public long EXPartId
        {
            get { return _EXPartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EXPartId); }
        }

        /// <summary>
        /// ExAltPartId1 property
        /// </summary>
        [DataMember]
        public string ExAltPartId1
        {
            get { return _ExAltPartId1; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExAltPartId1); }
        }

        /// <summary>
        /// ExAltPartId2 property
        /// </summary>
        [DataMember]
        public string ExAltPartId2
        {
            get { return _ExAltPartId2; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExAltPartId2); }
        }

        /// <summary>
        /// ExAltPartId3 property
        /// </summary>
        [DataMember]
        public string ExAltPartId3
        {
            get { return _ExAltPartId3; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExAltPartId3); }
        }

        /// <summary>
        /// ExUniqueId property
        /// </summary>
        [DataMember]
        public Guid ExUniqueId
        {
            get { return _ExUniqueId; }
            set { Set<Guid>(MethodBase.GetCurrentMethod().Name, value, ref _ExUniqueId); }
        }

        /// <summary>
        /// Enabled property
        /// </summary>
        [DataMember]
        public string Enabled
        {
            get { return _Enabled; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Enabled); }
        }

        /// <summary>
        /// LongDescription property
        /// </summary>
        [DataMember]
        public string LongDescription
        {
            get { return _LongDescription; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _LongDescription); }
        }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        [DataMember]
        public string Manufacturer
        {
            get { return _Manufacturer; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Manufacturer); }
        }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        [DataMember]
        public string ManufacturerId
        {
            get { return _ManufacturerId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ManufacturerId); }
        }

        /// <summary>
        /// ShortDescription property
        /// </summary>
        [DataMember]
        public string ShortDescription
        {
            get { return _ShortDescription; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ShortDescription); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        [DataMember]
        public string UnitOfMeasure
        {
            get { return _UnitOfMeasure; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UnitOfMeasure); }
        }

        /// <summary>
        /// UnitOfMeasureDesc property
        /// </summary>
        [DataMember]
        public string UnitOfMeasureDesc
        {
            get { return _UnitOfMeasureDesc; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UnitOfMeasureDesc); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// CategoryDesc property
        /// </summary>
        [DataMember]
        public string CategoryDesc
        {
            get { return _CategoryDesc; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CategoryDesc); }
        }

        /// <summary>
        /// UPCCode property
        /// </summary>
        [DataMember]
        public string UPCCode
        {
            get { return _UPCCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UPCCode); }
        }

        /// <summary>
        /// ImageURL property
        /// </summary>
        [DataMember]
        public string ImageURL
        {
            get { return _ImageURL; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ImageURL); }
        }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        [DataMember]
        public string ErrorMessage
        {
            get { return _ErrorMessage; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorMessage); }
        }

        /// <summary>
        /// LastProcessed property
        /// </summary>
        [DataMember]
        public DateTime? LastProcessed
        {
            get { return _LastProcessed; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastProcessed); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
