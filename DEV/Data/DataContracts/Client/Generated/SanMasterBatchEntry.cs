/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SanMasterBatchEntry table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class SanMasterBatchEntry : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SanMasterBatchEntry()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_SanMasterBatchEntry dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.SanMasterBatchEntryId = dbObj.SanMasterBatchEntryId;
            this.SanMasterBatchHeaderId = dbObj.SanMasterBatchHeaderId;
            this.SanMasterId = dbObj.SanMasterId;
            this.DueDate = dbObj.DueDate;
            this.NextDueDate = dbObj.NextDueDate;
            this.SanitationJobId = dbObj.SanitationJobId;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_SanMasterBatchEntry dbObj = new b_SanMasterBatchEntry();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_SanMasterBatchEntry ToDatabaseObject()
        {
            b_SanMasterBatchEntry dbObj = new b_SanMasterBatchEntry();
            dbObj.ClientId = this.ClientId;
            dbObj.SanMasterBatchEntryId = this.SanMasterBatchEntryId;
            dbObj.SanMasterBatchHeaderId = this.SanMasterBatchHeaderId;
            dbObj.SanMasterId = this.SanMasterId;
            dbObj.DueDate = this.DueDate;
            dbObj.NextDueDate = this.NextDueDate;
            dbObj.SanitationJobId = this.SanitationJobId;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            SanMasterBatchEntry_Create trans = new SanMasterBatchEntry_Create();
            trans.SanMasterBatchEntry = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.SanMasterBatchEntry);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            SanMasterBatchEntry_Retrieve trans = new SanMasterBatchEntry_Retrieve();
            trans.SanMasterBatchEntry = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SanMasterBatchEntry);
        }

        public void Update(DatabaseKey dbKey) 
        {
            SanMasterBatchEntry_Update trans = new SanMasterBatchEntry_Update();
            trans.SanMasterBatchEntry = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.SanMasterBatchEntry);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            SanMasterBatchEntry_Delete trans = new SanMasterBatchEntry_Delete();
            trans.SanMasterBatchEntry = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.SanMasterBatchEntryId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _SanMasterBatchEntryId;
        private long _SanMasterBatchHeaderId;
        private long _SanMasterId;
        private DateTime? _DueDate;
        private DateTime? _NextDueDate;
        private long _SanitationJobId;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SanMasterBatchEntryId property
        /// </summary>
        [DataMember]
        public long SanMasterBatchEntryId
        {
            get { return _SanMasterBatchEntryId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanMasterBatchEntryId); }
        }

        /// <summary>
        /// SanMasterBatchHeaderId property
        /// </summary>
        [DataMember]
        public long SanMasterBatchHeaderId
        {
            get { return _SanMasterBatchHeaderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanMasterBatchHeaderId); }
        }

        /// <summary>
        /// SanMasterId property
        /// </summary>
        [DataMember]
        public long SanMasterId
        {
            get { return _SanMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanMasterId); }
        }

        /// <summary>
        /// DueDate property
        /// </summary>
        [DataMember]
        public DateTime? DueDate
        {
            get { return _DueDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _DueDate); }
        }

        /// <summary>
        /// NextDueDate property
        /// </summary>
        [DataMember]
        public DateTime? NextDueDate
        {
            get { return _NextDueDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _NextDueDate); }
        }

        /// <summary>
        /// SanitationJobId property
        /// </summary>
        [DataMember]
        public long SanitationJobId
        {
            get { return _SanitationJobId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationJobId); }
        }
        #endregion
		
		
    }
}
