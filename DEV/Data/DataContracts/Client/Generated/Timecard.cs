/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Timecard table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Timecard : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Timecard()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Timecard dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.TimecardId = dbObj.TimecardId;
            this.ChargeType_Primary = dbObj.ChargeType_Primary;
            this.ChargeToId_Primary = dbObj.ChargeToId_Primary;
            this.ChargeType_Secondary = dbObj.ChargeType_Secondary;
            this.ChargeToId_Secondary = dbObj.ChargeToId_Secondary;
            this.AccountId = dbObj.AccountId;
            this.ActionTakenCode = dbObj.ActionTakenCode;
            this.BasePay = dbObj.BasePay;
            this.Comments = dbObj.Comments;
            this.CompleteWorkOrder = dbObj.CompleteWorkOrder;
            this.CraftId = dbObj.CraftId;
            this.Craft = dbObj.Craft;
            this.Crew = dbObj.Crew;
            this.DifferentialCode = dbObj.DifferentialCode;
            this.DifferentialMult = dbObj.DifferentialMult;
            this.DifferentialValue = dbObj.DifferentialValue;
            this.FailureCode = dbObj.FailureCode;
            this.FinishDate = dbObj.FinishDate;
            this.Hours = dbObj.Hours;
            this.OvertimeCode = dbObj.OvertimeCode;
            this.OvertimeMult = dbObj.OvertimeMult;
            this.OvertimeValue = dbObj.OvertimeValue;
            this.PersonnelId = dbObj.PersonnelId;
            this.ReasonNotDone = dbObj.ReasonNotDone;
            this.Shift = dbObj.Shift;
            this.StartDate = dbObj.StartDate;
            this.Value = dbObj.Value;
            this.VMRSWorkAccomplished = dbObj.VMRSWorkAccomplished;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_Timecard dbObj = new b_Timecard();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_Timecard ToDatabaseObject()
        {
            b_Timecard dbObj = new b_Timecard();
            dbObj.ClientId = this.ClientId;
            dbObj.TimecardId = this.TimecardId;
            dbObj.ChargeType_Primary = this.ChargeType_Primary;
            dbObj.ChargeToId_Primary = this.ChargeToId_Primary;
            dbObj.ChargeType_Secondary = this.ChargeType_Secondary;
            dbObj.ChargeToId_Secondary = this.ChargeToId_Secondary;
            dbObj.AccountId = this.AccountId;
            dbObj.ActionTakenCode = this.ActionTakenCode;
            dbObj.BasePay = this.BasePay;
            dbObj.Comments = this.Comments;
            dbObj.CompleteWorkOrder = this.CompleteWorkOrder;
            dbObj.CraftId = this.CraftId;
            dbObj.Craft = this.Craft;
            dbObj.Crew = this.Crew;
            dbObj.DifferentialCode = this.DifferentialCode;
            dbObj.DifferentialMult = this.DifferentialMult;
            dbObj.DifferentialValue = this.DifferentialValue;
            dbObj.FailureCode = this.FailureCode;
            dbObj.FinishDate = this.FinishDate;
            dbObj.Hours = this.Hours;
            dbObj.OvertimeCode = this.OvertimeCode;
            dbObj.OvertimeMult = this.OvertimeMult;
            dbObj.OvertimeValue = this.OvertimeValue;
            dbObj.PersonnelId = this.PersonnelId;
            dbObj.ReasonNotDone = this.ReasonNotDone;
            dbObj.Shift = this.Shift;
            dbObj.StartDate = this.StartDate;
            dbObj.Value = this.Value;
            dbObj.VMRSWorkAccomplished = this.VMRSWorkAccomplished;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            Timecard_Create trans = new Timecard_Create();
            trans.Timecard = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Timecard);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            Timecard_Retrieve trans = new Timecard_Retrieve();
            trans.Timecard = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Timecard);
        }

        public void Update(DatabaseKey dbKey) 
        {
            Timecard_Update trans = new Timecard_Update();
            trans.Timecard = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Timecard);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            Timecard_Delete trans = new Timecard_Delete();
            trans.Timecard = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.TimecardId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _TimecardId;
        private string _ChargeType_Primary;
        private long _ChargeToId_Primary;
        private string _ChargeType_Secondary;
        private long _ChargeToId_Secondary;
        private long _AccountId;
        private string _ActionTakenCode;
        private decimal _BasePay;
        private string _Comments;
        private bool _CompleteWorkOrder;
        private long _CraftId;
        private string _Craft;
        private string _Crew;
        private string _DifferentialCode;
        private bool _DifferentialMult;
        private decimal _DifferentialValue;
        private string _FailureCode;
        private DateTime? _FinishDate;
        private decimal _Hours;
        private string _OvertimeCode;
        private bool _OvertimeMult;
        private decimal _OvertimeValue;
        private long _PersonnelId;
        private string _ReasonNotDone;
        private string _Shift;
        private DateTime? _StartDate;
        private decimal _Value;
        private string _VMRSWorkAccomplished;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// TimecardId property
        /// </summary>
        [DataMember]
        public long TimecardId
        {
            get { return _TimecardId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _TimecardId); }
        }

        /// <summary>
        /// ChargeType_Primary property
        /// </summary>
        [DataMember]
        public string ChargeType_Primary
        {
            get { return _ChargeType_Primary; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType_Primary); }
        }

        /// <summary>
        /// ChargeToId_Primary property
        /// </summary>
        [DataMember]
        public long ChargeToId_Primary
        {
            get { return _ChargeToId_Primary; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId_Primary); }
        }

        /// <summary>
        /// ChargeType_Secondary property
        /// </summary>
        [DataMember]
        public string ChargeType_Secondary
        {
            get { return _ChargeType_Secondary; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType_Secondary); }
        }

        /// <summary>
        /// ChargeToId_Secondary property
        /// </summary>
        [DataMember]
        public long ChargeToId_Secondary
        {
            get { return _ChargeToId_Secondary; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId_Secondary); }
        }

        /// <summary>
        /// AccountId property
        /// </summary>
        [DataMember]
        public long AccountId
        {
            get { return _AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AccountId); }
        }

        /// <summary>
        /// ActionTakenCode property
        /// </summary>
        [DataMember]
        public string ActionTakenCode
        {
            get { return _ActionTakenCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ActionTakenCode); }
        }

        /// <summary>
        /// BasePay property
        /// </summary>
        [DataMember]
        public decimal BasePay
        {
            get { return _BasePay; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _BasePay); }
        }

        /// <summary>
        /// Comments property
        /// </summary>
        [DataMember]
        public string Comments
        {
            get { return _Comments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Comments); }
        }

        /// <summary>
        /// CompleteWorkOrder property
        /// </summary>
        [DataMember]
        public bool CompleteWorkOrder
        {
            get { return _CompleteWorkOrder; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteWorkOrder); }
        }

        /// <summary>
        /// CraftId property
        /// </summary>
        [DataMember]
        public long CraftId
        {
            get { return _CraftId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CraftId); }
        }

        /// <summary>
        /// Craft property
        /// </summary>
        [DataMember]
        public string Craft
        {
            get { return _Craft; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Craft); }
        }

        /// <summary>
        /// Crew property
        /// </summary>
        [DataMember]
        public string Crew
        {
            get { return _Crew; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Crew); }
        }

        /// <summary>
        /// DifferentialCode property
        /// </summary>
        [DataMember]
        public string DifferentialCode
        {
            get { return _DifferentialCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _DifferentialCode); }
        }

        /// <summary>
        /// DifferentialMult property
        /// </summary>
        [DataMember]
        public bool DifferentialMult
        {
            get { return _DifferentialMult; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DifferentialMult); }
        }

        /// <summary>
        /// DifferentialValue property
        /// </summary>
        [DataMember]
        public decimal DifferentialValue
        {
            get { return _DifferentialValue; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _DifferentialValue); }
        }

        /// <summary>
        /// FailureCode property
        /// </summary>
        [DataMember]
        public string FailureCode
        {
            get { return _FailureCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FailureCode); }
        }

        /// <summary>
        /// FinishDate property
        /// </summary>
        [DataMember]
        public DateTime? FinishDate
        {
            get { return _FinishDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _FinishDate); }
        }

        /// <summary>
        /// Hours property
        /// </summary>
        [DataMember]
        public decimal Hours
        {
            get { return _Hours; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Hours); }
        }

        /// <summary>
        /// OvertimeCode property
        /// </summary>
        [DataMember]
        public string OvertimeCode
        {
            get { return _OvertimeCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _OvertimeCode); }
        }

        /// <summary>
        /// OvertimeMult property
        /// </summary>
        [DataMember]
        public bool OvertimeMult
        {
            get { return _OvertimeMult; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _OvertimeMult); }
        }

        /// <summary>
        /// OvertimeValue property
        /// </summary>
        [DataMember]
        public decimal OvertimeValue
        {
            get { return _OvertimeValue; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _OvertimeValue); }
        }

        /// <summary>
        /// PersonnelId property
        /// </summary>
        [DataMember]
        public long PersonnelId
        {
            get { return _PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PersonnelId); }
        }

        /// <summary>
        /// ReasonNotDone property
        /// </summary>
        [DataMember]
        public string ReasonNotDone
        {
            get { return _ReasonNotDone; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReasonNotDone); }
        }

        /// <summary>
        /// Shift property
        /// </summary>
        [DataMember]
        public string Shift
        {
            get { return _Shift; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Shift); }
        }

        /// <summary>
        /// StartDate property
        /// </summary>
        [DataMember]
        public DateTime? StartDate
        {
            get { return _StartDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _StartDate); }
        }

        /// <summary>
        /// Value property
        /// </summary>
        [DataMember]
        public decimal Value
        {
            get { return _Value; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Value); }
        }

        /// <summary>
        /// VMRSWorkAccomplished property
        /// </summary>
        [DataMember]
        public string VMRSWorkAccomplished
        {
            get { return _VMRSWorkAccomplished; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VMRSWorkAccomplished); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
