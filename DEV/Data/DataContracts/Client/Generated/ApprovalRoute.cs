/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ApprovalRoute table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ApprovalRoute : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ApprovalRoute()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ApprovalRoute dbObj)
        {
            this.ApprovalRouteId = dbObj.ApprovalRouteId;
            this.ClientId = dbObj.ClientId;
            this.ApprovalGroupId = dbObj.ApprovalGroupId;
            this.ApproverId = dbObj.ApproverId;
            this.ObjectId = dbObj.ObjectId;
            this.Comments = dbObj.Comments;
            this.IsProcessed = dbObj.IsProcessed;
            this.ProcessResponse = dbObj.ProcessResponse;
            this.RequestType = dbObj.RequestType;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_ApprovalRoute dbObj = new b_ApprovalRoute();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_ApprovalRoute ToDatabaseObject()
        {
            b_ApprovalRoute dbObj = new b_ApprovalRoute();
            dbObj.ApprovalRouteId = this.ApprovalRouteId;
            dbObj.ClientId = this.ClientId;
            dbObj.ApprovalGroupId = this.ApprovalGroupId;
            dbObj.ApproverId = this.ApproverId;
            dbObj.ObjectId = this.ObjectId;
            dbObj.Comments = this.Comments;
            dbObj.IsProcessed = this.IsProcessed;
            dbObj.ProcessResponse = this.ProcessResponse;
            dbObj.RequestType = this.RequestType;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            ApprovalRoute_Create trans = new ApprovalRoute_Create();
            trans.ApprovalRoute = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ApprovalRoute);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            ApprovalRoute_Retrieve trans = new ApprovalRoute_Retrieve();
            trans.ApprovalRoute = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ApprovalRoute);
        }

        public void Update(DatabaseKey dbKey)
        {
            ApprovalRoute_Update trans = new ApprovalRoute_Update();
            trans.ApprovalRoute = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ApprovalRoute);
        }

        public void Delete(DatabaseKey dbKey)
        {
            ApprovalRoute_Delete trans = new ApprovalRoute_Delete();
            trans.ApprovalRoute = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ApprovalRouteId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ApprovalRouteId;
        private long _ClientId;
        private long _ApprovalGroupId;
        private long _ApproverId;
        private long _ObjectId;
        private string _Comments;
        private bool _IsProcessed;
        private string _ProcessResponse;
        private string _RequestType;
        #endregion

        #region Properties


        /// <summary>
        /// ApprovalRouteId property
        /// </summary>
        [DataMember]
        public long ApprovalRouteId
        {
            get { return _ApprovalRouteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ApprovalRouteId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// ApprovalGroupId property
        /// </summary>
        [DataMember]
        public long ApprovalGroupId
        {
            get { return _ApprovalGroupId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ApprovalGroupId); }
        }

        /// <summary>
        /// ApproverId property
        /// </summary>
        [DataMember]
        public long ApproverId
        {
            get { return _ApproverId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ApproverId); }
        }

        /// <summary>
        /// ObjectId property
        /// </summary>
        [DataMember]
        public long ObjectId
        {
            get { return _ObjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectId); }
        }

        /// <summary>
        /// Comments property
        /// </summary>
        [DataMember]
        public string Comments
        {
            get { return _Comments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Comments); }
        }

        /// <summary>
        /// IsProcessed property
        /// </summary>
        [DataMember]
        public bool IsProcessed
        {
            get { return _IsProcessed; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsProcessed); }
        }

        /// <summary>
        /// ProcessResponse property
        /// </summary>
        [DataMember]
        public string ProcessResponse
        {
            get { return _ProcessResponse; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ProcessResponse); }
        }

        /// <summary>
        /// RequestType property
        /// </summary>
        [DataMember]
        public string RequestType
        {
            get { return _RequestType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RequestType); }
        }
        #endregion


    }
}
