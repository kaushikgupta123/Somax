/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Equipment_Sensor_Xref table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Equipment_Sensor_Xref : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Equipment_Sensor_Xref()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Equipment_Sensor_Xref dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.Equipment_Sensor_XrefId = dbObj.Equipment_Sensor_XrefId;
            this.EquipmentId = dbObj.EquipmentId;
            this.SensorId = dbObj.SensorId;
            this.SensorName = dbObj.SensorName;
            this.SensorAppId = dbObj.SensorAppId;
            this.SensorAlertProcedureId = dbObj.SensorAlertProcedureId;
            this.AssignedTo_PersonnelId = dbObj.AssignedTo_PersonnelId;
            this.WorkOrderId = dbObj.WorkOrderId;
            this.TriggerHigh = dbObj.TriggerHigh;
            this.TriggerLow = dbObj.TriggerLow;
            this.LastReading = dbObj.LastReading;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_Equipment_Sensor_Xref dbObj = new b_Equipment_Sensor_Xref();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_Equipment_Sensor_Xref ToDatabaseObject()
        {
            b_Equipment_Sensor_Xref dbObj = new b_Equipment_Sensor_Xref();
            dbObj.ClientId = this.ClientId;
            dbObj.Equipment_Sensor_XrefId = this.Equipment_Sensor_XrefId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.SensorId = this.SensorId;
            dbObj.SensorName = this.SensorName;
            dbObj.SensorAppId = this.SensorAppId;
            dbObj.SensorAlertProcedureId = this.SensorAlertProcedureId;
            dbObj.AssignedTo_PersonnelId = this.AssignedTo_PersonnelId;
            dbObj.WorkOrderId = this.WorkOrderId;
            dbObj.TriggerHigh = this.TriggerHigh;
            dbObj.TriggerLow = this.TriggerLow;
            dbObj.LastReading = this.LastReading;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            Equipment_Sensor_Xref_Create trans = new Equipment_Sensor_Xref_Create();
            trans.Equipment_Sensor_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Equipment_Sensor_Xref);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            Equipment_Sensor_Xref_Retrieve trans = new Equipment_Sensor_Xref_Retrieve();
            trans.Equipment_Sensor_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Equipment_Sensor_Xref);
        }

        public void Update(DatabaseKey dbKey) 
        {
            Equipment_Sensor_Xref_Update trans = new Equipment_Sensor_Xref_Update();
            trans.Equipment_Sensor_Xref = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Equipment_Sensor_Xref);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            Equipment_Sensor_Xref_Delete trans = new Equipment_Sensor_Xref_Delete();
            trans.Equipment_Sensor_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.Equipment_Sensor_XrefId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _Equipment_Sensor_XrefId;
        private long _EquipmentId;
        private long _SensorId;
        private string _SensorName;
        private int _SensorAppId;
        private long _SensorAlertProcedureId;
        private long _AssignedTo_PersonnelId;
        private long _WorkOrderId;
        private decimal _TriggerHigh;
        private decimal _TriggerLow;
        private decimal _LastReading;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// Equipment_Sensor_XrefId property
        /// </summary>
        [DataMember]
        public long Equipment_Sensor_XrefId
        {
            get { return _Equipment_Sensor_XrefId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Equipment_Sensor_XrefId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// SensorId property
        /// </summary>
        [DataMember]
        public long SensorId
        {
            get { return _SensorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SensorId); }
        }

        /// <summary>
        /// SensorName property
        /// </summary>
        [DataMember]
        public string SensorName
        {
            get { return _SensorName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SensorName); }
        }

        /// <summary>
        /// SensorAppId property
        /// </summary>
        [DataMember]
        public int SensorAppId
        {
            get { return _SensorAppId; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _SensorAppId); }
        }

        /// <summary>
        /// SensorAlertProcedureId property
        /// </summary>
        [DataMember]
        public long SensorAlertProcedureId
        {
            get { return _SensorAlertProcedureId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SensorAlertProcedureId); }
        }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        [DataMember]
        public long AssignedTo_PersonnelId
        {
            get { return _AssignedTo_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssignedTo_PersonnelId); }
        }
        
        /// <summary>
        /// WorkOrderId property
        /// </summary>
        [DataMember]
        public long WorkOrderId
        {
            get { return _WorkOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkOrderId); }
        }

        /// <summary>
        /// TriggerHigh property
        /// </summary>
        [DataMember]
        public decimal TriggerHigh
        {
            get { return _TriggerHigh; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TriggerHigh); }
        }

        /// <summary>
        /// TriggerLow property
        /// </summary>
        [DataMember]
        public decimal TriggerLow
        {
            get { return _TriggerLow; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TriggerLow); }
        }

        /// <summary>
        /// LastReading property
        /// </summary>
        [DataMember]
        public decimal LastReading
        {
            get { return _LastReading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _LastReading); }
        }
        #endregion
		
		
    }
}
