/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the DataConstant table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class DataConstant : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public DataConstant()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_DataConstant dbObj)
        {
		            this.DataConstantId = dbObj.DataConstantId;
            this.Value = dbObj.Value;
            this.LocaleId = dbObj.LocaleId;
            this.LocalName = dbObj.LocalName;
            this.ConstantType = dbObj.ConstantType;
            this.InactiveFlag = dbObj.InactiveFlag;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_DataConstant dbObj = new b_DataConstant();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_DataConstant ToDatabaseObject()
        {
            b_DataConstant dbObj = new b_DataConstant();
            dbObj.DataConstantId = this.DataConstantId;
            dbObj.Value = this.Value;
            dbObj.LocaleId = this.LocaleId;
            dbObj.LocalName = this.LocalName;
            dbObj.ConstantType = this.ConstantType;
            dbObj.InactiveFlag = this.InactiveFlag;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            DataConstant_Create trans = new DataConstant_Create();
            trans.DataConstant = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.DataConstant);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            DataConstant_Retrieve trans = new DataConstant_Retrieve();
            trans.DataConstant = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.DataConstant);
        }

        public void Update(DatabaseKey dbKey) 
        {
            DataConstant_Update trans = new DataConstant_Update();
            trans.DataConstant = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.DataConstant);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            DataConstant_Delete trans = new DataConstant_Delete();
            trans.DataConstant = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.DataConstantId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _DataConstantId;
        private string _Value;
        private string _LocaleId;
        private string _LocalName;
        private string _ConstantType;
        private bool _InactiveFlag;
        #endregion
        
        #region Properties


        /// <summary>
        /// DataConstantId property
        /// </summary>
        [DataMember]
        public long DataConstantId
        {
            get { return _DataConstantId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DataConstantId); }
        }

        /// <summary>
        /// Value property
        /// </summary>
        [DataMember]
        public string Value
        {
            get { return _Value; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Value); }
        }

        /// <summary>
        /// LocaleId property
        /// </summary>
        [DataMember]
        public string LocaleId
        {
            get { return _LocaleId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _LocaleId); }
        }

        /// <summary>
        /// LocalName property
        /// </summary>
        [DataMember]
        public string LocalName
        {
            get { return _LocalName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _LocalName); }
        }

        /// <summary>
        /// ConstantType property
        /// </summary>
        [DataMember]
        public string ConstantType
        {
            get { return _ConstantType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ConstantType); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }
        #endregion
		
		
    }
}
