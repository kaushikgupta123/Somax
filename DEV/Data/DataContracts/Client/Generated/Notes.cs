/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Runtime.Serialization;
using System.Reflection;
using Database.Business;
using Database.Transactions;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Notes table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Notes : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Notes()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Notes dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.NotesId = dbObj.NotesId;
            this.OwnerId = dbObj.OwnerId;
            this.OwnerName = dbObj.OwnerName;
            this.Subject = dbObj.Subject;
            this.Content = dbObj.Content;
            this.Type = dbObj.Type;
            this.ObjectId = dbObj.ObjectId;
            this.TableName = dbObj.TableName;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_Notes dbObj = new b_Notes();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_Notes ToDatabaseObject()
        {
            b_Notes dbObj = new b_Notes();
            dbObj.ClientId = this.ClientId;
            dbObj.NotesId = this.NotesId;
            dbObj.OwnerId = this.OwnerId;
            dbObj.OwnerName = this.OwnerName;
            dbObj.Subject = this.Subject;
            dbObj.Content = this.Content;
            dbObj.Type = this.Type;
            dbObj.ObjectId = this.ObjectId;
            dbObj.TableName = this.TableName;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            Notes_Create trans = new Notes_Create();
            trans.Notes = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Notes);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            Notes_Retrieve trans = new Notes_Retrieve();
            trans.Notes = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Notes);
        }

        public void Update(DatabaseKey dbKey) 
        {
            Notes_Update trans = new Notes_Update();
            trans.Notes = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Notes);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            Notes_Delete trans = new Notes_Delete();
            trans.Notes = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.NotesId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _NotesId;
        private long _OwnerId;
        private string _OwnerName;
        private string _Subject;
        private string _Content;
        private string _Type;
        private long _ObjectId;
        private string _TableName;
        private long _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// NotesId property
        /// </summary>
        [DataMember]
        public long NotesId
        {
            get { return _NotesId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _NotesId); }
        }

        /// <summary>
        /// OwnerId property
        /// </summary>
        [DataMember]
        public long OwnerId
        {
            get { return _OwnerId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _OwnerId); }
        }

        /// <summary>
        /// OwnerName property
        /// </summary>
        [DataMember]
        public string OwnerName
        {
            get { return _OwnerName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _OwnerName); }
        }

        /// <summary>
        /// Subject property
        /// </summary>
        [DataMember]
        public string Subject
        {
            get { return _Subject; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Subject); }
        }

        /// <summary>
        /// Content property
        /// </summary>
        [DataMember]
        public string Content
        {
            get { return _Content; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Content); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// ObjectId property
        /// </summary>
        [DataMember]
        public long ObjectId
        {
            get { return _ObjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectId); }
        }

        /// <summary>
        /// TableName property
        /// </summary>
        [DataMember]
        public string TableName
        {
            get { return _TableName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TableName); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public long UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
