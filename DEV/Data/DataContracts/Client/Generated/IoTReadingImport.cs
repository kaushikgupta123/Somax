/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the IoTReadingImport table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class IoTReadingImport : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public IoTReadingImport()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_IoTReadingImport dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.IoTReadingImportId = dbObj.IoTReadingImportId;
            this.SiteId = dbObj.SiteId;
            this.IoTDevice = dbObj.IoTDevice;
            this.Reading = dbObj.Reading;
            this.ReadingDate = dbObj.ReadingDate;
            this.ReadingUnit = dbObj.ReadingUnit;
            this.BatteryLevel = dbObj.BatteryLevel;
            this.SignalStrength = dbObj.SignalStrength;
            this.ErrorCodes = dbObj.ErrorCodes;
            this.ErrorMessage = dbObj.ErrorMessage;
            this.LastProcess = dbObj.LastProcess;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_IoTReadingImport dbObj = new b_IoTReadingImport();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_IoTReadingImport ToDatabaseObject()
        {
            b_IoTReadingImport dbObj = new b_IoTReadingImport();
            dbObj.ClientId = this.ClientId;
            dbObj.IoTReadingImportId = this.IoTReadingImportId;
            dbObj.SiteId = this.SiteId;
            dbObj.IoTDevice = this.IoTDevice;
            dbObj.Reading = this.Reading;
            dbObj.ReadingDate = this.ReadingDate;
            dbObj.ReadingUnit = this.ReadingUnit;
            dbObj.BatteryLevel = this.BatteryLevel;
            dbObj.SignalStrength = this.SignalStrength;
            dbObj.ErrorCodes = this.ErrorCodes;
            dbObj.ErrorMessage = this.ErrorMessage;
            dbObj.LastProcess = this.LastProcess;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            IoTReadingImport_Create trans = new IoTReadingImport_Create();
            trans.IoTReadingImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.IoTReadingImport);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            IoTReadingImport_Retrieve trans = new IoTReadingImport_Retrieve();
            trans.IoTReadingImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.IoTReadingImport);
        }

        public void Update(DatabaseKey dbKey)
        {
            IoTReadingImport_Update trans = new IoTReadingImport_Update();
            trans.IoTReadingImport = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.IoTReadingImport);
        }

        public void Delete(DatabaseKey dbKey)
        {
            IoTReadingImport_Delete trans = new IoTReadingImport_Delete();
            trans.IoTReadingImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.IoTReadingImportId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _IoTReadingImportId;
        private long _SiteId;
        private string _IoTDevice;
        private decimal _Reading;
        private DateTime? _ReadingDate;
        private string _ReadingUnit;
        private int _BatteryLevel;
        private int _SignalStrength;
        private string _ErrorCodes;
        private string _ErrorMessage;
        private DateTime? _LastProcess;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// IoTReadingImportId property
        /// </summary>
        [DataMember]
        public long IoTReadingImportId
        {
            get { return _IoTReadingImportId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _IoTReadingImportId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// IoTDevice property
        /// </summary>
        [DataMember]
        public string IoTDevice
        {
            get { return _IoTDevice; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _IoTDevice); }
        }

        /// <summary>
        /// Reading property
        /// </summary>
        [DataMember]
        public decimal Reading
        {
            get { return _Reading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Reading); }
        }

        /// <summary>
        /// ReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? ReadingDate
        {
            get { return _ReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingDate); }
        }

        /// <summary>
        /// ReadingUnit property
        /// </summary>
        [DataMember]
        public string ReadingUnit
        {
            get { return _ReadingUnit; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingUnit); }
        }

        /// <summary>
        /// BatteryLevel property
        /// </summary>
        [DataMember]
        public int BatteryLevel
        {
            get { return _BatteryLevel; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _BatteryLevel); }
        }

        /// <summary>
        /// SignalStrength property
        /// </summary>
        [DataMember]
        public int SignalStrength
        {
            get { return _SignalStrength; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _SignalStrength); }
        }

        /// <summary>
        /// ErrorCodes property
        /// </summary>
        [DataMember]
        public string ErrorCodes
        {
            get { return _ErrorCodes; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorCodes); }
        }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        [DataMember]
        public string ErrorMessage
        {
            get { return _ErrorMessage; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorMessage); }
        }

        /// <summary>
        /// LastProcess property
        /// </summary>
        [DataMember]
        public DateTime? LastProcess
        {
            get { return _LastProcess; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastProcess); }
        }
        #endregion


    }
}
