/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the FuelTracking table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class FuelTracking : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public FuelTracking()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_FuelTracking dbObj)
        {
		            this.FuelTrackingId = dbObj.FuelTrackingId;
            this.ClientId = dbObj.ClientId;
            this.EquipmentId = dbObj.EquipmentId;
            this.FuelType = dbObj.FuelType;
            this.FuelAmount = dbObj.FuelAmount;
            this.FuelUnit = dbObj.FuelUnit;
            this.UnitCost = dbObj.UnitCost;
            this.ReadingDate = dbObj.ReadingDate;
            this.Del = dbObj.Del;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_FuelTracking dbObj = new b_FuelTracking();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_FuelTracking ToDatabaseObject()
        {
            b_FuelTracking dbObj = new b_FuelTracking();
            dbObj.FuelTrackingId = this.FuelTrackingId;
            dbObj.ClientId = this.ClientId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.FuelType = this.FuelType;
            dbObj.FuelAmount = this.FuelAmount;
            dbObj.FuelUnit = this.FuelUnit;
            dbObj.UnitCost = this.UnitCost;
            dbObj.ReadingDate = this.ReadingDate;
            dbObj.Del = this.Del;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            FuelTracking_Create trans = new FuelTracking_Create();
            trans.FuelTracking = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.FuelTracking);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            FuelTracking_Retrieve trans = new FuelTracking_Retrieve();
            trans.FuelTracking = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.FuelTracking);
        }

        public void Update(DatabaseKey dbKey) 
        {
            FuelTracking_Update trans = new FuelTracking_Update();
            trans.FuelTracking = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.FuelTracking);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            FuelTracking_Delete trans = new FuelTracking_Delete();
            trans.FuelTracking = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.FuelTrackingId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _FuelTrackingId;
        private long _ClientId;
        private long _EquipmentId;
        private string _FuelType;
        private decimal _FuelAmount;
        private string _FuelUnit;
        private decimal _UnitCost;
        private DateTime? _ReadingDate;
        private bool _Del;
        #endregion
        
        #region Properties


        /// <summary>
        /// FuelTrackingId property
        /// </summary>
        [DataMember]
        public long FuelTrackingId
        {
            get { return _FuelTrackingId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _FuelTrackingId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// FuelType property
        /// </summary>
        [DataMember]
        public string FuelType
        {
            get { return _FuelType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FuelType); }
        }

        /// <summary>
        /// FuelAmount property
        /// </summary>
        [DataMember]
        public decimal FuelAmount
        {
            get { return _FuelAmount; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _FuelAmount); }
        }

        /// <summary>
        /// FuelUnit property
        /// </summary>
        [DataMember]
        public string FuelUnit
        {
            get { return _FuelUnit; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FuelUnit); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }

        /// <summary>
        /// ReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? ReadingDate
        {
            get { return _ReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingDate); }
        }

        /// <summary>
        /// Del property
        /// </summary>
        [DataMember]
        public bool Del
        {
            get { return _Del; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Del); }
        }
        #endregion
		
		
    }
}
