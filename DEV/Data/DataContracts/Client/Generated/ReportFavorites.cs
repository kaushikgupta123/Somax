/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ReportFavorites table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ReportFavorites : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ReportFavorites()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ReportFavorites dbObj)
        {
		            this.ReportFavoritesId = dbObj.ReportFavoritesId;
            this.ReportListingId = dbObj.ReportListingId;
            this.PersonnelId = dbObj.PersonnelId;
            this.IsUserReports = dbObj.IsUserReports;
            this.Del = dbObj.Del;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_ReportFavorites dbObj = new b_ReportFavorites();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_ReportFavorites ToDatabaseObject()
        {
            b_ReportFavorites dbObj = new b_ReportFavorites();
            dbObj.ReportFavoritesId = this.ReportFavoritesId;
            dbObj.ReportListingId = this.ReportListingId;
            dbObj.PersonnelId = this.PersonnelId;
            dbObj.IsUserReports = this.IsUserReports;
            dbObj.Del = this.Del;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            ReportFavorites_Create trans = new ReportFavorites_Create();
            trans.ReportFavorites = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ReportFavorites);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            ReportFavorites_Retrieve trans = new ReportFavorites_Retrieve();
            trans.ReportFavorites = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ReportFavorites);
        }

        public void Update(DatabaseKey dbKey) 
        {
            ReportFavorites_Update trans = new ReportFavorites_Update();
            trans.ReportFavorites = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ReportFavorites);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            ReportFavorites_Delete trans = new ReportFavorites_Delete();
            trans.ReportFavorites = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ReportFavoritesId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ReportFavoritesId;
        private long _ReportListingId;
        private long _PersonnelId;
        private bool _IsUserReports;
        private bool _Del;
        #endregion
        
        #region Properties


        /// <summary>
        /// ReportFavoritesId property
        /// </summary>
        [DataMember]
        public long ReportFavoritesId
        {
            get { return _ReportFavoritesId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReportFavoritesId); }
        }

        /// <summary>
        /// ReportListingId property
        /// </summary>
        [DataMember]
        public long ReportListingId
        {
            get { return _ReportListingId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReportListingId); }
        }

        /// <summary>
        /// PersonnelId property
        /// </summary>
        [DataMember]
        public long PersonnelId
        {
            get { return _PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PersonnelId); }
        }

        /// <summary>
        /// IsUserReports property
        /// </summary>
        [DataMember]
        public bool IsUserReports
        {
            get { return _IsUserReports; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsUserReports); }
        }

        /// <summary>
        /// Del property
        /// </summary>
        [DataMember]
        public bool Del
        {
            get { return _Del; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Del); }
        }
        #endregion
		
		
    }
}
