/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database.Business;
using Database;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PrevMaintLibrary table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PrevMaintLibrary : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PrevMaintLibrary()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PrevMaintLibrary dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.PrevMaintLibraryId = dbObj.PrevMaintLibraryId;
            this.SiteId = dbObj.SiteId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.Description = dbObj.Description;
            this.DownRequired = dbObj.DownRequired;
            this.Frequency = dbObj.Frequency;
            this.FrequencyType = dbObj.FrequencyType;
            this.JobDuration = dbObj.JobDuration;
            this.Type = dbObj.Type;
            this.ScheduleMethod = dbObj.ScheduleMethod;
            this.ScheduleType = dbObj.ScheduleType;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.Del = dbObj.Del;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_PrevMaintLibrary dbObj = new b_PrevMaintLibrary();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_PrevMaintLibrary ToDatabaseObject()
        {
            b_PrevMaintLibrary dbObj = new b_PrevMaintLibrary();
            dbObj.ClientId = this.ClientId;
            dbObj.PrevMaintLibraryId = this.PrevMaintLibraryId;
            dbObj.SiteId = this.SiteId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.Description = this.Description;
            dbObj.DownRequired = this.DownRequired;
            dbObj.Frequency = this.Frequency;
            dbObj.FrequencyType = this.FrequencyType;
            dbObj.JobDuration = this.JobDuration;
            dbObj.Type = this.Type;
            dbObj.ScheduleMethod = this.ScheduleMethod;
            dbObj.ScheduleType = this.ScheduleType;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.Del = this.Del;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            PrevMaintLibrary_Create trans = new PrevMaintLibrary_Create();
            trans.PrevMaintLibrary = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PrevMaintLibrary);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            PrevMaintLibrary_Retrieve trans = new PrevMaintLibrary_Retrieve();
            trans.PrevMaintLibrary = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PrevMaintLibrary);
        }

        public void Update(DatabaseKey dbKey) 
        {
            PrevMaintLibrary_Update trans = new PrevMaintLibrary_Update();
            trans.PrevMaintLibrary = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PrevMaintLibrary);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            PrevMaintLibrary_Delete trans = new PrevMaintLibrary_Delete();
            trans.PrevMaintLibrary = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PrevMaintLibraryId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _PrevMaintLibraryId;
        private long _SiteId;
        private string _ClientLookupId;
        private string _Description;
        private bool _DownRequired;
        private int _Frequency;
        private string _FrequencyType;
        private decimal _JobDuration;
        private string _Type;
        private string _ScheduleMethod;
        private string _ScheduleType;
        private bool _InactiveFlag;
        private bool _Del;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PrevMaintLibraryId property
        /// </summary>
        [DataMember]
        public long PrevMaintLibraryId
        {
            get { return _PrevMaintLibraryId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintLibraryId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// DownRequired property
        /// </summary>
        [DataMember]
        public bool DownRequired
        {
            get { return _DownRequired; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DownRequired); }
        }

        /// <summary>
        /// Frequency property
        /// </summary>
        [DataMember]
        public int Frequency
        {
            get { return _Frequency; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Frequency); }
        }

        /// <summary>
        /// FrequencyType property
        /// </summary>
        [DataMember]
        public string FrequencyType
        {
            get { return _FrequencyType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FrequencyType); }
        }

        /// <summary>
        /// JobDuration property
        /// </summary>
        [DataMember]
        public decimal JobDuration
        {
            get { return _JobDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _JobDuration); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// ScheduleMethod property
        /// </summary>
        [DataMember]
        public string ScheduleMethod
        {
            get { return _ScheduleMethod; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleMethod); }
        }

        /// <summary>
        /// ScheduleType property
        /// </summary>
        [DataMember]
        public string ScheduleType
        {
            get { return _ScheduleType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleType); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// Del property
        /// </summary>
        [DataMember]
        public bool Del
        {
            get { return _Del; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Del); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
