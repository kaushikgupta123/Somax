/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;
using Data.Database;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the VendorCatalogImport table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class VendorCatalogImport : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public VendorCatalogImport()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_VendorCatalogImport dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.VendorCatalogImportId = dbObj.VendorCatalogImportId;
            this.ExVendorId = dbObj.ExVendorId;
            this.ExVendorNumber = dbObj.ExVendorNumber;
            this.ExVendorSiteId = dbObj.ExVendorSiteId;
            this.ExVendorSiteCode = dbObj.ExVendorSiteCode;
            this.ExSourceId = dbObj.ExSourceId;
            this.ExSourceDocument = dbObj.ExSourceDocument;
            this.StartDate = dbObj.StartDate;
            this.EndDate = dbObj.EndDate;
            this.Canceled = dbObj.Canceled;
            this.LineNumber = dbObj.LineNumber;
            this.ExLineId = dbObj.ExLineId;
            this.ExPartId = dbObj.ExPartId;
            this.ExPartNumber = dbObj.ExPartNumber;
            this.Category = dbObj.Category;
            this.Description = dbObj.Description;
            this.PurchaseUOM = dbObj.PurchaseUOM;
            this.UnitCost = dbObj.UnitCost;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.UOMConversion = dbObj.UOMConversion;
            this.VendorPartNumber = dbObj.VendorPartNumber;
            this.LeadTime = dbObj.LeadTime;
            this.MinimumQuantity = dbObj.MinimumQuantity;
            this.ExpirationDate = dbObj.ExpirationDate;
            this.ErrorMessage = dbObj.ErrorMessage;
            this.LastProcessed = dbObj.LastProcessed;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_VendorCatalogImport dbObj = new b_VendorCatalogImport();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_VendorCatalogImport ToDatabaseObject()
        {
            b_VendorCatalogImport dbObj = new b_VendorCatalogImport();
            dbObj.ClientId = this.ClientId;
            dbObj.VendorCatalogImportId = this.VendorCatalogImportId;
            dbObj.ExVendorId = this.ExVendorId;
            dbObj.ExVendorNumber = this.ExVendorNumber;
            dbObj.ExVendorSiteId = this.ExVendorSiteId;
            dbObj.ExVendorSiteCode = this.ExVendorSiteCode;
            dbObj.ExSourceId = this.ExSourceId;
            dbObj.ExSourceDocument = this.ExSourceDocument;
            dbObj.StartDate = this.StartDate;
            dbObj.EndDate = this.EndDate;
            dbObj.Canceled = this.Canceled;
            dbObj.LineNumber = this.LineNumber;
            dbObj.ExLineId = this.ExLineId;
            dbObj.ExPartId = this.ExPartId;
            dbObj.ExPartNumber = this.ExPartNumber;
            dbObj.Category = this.Category;
            dbObj.Description = this.Description;
            dbObj.PurchaseUOM = this.PurchaseUOM;
            dbObj.UnitCost = this.UnitCost;
            dbObj.UnitOfMeasure = this.UnitOfMeasure;
            dbObj.UOMConversion = this.UOMConversion;
            dbObj.VendorPartNumber = this.VendorPartNumber;
            dbObj.LeadTime = this.LeadTime;
            dbObj.MinimumQuantity = this.MinimumQuantity;
            dbObj.ExpirationDate = this.ExpirationDate;
            dbObj.ErrorMessage = this.ErrorMessage;
            dbObj.LastProcessed = this.LastProcessed;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            VendorCatalogImport_Create trans = new VendorCatalogImport_Create();
            trans.VendorCatalogImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.VendorCatalogImport);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            VendorCatalogImport_Retrieve trans = new VendorCatalogImport_Retrieve();
            trans.VendorCatalogImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.VendorCatalogImport);
        }

        public void Update(DatabaseKey dbKey) 
        {
            VendorCatalogImport_Update trans = new VendorCatalogImport_Update();
            trans.VendorCatalogImport = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.VendorCatalogImport);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            VendorCatalogImport_Delete trans = new VendorCatalogImport_Delete();
            trans.VendorCatalogImport = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.VendorCatalogImportId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _VendorCatalogImportId;
        private long _ExVendorId;
        private string _ExVendorNumber;
        private long _ExVendorSiteId;
        private string _ExVendorSiteCode;
        private long _ExSourceId;
        private string _ExSourceDocument;
        private DateTime? _StartDate;
        private DateTime? _EndDate;
        private string _Canceled;
        private int _LineNumber;
        private long _ExLineId;
        private long _ExPartId;
        private string _ExPartNumber;
        private string _Category;
        private string _Description;
        private string _PurchaseUOM;
        private decimal _UnitCost;
        private string _UnitOfMeasure;
        private decimal _UOMConversion;
        private string _VendorPartNumber;
        private int _LeadTime;
        private int _MinimumQuantity;
        private DateTime? _ExpirationDate;
        private string _ErrorMessage;
        private DateTime? _LastProcessed;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// VendorCatalogImportId property
        /// </summary>
        [DataMember]
        public long VendorCatalogImportId
        {
            get { return _VendorCatalogImportId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorCatalogImportId); }
        }

        /// <summary>
        /// ExVendorId property
        /// </summary>
        [DataMember]
        public long ExVendorId
        {
            get { return _ExVendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExVendorId); }
        }

        /// <summary>
        /// ExVendorNumber property
        /// </summary>
        [DataMember]
        public string ExVendorNumber
        {
            get { return _ExVendorNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExVendorNumber); }
        }

        /// <summary>
        /// ExVendorSiteId property
        /// </summary>
        [DataMember]
        public long ExVendorSiteId
        {
            get { return _ExVendorSiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExVendorSiteId); }
        }

        /// <summary>
        /// ExVendorSiteCode property
        /// </summary>
        [DataMember]
        public string ExVendorSiteCode
        {
            get { return _ExVendorSiteCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExVendorSiteCode); }
        }

        /// <summary>
        /// ExSourceId property
        /// </summary>
        [DataMember]
        public long ExSourceId
        {
            get { return _ExSourceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExSourceId); }
        }

        /// <summary>
        /// ExSourceDocument property
        /// </summary>
        [DataMember]
        public string ExSourceDocument
        {
            get { return _ExSourceDocument; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExSourceDocument); }
        }

        /// <summary>
        /// StartDate property
        /// </summary>
        [DataMember]
        public DateTime? StartDate
        {
            get { return _StartDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _StartDate); }
        }

        /// <summary>
        /// EndDate property
        /// </summary>
        [DataMember]
        public DateTime? EndDate
        {
            get { return _EndDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _EndDate); }
        }

        /// <summary>
        /// Canceled property
        /// </summary>
        [DataMember]
        public string Canceled
        {
            get { return _Canceled; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Canceled); }
        }

        /// <summary>
        /// LineNumber property
        /// </summary>
        [DataMember]
        public int LineNumber
        {
            get { return _LineNumber; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _LineNumber); }
        }

        /// <summary>
        /// ExLineId property
        /// </summary>
        [DataMember]
        public long ExLineId
        {
            get { return _ExLineId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExLineId); }
        }

        /// <summary>
        /// ExPartId property
        /// </summary>
        [DataMember]
        public long ExPartId
        {
            get { return _ExPartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExPartId); }
        }

        /// <summary>
        /// ExPartNumber property
        /// </summary>
        [DataMember]
        public string ExPartNumber
        {
            get { return _ExPartNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExPartNumber); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        [DataMember]
        public string PurchaseUOM
        {
            get { return _PurchaseUOM; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseUOM); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        [DataMember]
        public string UnitOfMeasure
        {
            get { return _UnitOfMeasure; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UnitOfMeasure); }
        }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        [DataMember]
        public decimal UOMConversion
        {
            get { return _UOMConversion; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UOMConversion); }
        }

        /// <summary>
        /// VendorPartNumber property
        /// </summary>
        [DataMember]
        public string VendorPartNumber
        {
            get { return _VendorPartNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VendorPartNumber); }
        }

        /// <summary>
        /// LeadTime property
        /// </summary>
        [DataMember]
        public int LeadTime
        {
            get { return _LeadTime; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _LeadTime); }
        }

        /// <summary>
        /// MinimumQuantity property
        /// </summary>
        [DataMember]
        public int MinimumQuantity
        {
            get { return _MinimumQuantity; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _MinimumQuantity); }
        }

        /// <summary>
        /// ExpirationDate property
        /// </summary>
        [DataMember]
        public DateTime? ExpirationDate
        {
            get { return _ExpirationDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ExpirationDate); }
        }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        [DataMember]
        public string ErrorMessage
        {
            get { return _ErrorMessage; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorMessage); }
        }

        /// <summary>
        /// LastProcessed property
        /// </summary>
        [DataMember]
        public DateTime? LastProcessed
        {
            get { return _LastProcessed; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastProcessed); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
