/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the FleetWheel table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class FleetWheel : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public FleetWheel()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_FleetWheel dbObj)
        {
		            this.FleetWheelId = dbObj.FleetWheelId;
            this.ClientId = dbObj.ClientId;
            this.EquipmentId = dbObj.EquipmentId;
            this.BrakeSystem = dbObj.BrakeSystem;
            this.RearTrackWidth = dbObj.RearTrackWidth;
            this.Wheelbase = dbObj.Wheelbase;
            this.FrontWheelDiameter = dbObj.FrontWheelDiameter;
            this.RearWheelDiameter = dbObj.RearWheelDiameter;
            this.FrontTirePSI = dbObj.FrontTirePSI;
            this.RearTirePSI = dbObj.RearTirePSI;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_FleetWheel dbObj = new b_FleetWheel();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_FleetWheel ToDatabaseObject()
        {
            b_FleetWheel dbObj = new b_FleetWheel();
            dbObj.FleetWheelId = this.FleetWheelId;
            dbObj.ClientId = this.ClientId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.BrakeSystem = this.BrakeSystem;
            dbObj.RearTrackWidth = this.RearTrackWidth;
            dbObj.Wheelbase = this.Wheelbase;
            dbObj.FrontWheelDiameter = this.FrontWheelDiameter;
            dbObj.RearWheelDiameter = this.RearWheelDiameter;
            dbObj.FrontTirePSI = this.FrontTirePSI;
            dbObj.RearTirePSI = this.RearTirePSI;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            FleetWheel_Create trans = new FleetWheel_Create();
            trans.FleetWheel = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.FleetWheel);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            FleetWheel_Retrieve trans = new FleetWheel_Retrieve();
            trans.FleetWheel = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.FleetWheel);
        }

        public void Update(DatabaseKey dbKey) 
        {
            FleetWheel_Update trans = new FleetWheel_Update();
            trans.FleetWheel = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.FleetWheel);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            FleetWheel_Delete trans = new FleetWheel_Delete();
            trans.FleetWheel = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.FleetWheelId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _FleetWheelId;
        private long _ClientId;
        private long _EquipmentId;
        private string _BrakeSystem;
        private decimal _RearTrackWidth;
        private decimal _Wheelbase;
        private decimal _FrontWheelDiameter;
        private decimal _RearWheelDiameter;
        private decimal _FrontTirePSI;
        private decimal _RearTirePSI;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// FleetWheelId property
        /// </summary>
        [DataMember]
        public long FleetWheelId
        {
            get { return _FleetWheelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _FleetWheelId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// BrakeSystem property
        /// </summary>
        [DataMember]
        public string BrakeSystem
        {
            get { return _BrakeSystem; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _BrakeSystem); }
        }

        /// <summary>
        /// RearTrackWidth property
        /// </summary>
        [DataMember]
        public decimal RearTrackWidth
        {
            get { return _RearTrackWidth; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _RearTrackWidth); }
        }

        /// <summary>
        /// Wheelbase property
        /// </summary>
        [DataMember]
        public decimal Wheelbase
        {
            get { return _Wheelbase; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Wheelbase); }
        }

        /// <summary>
        /// FrontWheelDiameter property
        /// </summary>
        [DataMember]
        public decimal FrontWheelDiameter
        {
            get { return _FrontWheelDiameter; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _FrontWheelDiameter); }
        }

        /// <summary>
        /// RearWheelDiameter property
        /// </summary>
        [DataMember]
        public decimal RearWheelDiameter
        {
            get { return _RearWheelDiameter; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _RearWheelDiameter); }
        }

        /// <summary>
        /// FrontTirePSI property
        /// </summary>
        [DataMember]
        public decimal FrontTirePSI
        {
            get { return _FrontTirePSI; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _FrontTirePSI); }
        }

        /// <summary>
        /// RearTirePSI property
        /// </summary>
        [DataMember]
        public decimal RearTirePSI
        {
            get { return _RearTirePSI; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _RearTirePSI); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
