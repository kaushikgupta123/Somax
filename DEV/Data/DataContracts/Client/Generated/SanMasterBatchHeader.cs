/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SanMasterBatchHeader table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class SanMasterBatchHeader : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SanMasterBatchHeader()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_SanMasterBatchHeader dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.SiteId = dbObj.SiteId;
            this.SanMasterBatchHeaderId = dbObj.SanMasterBatchHeaderId;
            this.BatchEntries = dbObj.BatchEntries;
            this.GenerateThroughDate = dbObj.GenerateThroughDate;
            this.OnDemandGroup = dbObj.OnDemandGroup;
            this.ScheduleType = dbObj.ScheduleType;
            this.SkipReview = dbObj.SkipReview;
            this.PrintSanitationJobs = dbObj.PrintSanitationJobs;
            this.PrintAttachments = dbObj.PrintAttachments;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_SanMasterBatchHeader dbObj = new b_SanMasterBatchHeader();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_SanMasterBatchHeader ToDatabaseObject()
        {
            b_SanMasterBatchHeader dbObj = new b_SanMasterBatchHeader();
            dbObj.ClientId = this.ClientId;
            dbObj.SiteId = this.SiteId;
            dbObj.SanMasterBatchHeaderId = this.SanMasterBatchHeaderId;
            dbObj.BatchEntries = this.BatchEntries;
            dbObj.GenerateThroughDate = this.GenerateThroughDate;
            dbObj.OnDemandGroup = this.OnDemandGroup;
            dbObj.ScheduleType = this.ScheduleType;
            dbObj.SkipReview = this.SkipReview;
            dbObj.PrintSanitationJobs = this.PrintSanitationJobs;
            dbObj.PrintAttachments = this.PrintAttachments;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            SanMasterBatchHeader_Create trans = new SanMasterBatchHeader_Create();
            trans.SanMasterBatchHeader = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.SanMasterBatchHeader);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            SanMasterBatchHeader_Retrieve trans = new SanMasterBatchHeader_Retrieve();
            trans.SanMasterBatchHeader = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SanMasterBatchHeader);
        }

        public void Update(DatabaseKey dbKey) 
        {
            SanMasterBatchHeader_Update trans = new SanMasterBatchHeader_Update();
            trans.SanMasterBatchHeader = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.SanMasterBatchHeader);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            SanMasterBatchHeader_Delete trans = new SanMasterBatchHeader_Delete();
            trans.SanMasterBatchHeader = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.SanMasterBatchHeaderId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _SiteId;
        private long _SanMasterBatchHeaderId;
        private long _BatchEntries;
        private DateTime? _GenerateThroughDate;
        private string _OnDemandGroup;
        private string _ScheduleType;
        private string _SkipReview;
        private bool _PrintSanitationJobs;
        private bool _PrintAttachments;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// SanMasterBatchHeaderId property
        /// </summary>
        [DataMember]
        public long SanMasterBatchHeaderId
        {
            get { return _SanMasterBatchHeaderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanMasterBatchHeaderId); }
        }

        /// <summary>
        /// BatchEntries property
        /// </summary>
        [DataMember]
        public long BatchEntries
        {
            get { return _BatchEntries; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _BatchEntries); }
        }

        /// <summary>
        /// GenerateThroughDate property
        /// </summary>
        [DataMember]
        public DateTime? GenerateThroughDate
        {
            get { return _GenerateThroughDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _GenerateThroughDate); }
        }

        /// <summary>
        /// OnDemandGroup property
        /// </summary>
        [DataMember]
        public string OnDemandGroup
        {
            get { return _OnDemandGroup; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _OnDemandGroup); }
        }

        /// <summary>
        /// ScheduleType property
        /// </summary>
        [DataMember]
        public string ScheduleType
        {
            get { return _ScheduleType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleType); }
        }

        /// <summary>
        /// SkipReview property
        /// </summary>
        [DataMember]
        public string SkipReview
        {
            get { return _SkipReview; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SkipReview); }
        }

        /// <summary>
        /// PrintSanitationJobs property
        /// </summary>
        [DataMember]
        public bool PrintSanitationJobs
        {
            get { return _PrintSanitationJobs; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PrintSanitationJobs); }
        }

        /// <summary>
        /// PrintAttachments property
        /// </summary>
        [DataMember]
        public bool PrintAttachments
        {
            get { return _PrintAttachments; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PrintAttachments); }
        }
        #endregion
		
		
    }
}
