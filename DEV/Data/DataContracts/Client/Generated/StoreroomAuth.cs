/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the StoreroomAuth table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class StoreroomAuth : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public StoreroomAuth()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_StoreroomAuth dbObj)
        {
		    this.StoreroomAuthId = dbObj.StoreroomAuthId;
            this.ClientId = dbObj.ClientId;
            this.SiteId = dbObj.SiteId;
            this.PersonnelId = dbObj.PersonnelId;
            this.StoreroomId = dbObj.StoreroomId;
            this.Maintain = dbObj.Maintain;
            this.Issue = dbObj.Issue;
            this.IssueTransfer = dbObj.IssueTransfer;
            this.ReceiveTransfer = dbObj.ReceiveTransfer;
            this.PhysicalInventory = dbObj.PhysicalInventory;
            this.Purchase = dbObj.Purchase;
            this.ReceivePurchase = dbObj.ReceivePurchase;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_StoreroomAuth dbObj = new b_StoreroomAuth();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_StoreroomAuth ToDatabaseObject()
        {
            b_StoreroomAuth dbObj = new b_StoreroomAuth();
            dbObj.StoreroomAuthId = this.StoreroomAuthId;
            dbObj.ClientId = this.ClientId;
            dbObj.SiteId = this.SiteId;
            dbObj.PersonnelId = this.PersonnelId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.Maintain = this.Maintain;
            dbObj.Issue = this.Issue;
            dbObj.IssueTransfer = this.IssueTransfer;
            dbObj.ReceiveTransfer = this.ReceiveTransfer;
            dbObj.PhysicalInventory = this.PhysicalInventory;
            dbObj.Purchase = this.Purchase;
            dbObj.ReceivePurchase = this.ReceivePurchase;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            StoreroomAuth_Create trans = new StoreroomAuth_Create();
            trans.StoreroomAuth = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.StoreroomAuth);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            StoreroomAuth_Retrieve trans = new StoreroomAuth_Retrieve();
            trans.StoreroomAuth = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.StoreroomAuth);
        }

        public void Update(DatabaseKey dbKey) 
        {
            StoreroomAuth_Update trans = new StoreroomAuth_Update();
            trans.StoreroomAuth = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.StoreroomAuth);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            StoreroomAuth_Delete trans = new StoreroomAuth_Delete();
            trans.StoreroomAuth = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.StoreroomAuthId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _StoreroomAuthId;
        private long _ClientId;
        private long _SiteId;
        private long _PersonnelId;
        private long _StoreroomId;
        private bool _Maintain;
        private bool _Issue;
        private bool _IssueTransfer;
        private bool _ReceiveTransfer;
        private bool _PhysicalInventory;
        private bool? _Purchase;
        private bool _ReceivePurchase;
        #endregion
        
        #region Properties


        /// <summary>
        /// StoreroomAuthId property
        /// </summary>
        [DataMember]
        public long StoreroomAuthId
        {
            get { return _StoreroomAuthId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomAuthId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// PersonnelId property
        /// </summary>
        [DataMember]
        public long PersonnelId
        {
            get { return _PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PersonnelId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// Maintain property
        /// </summary>
        [DataMember]
        public bool Maintain
        {
            get { return _Maintain; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Maintain); }
        }

        /// <summary>
        /// Issue property
        /// </summary>
        [DataMember]
        public bool Issue
        {
            get { return _Issue; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Issue); }
        }

        /// <summary>
        /// IssueTransfer property
        /// </summary>
        [DataMember]
        public bool IssueTransfer
        {
            get { return _IssueTransfer; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IssueTransfer); }
        }

        /// <summary>
        /// ReceiveTransfer property
        /// </summary>
        [DataMember]
        public bool ReceiveTransfer
        {
            get { return _ReceiveTransfer; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _ReceiveTransfer); }
        }

        /// <summary>
        /// PhysicalInventory property
        /// </summary>
        [DataMember]
        public bool PhysicalInventory
        {
            get { return _PhysicalInventory; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PhysicalInventory); }
        }

        /// <summary>
        /// Purchase property
        /// </summary>
        [DataMember]
        public bool? Purchase
        {
            get { return _Purchase; }
            set { Set<bool?>(MethodBase.GetCurrentMethod().Name, value, ref _Purchase); }
        }

        /// <summary>
        /// ReceivePurchase property
        /// </summary>
        [DataMember]
        public bool ReceivePurchase
        {
            get { return _ReceivePurchase; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _ReceivePurchase); }
        }
        #endregion
		
		
    }
}
