/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the IoTReading table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class IoTReading : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public IoTReading()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_IoTReading dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.IoTReadingId = dbObj.IoTReadingId;
            this.SiteId = dbObj.SiteId;
            this.IoTDeviceId = dbObj.IoTDeviceId;
            this.IoTEventId = dbObj.IoTEventId;
            this.Reading = dbObj.Reading;
            this.ReadingDate = dbObj.ReadingDate;
            this.ReadingUnit = dbObj.ReadingUnit;
            this.BatteryLevel = dbObj.BatteryLevel;
            this.SignalStrength = dbObj.SignalStrength;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_IoTReading dbObj = new b_IoTReading();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_IoTReading ToDatabaseObject()
        {
            b_IoTReading dbObj = new b_IoTReading();
            dbObj.ClientId = this.ClientId;
            dbObj.IoTReadingId = this.IoTReadingId;
            dbObj.SiteId = this.SiteId;
            dbObj.IoTDeviceId = this.IoTDeviceId;
            dbObj.IoTEventId = this.IoTEventId;
            dbObj.Reading = this.Reading;
            dbObj.ReadingDate = this.ReadingDate;
            dbObj.ReadingUnit = this.ReadingUnit;
            dbObj.BatteryLevel = this.BatteryLevel;
            dbObj.SignalStrength = this.SignalStrength;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            IoTReading_Create trans = new IoTReading_Create();
            trans.IoTReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.IoTReading);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            IoTReading_Retrieve trans = new IoTReading_Retrieve();
            trans.IoTReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.IoTReading);
        }

        public void Update(DatabaseKey dbKey)
        {
            IoTReading_Update trans = new IoTReading_Update();
            trans.IoTReading = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.IoTReading);
        }

        public void Delete(DatabaseKey dbKey)
        {
            IoTReading_Delete trans = new IoTReading_Delete();
            trans.IoTReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.IoTReadingId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _IoTReadingId;
        private long _SiteId;
        private long _IoTDeviceId;
        private long _IoTEventId;
        private decimal _Reading;
        private DateTime? _ReadingDate;
        private string _ReadingUnit;
        private int _BatteryLevel;
        private int _SignalStrength;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// IoTReadingId property
        /// </summary>
        [DataMember]
        public long IoTReadingId
        {
            get { return _IoTReadingId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _IoTReadingId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// IoTDeviceId property
        /// </summary>
        [DataMember]
        public long IoTDeviceId
        {
            get { return _IoTDeviceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _IoTDeviceId); }
        }

        /// <summary>
        /// IoTEventId property
        /// </summary>
        [DataMember]
        public long IoTEventId
        {
            get { return _IoTEventId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _IoTEventId); }
        }

        /// <summary>
        /// Reading property
        /// </summary>
        [DataMember]
        public decimal Reading
        {
            get { return _Reading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Reading); }
        }

        /// <summary>
        /// ReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? ReadingDate
        {
            get { return _ReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingDate); }
        }

        /// <summary>
        /// ReadingUnit property
        /// </summary>
        [DataMember]
        public string ReadingUnit
        {
            get { return _ReadingUnit; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingUnit); }
        }

        /// <summary>
        /// BatteryLevel property
        /// </summary>
        [DataMember]
        public int BatteryLevel
        {
            get { return _BatteryLevel; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _BatteryLevel); }
        }

        /// <summary>
        /// SignalStrength property
        /// </summary>
        [DataMember]
        public int SignalStrength
        {
            get { return _SignalStrength; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _SignalStrength); }
        }
        #endregion


    }
}
