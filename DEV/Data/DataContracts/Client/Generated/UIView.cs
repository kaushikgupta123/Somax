/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the UIView table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class UIView : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public UIView()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_UIView dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.UIViewId = dbObj.UIViewId;
            this.Module = dbObj.Module;
            this.ViewName = dbObj.ViewName;
            this.ViewDescription = dbObj.ViewDescription;
            this.ViewType = dbObj.ViewType;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_UIView dbObj = new b_UIView();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_UIView ToDatabaseObject()
        {
            b_UIView dbObj = new b_UIView();
            dbObj.ClientId = this.ClientId;
            dbObj.UIViewId = this.UIViewId;
            dbObj.Module = this.Module;
            dbObj.ViewName = this.ViewName;
            dbObj.ViewDescription = this.ViewDescription;
            dbObj.ViewType = this.ViewType;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            UIView_Create trans = new UIView_Create();
            trans.UIView = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.UIView);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            UIView_Retrieve trans = new UIView_Retrieve();
            trans.UIView = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.UIView);
        }

        public void Update(DatabaseKey dbKey) 
        {
            UIView_Update trans = new UIView_Update();
            trans.UIView = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.UIView);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            UIView_Delete trans = new UIView_Delete();
            trans.UIView = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.UIViewId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _UIViewId;
        private string _Module;
        private string _ViewName;
        private string _ViewDescription;
        private string _ViewType;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// UIViewId property
        /// </summary>
        [DataMember]
        public long UIViewId
        {
            get { return _UIViewId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UIViewId); }
        }

        /// <summary>
        /// Module property
        /// </summary>
        [DataMember]
        public string Module
        {
            get { return _Module; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Module); }
        }

        /// <summary>
        /// ViewName property
        /// </summary>
        [DataMember]
        public string ViewName
        {
            get { return _ViewName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ViewName); }
        }

        /// <summary>
        /// ViewDescription property
        /// </summary>
        [DataMember]
        public string ViewDescription
        {
            get { return _ViewDescription; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ViewDescription); }
        }

        /// <summary>
        /// ViewType property
        /// </summary>
        [DataMember]
        public string ViewType
        {
            get { return _ViewType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ViewType); }
        }
        #endregion
		
		
    }
}
