/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the POReceiptImport2 table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class POReceiptImport2 : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public POReceiptImport2()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_POReceiptImport2 dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.POReceiptImport2Id = dbObj.POReceiptImport2Id;
            this.SiteId = dbObj.SiteId;
            this.ExReceipt = dbObj.ExReceipt;
            this.ExReceiptId = dbObj.ExReceiptId;
            this.ExReceiptTxnId = dbObj.ExReceiptTxnId;
            this.ExVendorId = dbObj.ExVendorId;
            this.ExVendor = dbObj.ExVendor;
            this.ReceiptDate = dbObj.ReceiptDate;
            this.TransactionDate = dbObj.TransactionDate;
            this.ExPurchaseOrderId = dbObj.ExPurchaseOrderId;
            this.ExPurchaseOrder = dbObj.ExPurchaseOrder;
            this.ExPurchaseOrderLineId = dbObj.ExPurchaseOrderLineId;
            this.POLineNumber = dbObj.POLineNumber;
            this.ExPartId = dbObj.ExPartId;
            this.ExPart = dbObj.ExPart;
            this.Description = dbObj.Description;
            this.ReceiptQuantity = dbObj.ReceiptQuantity;
            this.PurchaseUOM = dbObj.PurchaseUOM;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.UOMConversion = dbObj.UOMConversion;
            this.Reason = dbObj.Reason;
            this.ErrorMessage = dbObj.ErrorMessage;
            this.LastProcess = dbObj.LastProcess;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_POReceiptImport2 dbObj = new b_POReceiptImport2();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_POReceiptImport2 ToDatabaseObject()
        {
            b_POReceiptImport2 dbObj = new b_POReceiptImport2();
            dbObj.ClientId = this.ClientId;
            dbObj.POReceiptImport2Id = this.POReceiptImport2Id;
            dbObj.SiteId = this.SiteId;
            dbObj.ExReceipt = this.ExReceipt;
            dbObj.ExReceiptId = this.ExReceiptId;
            dbObj.ExReceiptTxnId = this.ExReceiptTxnId;
            dbObj.ExVendorId = this.ExVendorId;
            dbObj.ExVendor = this.ExVendor;
            dbObj.ReceiptDate = this.ReceiptDate;
            dbObj.TransactionDate = this.TransactionDate;
            dbObj.ExPurchaseOrderId = this.ExPurchaseOrderId;
            dbObj.ExPurchaseOrder = this.ExPurchaseOrder;
            dbObj.ExPurchaseOrderLineId = this.ExPurchaseOrderLineId;
            dbObj.POLineNumber = this.POLineNumber;
            dbObj.ExPartId = this.ExPartId;
            dbObj.ExPart = this.ExPart;
            dbObj.Description = this.Description;
            dbObj.ReceiptQuantity = this.ReceiptQuantity;
            dbObj.PurchaseUOM = this.PurchaseUOM;
            dbObj.UnitOfMeasure = this.UnitOfMeasure;
            dbObj.UOMConversion = this.UOMConversion;
            dbObj.Reason = this.Reason;
            dbObj.ErrorMessage = this.ErrorMessage;
            dbObj.LastProcess = this.LastProcess;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            POReceiptImport2_Create trans = new POReceiptImport2_Create();
            trans.POReceiptImport2 = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.POReceiptImport2);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            POReceiptImport2_Retrieve trans = new POReceiptImport2_Retrieve();
            trans.POReceiptImport2 = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.POReceiptImport2);
        }

        public void Update(DatabaseKey dbKey) 
        {
            POReceiptImport2_Update trans = new POReceiptImport2_Update();
            trans.POReceiptImport2 = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.POReceiptImport2);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            POReceiptImport2_Delete trans = new POReceiptImport2_Delete();
            trans.POReceiptImport2 = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.POReceiptImport2Id;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _POReceiptImport2Id;
        private long _SiteId;
        private string _ExReceipt;
        private long _ExReceiptId;
        private long _ExReceiptTxnId;
        private long _ExVendorId;
        private string _ExVendor;
        private DateTime? _ReceiptDate;
        private DateTime? _TransactionDate;
        private long _ExPurchaseOrderId;
        private string _ExPurchaseOrder;
        private long _ExPurchaseOrderLineId;
        private int _POLineNumber;
        private long _ExPartId;
        private string _ExPart;
        private string _Description;
        private decimal _ReceiptQuantity;
        private string _PurchaseUOM;
        private string _UnitOfMeasure;
        private decimal _UOMConversion;
        private string _Reason;
        private string _ErrorMessage;
        private DateTime? _LastProcess;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// POReceiptImport2Id property
        /// </summary>
        [DataMember]
        public long POReceiptImport2Id
        {
            get { return _POReceiptImport2Id; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _POReceiptImport2Id); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// ExReceipt property
        /// </summary>
        [DataMember]
        public string ExReceipt
        {
            get { return _ExReceipt; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExReceipt); }
        }

        /// <summary>
        /// ExReceiptId property
        /// </summary>
        [DataMember]
        public long ExReceiptId
        {
            get { return _ExReceiptId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExReceiptId); }
        }

        /// <summary>
        /// ExReceiptTxnId property
        /// </summary>
        [DataMember]
        public long ExReceiptTxnId
        {
            get { return _ExReceiptTxnId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExReceiptTxnId); }
        }

        /// <summary>
        /// ExVendorId property
        /// </summary>
        [DataMember]
        public long ExVendorId
        {
            get { return _ExVendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExVendorId); }
        }

        /// <summary>
        /// ExVendor property
        /// </summary>
        [DataMember]
        public string ExVendor
        {
            get { return _ExVendor; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExVendor); }
        }

        /// <summary>
        /// ReceiptDate property
        /// </summary>
        [DataMember]
        public DateTime? ReceiptDate
        {
            get { return _ReceiptDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReceiptDate); }
        }

        /// <summary>
        /// TransactionDate property
        /// </summary>
        [DataMember]
        public DateTime? TransactionDate
        {
            get { return _TransactionDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _TransactionDate); }
        }

        /// <summary>
        /// ExPurchaseOrderId property
        /// </summary>
        [DataMember]
        public long ExPurchaseOrderId
        {
            get { return _ExPurchaseOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExPurchaseOrderId); }
        }

        /// <summary>
        /// ExPurchaseOrder property
        /// </summary>
        [DataMember]
        public string ExPurchaseOrder
        {
            get { return _ExPurchaseOrder; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExPurchaseOrder); }
        }

        /// <summary>
        /// ExPurchaseOrderLineId property
        /// </summary>
        [DataMember]
        public long ExPurchaseOrderLineId
        {
            get { return _ExPurchaseOrderLineId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExPurchaseOrderLineId); }
        }

        /// <summary>
        /// POLineNumber property
        /// </summary>
        [DataMember]
        public int POLineNumber
        {
            get { return _POLineNumber; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _POLineNumber); }
        }

        /// <summary>
        /// ExPartId property
        /// </summary>
        [DataMember]
        public long ExPartId
        {
            get { return _ExPartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExPartId); }
        }

        /// <summary>
        /// ExPart property
        /// </summary>
        [DataMember]
        public string ExPart
        {
            get { return _ExPart; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExPart); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// ReceiptQuantity property
        /// </summary>
        [DataMember]
        public decimal ReceiptQuantity
        {
            get { return _ReceiptQuantity; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ReceiptQuantity); }
        }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        [DataMember]
        public string PurchaseUOM
        {
            get { return _PurchaseUOM; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseUOM); }
        }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        [DataMember]
        public string UnitOfMeasure
        {
            get { return _UnitOfMeasure; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UnitOfMeasure); }
        }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        [DataMember]
        public decimal UOMConversion
        {
            get { return _UOMConversion; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UOMConversion); }
        }

        /// <summary>
        /// Reason property
        /// </summary>
        [DataMember]
        public string Reason
        {
            get { return _Reason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Reason); }
        }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        [DataMember]
        public string ErrorMessage
        {
            get { return _ErrorMessage; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorMessage); }
        }

        /// <summary>
        /// LastProcess property
        /// </summary>
        [DataMember]
        public DateTime? LastProcess
        {
            get { return _LastProcess; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastProcess); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
