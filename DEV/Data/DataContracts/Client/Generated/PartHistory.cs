/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PartHistory table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PartHistory : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PartHistory()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PartHistory dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.PartHistoryId = dbObj.PartHistoryId;
            this.PartId = dbObj.PartId;
            this.PartStoreroomId = dbObj.PartStoreroomId;
            this.AccountId = dbObj.AccountId;
            this.AverageCostBefore = dbObj.AverageCostBefore;
            this.AverageCostAfter = dbObj.AverageCostAfter;
            this.ChargeType_Primary = dbObj.ChargeType_Primary;
            this.ChargeToId_Primary = dbObj.ChargeToId_Primary;
            this.Comments = dbObj.Comments;
            this.Cost = dbObj.Cost;
            this.CostAfter = dbObj.CostAfter;
            this.CostBefore = dbObj.CostBefore;
            this.Description = dbObj.Description;
            this.DepartmentId = dbObj.DepartmentId;
            this.PerformedById = dbObj.PerformedById;
            this.QtyAfter = dbObj.QtyAfter;
            this.QtyBefore = dbObj.QtyBefore;
            this.RequestorId = dbObj.RequestorId;
            this.StockType = dbObj.StockType;
            this.StoreroomId = dbObj.StoreroomId;
            this.TransactionDate = dbObj.TransactionDate;
            this.TransactionQuantity = dbObj.TransactionQuantity;
            this.TransactionType = dbObj.TransactionType;
            this.UnitofMeasure = dbObj.UnitofMeasure;
            this.CreatedBy = dbObj.CreatedBy;
            this.CreatedDate = dbObj.CreatedDate;
            this.ChargeType_Secondary = dbObj.ChargeType_Secondary;
            this.ChargeToId_Secondary = dbObj.ChargeToId_Secondary;
            this.VMRSFailure = dbObj.VMRSFailure;
            this.EstimatedCostsId = dbObj.EstimatedCostsId;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_PartHistory dbObj = new b_PartHistory();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_PartHistory ToDatabaseObject()
        {
            b_PartHistory dbObj = new b_PartHistory();
            dbObj.ClientId = this.ClientId;
            dbObj.PartHistoryId = this.PartHistoryId;
            dbObj.PartId = this.PartId;
            dbObj.PartStoreroomId = this.PartStoreroomId;
            dbObj.AccountId = this.AccountId;
            dbObj.AverageCostBefore = this.AverageCostBefore;
            dbObj.AverageCostAfter = this.AverageCostAfter;
            dbObj.ChargeType_Primary = this.ChargeType_Primary;
            dbObj.ChargeToId_Primary = this.ChargeToId_Primary;
            dbObj.Comments = this.Comments;
            dbObj.Cost = this.Cost;
            dbObj.CostAfter = this.CostAfter;
            dbObj.CostBefore = this.CostBefore;
            dbObj.Description = this.Description;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.PerformedById = this.PerformedById;
            dbObj.QtyAfter = this.QtyAfter;
            dbObj.QtyBefore = this.QtyBefore;
            dbObj.RequestorId = this.RequestorId;
            dbObj.StockType = this.StockType;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.TransactionDate = this.TransactionDate;
            dbObj.TransactionQuantity = this.TransactionQuantity;
            dbObj.TransactionType = this.TransactionType;
            dbObj.UnitofMeasure = this.UnitofMeasure;
            dbObj.CreatedBy = this.CreatedBy;
            dbObj.CreatedDate = this.CreatedDate;
            dbObj.ChargeType_Secondary = this.ChargeType_Secondary;
            dbObj.ChargeToId_Secondary = this.ChargeToId_Secondary;
            dbObj.VMRSFailure = this.VMRSFailure;
            dbObj.EstimatedCostsId = this.EstimatedCostsId;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            PartHistory_Create trans = new PartHistory_Create();
            trans.PartHistory = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PartHistory);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            PartHistory_Retrieve trans = new PartHistory_Retrieve();
            trans.PartHistory = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PartHistory);
        }

        public void Update(DatabaseKey dbKey)
        {
            PartHistory_Update trans = new PartHistory_Update();
            trans.PartHistory = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PartHistory);
        }

        public void Delete(DatabaseKey dbKey)
        {
            PartHistory_Delete trans = new PartHistory_Delete();
            trans.PartHistory = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PartHistoryId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _PartHistoryId;
        private long _PartId;
        private long _PartStoreroomId;
        private long _AccountId;
        private decimal _AverageCostBefore;
        private decimal _AverageCostAfter;
        private string _ChargeType_Primary;
        private long _ChargeToId_Primary;
        private string _Comments;
        private decimal _Cost;
        private decimal _CostAfter;
        private decimal _CostBefore;
        private string _Description;
        private long _DepartmentId;
        private long _PerformedById;
        private decimal _QtyAfter;
        private decimal _QtyBefore;
        private long _RequestorId;
        private string _StockType;
        private long _StoreroomId;
        private DateTime? _TransactionDate;
        private decimal _TransactionQuantity;
        private string _TransactionType;
        private string _UnitofMeasure;
        private string _CreatedBy;
        private DateTime? _CreatedDate;
        private string _ChargeType_Secondary;
        private long _ChargeToId_Secondary;
        private string _VMRSFailure;
        private long _EstimatedCostsId;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PartHistoryId property
        /// </summary>
        [DataMember]
        public long PartHistoryId
        {
            get { return _PartHistoryId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartHistoryId); }
        }

        /// <summary>
        /// PartId property
        /// </summary>
        [DataMember]
        public long PartId
        {
            get { return _PartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartId); }
        }

        /// <summary>
        /// PartStoreroomId property
        /// </summary>
        [DataMember]
        public long PartStoreroomId
        {
            get { return _PartStoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartStoreroomId); }
        }

        /// <summary>
        /// AccountId property
        /// </summary>
        [DataMember]
        public long AccountId
        {
            get { return _AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AccountId); }
        }

        /// <summary>
        /// AverageCostBefore property
        /// </summary>
        [DataMember]
        public decimal AverageCostBefore
        {
            get { return _AverageCostBefore; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _AverageCostBefore); }
        }

        /// <summary>
        /// AverageCostAfter property
        /// </summary>
        [DataMember]
        public decimal AverageCostAfter
        {
            get { return _AverageCostAfter; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _AverageCostAfter); }
        }

        /// <summary>
        /// ChargeType_Primary property
        /// </summary>
        [DataMember]
        public string ChargeType_Primary
        {
            get { return _ChargeType_Primary; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType_Primary); }
        }

        /// <summary>
        /// ChargeToId_Primary property
        /// </summary>
        [DataMember]
        public long ChargeToId_Primary
        {
            get { return _ChargeToId_Primary; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId_Primary); }
        }

        /// <summary>
        /// Comments property
        /// </summary>
        [DataMember]
        public string Comments
        {
            get { return _Comments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Comments); }
        }

        /// <summary>
        /// Cost property
        /// </summary>
        [DataMember]
        public decimal Cost
        {
            get { return _Cost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Cost); }
        }

        /// <summary>
        /// CostAfter property
        /// </summary>
        [DataMember]
        public decimal CostAfter
        {
            get { return _CostAfter; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _CostAfter); }
        }

        /// <summary>
        /// CostBefore property
        /// </summary>
        [DataMember]
        public decimal CostBefore
        {
            get { return _CostBefore; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _CostBefore); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// PerformedById property
        /// </summary>
        [DataMember]
        public long PerformedById
        {
            get { return _PerformedById; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PerformedById); }
        }

        /// <summary>
        /// QtyAfter property
        /// </summary>
        [DataMember]
        public decimal QtyAfter
        {
            get { return _QtyAfter; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _QtyAfter); }
        }

        /// <summary>
        /// QtyBefore property
        /// </summary>
        [DataMember]
        public decimal QtyBefore
        {
            get { return _QtyBefore; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _QtyBefore); }
        }

        /// <summary>
        /// RequestorId property
        /// </summary>
        [DataMember]
        public long RequestorId
        {
            get { return _RequestorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _RequestorId); }
        }

        /// <summary>
        /// StockType property
        /// </summary>
        [DataMember]
        public string StockType
        {
            get { return _StockType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _StockType); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// TransactionDate property
        /// </summary>
        [DataMember]
        public DateTime? TransactionDate
        {
            get { return _TransactionDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _TransactionDate); }
        }

        /// <summary>
        /// TransactionQuantity property
        /// </summary>
        [DataMember]
        public decimal TransactionQuantity
        {
            get { return _TransactionQuantity; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TransactionQuantity); }
        }

        /// <summary>
        /// TransactionType property
        /// </summary>
        [DataMember]
        public string TransactionType
        {
            get { return _TransactionType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TransactionType); }
        }

        /// <summary>
        /// UnitofMeasure property
        /// </summary>
        [DataMember]
        public string UnitofMeasure
        {
            get { return _UnitofMeasure; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UnitofMeasure); }
        }

        /// <summary>
        /// CreatedBy property
        /// </summary>
        [DataMember]
        public string CreatedBy
        {
            get { return _CreatedBy; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CreatedBy); }
        }

        /// <summary>
        /// CreatedDate property
        /// </summary>
        [DataMember]
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CreatedDate); }
        }

        /// <summary>
        /// ChargeType_Secondary property
        /// </summary>
        [DataMember]
        public string ChargeType_Secondary
        {
            get { return _ChargeType_Secondary; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType_Secondary); }
        }

        /// <summary>
        /// ChargeToId_Secondary property
        /// </summary>
        [DataMember]
        public long ChargeToId_Secondary
        {
            get { return _ChargeToId_Secondary; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId_Secondary); }
        }

        /// <summary>
        /// VMRSFailure property
        /// </summary>
        [DataMember]
        public string VMRSFailure
        {
            get { return _VMRSFailure; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VMRSFailure); }
        }

        /// <summary>
        /// EstimatedCostsId property
        /// </summary>
        [DataMember]
        public long EstimatedCostsId
        {
            get { return _EstimatedCostsId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EstimatedCostsId); }
        }
        #endregion


    }
}
