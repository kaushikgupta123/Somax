/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SanitationPlanning table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class SanitationPlanning : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SanitationPlanning()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_SanitationPlanning dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.SanitationPlanningId = dbObj.SanitationPlanningId;
            this.SanitationMasterId = dbObj.SanitationMasterId;
            this.SanitationJobId = dbObj.SanitationJobId;
            this.Category = dbObj.Category;
            this.CategoryValue = dbObj.CategoryValue;
            this.CategoryId = dbObj.CategoryId;
            this.Description = dbObj.Description;
            this.Dilution = dbObj.Dilution;
            this.Instructions = dbObj.Instructions;
            this.Quantity = dbObj.Quantity;
            this.UnitCost = dbObj.UnitCost;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_SanitationPlanning dbObj = new b_SanitationPlanning();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_SanitationPlanning ToDatabaseObject()
        {
            b_SanitationPlanning dbObj = new b_SanitationPlanning();
            dbObj.ClientId = this.ClientId;
            dbObj.SanitationPlanningId = this.SanitationPlanningId;
            dbObj.SanitationMasterId = this.SanitationMasterId;
            dbObj.SanitationJobId = this.SanitationJobId;
            dbObj.Category = this.Category;
            dbObj.CategoryValue = this.CategoryValue;
            dbObj.CategoryId = this.CategoryId;
            dbObj.Description = this.Description;
            dbObj.Dilution = this.Dilution;
            dbObj.Instructions = this.Instructions;
            dbObj.Quantity = this.Quantity;
            dbObj.UnitCost = this.UnitCost;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            SanitationPlanning_Create trans = new SanitationPlanning_Create();
            trans.SanitationPlanning = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.SanitationPlanning);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            SanitationPlanning_Retrieve trans = new SanitationPlanning_Retrieve();
            trans.SanitationPlanning = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SanitationPlanning);
        }

        public void Update(DatabaseKey dbKey) 
        {
            SanitationPlanning_Update trans = new SanitationPlanning_Update();
            trans.SanitationPlanning = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.SanitationPlanning);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            SanitationPlanning_Delete trans = new SanitationPlanning_Delete();
            trans.SanitationPlanning = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.SanitationPlanningId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _SanitationPlanningId;
        private long _SanitationMasterId;
        private long _SanitationJobId;
        private string _Category;
        private string _CategoryValue;
        private long _CategoryId;
        private string _Description;
        private string _Dilution;
        private string _Instructions;
        private decimal _Quantity;
        private decimal _UnitCost;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SanitationPlanningId property
        /// </summary>
        [DataMember]
        public long SanitationPlanningId
        {
            get { return _SanitationPlanningId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationPlanningId); }
        }

        /// <summary>
        /// SanitationMasterId property
        /// </summary>
        [DataMember]
        public long SanitationMasterId
        {
            get { return _SanitationMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationMasterId); }
        }

        /// <summary>
        /// SanitationJobId property
        /// </summary>
        [DataMember]
        public long SanitationJobId
        {
            get { return _SanitationJobId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationJobId); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// CategoryValue property
        /// </summary>
        [DataMember]
        public string CategoryValue
        {
            get { return _CategoryValue; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CategoryValue); }
        }

        /// <summary>
        /// CategoryId property
        /// </summary>
        [DataMember]
        public long CategoryId
        {
            get { return _CategoryId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CategoryId); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// Dilution property
        /// </summary>
        [DataMember]
        public string Dilution
        {
            get { return _Dilution; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Dilution); }
        }

        /// <summary>
        /// Instructions property
        /// </summary>
        [DataMember]
        public string Instructions
        {
            get { return _Instructions; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Instructions); }
        }

        /// <summary>
        /// Quantity property
        /// </summary>
        [DataMember]
        public decimal Quantity
        {
            get { return _Quantity; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Quantity); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }
        #endregion
		
		
    }
}
