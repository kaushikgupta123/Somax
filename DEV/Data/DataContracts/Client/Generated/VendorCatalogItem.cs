/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the VendorCatalogItem table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class VendorCatalogItem : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public VendorCatalogItem()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_VendorCatalogItem dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.VendorCatalogItemId = dbObj.VendorCatalogItemId;
            this.VendorCatalogId = dbObj.VendorCatalogId;
            this.PartMasterId = dbObj.PartMasterId;
            this.ExSourceId = dbObj.ExSourceId;
            this.LineNumber = dbObj.LineNumber;
            this.Description = dbObj.Description;
            this.IssueUOM = dbObj.IssueUOM;
            this.PurchaseUOM = dbObj.PurchaseUOM;
            this.UOMConversion = dbObj.UOMConversion;
            this.UnitCost = dbObj.UnitCost;
            this.PartNumber = dbObj.PartNumber;
            this.LeadTime = dbObj.LeadTime;
            this.MinimumQuantity = dbObj.MinimumQuantity;
            this.Inactive = dbObj.Inactive;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_VendorCatalogItem dbObj = new b_VendorCatalogItem();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_VendorCatalogItem ToDatabaseObject()
        {
            b_VendorCatalogItem dbObj = new b_VendorCatalogItem();
            dbObj.ClientId = this.ClientId;
            dbObj.VendorCatalogItemId = this.VendorCatalogItemId;
            dbObj.VendorCatalogId = this.VendorCatalogId;
            dbObj.PartMasterId = this.PartMasterId;
            dbObj.ExSourceId = this.ExSourceId;
            dbObj.LineNumber = this.LineNumber;
            dbObj.Description = this.Description;
            dbObj.IssueUOM = this.IssueUOM;
            dbObj.PurchaseUOM = this.PurchaseUOM;
            dbObj.UOMConversion = this.UOMConversion;
            dbObj.UnitCost = this.UnitCost;
            dbObj.PartNumber = this.PartNumber;
            dbObj.LeadTime = this.LeadTime;
            dbObj.MinimumQuantity = this.MinimumQuantity;
            dbObj.Inactive = this.Inactive;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            VendorCatalogItem_Create trans = new VendorCatalogItem_Create();
            trans.VendorCatalogItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.VendorCatalogItem);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            VendorCatalogItem_Retrieve trans = new VendorCatalogItem_Retrieve();
            trans.VendorCatalogItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.VendorCatalogItem);
        }

        public void Update(DatabaseKey dbKey) 
        {
            VendorCatalogItem_Update trans = new VendorCatalogItem_Update();
            trans.VendorCatalogItem = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.VendorCatalogItem);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            VendorCatalogItem_Delete trans = new VendorCatalogItem_Delete();
            trans.VendorCatalogItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.VendorCatalogItemId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _VendorCatalogItemId;
        private long _VendorCatalogId;
        private long _PartMasterId;
        private long _ExSourceId;
        private int _LineNumber;
        private string _Description;
        private string _IssueUOM;
        private string _PurchaseUOM;
        private decimal _UOMConversion;
        private decimal _UnitCost;
        private string _PartNumber;
        private int _LeadTime;
        private int _MinimumQuantity;
        private bool _Inactive;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// VendorCatalogItemId property
        /// </summary>
        [DataMember]
        public long VendorCatalogItemId
        {
            get { return _VendorCatalogItemId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorCatalogItemId); }
        }

        /// <summary>
        /// VendorCatalogId property
        /// </summary>
        [DataMember]
        public long VendorCatalogId
        {
            get { return _VendorCatalogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorCatalogId); }
        }

        /// <summary>
        /// PartMasterId property
        /// </summary>
        [DataMember]
        public long PartMasterId
        {
            get { return _PartMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartMasterId); }
        }

        /// <summary>
        /// ExSourceId property
        /// </summary>
        [DataMember]
        public long ExSourceId
        {
            get { return _ExSourceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExSourceId); }
        }

        /// <summary>
        /// LineNumber property
        /// </summary>
        [DataMember]
        public int LineNumber
        {
            get { return _LineNumber; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _LineNumber); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// IssueUOM property
        /// </summary>
        [DataMember]
        public string IssueUOM
        {
            get { return _IssueUOM; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _IssueUOM); }
        }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        [DataMember]
        public string PurchaseUOM
        {
            get { return _PurchaseUOM; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseUOM); }
        }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        [DataMember]
        public decimal UOMConversion
        {
            get { return _UOMConversion; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UOMConversion); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }

        /// <summary>
        /// PartNumber property
        /// </summary>
        [DataMember]
        public string PartNumber
        {
            get { return _PartNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PartNumber); }
        }

        /// <summary>
        /// LeadTime property
        /// </summary>
        [DataMember]
        public int LeadTime
        {
            get { return _LeadTime; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _LeadTime); }
        }

        /// <summary>
        /// MinimumQuantity property
        /// </summary>
        [DataMember]
        public int MinimumQuantity
        {
            get { return _MinimumQuantity; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _MinimumQuantity); }
        }

        /// <summary>
        /// Inactive property
        /// </summary>
        [DataMember]
        public bool Inactive
        {
            get { return _Inactive; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Inactive); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
