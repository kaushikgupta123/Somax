/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the VendorInsurance table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class VendorInsurance : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public VendorInsurance()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_VendorInsurance dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.VendorInsuranceId = dbObj.VendorInsuranceId;
            this.VendorId = dbObj.VendorId;
            this.Active = dbObj.Active;
            this.AdditionalInsurance = dbObj.AdditionalInsurance;
            this.Amount = dbObj.Amount;
            this.Amount_Medical = dbObj.Amount_Medical;
            this.Amount_OCC = dbObj.Amount_OCC;
            this.Amount_PIN = dbObj.Amount_PIN;
            this.Company = dbObj.Company;
            this.Contact = dbObj.Contact;
            this.EffectiveDate = dbObj.EffectiveDate;
            this.ExpireDate = dbObj.ExpireDate;
            this.InsuranceCertificate = dbObj.InsuranceCertificate;
            this.LiabilityAgreement = dbObj.LiabilityAgreement;
            this.PKGContactorRecBy = dbObj.PKGContactorRecBy;
            this.PKGReceiveBy = dbObj.PKGReceiveBy;
            this.PKGSent = dbObj.PKGSent;
            this.PreQualifySurvey = dbObj.PreQualifySurvey;
            this.SentVia = dbObj.SentVia;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_VendorInsurance dbObj = new b_VendorInsurance();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_VendorInsurance ToDatabaseObject()
        {
            b_VendorInsurance dbObj = new b_VendorInsurance();
            dbObj.ClientId = this.ClientId;
            dbObj.VendorInsuranceId = this.VendorInsuranceId;
            dbObj.VendorId = this.VendorId;
            dbObj.Active = this.Active;
            dbObj.AdditionalInsurance = this.AdditionalInsurance;
            dbObj.Amount = this.Amount;
            dbObj.Amount_Medical = this.Amount_Medical;
            dbObj.Amount_OCC = this.Amount_OCC;
            dbObj.Amount_PIN = this.Amount_PIN;
            dbObj.Company = this.Company;
            dbObj.Contact = this.Contact;
            dbObj.EffectiveDate = this.EffectiveDate;
            dbObj.ExpireDate = this.ExpireDate;
            dbObj.InsuranceCertificate = this.InsuranceCertificate;
            dbObj.LiabilityAgreement = this.LiabilityAgreement;
            dbObj.PKGContactorRecBy = this.PKGContactorRecBy;
            dbObj.PKGReceiveBy = this.PKGReceiveBy;
            dbObj.PKGSent = this.PKGSent;
            dbObj.PreQualifySurvey = this.PreQualifySurvey;
            dbObj.SentVia = this.SentVia;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            VendorInsurance_Create trans = new VendorInsurance_Create();
            trans.VendorInsurance = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.VendorInsurance);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            VendorInsurance_Retrieve trans = new VendorInsurance_Retrieve();
            trans.VendorInsurance = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.VendorInsurance);
        }

        public void Update(DatabaseKey dbKey)
        {
            VendorInsurance_Update trans = new VendorInsurance_Update();
            trans.VendorInsurance = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.VendorInsurance);
        }

        public void Delete(DatabaseKey dbKey)
        {
            VendorInsurance_Delete trans = new VendorInsurance_Delete();
            trans.VendorInsurance = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.VendorInsuranceId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _VendorInsuranceId;
        private long _VendorId;
        private bool _Active;
        private bool _AdditionalInsurance;
        private int _Amount;
        private int _Amount_Medical;
        private int _Amount_OCC;
        private int _Amount_PIN;
        private string _Company;
        private string _Contact;
        private DateTime? _EffectiveDate;
        private DateTime? _ExpireDate;
        private string _InsuranceCertificate;
        private bool _LiabilityAgreement;
        private DateTime? _PKGContactorRecBy;
        private DateTime? _PKGReceiveBy;
        private DateTime? _PKGSent;
        private bool _PreQualifySurvey;
        private string _SentVia;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// VendorInsuranceId property
        /// </summary>
        [DataMember]
        public long VendorInsuranceId
        {
            get { return _VendorInsuranceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorInsuranceId); }
        }

        /// <summary>
        /// VendorId property
        /// </summary>
        [DataMember]
        public long VendorId
        {
            get { return _VendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorId); }
        }

        /// <summary>
        /// Active property
        /// </summary>
        [DataMember]
        public bool Active
        {
            get { return _Active; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Active); }
        }

        /// <summary>
        /// AdditionalInsurance property
        /// </summary>
        [DataMember]
        public bool AdditionalInsurance
        {
            get { return _AdditionalInsurance; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _AdditionalInsurance); }
        }

        /// <summary>
        /// Amount property
        /// </summary>
        [DataMember]
        public int Amount
        {
            get { return _Amount; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Amount); }
        }

        /// <summary>
        /// Amount_Medical property
        /// </summary>
        [DataMember]
        public int Amount_Medical
        {
            get { return _Amount_Medical; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Amount_Medical); }
        }

        /// <summary>
        /// Amount_OCC property
        /// </summary>
        [DataMember]
        public int Amount_OCC
        {
            get { return _Amount_OCC; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Amount_OCC); }
        }

        /// <summary>
        /// Amount_PIN property
        /// </summary>
        [DataMember]
        public int Amount_PIN
        {
            get { return _Amount_PIN; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Amount_PIN); }
        }

        /// <summary>
        /// Company property
        /// </summary>
        [DataMember]
        public string Company
        {
            get { return _Company; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Company); }
        }

        /// <summary>
        /// Contact property
        /// </summary>
        [DataMember]
        public string Contact
        {
            get { return _Contact; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Contact); }
        }

        /// <summary>
        /// EffectiveDate property
        /// </summary>
        [DataMember]
        public DateTime? EffectiveDate
        {
            get { return _EffectiveDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _EffectiveDate); }
        }

        /// <summary>
        /// ExpireDate property
        /// </summary>
        [DataMember]
        public DateTime? ExpireDate
        {
            get { return _ExpireDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ExpireDate); }
        }

        /// <summary>
        /// InsuranceCertificate property
        /// </summary>
        [DataMember]
        public string InsuranceCertificate
        {
            get { return _InsuranceCertificate; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _InsuranceCertificate); }
        }

        /// <summary>
        /// LiabilityAgreement property
        /// </summary>
        [DataMember]
        public bool LiabilityAgreement
        {
            get { return _LiabilityAgreement; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _LiabilityAgreement); }
        }

        /// <summary>
        /// PKGContactorRecBy property
        /// </summary>
        [DataMember]
        public DateTime? PKGContactorRecBy
        {
            get { return _PKGContactorRecBy; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PKGContactorRecBy); }
        }

        /// <summary>
        /// PKGReceiveBy property
        /// </summary>
        [DataMember]
        public DateTime? PKGReceiveBy
        {
            get { return _PKGReceiveBy; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PKGReceiveBy); }
        }

        /// <summary>
        /// PKGSent property
        /// </summary>
        [DataMember]
        public DateTime? PKGSent
        {
            get { return _PKGSent; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PKGSent); }
        }

        /// <summary>
        /// PreQualifySurvey property
        /// </summary>
        [DataMember]
        public bool PreQualifySurvey
        {
            get { return _PreQualifySurvey; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PreQualifySurvey); }
        }

        /// <summary>
        /// SentVia property
        /// </summary>
        [DataMember]
        public string SentVia
        {
            get { return _SentVia; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SentVia); }
        }
        #endregion


    }
}
