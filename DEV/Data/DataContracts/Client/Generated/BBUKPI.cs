/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the BBUKPI table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class BBUKPI : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public BBUKPI()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_BBUKPI dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.BBUKPIId = dbObj.BBUKPIId;
            this.SiteId = dbObj.SiteId;
            this.PMWOCompleted = dbObj.PMWOCompleted;
            this.WOBacklogCount = dbObj.WOBacklogCount;
            this.RCACount = dbObj.RCACount;
            this.TTRCount = dbObj.TTRCount;
            this.InvValueOverMax = dbObj.InvValueOverMax;
            this.PhyInvAccuracy = dbObj.PhyInvAccuracy;
            this.EVTrainingHrs = dbObj.EVTrainingHrs;
            this.DownDaySched = dbObj.DownDaySched;
            this.OptPMPlansCompleted = dbObj.OptPMPlansCompleted;
            this.OptPMPlansAdopted = dbObj.OptPMPlansAdopted;
            this.MLT = dbObj.MLT;
            this.TrainingPlanImp = dbObj.TrainingPlanImp;
            this.SubmitDate = dbObj.SubmitDate;
            this.SubmitBy_PersonnelId = dbObj.SubmitBy_PersonnelId;
            this.Status = dbObj.Status;
            this.Week = dbObj.Week;
            this.Year = dbObj.Year;
            this.CycleCountProgress = dbObj.CycleCountProgress;
            this.PMFollowUpComp = dbObj.PMFollowUpComp;
            this.ActiveMechUsers = dbObj.ActiveMechUsers;
            this.WeekStart = dbObj.WeekStart;
            this.WeekEnd = dbObj.WeekEnd;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_BBUKPI dbObj = new b_BBUKPI();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_BBUKPI ToDatabaseObject()
        {
            b_BBUKPI dbObj = new b_BBUKPI();
            dbObj.ClientId = this.ClientId;
            dbObj.BBUKPIId = this.BBUKPIId;
            dbObj.SiteId = this.SiteId;
            dbObj.PMWOCompleted = this.PMWOCompleted;
            dbObj.WOBacklogCount = this.WOBacklogCount;
            dbObj.RCACount = this.RCACount;
            dbObj.TTRCount = this.TTRCount;
            dbObj.InvValueOverMax = this.InvValueOverMax;
            dbObj.PhyInvAccuracy = this.PhyInvAccuracy;
            dbObj.EVTrainingHrs = this.EVTrainingHrs;
            dbObj.DownDaySched = this.DownDaySched;
            dbObj.OptPMPlansCompleted = this.OptPMPlansCompleted;
            dbObj.OptPMPlansAdopted = this.OptPMPlansAdopted;
            dbObj.MLT = this.MLT;
            dbObj.TrainingPlanImp = this.TrainingPlanImp;
            dbObj.SubmitDate = this.SubmitDate;
            dbObj.SubmitBy_PersonnelId = this.SubmitBy_PersonnelId;
            dbObj.Status = this.Status;
            dbObj.Week = this.Week;
            dbObj.Year = this.Year;
            dbObj.CycleCountProgress = this.CycleCountProgress;
            dbObj.PMFollowUpComp = this.PMFollowUpComp;
            dbObj.ActiveMechUsers = this.ActiveMechUsers;
            dbObj.WeekStart = this.WeekStart;
            dbObj.WeekEnd = this.WeekEnd;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            BBUKPI_Create trans = new BBUKPI_Create();
            trans.BBUKPI = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.BBUKPI);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            BBUKPI_Retrieve trans = new BBUKPI_Retrieve();
            trans.BBUKPI = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.BBUKPI);
        }

        public void Update(DatabaseKey dbKey)
        {
            BBUKPI_Update trans = new BBUKPI_Update();
            trans.BBUKPI = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.BBUKPI);
        }

        public void Delete(DatabaseKey dbKey)
        {
            BBUKPI_Delete trans = new BBUKPI_Delete();
            trans.BBUKPI = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.BBUKPIId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _BBUKPIId;
        private long _SiteId;
        private decimal _PMWOCompleted;
        private int _WOBacklogCount;
        private int _RCACount;
        private int _TTRCount;
        private decimal _InvValueOverMax;
        private decimal _PhyInvAccuracy;
        private decimal _EVTrainingHrs;
        private bool _DownDaySched;
        private int _OptPMPlansCompleted;
        private int _OptPMPlansAdopted;
        private decimal _MLT;
        private bool _TrainingPlanImp;
        private DateTime? _SubmitDate;
        private long _SubmitBy_PersonnelId;
        private string _Status;
        private string _Week;
        private string _Year;
        private decimal _CycleCountProgress;
        private int _PMFollowUpComp;
        private int _ActiveMechUsers;
        private DateTime? _WeekStart;
        private DateTime? _WeekEnd;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// BBUKPIId property
        /// </summary>
        [DataMember]
        public long BBUKPIId
        {
            get { return _BBUKPIId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _BBUKPIId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// PMWOCompleted property
        /// </summary>
        [DataMember]
        public decimal PMWOCompleted
        {
            get { return _PMWOCompleted; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _PMWOCompleted); }
        }

        /// <summary>
        /// WOBacklogCount property
        /// </summary>
        [DataMember]
        public int WOBacklogCount
        {
            get { return _WOBacklogCount; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _WOBacklogCount); }
        }

        /// <summary>
        /// RCACount property
        /// </summary>
        [DataMember]
        public int RCACount
        {
            get { return _RCACount; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _RCACount); }
        }

        /// <summary>
        /// TTRCount property
        /// </summary>
        [DataMember]
        public int TTRCount
        {
            get { return _TTRCount; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _TTRCount); }
        }

        /// <summary>
        /// InvValueOverMax property
        /// </summary>
        [DataMember]
        public decimal InvValueOverMax
        {
            get { return _InvValueOverMax; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _InvValueOverMax); }
        }

        /// <summary>
        /// PhyInvAccuracy property
        /// </summary>
        [DataMember]
        public decimal PhyInvAccuracy
        {
            get { return _PhyInvAccuracy; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _PhyInvAccuracy); }
        }

        /// <summary>
        /// EVTrainingHrs property
        /// </summary>
        [DataMember]
        public decimal EVTrainingHrs
        {
            get { return _EVTrainingHrs; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EVTrainingHrs); }
        }

        /// <summary>
        /// DownDaySched property
        /// </summary>
        [DataMember]
        public bool DownDaySched
        {
            get { return _DownDaySched; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DownDaySched); }
        }

        /// <summary>
        /// OptPMPlansCompleted property
        /// </summary>
        [DataMember]
        public int OptPMPlansCompleted
        {
            get { return _OptPMPlansCompleted; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _OptPMPlansCompleted); }
        }

        /// <summary>
        /// OptPMPlansAdopted property
        /// </summary>
        [DataMember]
        public int OptPMPlansAdopted
        {
            get { return _OptPMPlansAdopted; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _OptPMPlansAdopted); }
        }

        /// <summary>
        /// MLT property
        /// </summary>
        [DataMember]
        public decimal MLT
        {
            get { return _MLT; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MLT); }
        }

        /// <summary>
        /// TrainingPlanImp property
        /// </summary>
        [DataMember]
        public bool TrainingPlanImp
        {
            get { return _TrainingPlanImp; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _TrainingPlanImp); }
        }

        /// <summary>
        /// SubmitDate property
        /// </summary>
        [DataMember]
        public DateTime? SubmitDate
        {
            get { return _SubmitDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _SubmitDate); }
        }

        /// <summary>
        /// SubmitBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long SubmitBy_PersonnelId
        {
            get { return _SubmitBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SubmitBy_PersonnelId); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// Week property
        /// </summary>
        [DataMember]
        public string Week
        {
            get { return _Week; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Week); }
        }

        /// <summary>
        /// Year property
        /// </summary>
        [DataMember]
        public string Year
        {
            get { return _Year; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Year); }
        }

        /// <summary>
        /// CycleCountProgress property
        /// </summary>
        [DataMember]
        public decimal CycleCountProgress
        {
            get { return _CycleCountProgress; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _CycleCountProgress); }
        }

        /// <summary>
        /// PMFollowUpComp property
        /// </summary>
        [DataMember]
        public int PMFollowUpComp
        {
            get { return _PMFollowUpComp; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _PMFollowUpComp); }
        }

        /// <summary>
        /// ActiveMechUsers property
        /// </summary>
        [DataMember]
        public int ActiveMechUsers
        {
            get { return _ActiveMechUsers; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _ActiveMechUsers); }
        }

        /// <summary>
        /// WeekStart property
        /// </summary>
        [DataMember]
        public DateTime? WeekStart
        {
            get { return _WeekStart; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _WeekStart); }
        }

        /// <summary>
        /// WeekEnd property
        /// </summary>
        [DataMember]
        public DateTime? WeekEnd
        {
            get { return _WeekEnd; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _WeekEnd); }
        }
        #endregion


    }
}
