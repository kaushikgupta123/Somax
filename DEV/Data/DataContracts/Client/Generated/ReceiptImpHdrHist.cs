/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;
using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ReceiptImpHdrHist table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ReceiptImpHdrHist : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ReceiptImpHdrHist()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ReceiptImpHdrHist dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.ReceiptImpHdrHistId = dbObj.ReceiptImpHdrHistId;
            this.ReceiptImpHdrId = dbObj.ReceiptImpHdrId;
            this.PONumber = dbObj.PONumber;
            this.EXPOID = dbObj.EXPOID;
            this.EXReceiptId = dbObj.EXReceiptId;
            this.ExReceiptNo = dbObj.ExReceiptNo;
            this.ReceiptDate = dbObj.ReceiptDate;
            this.DateProcessed = dbObj.DateProcessed;
            this.ReceiptStatus = dbObj.ReceiptStatus;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_ReceiptImpHdrHist dbObj = new b_ReceiptImpHdrHist();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_ReceiptImpHdrHist ToDatabaseObject()
        {
            b_ReceiptImpHdrHist dbObj = new b_ReceiptImpHdrHist();
            dbObj.ClientId = this.ClientId;
            dbObj.ReceiptImpHdrHistId = this.ReceiptImpHdrHistId;
            dbObj.ReceiptImpHdrId = this.ReceiptImpHdrId;
            dbObj.PONumber = this.PONumber;
            dbObj.EXPOID = this.EXPOID;
            dbObj.EXReceiptId = this.EXReceiptId;
            dbObj.ExReceiptNo = this.ExReceiptNo;
            dbObj.ReceiptDate = this.ReceiptDate;
            dbObj.DateProcessed = this.DateProcessed;
            dbObj.ReceiptStatus = this.ReceiptStatus;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            ReceiptImpHdrHist_Create trans = new ReceiptImpHdrHist_Create();
            trans.ReceiptImpHdrHist = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ReceiptImpHdrHist);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            ReceiptImpHdrHist_Retrieve trans = new ReceiptImpHdrHist_Retrieve();
            trans.ReceiptImpHdrHist = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ReceiptImpHdrHist);
        }

        public void Update(DatabaseKey dbKey) 
        {
            ReceiptImpHdrHist_Update trans = new ReceiptImpHdrHist_Update();
            trans.ReceiptImpHdrHist = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ReceiptImpHdrHist);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            ReceiptImpHdrHist_Delete trans = new ReceiptImpHdrHist_Delete();
            trans.ReceiptImpHdrHist = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ReceiptImpHdrHistId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _ReceiptImpHdrHistId;
        private long _ReceiptImpHdrId;
        private string _PONumber;
        private long _EXPOID;
        private long _EXReceiptId;
        private string _ExReceiptNo;
        private DateTime? _ReceiptDate;
        private DateTime? _DateProcessed;
        private string _ReceiptStatus;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// ReceiptImpHdrHistId property
        /// </summary>
        [DataMember]
        public long ReceiptImpHdrHistId
        {
            get { return _ReceiptImpHdrHistId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReceiptImpHdrHistId); }
        }

        /// <summary>
        /// ReceiptImpHdrId property
        /// </summary>
        [DataMember]
        public long ReceiptImpHdrId
        {
            get { return _ReceiptImpHdrId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReceiptImpHdrId); }
        }

        /// <summary>
        /// PONumber property
        /// </summary>
        [DataMember]
        public string PONumber
        {
            get { return _PONumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PONumber); }
        }

        /// <summary>
        /// EXPOID property
        /// </summary>
        [DataMember]
        public long EXPOID
        {
            get { return _EXPOID; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EXPOID); }
        }

        /// <summary>
        /// EXReceiptId property
        /// </summary>
        [DataMember]
        public long EXReceiptId
        {
            get { return _EXReceiptId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EXReceiptId); }
        }

        /// <summary>
        /// ExReceiptNo property
        /// </summary>
        [DataMember]
        public string ExReceiptNo
        {
            get { return _ExReceiptNo; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExReceiptNo); }
        }

        /// <summary>
        /// ReceiptDate property
        /// </summary>
        [DataMember]
        public DateTime? ReceiptDate
        {
            get { return _ReceiptDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReceiptDate); }
        }

        /// <summary>
        /// DateProcessed property
        /// </summary>
        [DataMember]
        public DateTime? DateProcessed
        {
            get { return _DateProcessed; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _DateProcessed); }
        }

        /// <summary>
        /// ReceiptStatus property
        /// </summary>
        [DataMember]
        public string ReceiptStatus
        {
            get { return _ReceiptStatus; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReceiptStatus); }
        }
        #endregion
		
		
    }
}
