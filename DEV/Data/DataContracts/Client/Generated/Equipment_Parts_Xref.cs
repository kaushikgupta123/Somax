/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2015 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Runtime.Serialization;
using System.Reflection;
using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Equipment_Parts_Xref table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Equipment_Parts_Xref : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Equipment_Parts_Xref()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Equipment_Parts_Xref dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.Equipment_Parts_XrefId = dbObj.Equipment_Parts_XrefId;
            this.EquipmentId = dbObj.EquipmentId;
            this.PartId = dbObj.PartId;
            this.Comment = dbObj.Comment;
            this.QuantityNeeded = dbObj.QuantityNeeded;
            this.QuantityUsed = dbObj.QuantityUsed;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_Equipment_Parts_Xref dbObj = new b_Equipment_Parts_Xref();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_Equipment_Parts_Xref ToDatabaseObject()
        {
            b_Equipment_Parts_Xref dbObj = new b_Equipment_Parts_Xref();
            dbObj.ClientId = this.ClientId;
            dbObj.Equipment_Parts_XrefId = this.Equipment_Parts_XrefId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.PartId = this.PartId;
            dbObj.Comment = this.Comment;
            dbObj.QuantityNeeded = this.QuantityNeeded;
            dbObj.QuantityUsed = this.QuantityUsed;
            dbObj.UpdateIndex = this.UpdateIndex;
           
            return dbObj;
        }
        public b_Equipment_Parts_Xref ToDatabaseObjectXref()
        {
            b_Equipment_Parts_Xref dbObj = new b_Equipment_Parts_Xref();
            dbObj.ClientId = this.ClientId;
            dbObj.Equipment_Parts_XrefId = this.Equipment_Parts_XrefId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.PartId = this.PartId;
            dbObj.Comment = this.Comment;
            dbObj.QuantityNeeded = this.QuantityNeeded;
            dbObj.QuantityUsed = this.QuantityUsed;
            dbObj.UpdateIndex = this.UpdateIndex;
            dbObj.PartClientLookUpId = this.PartClientLookUpId;
            dbObj.Description = this.Description;
            dbObj.StockType = this.StockType;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            Equipment_Parts_Xref_Create trans = new Equipment_Parts_Xref_Create();
            trans.Equipment_Parts_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Equipment_Parts_Xref);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            Equipment_Parts_Xref_Retrieve trans = new Equipment_Parts_Xref_Retrieve();
            trans.Equipment_Parts_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Equipment_Parts_Xref);
        }

        public void Update(DatabaseKey dbKey)
        {
            Equipment_Parts_Xref_Update trans = new Equipment_Parts_Xref_Update();
            trans.Equipment_Parts_Xref = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Equipment_Parts_Xref);
        }

        public void Delete(DatabaseKey dbKey)
        {
            Equipment_Parts_Xref_Delete trans = new Equipment_Parts_Xref_Delete();
            trans.Equipment_Parts_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.Equipment_Parts_XrefId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _Equipment_Parts_XrefId;
        private long _EquipmentId;
        private long _PartId;
        private string _Comment;
        private decimal _QuantityNeeded;
        private decimal _QuantityUsed;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// Equipment_Parts_XrefId property
        /// </summary>
        [DataMember]
        public long Equipment_Parts_XrefId
        {
            get { return _Equipment_Parts_XrefId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Equipment_Parts_XrefId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// PartId property
        /// </summary>
        [DataMember]
        public long PartId
        {
            get { return _PartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartId); }
        }

        /// <summary>
        /// Comment property
        /// </summary>
        [DataMember]
        public string Comment
        {
            get { return _Comment; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Comment); }
        }

        /// <summary>
        /// QuantityNeeded property
        /// </summary>
        [DataMember]
        public decimal QuantityNeeded
        {
            get { return _QuantityNeeded; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _QuantityNeeded); }
        }

        /// <summary>
        /// QuantityUsed property
        /// </summary>
        [DataMember]
        public decimal QuantityUsed
        {
            get { return _QuantityUsed; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _QuantityUsed); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
