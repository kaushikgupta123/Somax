/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2014 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the WorkOrderTask table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class WorkOrderTask : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public WorkOrderTask()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_WorkOrderTask dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.WorkOrderTaskId = dbObj.WorkOrderTaskId;
            this.WorkOrderId = dbObj.WorkOrderId;
            this.ProcedureMasterId = dbObj.ProcedureMasterId;
            this.ProcedureMasterTaskId = dbObj.ProcedureMasterTaskId;
            this.ActualDuration = dbObj.ActualDuration;
            this.ActualFinishDate = dbObj.ActualFinishDate;
            this.ActualStartDate = dbObj.ActualStartDate;
            this.AssignedTo_PersonnelId = dbObj.AssignedTo_PersonnelId;
            this.CancelReason = dbObj.CancelReason;
            this.ChargeToId = dbObj.ChargeToId;
            this.ChargeType = dbObj.ChargeType;
            this.CompleteBy_PersonnelId = dbObj.CompleteBy_PersonnelId;
            this.CompleteDate = dbObj.CompleteDate;
            this.Description = dbObj.Description;
            this.MeterId = dbObj.MeterId;
            this.Reading = dbObj.Reading;
            this.ReadingType = dbObj.ReadingType;
            this.RequiredDate = dbObj.RequiredDate;
            this.ScheduledDuration = dbObj.ScheduledDuration;
            this.ScheduledFinishDate = dbObj.ScheduledFinishDate;
            this.ScheduledStartDate = dbObj.ScheduledStartDate;
            this.Status = dbObj.Status;
            this.TaskNumber = dbObj.TaskNumber;
            this.Type = dbObj.Type;
            this.SourceType = dbObj.SourceType;
            this.UpdateIndex = dbObj.UpdateIndex;
            this.ChargeToClientLookupId = dbObj.ChargeToClientLookupId;
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_WorkOrderTask dbObj = new b_WorkOrderTask();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_WorkOrderTask ToDatabaseObject()
        {
            b_WorkOrderTask dbObj = new b_WorkOrderTask();
            dbObj.ClientId = this.ClientId;
            dbObj.WorkOrderTaskId = this.WorkOrderTaskId;
            dbObj.WorkOrderId = this.WorkOrderId;
            dbObj.ProcedureMasterId = this.ProcedureMasterId;
            dbObj.ProcedureMasterTaskId = this.ProcedureMasterTaskId;
            dbObj.ActualDuration = this.ActualDuration;
            dbObj.ActualFinishDate = this.ActualFinishDate;
            dbObj.ActualStartDate = this.ActualStartDate;
            dbObj.AssignedTo_PersonnelId = this.AssignedTo_PersonnelId;
            dbObj.CancelReason = this.CancelReason;
            dbObj.ChargeToId = this.ChargeToId;
            dbObj.ChargeType = this.ChargeType;
            dbObj.CompleteBy_PersonnelId = this.CompleteBy_PersonnelId;
            dbObj.CompleteDate = this.CompleteDate;
            dbObj.Description = this.Description;
            dbObj.MeterId = this.MeterId;
            dbObj.Reading = this.Reading;
            dbObj.ReadingType = this.ReadingType;
            dbObj.RequiredDate = this.RequiredDate;
            dbObj.ScheduledDuration = this.ScheduledDuration;
            dbObj.ScheduledFinishDate = this.ScheduledFinishDate;
            dbObj.ScheduledStartDate = this.ScheduledStartDate;
            dbObj.Status = this.Status;
            dbObj.TaskNumber = this.TaskNumber;
            dbObj.Type = this.Type;
            dbObj.SourceType = this.SourceType;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            WorkOrderTask_Create trans = new WorkOrderTask_Create();
            trans.WorkOrderTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.WorkOrderTask);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            WorkOrderTask_Retrieve trans = new WorkOrderTask_Retrieve();
            trans.WorkOrderTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.WorkOrderTask);
        }

        public void Update(DatabaseKey dbKey) 
        {
            WorkOrderTask_Update trans = new WorkOrderTask_Update();
            trans.WorkOrderTask = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.WorkOrderTask);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            WorkOrderTask_Delete trans = new WorkOrderTask_Delete();
            trans.WorkOrderTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.WorkOrderTaskId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _WorkOrderTaskId;
        private long _WorkOrderId;
        private long _ProcedureMasterId;
        private long _ProcedureMasterTaskId;
        private decimal _ActualDuration;
        private DateTime? _ActualFinishDate;
        private DateTime? _ActualStartDate;
        private long _AssignedTo_PersonnelId;
        private string _CancelReason;
        private long _ChargeToId;
        private string _ChargeType;
        private long? _CompleteBy_PersonnelId;
        private DateTime? _CompleteDate;
        private string _Description;
        private long _MeterId;
        private decimal _Reading;
        private string _ReadingType;
        private DateTime? _RequiredDate;
        private decimal _ScheduledDuration;
        private DateTime? _ScheduledFinishDate;
        private DateTime? _ScheduledStartDate;
        private string _Status;
        private string _TaskNumber;
        private string _Type;
        private string _SourceType;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// WorkOrderTaskId property
        /// </summary>
        [DataMember]
        public long WorkOrderTaskId
        {
            get { return _WorkOrderTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkOrderTaskId); }
        }

        /// <summary>
        /// WorkOrderId property
        /// </summary>
        [DataMember]
        public long WorkOrderId
        {
            get { return _WorkOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkOrderId); }
        }

        /// <summary>
        /// ProcedureMasterId property
        /// </summary>
        [DataMember]
        public long ProcedureMasterId
        {
            get { return _ProcedureMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProcedureMasterId); }
        }

        /// <summary>
        /// ProcedureMasterTaskId property
        /// </summary>
        [DataMember]
        public long ProcedureMasterTaskId
        {
            get { return _ProcedureMasterTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProcedureMasterTaskId); }
        }

        /// <summary>
        /// ActualDuration property
        /// </summary>
        [DataMember]
        public decimal ActualDuration
        {
            get { return _ActualDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ActualDuration); }
        }

        /// <summary>
        /// ActualFinishDate property
        /// </summary>
        [DataMember]
        public DateTime? ActualFinishDate
        {
            get { return _ActualFinishDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ActualFinishDate); }
        }

        /// <summary>
        /// ActualStartDate property
        /// </summary>
        [DataMember]
        public DateTime? ActualStartDate
        {
            get { return _ActualStartDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ActualStartDate); }
        }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        [DataMember]
        public long AssignedTo_PersonnelId
        {
            get { return _AssignedTo_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssignedTo_PersonnelId); }
        }

        /// <summary>
        /// CancelReason property
        /// </summary>
        [DataMember]
        public string CancelReason
        {
            get { return _CancelReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CancelReason); }
        }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        [DataMember]
        public long ChargeToId
        {
            get { return _ChargeToId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId); }
        }

        /// <summary>
        /// ChargeType property
        /// </summary>
        [DataMember]
        public string ChargeType
        {
            get { return _ChargeType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType); }
        }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long? CompleteBy_PersonnelId
        {
            get { return _CompleteBy_PersonnelId; }
            set { Set<long?>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteBy_PersonnelId); }
        }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        [DataMember]
        public DateTime? CompleteDate
        {
            get { return _CompleteDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteDate); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// MeterId property
        /// </summary>
        [DataMember]
        public long MeterId
        {
            get { return _MeterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MeterId); }
        }

        /// <summary>
        /// Reading property
        /// </summary>
        [DataMember]
        public decimal Reading
        {
            get { return _Reading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Reading); }
        }

        /// <summary>
        /// ReadingType property
        /// </summary>
        [DataMember]
        public string ReadingType
        {
            get { return _ReadingType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingType); }
        }

        /// <summary>
        /// RequiredDate property
        /// </summary>
        [DataMember]
        public DateTime? RequiredDate
        {
            get { return _RequiredDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _RequiredDate); }
        }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        [DataMember]
        public decimal ScheduledDuration
        {
            get { return _ScheduledDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledDuration); }
        }

        /// <summary>
        /// ScheduledFinishDate property
        /// </summary>
        [DataMember]
        public DateTime? ScheduledFinishDate
        {
            get { return _ScheduledFinishDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledFinishDate); }
        }

        /// <summary>
        /// ScheduledStartDate property
        /// </summary>
        [DataMember]
        public DateTime? ScheduledStartDate
        {
            get { return _ScheduledStartDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledStartDate); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// TaskNumber property
        /// </summary>
        [DataMember]
        public string TaskNumber
        {
            get { return _TaskNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TaskNumber); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }
        [DataMember]
        public string SourceType
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }
        
        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
