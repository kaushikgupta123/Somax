/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the WorkFlowInstance table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class WorkFlowInstance : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public WorkFlowInstance()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_WorkFlowInstance dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.WorkFlowInstanceId = dbObj.WorkFlowInstanceId;
            this.ObjectName = dbObj.ObjectName;
            this.ObjectId = dbObj.ObjectId;
            this.WorkflowId = dbObj.WorkflowId;
            this.LastState = dbObj.LastState;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_WorkFlowInstance dbObj = new b_WorkFlowInstance();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_WorkFlowInstance ToDatabaseObject()
        {
            b_WorkFlowInstance dbObj = new b_WorkFlowInstance();
            dbObj.ClientId = this.ClientId;
            dbObj.WorkFlowInstanceId = this.WorkFlowInstanceId;
            dbObj.ObjectName = this.ObjectName;
            dbObj.ObjectId = this.ObjectId;
            dbObj.WorkflowId = this.WorkflowId;
            dbObj.LastState = this.LastState;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            WorkFlowInstance_Create trans = new WorkFlowInstance_Create();
            trans.WorkFlowInstance = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.WorkFlowInstance);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            WorkFlowInstance_Retrieve trans = new WorkFlowInstance_Retrieve();
            trans.WorkFlowInstance = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.WorkFlowInstance);
        }

        public void Update(DatabaseKey dbKey) 
        {
            WorkFlowInstance_Update trans = new WorkFlowInstance_Update();
            trans.WorkFlowInstance = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.WorkFlowInstance);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            WorkFlowInstance_Delete trans = new WorkFlowInstance_Delete();
            trans.WorkFlowInstance = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.WorkFlowInstanceId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _WorkFlowInstanceId;
        private string _ObjectName;
        private long _ObjectId;
        private Guid _WorkflowId;
        private string _LastState;
        private long _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// WorkFlowInstanceId property
        /// </summary>
        [DataMember]
        public long WorkFlowInstanceId
        {
            get { return _WorkFlowInstanceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkFlowInstanceId); }
        }

        /// <summary>
        /// ObjectName property
        /// </summary>
        [DataMember]
        public string ObjectName
        {
            get { return _ObjectName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectName); }
        }

        /// <summary>
        /// ObjectId property
        /// </summary>
        [DataMember]
        public long ObjectId
        {
            get { return _ObjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectId); }
        }

        /// <summary>
        /// WorkflowId property
        /// </summary>
        [DataMember]
        public Guid WorkflowId
        {
            get { return _WorkflowId; }
            set { Set<Guid>(MethodBase.GetCurrentMethod().Name, value, ref _WorkflowId); }
        }

        /// <summary>
        /// LastState property
        /// </summary>
        [DataMember]
        public string LastState
        {
            get { return _LastState; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _LastState); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public long UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
