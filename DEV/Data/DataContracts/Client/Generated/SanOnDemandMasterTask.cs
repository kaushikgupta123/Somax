/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SanOnDemandMasterTask table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class SanOnDemandMasterTask : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SanOnDemandMasterTask()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_SanOnDemandMasterTask dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.SanOnDemandMasterTaskId = dbObj.SanOnDemandMasterTaskId;
            this.SanOnDemandMasterId = dbObj.SanOnDemandMasterId;
            this.TaskId = dbObj.TaskId;
            this.Description = dbObj.Description;
            this.Del = dbObj.Del;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_SanOnDemandMasterTask dbObj = new b_SanOnDemandMasterTask();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_SanOnDemandMasterTask ToDatabaseObject()
        {
            b_SanOnDemandMasterTask dbObj = new b_SanOnDemandMasterTask();
            dbObj.ClientId = this.ClientId;
            dbObj.SanOnDemandMasterTaskId = this.SanOnDemandMasterTaskId;
            dbObj.SanOnDemandMasterId = this.SanOnDemandMasterId;
            dbObj.TaskId = this.TaskId;
            dbObj.Description = this.Description;
            dbObj.Del = this.Del;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            SanOnDemandMasterTask_Create trans = new SanOnDemandMasterTask_Create();
            trans.SanOnDemandMasterTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.SanOnDemandMasterTask);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            SanOnDemandMasterTask_Retrieve trans = new SanOnDemandMasterTask_Retrieve();
            trans.SanOnDemandMasterTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SanOnDemandMasterTask);
        }

        public void Update(DatabaseKey dbKey) 
        {
            SanOnDemandMasterTask_Update trans = new SanOnDemandMasterTask_Update();
            trans.SanOnDemandMasterTask = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.SanOnDemandMasterTask);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            SanOnDemandMasterTask_Delete trans = new SanOnDemandMasterTask_Delete();
            trans.SanOnDemandMasterTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.SanOnDemandMasterTaskId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _SanOnDemandMasterTaskId;
        private long _SanOnDemandMasterId;
        private string _TaskId;
        private string _Description;
        private bool _Del;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SanOnDemandMasterTaskId property
        /// </summary>
        [DataMember]
        public long SanOnDemandMasterTaskId
        {
            get { return _SanOnDemandMasterTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanOnDemandMasterTaskId); }
        }

        /// <summary>
        /// SanOnDemandMasterId property
        /// </summary>
        [DataMember]
        public long SanOnDemandMasterId
        {
            get { return _SanOnDemandMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanOnDemandMasterId); }
        }

        /// <summary>
        /// TaskId property
        /// </summary>
        [DataMember]
        public string TaskId
        {
            get { return _TaskId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TaskId); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// Del property
        /// </summary>
        [DataMember]
        public bool Del
        {
            get { return _Del; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Del); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
