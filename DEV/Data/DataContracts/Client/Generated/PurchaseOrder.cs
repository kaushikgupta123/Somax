/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PurchaseOrder table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PurchaseOrder : DataContractBase, IPermission 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PurchaseOrder()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PurchaseOrder dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.PurchaseOrderId = dbObj.PurchaseOrderId;
            this.SiteId = dbObj.SiteId;
            this.DepartmentId = dbObj.DepartmentId;
            this.AreaId = dbObj.AreaId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.Attention = dbObj.Attention;
            this.Buyer_PersonnelId = dbObj.Buyer_PersonnelId;
            this.Carrier = dbObj.Carrier;
            this.CompleteBy_PersonnelId = dbObj.CompleteBy_PersonnelId;
            this.Required = dbObj.Required;
            this.CompleteDate = dbObj.CompleteDate;
            this.Creator_PersonnelId = dbObj.Creator_PersonnelId;
            this.FOB = dbObj.FOB;
            this.Status = dbObj.Status;
            this.Terms = dbObj.Terms;
            this.VendorId = dbObj.VendorId;
            this.VoidBy_PersonnelId = dbObj.VoidBy_PersonnelId;
            this.VoidDate = dbObj.VoidDate;
            this.VoidReason = dbObj.VoidReason;
            this.Reason = dbObj.Reason;
            this.MessageToVendor = dbObj.MessageToVendor;
            this.ExPurchaseOrderId = dbObj.ExPurchaseOrderId;
            this.ExPurchaseRequest = dbObj.ExPurchaseRequest;
            this.Currency = dbObj.Currency;
            this.Revision = dbObj.Revision;
            this.PaymentTerms = dbObj.PaymentTerms;
            this.IsExternal = dbObj.IsExternal;
            this.IsPunchout = dbObj.IsPunchout;
            this.SentOrderRequest = dbObj.SentOrderRequest;
            this.Shipto = dbObj.Shipto;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_PurchaseOrder dbObj = new b_PurchaseOrder();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_PurchaseOrder ToDatabaseObject()
        {
            b_PurchaseOrder dbObj = new b_PurchaseOrder();
            dbObj.ClientId = this.ClientId;
            dbObj.PurchaseOrderId = this.PurchaseOrderId;
            dbObj.SiteId = this.SiteId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.AreaId = this.AreaId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.Attention = this.Attention;
            dbObj.Buyer_PersonnelId = this.Buyer_PersonnelId;
            dbObj.Carrier = this.Carrier;
            dbObj.CompleteBy_PersonnelId = this.CompleteBy_PersonnelId;
            dbObj.Required = this.Required;
            dbObj.CompleteDate = this.CompleteDate;
            dbObj.Creator_PersonnelId = this.Creator_PersonnelId;
            dbObj.FOB = this.FOB;
            dbObj.Status = this.Status;
            dbObj.Terms = this.Terms;
            dbObj.VendorId = this.VendorId;
            dbObj.VoidBy_PersonnelId = this.VoidBy_PersonnelId;
            dbObj.VoidDate = this.VoidDate;
            dbObj.VoidReason = this.VoidReason;
            dbObj.Reason = this.Reason;
            dbObj.MessageToVendor = this.MessageToVendor;
            dbObj.ExPurchaseOrderId = this.ExPurchaseOrderId;
            dbObj.ExPurchaseRequest = this.ExPurchaseRequest;
            dbObj.Currency = this.Currency;
            dbObj.Revision = this.Revision;
            dbObj.PaymentTerms = this.PaymentTerms;
            dbObj.IsExternal = this.IsExternal;
            dbObj.IsPunchout = this.IsPunchout;
            dbObj.SentOrderRequest = this.SentOrderRequest;
            dbObj.Shipto = this.Shipto;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            PurchaseOrder_Create trans = new PurchaseOrder_Create();
            trans.PurchaseOrder = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PurchaseOrder);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            PurchaseOrder_Retrieve trans = new PurchaseOrder_Retrieve();
            trans.PurchaseOrder = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PurchaseOrder);
        }

        public void Update(DatabaseKey dbKey)
        {
            PurchaseOrder_Update trans = new PurchaseOrder_Update();
            trans.PurchaseOrder = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PurchaseOrder);
        }

        public void Delete(DatabaseKey dbKey)
        {
            PurchaseOrder_Delete trans = new PurchaseOrder_Delete();
            trans.PurchaseOrder = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PurchaseOrderId;
            AuditTargetSiteId = this.SiteId;
            AuditTargetAreaId = this.AreaId;
            AuditTargetDepartmentId = this.DepartmentId;
            AuditTargetStoreRoomId = this.StoreroomId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _PurchaseOrderId;
        private long _SiteId;
        private long _DepartmentId;
        private long _AreaId;
        private long _StoreroomId;
        private string _ClientLookupId;
        private string _Attention;
        private long _Buyer_PersonnelId;
        private string _Carrier;
        private long _CompleteBy_PersonnelId;
        private DateTime? _Required;
        private DateTime? _CompleteDate;
        private long _Creator_PersonnelId;
        private string _FOB;
        private string _Status;
        private string _Terms;
        private long _VendorId;
        private long _VoidBy_PersonnelId;
        private DateTime? _VoidDate;
        private string _VoidReason;
        private string _Reason;
        private string _MessageToVendor;
        private long _ExPurchaseOrderId;
        private string _ExPurchaseRequest;
        private string _Currency;
        private int _Revision;
        private string _PaymentTerms;
        private bool _IsExternal;
        private bool _IsPunchout;
        private bool _SentOrderRequest;
        private long _Shipto;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PurchaseOrderId property
        /// </summary>
        [DataMember]
        public long PurchaseOrderId
        {
            get { return _PurchaseOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseOrderId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// Attention property
        /// </summary>
        [DataMember]
        public string Attention
        {
            get { return _Attention; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Attention); }
        }

        /// <summary>
        /// Buyer_PersonnelId property
        /// </summary>
        [DataMember]
        public long Buyer_PersonnelId
        {
            get { return _Buyer_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Buyer_PersonnelId); }
        }

        /// <summary>
        /// Carrier property
        /// </summary>
        [DataMember]
        public string Carrier
        {
            get { return _Carrier; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Carrier); }
        }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CompleteBy_PersonnelId
        {
            get { return _CompleteBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteBy_PersonnelId); }
        }

        /// <summary>
        /// Required property
        /// </summary>
        [DataMember]
        public DateTime? Required
        {
            get { return _Required; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _Required); }
        }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        [DataMember]
        public DateTime? CompleteDate
        {
            get { return _CompleteDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteDate); }
        }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        [DataMember]
        public long Creator_PersonnelId
        {
            get { return _Creator_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Creator_PersonnelId); }
        }

        /// <summary>
        /// FOB property
        /// </summary>
        [DataMember]
        public string FOB
        {
            get { return _FOB; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FOB); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// Terms property
        /// </summary>
        [DataMember]
        public string Terms
        {
            get { return _Terms; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Terms); }
        }

        /// <summary>
        /// VendorId property
        /// </summary>
        [DataMember]
        public long VendorId
        {
            get { return _VendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorId); }
        }

        /// <summary>
        /// VoidBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long VoidBy_PersonnelId
        {
            get { return _VoidBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VoidBy_PersonnelId); }
        }

        /// <summary>
        /// VoidDate property
        /// </summary>
        [DataMember]
        public DateTime? VoidDate
        {
            get { return _VoidDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _VoidDate); }
        }

        /// <summary>
        /// VoidReason property
        /// </summary>
        [DataMember]
        public string VoidReason
        {
            get { return _VoidReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VoidReason); }
        }

        /// <summary>
        /// Reason property
        /// </summary>
        [DataMember]
        public string Reason
        {
            get { return _Reason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Reason); }
        }

        /// <summary>
        /// MessageToVendor property
        /// </summary>
        [DataMember]
        public string MessageToVendor
        {
            get { return _MessageToVendor; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _MessageToVendor); }
        }

        /// <summary>
        /// ExPurchaseOrderId property
        /// </summary>
        [DataMember]
        public long ExPurchaseOrderId
        {
            get { return _ExPurchaseOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExPurchaseOrderId); }
        }

        /// <summary>
        /// ExPurchaseRequest property
        /// </summary>
        [DataMember]
        public string ExPurchaseRequest
        {
            get { return _ExPurchaseRequest; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExPurchaseRequest); }
        }

        /// <summary>
        /// Currency property
        /// </summary>
        [DataMember]
        public string Currency
        {
            get { return _Currency; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Currency); }
        }

        /// <summary>
        /// Revision property
        /// </summary>
        [DataMember]
        public int Revision
        {
            get { return _Revision; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Revision); }
        }

        /// <summary>
        /// PaymentTerms property
        /// </summary>
        [DataMember]
        public string PaymentTerms
        {
            get { return _PaymentTerms; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PaymentTerms); }
        }

        /// <summary>
        /// IsExternal property
        /// </summary>
        [DataMember]
        public bool IsExternal
        {
            get { return _IsExternal; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsExternal); }
        }

        /// <summary>
        /// IsPunchout property
        /// </summary>
        [DataMember]
        public bool IsPunchout
        {
            get { return _IsPunchout; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsPunchout); }
        }

        /// <summary>
        /// SentOrderRequest property
        /// </summary>
        [DataMember]
        public bool SentOrderRequest
        {
            get { return _SentOrderRequest; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _SentOrderRequest); }
        }

        /// <summary>
        /// Shipto property
        /// </summary>
        [DataMember]
        public long Shipto
        {
            get { return _Shipto; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Shipto); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
