/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Runtime.Serialization;
using System.Reflection;
using Database.Business;
using Database.Transactions;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the FileInfo table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class FileInfo : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public FileInfo()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_FileInfo dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.FileInfoId = dbObj.FileInfoId;
            this.FileName = dbObj.FileName;
            this.FileSize = dbObj.FileSize;
            this.FileType = dbObj.FileType;
            this.ContentType = dbObj.ContentType;
            this.OnDemandData = dbObj.OnDemandData;
            this.Category = dbObj.Category;
            this.Subcategory1 = dbObj.Subcategory1;
            this.Subcategory2 = dbObj.Subcategory2;
            this.KeyWords = dbObj.KeyWords;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_FileInfo dbObj = new b_FileInfo();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_FileInfo ToDatabaseObject()
        {
            b_FileInfo dbObj = new b_FileInfo();
            dbObj.ClientId = this.ClientId;
            dbObj.FileInfoId = this.FileInfoId;
            dbObj.FileName = this.FileName;
            dbObj.FileSize = this.FileSize;
            dbObj.FileType = this.FileType;
            dbObj.ContentType = this.ContentType;
            dbObj.OnDemandData = this.OnDemandData;
            dbObj.Category = this.Category;
            dbObj.Subcategory1 = this.Subcategory1;
            dbObj.Subcategory2 = this.Subcategory2;
            dbObj.KeyWords = this.KeyWords;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            FileInfo_Create trans = new FileInfo_Create();
            trans.FileInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.FileInfo);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            FileInfo_Retrieve trans = new FileInfo_Retrieve();
            trans.FileInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.FileInfo);
        }

        public void Update(DatabaseKey dbKey) 
        {
            FileInfo_Update trans = new FileInfo_Update();
            trans.FileInfo = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.FileInfo);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            FileInfo_Delete trans = new FileInfo_Delete();
            trans.FileInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.FileInfoId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _FileInfoId;
        private string _FileName;
        private int _FileSize;
        private string _FileType;
        private string _ContentType;
        private byte[] _OnDemandData;
        private string _Category;
        private string _Subcategory1;
        private string _Subcategory2;
        private string _KeyWords;
        private long _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// FileInfoId property
        /// </summary>
        [DataMember]
        public long FileInfoId
        {
            get { return _FileInfoId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _FileInfoId); }
        }

        /// <summary>
        /// FileName property
        /// </summary>
        [DataMember]
        public string FileName
        {
            get { return _FileName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FileName); }
        }

        /// <summary>
        /// FileSize property
        /// </summary>
        [DataMember]
        public int FileSize
        {
            get { return _FileSize; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _FileSize); }
        }

        /// <summary>
        /// FileType property
        /// </summary>
        [DataMember]
        public string FileType
        {
            get { return _FileType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FileType); }
        }

        /// <summary>
        /// ContentType property
        /// </summary>
        [DataMember]
        public string ContentType
        {
            get { return _ContentType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ContentType); }
        }

        /// <summary>
        /// OnDemandData property
        /// </summary>
        [DataMember]
        public byte[] OnDemandData
        {
            get { return _OnDemandData; }
            set { Set<byte[]>(MethodBase.GetCurrentMethod().Name, value, ref _OnDemandData); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// Subcategory1 property
        /// </summary>
        [DataMember]
        public string Subcategory1
        {
            get { return _Subcategory1; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Subcategory1); }
        }

        /// <summary>
        /// Subcategory2 property
        /// </summary>
        [DataMember]
        public string Subcategory2
        {
            get { return _Subcategory2; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Subcategory2); }
        }

        /// <summary>
        /// KeyWords property
        /// </summary>
        [DataMember]
        public string KeyWords
        {
            get { return _KeyWords; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _KeyWords); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public long UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
