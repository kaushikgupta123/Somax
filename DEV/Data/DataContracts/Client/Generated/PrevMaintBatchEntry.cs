/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2013 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PrevMaintBatchEntry table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PrevMaintBatchEntry : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PrevMaintBatchEntry()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PrevMaintBatchEntry dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.PrevMaintBatchEntryId = dbObj.PrevMaintBatchEntryId;
            this.PrevMaintBatchHeaderId = dbObj.PrevMaintBatchHeaderId;
            this.PrevMaintMasterId = dbObj.PrevMaintMasterId;
            this.PrevMaintSchedId = dbObj.PrevMaintSchedId;
            this.DueDate = dbObj.DueDate;
            this.MeterDue = dbObj.MeterDue;
            this.NextDueDate = dbObj.NextDueDate;
            this.WorkOrderId = dbObj.WorkOrderId;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_PrevMaintBatchEntry dbObj = new b_PrevMaintBatchEntry();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_PrevMaintBatchEntry ToDatabaseObject()
        {
            b_PrevMaintBatchEntry dbObj = new b_PrevMaintBatchEntry();
            dbObj.ClientId = this.ClientId;
            dbObj.PrevMaintBatchEntryId = this.PrevMaintBatchEntryId;
            dbObj.PrevMaintBatchHeaderId = this.PrevMaintBatchHeaderId;
            dbObj.PrevMaintMasterId = this.PrevMaintMasterId;
            dbObj.PrevMaintSchedId = this.PrevMaintSchedId;
            dbObj.DueDate = this.DueDate;
            dbObj.MeterDue = this.MeterDue;
            dbObj.NextDueDate = this.NextDueDate;
            dbObj.WorkOrderId = this.WorkOrderId;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            PrevMaintBatchEntry_Create trans = new PrevMaintBatchEntry_Create();
            trans.PrevMaintBatchEntry = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PrevMaintBatchEntry);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            PrevMaintBatchEntry_Retrieve trans = new PrevMaintBatchEntry_Retrieve();
            trans.PrevMaintBatchEntry = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PrevMaintBatchEntry);
        }

        public void Update(DatabaseKey dbKey) 
        {
            PrevMaintBatchEntry_Update trans = new PrevMaintBatchEntry_Update();
            trans.PrevMaintBatchEntry = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PrevMaintBatchEntry);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            PrevMaintBatchEntry_Delete trans = new PrevMaintBatchEntry_Delete();
            trans.PrevMaintBatchEntry = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PrevMaintBatchEntryId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _PrevMaintBatchEntryId;
        private long _PrevMaintBatchHeaderId;
        private long _PrevMaintMasterId;
        private long _PrevMaintSchedId;
        private DateTime _DueDate;
        private decimal _MeterDue;
        private DateTime _NextDueDate;
        private long _WorkOrderId;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PrevMaintBatchEntryId property
        /// </summary>
        [DataMember]
        public long PrevMaintBatchEntryId
        {
            get { return _PrevMaintBatchEntryId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintBatchEntryId); }
        }

        /// <summary>
        /// PrevMaintBatchHeaderId property
        /// </summary>
        [DataMember]
        public long PrevMaintBatchHeaderId
        {
            get { return _PrevMaintBatchHeaderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintBatchHeaderId); }
        }

        /// <summary>
        /// PrevMaintMasterId property
        /// </summary>
        [DataMember]
        public long PrevMaintMasterId
        {
            get { return _PrevMaintMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintMasterId); }
        }

        /// <summary>
        /// PrevMaintSchedId property
        /// </summary>
        [DataMember]
        public long PrevMaintSchedId
        {
            get { return _PrevMaintSchedId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintSchedId); }
        }

        /// <summary>
        /// DueDate property
        /// </summary>
        [DataMember]
        public DateTime DueDate
        {
            get { return _DueDate; }
            set { Set<DateTime>(MethodBase.GetCurrentMethod().Name, value, ref _DueDate); }
        }

        /// <summary>
        /// MeterDue property
        /// </summary>
        [DataMember]
        public decimal MeterDue
        {
            get { return _MeterDue; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterDue); }
        }

        /// <summary>
        /// NextDueDate property
        /// </summary>
        [DataMember]
        public DateTime NextDueDate
        {
            get { return _NextDueDate; }
            set { Set<DateTime>(MethodBase.GetCurrentMethod().Name, value, ref _NextDueDate); }
        }

        /// <summary>
        /// WorkOrderId property
        /// </summary>
        [DataMember]
        public long WorkOrderId
        {
            get { return _WorkOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkOrderId); }
        }
        #endregion
		
		
    }
}
