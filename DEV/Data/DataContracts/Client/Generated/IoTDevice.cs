/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the IoTDevice table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class IoTDevice : DataContractBase, IPermission
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public IoTDevice()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_IoTDevice dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.IoTDeviceId = dbObj.IoTDeviceId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.Name = dbObj.Name;
            this.IoTDeviceCategory = dbObj.IoTDeviceCategory;
            this.SensorType = dbObj.SensorType;
            this.EquipmentId = dbObj.EquipmentId;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.LastReading = dbObj.LastReading;
            this.LastReadingDate = dbObj.LastReadingDate;
            this.MeterInterval = dbObj.MeterInterval;
            this.MeterReadingLife = dbObj.MeterReadingLife;
            this.MeterReadingMax = dbObj.MeterReadingMax;
            this.MonnitHeartbeat = dbObj.MonnitHeartbeat;
            this.MonnitLastBatteryLevel = dbObj.MonnitLastBatteryLevel;
            this.MonnitLastSignalStrength = dbObj.MonnitLastSignalStrength;
            this.MonnitNetworkID = dbObj.MonnitNetworkID;
            this.MonnitSensorAppID = dbObj.MonnitSensorAppID;
            this.SensorAlertProcedureId = dbObj.SensorAlertProcedureId;
            this.SensorUnit = dbObj.SensorUnit;
            this.TriggerHigh = dbObj.TriggerHigh;
            this.TriggerLow = dbObj.TriggerLow;
            this.SensorID = dbObj.SensorID;
            this.CMMSMeterId = dbObj.CMMSMeterId;
            this.TriggerHighCrit = dbObj.TriggerHighCrit;
            this.TriggerLowCrit = dbObj.TriggerLowCrit;
            this.CriticalProcedureId = dbObj.CriticalProcedureId;
            this.MeterLastDoneDate = dbObj.MeterLastDoneDate;
            this.MeterLastDone = dbObj.MeterLastDone;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_IoTDevice dbObj = new b_IoTDevice();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_IoTDevice ToDatabaseObject()
        {
            b_IoTDevice dbObj = new b_IoTDevice();
            dbObj.ClientId = this.ClientId;
            dbObj.IoTDeviceId = this.IoTDeviceId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.Name = this.Name;
            dbObj.IoTDeviceCategory = this.IoTDeviceCategory;
            dbObj.SensorType = this.SensorType;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.LastReading = this.LastReading;
            dbObj.LastReadingDate = this.LastReadingDate;
            dbObj.MeterInterval = this.MeterInterval;
            dbObj.MeterReadingLife = this.MeterReadingLife;
            dbObj.MeterReadingMax = this.MeterReadingMax;
            dbObj.MonnitHeartbeat = this.MonnitHeartbeat;
            dbObj.MonnitLastBatteryLevel = this.MonnitLastBatteryLevel;
            dbObj.MonnitLastSignalStrength = this.MonnitLastSignalStrength;
            dbObj.MonnitNetworkID = this.MonnitNetworkID;
            dbObj.MonnitSensorAppID = this.MonnitSensorAppID;
            dbObj.SensorAlertProcedureId = this.SensorAlertProcedureId;
            dbObj.SensorUnit = this.SensorUnit;
            dbObj.TriggerHigh = this.TriggerHigh;
            dbObj.TriggerLow = this.TriggerLow;
            dbObj.SensorID = this.SensorID;
            dbObj.CMMSMeterId = this.CMMSMeterId;
            dbObj.TriggerHighCrit = this.TriggerHighCrit;
            dbObj.TriggerLowCrit = this.TriggerLowCrit;
            dbObj.CriticalProcedureId = this.CriticalProcedureId;
            dbObj.MeterLastDoneDate = this.MeterLastDoneDate;
            dbObj.MeterLastDone = this.MeterLastDone;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            IoTDevice_Create trans = new IoTDevice_Create();
            trans.IoTDevice = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.IoTDevice);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            IoTDevice_Retrieve trans = new IoTDevice_Retrieve();
            trans.IoTDevice = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.IoTDevice);
        }

        public void Update(DatabaseKey dbKey)
        {
            IoTDevice_Update trans = new IoTDevice_Update();
            trans.IoTDevice = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.IoTDevice);
        }

        public void Delete(DatabaseKey dbKey)
        {
            IoTDevice_Delete trans = new IoTDevice_Delete();
            trans.IoTDevice = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.IoTDeviceId;
            AuditTargetSiteId = this.SiteId;
            AuditTargetAreaId = this.AreaId;
            AuditTargetDepartmentId = this.DepartmentId;
            AuditTargetStoreRoomId = this.StoreroomId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _IoTDeviceId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private string _ClientLookupId;
        private string _Name;
        private string _IoTDeviceCategory;
        private string _SensorType;
        private long _EquipmentId;
        private bool _InactiveFlag;
        private decimal _LastReading;
        private DateTime? _LastReadingDate;
        private decimal _MeterInterval;
        private decimal _MeterReadingLife;
        private decimal _MeterReadingMax;
        private int _MonnitHeartbeat;
        private decimal _MonnitLastBatteryLevel;
        private int _MonnitLastSignalStrength;
        private int _MonnitNetworkID;
        private int _MonnitSensorAppID;
        private long _SensorAlertProcedureId;
        private string _SensorUnit;
        private decimal _TriggerHigh;
        private decimal _TriggerLow;
        private int _SensorID;
        private long _CMMSMeterId;
        private decimal _TriggerHighCrit;
        private decimal _TriggerLowCrit;
        private long _CriticalProcedureId;
        private DateTime? _MeterLastDoneDate;
        private decimal _MeterLastDone;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// IoTDeviceId property
        /// </summary>
        [DataMember]
        public long IoTDeviceId
        {
            get { return _IoTDeviceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _IoTDeviceId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// Name property
        /// </summary>
        [DataMember]
        public string Name
        {
            get { return _Name; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Name); }
        }

        /// <summary>
        /// IoTDeviceCategory property
        /// </summary>
        [DataMember]
        public string IoTDeviceCategory
        {
            get { return _IoTDeviceCategory; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _IoTDeviceCategory); }
        }

        /// <summary>
        /// SensorType property
        /// </summary>
        [DataMember]
        public string SensorType
        {
            get { return _SensorType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SensorType); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// LastReading property
        /// </summary>
        [DataMember]
        public decimal LastReading
        {
            get { return _LastReading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _LastReading); }
        }

        /// <summary>
        /// LastReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? LastReadingDate
        {
            get { return _LastReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastReadingDate); }
        }

        /// <summary>
        /// MeterInterval property
        /// </summary>
        [DataMember]
        public decimal MeterInterval
        {
            get { return _MeterInterval; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterInterval); }
        }

        /// <summary>
        /// MeterReadingLife property
        /// </summary>
        [DataMember]
        public decimal MeterReadingLife
        {
            get { return _MeterReadingLife; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterReadingLife); }
        }

        /// <summary>
        /// MeterReadingMax property
        /// </summary>
        [DataMember]
        public decimal MeterReadingMax
        {
            get { return _MeterReadingMax; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterReadingMax); }
        }

        /// <summary>
        /// MonnitHeartbeat property
        /// </summary>
        [DataMember]
        public int MonnitHeartbeat
        {
            get { return _MonnitHeartbeat; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _MonnitHeartbeat); }
        }

        /// <summary>
        /// MonnitLastBatteryLevel property
        /// </summary>
        [DataMember]
        public decimal MonnitLastBatteryLevel
        {
            get { return _MonnitLastBatteryLevel; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MonnitLastBatteryLevel); }
        }

        /// <summary>
        /// MonnitLastSignalStrength property
        /// </summary>
        [DataMember]
        public int MonnitLastSignalStrength
        {
            get { return _MonnitLastSignalStrength; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _MonnitLastSignalStrength); }
        }

        /// <summary>
        /// MonnitNetworkID property
        /// </summary>
        [DataMember]
        public int MonnitNetworkID
        {
            get { return _MonnitNetworkID; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _MonnitNetworkID); }
        }

        /// <summary>
        /// MonnitSensorAppID property
        /// </summary>
        [DataMember]
        public int MonnitSensorAppID
        {
            get { return _MonnitSensorAppID; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _MonnitSensorAppID); }
        }

        /// <summary>
        /// SensorAlertProcedureId property
        /// </summary>
        [DataMember]
        public long SensorAlertProcedureId
        {
            get { return _SensorAlertProcedureId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SensorAlertProcedureId); }
        }

        /// <summary>
        /// SensorUnit property
        /// </summary>
        [DataMember]
        public string SensorUnit
        {
            get { return _SensorUnit; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SensorUnit); }
        }

        /// <summary>
        /// TriggerHigh property
        /// </summary>
        [DataMember]
        public decimal TriggerHigh
        {
            get { return _TriggerHigh; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TriggerHigh); }
        }

        /// <summary>
        /// TriggerLow property
        /// </summary>
        [DataMember]
        public decimal TriggerLow
        {
            get { return _TriggerLow; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TriggerLow); }
        }

        /// <summary>
        /// SensorID property
        /// </summary>
        [DataMember]
        public int SensorID
        {
            get { return _SensorID; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _SensorID); }
        }

        /// <summary>
        /// CMMSMeterId property
        /// </summary>
        [DataMember]
        public long CMMSMeterId
        {
            get { return _CMMSMeterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CMMSMeterId); }
        }

        /// <summary>
        /// TriggerHighCrit property
        /// </summary>
        [DataMember]
        public decimal TriggerHighCrit
        {
            get { return _TriggerHighCrit; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TriggerHighCrit); }
        }

        /// <summary>
        /// TriggerLowCrit property
        /// </summary>
        [DataMember]
        public decimal TriggerLowCrit
        {
            get { return _TriggerLowCrit; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TriggerLowCrit); }
        }

        /// <summary>
        /// CriticalProcedureId property
        /// </summary>
        [DataMember]
        public long CriticalProcedureId
        {
            get { return _CriticalProcedureId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CriticalProcedureId); }
        }

        /// <summary>
        /// MeterLastDoneDate property
        /// </summary>
        [DataMember]
        public DateTime? MeterLastDoneDate
        {
            get { return _MeterLastDoneDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _MeterLastDoneDate); }
        }

        /// <summary>
        /// MeterLastDone property
        /// </summary>
        [DataMember]
        public decimal MeterLastDone
        {
            get { return _MeterLastDone; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterLastDone); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
