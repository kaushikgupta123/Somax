/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ExportLog table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ExportLog : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ExportLog()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ExportLog dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.ExportLogId = dbObj.ExportLogId;
            this.SiteId = dbObj.SiteId;
            this.ProcessName = dbObj.ProcessName;
            this.StartDate = dbObj.StartDate;
            this.FinishDate = dbObj.FinishDate;
            this.Filter = dbObj.Filter;
            this.Items = dbObj.Items;
            this.RunDate = dbObj.RunDate;
            this.RunBy = dbObj.RunBy;
            this.RowsExtracted = dbObj.RowsExtracted;
            this.Message = dbObj.Message;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_ExportLog dbObj = new b_ExportLog();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_ExportLog ToDatabaseObject()
        {
            b_ExportLog dbObj = new b_ExportLog();
            dbObj.ClientId = this.ClientId;
            dbObj.ExportLogId = this.ExportLogId;
            dbObj.SiteId = this.SiteId;
            dbObj.ProcessName = this.ProcessName;
            dbObj.StartDate = this.StartDate;
            dbObj.FinishDate = this.FinishDate;
            dbObj.Filter = this.Filter;
            dbObj.Items = this.Items;
            dbObj.RunDate = this.RunDate;
            dbObj.RunBy = this.RunBy;
            dbObj.RowsExtracted = this.RowsExtracted;
            dbObj.Message = this.Message;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            ExportLog_Create trans = new ExportLog_Create();
            trans.ExportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ExportLog);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            ExportLog_Retrieve trans = new ExportLog_Retrieve();
            trans.ExportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ExportLog);
        }

        public void Update(DatabaseKey dbKey) 
        {
            ExportLog_Update trans = new ExportLog_Update();
            trans.ExportLog = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ExportLog);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            ExportLog_Delete trans = new ExportLog_Delete();
            trans.ExportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ExportLogId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _ExportLogId;
        private long _SiteId;
        private string _ProcessName;
        private DateTime? _StartDate;
        private DateTime? _FinishDate;
        private string _Filter;
        private int _Items;
        private DateTime? _RunDate;
        private string _RunBy;
        private int _RowsExtracted;
        private string _Message;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// ExportLogId property
        /// </summary>
        [DataMember]
        public long ExportLogId
        {
            get { return _ExportLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExportLogId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// ProcessName property
        /// </summary>
        [DataMember]
        public string ProcessName
        {
            get { return _ProcessName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ProcessName); }
        }

        /// <summary>
        /// StartDate property
        /// </summary>
        [DataMember]
        public DateTime? StartDate
        {
            get { return _StartDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _StartDate); }
        }

        /// <summary>
        /// FinishDate property
        /// </summary>
        [DataMember]
        public DateTime? FinishDate
        {
            get { return _FinishDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _FinishDate); }
        }

        /// <summary>
        /// Filter property
        /// </summary>
        [DataMember]
        public string Filter
        {
            get { return _Filter; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Filter); }
        }

        /// <summary>
        /// Items property
        /// </summary>
        [DataMember]
        public int Items
        {
            get { return _Items; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Items); }
        }

        /// <summary>
        /// RunDate property
        /// </summary>
        [DataMember]
        public DateTime? RunDate
        {
            get { return _RunDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _RunDate); }
        }

        /// <summary>
        /// RunBy property
        /// </summary>
        [DataMember]
        public string RunBy
        {
            get { return _RunBy; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RunBy); }
        }

        /// <summary>
        /// RowsExtracted property
        /// </summary>
        [DataMember]
        public int RowsExtracted
        {
            get { return _RowsExtracted; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _RowsExtracted); }
        }

        /// <summary>
        /// Message property
        /// </summary>
        [DataMember]
        public string Message
        {
            get { return _Message; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Message); }
        }
        #endregion
		
		
    }
}
