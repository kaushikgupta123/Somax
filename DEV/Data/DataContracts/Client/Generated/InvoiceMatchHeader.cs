/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the InvoiceMatchHeader table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class InvoiceMatchHeader : DataContractBase, IPermission 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public InvoiceMatchHeader()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_InvoiceMatchHeader dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.InvoiceMatchHeaderId = dbObj.InvoiceMatchHeaderId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.AuthorizedToPay = dbObj.AuthorizedToPay;
            this.AuthorizedToPayDate = dbObj.AuthorizedToPayDate;
            this.AuthorizedToPay_PersonnelId = dbObj.AuthorizedToPay_PersonnelId;
            this.Creator_PersonnelId = dbObj.Creator_PersonnelId;
            this.DueDate = dbObj.DueDate;
            this.OverrideCode = dbObj.OverrideCode;
            this.OverrideComments = dbObj.OverrideComments;
            this.PurchaseOrderId = dbObj.PurchaseOrderId;
            this.ReceiptDate = dbObj.ReceiptDate;
            this.Responsible_PersonnelId = dbObj.Responsible_PersonnelId;
            this.ShipAmount = dbObj.ShipAmount;
            this.Status = dbObj.Status;
            this.TaxAmount = dbObj.TaxAmount;
            this.TotalInput = dbObj.TotalInput;
            this.Type = dbObj.Type;
            this.InvoiceDate = dbObj.InvoiceDate;
            this.VendorId = dbObj.VendorId;
            this.Paid = dbObj.Paid;
            this.PaidDate = dbObj.PaidDate;
            this.Paid_PersonnelId = dbObj.Paid_PersonnelId;
            this.IsExternal = dbObj.IsExternal;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_InvoiceMatchHeader dbObj = new b_InvoiceMatchHeader();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_InvoiceMatchHeader ToDatabaseObject()
        {
            b_InvoiceMatchHeader dbObj = new b_InvoiceMatchHeader();
            dbObj.ClientId = this.ClientId;
            dbObj.InvoiceMatchHeaderId = this.InvoiceMatchHeaderId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.AuthorizedToPay = this.AuthorizedToPay;
            dbObj.AuthorizedToPayDate = this.AuthorizedToPayDate;
            dbObj.AuthorizedToPay_PersonnelId = this.AuthorizedToPay_PersonnelId;
            dbObj.Creator_PersonnelId = this.Creator_PersonnelId;
            dbObj.DueDate = this.DueDate;
            dbObj.OverrideCode = this.OverrideCode;
            dbObj.OverrideComments = this.OverrideComments;
            dbObj.PurchaseOrderId = this.PurchaseOrderId;
            dbObj.ReceiptDate = this.ReceiptDate;
            dbObj.Responsible_PersonnelId = this.Responsible_PersonnelId;
            dbObj.ShipAmount = this.ShipAmount;
            dbObj.Status = this.Status;
            dbObj.TaxAmount = this.TaxAmount;
            dbObj.TotalInput = this.TotalInput;
            dbObj.Type = this.Type;
            dbObj.InvoiceDate = this.InvoiceDate;
            dbObj.VendorId = this.VendorId;
            dbObj.Paid = this.Paid;
            dbObj.PaidDate = this.PaidDate;
            dbObj.Paid_PersonnelId = this.Paid_PersonnelId;
            dbObj.IsExternal = this.IsExternal;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            InvoiceMatchHeader_Create trans = new InvoiceMatchHeader_Create();
            trans.InvoiceMatchHeader = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.InvoiceMatchHeader);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            InvoiceMatchHeader_Retrieve trans = new InvoiceMatchHeader_Retrieve();
            trans.InvoiceMatchHeader = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.InvoiceMatchHeader);
        }

        public void Update(DatabaseKey dbKey) 
        {
            InvoiceMatchHeader_Update trans = new InvoiceMatchHeader_Update();
            trans.InvoiceMatchHeader = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.InvoiceMatchHeader);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            InvoiceMatchHeader_Delete trans = new InvoiceMatchHeader_Delete();
            trans.InvoiceMatchHeader = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.InvoiceMatchHeaderId;
			AuditTargetSiteId = this.SiteId;
			AuditTargetAreaId = this.AreaId;
			AuditTargetDepartmentId = this.DepartmentId;
			AuditTargetStoreRoomId = this.StoreroomId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _InvoiceMatchHeaderId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private string _ClientLookupId;
        private bool _AuthorizedToPay;
        private DateTime? _AuthorizedToPayDate;
        private long _AuthorizedToPay_PersonnelId;
        private long _Creator_PersonnelId;
        private DateTime? _DueDate;
        private string _OverrideCode;
        private string _OverrideComments;
        private long _PurchaseOrderId;
        private DateTime? _ReceiptDate;
        private long _Responsible_PersonnelId;
        private decimal _ShipAmount;
        private string _Status;
        private decimal _TaxAmount;
        private decimal _TotalInput;
        private string _Type;
        private DateTime? _InvoiceDate;
        private long _VendorId;
        private bool _Paid;
        private DateTime? _PaidDate;
        private long _Paid_PersonnelId;
        private bool _IsExternal;
        private long _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// InvoiceMatchHeaderId property
        /// </summary>
        [DataMember]
        public long InvoiceMatchHeaderId
        {
            get { return _InvoiceMatchHeaderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _InvoiceMatchHeaderId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// AuthorizedToPay property
        /// </summary>
        [DataMember]
        public bool AuthorizedToPay
        {
            get { return _AuthorizedToPay; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _AuthorizedToPay); }
        }

        /// <summary>
        /// AuthorizedToPayDate property
        /// </summary>
        [DataMember]
        public DateTime? AuthorizedToPayDate
        {
            get { return _AuthorizedToPayDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _AuthorizedToPayDate); }
        }

        /// <summary>
        /// AuthorizedToPay_PersonnelId property
        /// </summary>
        [DataMember]
        public long AuthorizedToPay_PersonnelId
        {
            get { return _AuthorizedToPay_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AuthorizedToPay_PersonnelId); }
        }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        [DataMember]
        public long Creator_PersonnelId
        {
            get { return _Creator_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Creator_PersonnelId); }
        }

        /// <summary>
        /// DueDate property
        /// </summary>
        [DataMember]
        public DateTime? DueDate
        {
            get { return _DueDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _DueDate); }
        }

        /// <summary>
        /// OverrideCode property
        /// </summary>
        [DataMember]
        public string OverrideCode
        {
            get { return _OverrideCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _OverrideCode); }
        }

        /// <summary>
        /// OverrideComments property
        /// </summary>
        [DataMember]
        public string OverrideComments
        {
            get { return _OverrideComments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _OverrideComments); }
        }

        /// <summary>
        /// PurchaseOrderId property
        /// </summary>
        [DataMember]
        public long PurchaseOrderId
        {
            get { return _PurchaseOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseOrderId); }
        }

        /// <summary>
        /// ReceiptDate property
        /// </summary>
        [DataMember]
        public DateTime? ReceiptDate
        {
            get { return _ReceiptDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReceiptDate); }
        }

        /// <summary>
        /// Responsible_PersonnelId property
        /// </summary>
        [DataMember]
        public long Responsible_PersonnelId
        {
            get { return _Responsible_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Responsible_PersonnelId); }
        }

        /// <summary>
        /// ShipAmount property
        /// </summary>
        [DataMember]
        public decimal ShipAmount
        {
            get { return _ShipAmount; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ShipAmount); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// TaxAmount property
        /// </summary>
        [DataMember]
        public decimal TaxAmount
        {
            get { return _TaxAmount; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TaxAmount); }
        }

        /// <summary>
        /// TotalInput property
        /// </summary>
        [DataMember]
        public decimal TotalInput
        {
            get { return _TotalInput; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TotalInput); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// InvoiceDate property
        /// </summary>
        [DataMember]
        public DateTime? InvoiceDate
        {
            get { return _InvoiceDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _InvoiceDate); }
        }

        /// <summary>
        /// VendorId property
        /// </summary>
        [DataMember]
        public long VendorId
        {
            get { return _VendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorId); }
        }

        /// <summary>
        /// Paid property
        /// </summary>
        [DataMember]
        public bool Paid
        {
            get { return _Paid; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Paid); }
        }

        /// <summary>
        /// PaidDate property
        /// </summary>
        [DataMember]
        public DateTime? PaidDate
        {
            get { return _PaidDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PaidDate); }
        }

        /// <summary>
        /// Paid_PersonnelId property
        /// </summary>
        [DataMember]
        public long Paid_PersonnelId
        {
            get { return _Paid_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Paid_PersonnelId); }
        }

        /// <summary>
        /// IsExternal property
        /// </summary>
        [DataMember]
        public bool IsExternal
        {
            get { return _IsExternal; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsExternal); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public long UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
