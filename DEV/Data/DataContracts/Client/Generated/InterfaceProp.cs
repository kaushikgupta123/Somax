/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the InterfaceProp table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class InterfaceProp : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public InterfaceProp()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_InterfaceProp dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.InterfacePropId = dbObj.InterfacePropId;
            this.SiteId = dbObj.SiteId;
            this.InterfaceType = dbObj.InterfaceType;
            this.InUse = dbObj.InUse;
            this.APIKey1 = dbObj.APIKey1;
            this.APIKey2 = dbObj.APIKey2;
            this.Switch1 = dbObj.Switch1;
            this.Switch2 = dbObj.Switch2;
            this.Switch3 = dbObj.Switch3;
            this.FTPAddress = dbObj.FTPAddress;
            this.FTPUserName = dbObj.FTPUserName;
            this.FTPPassword = dbObj.FTPPassword;
            this.CreatedBy = dbObj.CreatedBy;
            this.CreatedDate = dbObj.CreatedDate;
            this.FTPFileDirectory = dbObj.FTPFileDirectory;
            this.FTPArcDirectory = dbObj.FTPArcDirectory;
            this.FilesEncrypted = dbObj.FilesEncrypted;
            this.Delimiter = dbObj.Delimiter;
            this.JSONSchemaDir = dbObj.JSONSchemaDir;
            this.PublicKey = dbObj.PublicKey;
            this.PrivateKey = dbObj.PrivateKey;
            this.KeyPass = dbObj.KeyPass;
            this.FTPPort = dbObj.FTPPort;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_InterfaceProp dbObj = new b_InterfaceProp();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_InterfaceProp ToDatabaseObject()
        {
            b_InterfaceProp dbObj = new b_InterfaceProp();
            dbObj.ClientId = this.ClientId;
            dbObj.InterfacePropId = this.InterfacePropId;
            dbObj.SiteId = this.SiteId;
            dbObj.InterfaceType = this.InterfaceType;
            dbObj.InUse = this.InUse;
            dbObj.APIKey1 = this.APIKey1;
            dbObj.APIKey2 = this.APIKey2;
            dbObj.Switch1 = this.Switch1;
            dbObj.Switch2 = this.Switch2;
            dbObj.Switch3 = this.Switch3;
            dbObj.FTPAddress = this.FTPAddress;
            dbObj.FTPUserName = this.FTPUserName;
            dbObj.FTPPassword = this.FTPPassword;
            dbObj.CreatedBy = this.CreatedBy;
            dbObj.CreatedDate = this.CreatedDate;
            dbObj.FTPFileDirectory = this.FTPFileDirectory;
            dbObj.FTPArcDirectory = this.FTPArcDirectory;
            dbObj.FilesEncrypted = this.FilesEncrypted;
            dbObj.Delimiter = this.Delimiter;
            dbObj.JSONSchemaDir = this.JSONSchemaDir;
            dbObj.PublicKey = this.PublicKey;
            dbObj.PrivateKey = this.PrivateKey;
            dbObj.KeyPass = this.KeyPass;
            dbObj.FTPPort = this.FTPPort;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            InterfaceProp_Create trans = new InterfaceProp_Create();
            trans.InterfaceProp = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.InterfaceProp);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            InterfaceProp_Retrieve trans = new InterfaceProp_Retrieve();
            trans.InterfaceProp = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.InterfaceProp);
        }

        public void Update(DatabaseKey dbKey)
        {
            InterfaceProp_Update trans = new InterfaceProp_Update();
            trans.InterfaceProp = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.InterfaceProp);
        }

        public void Delete(DatabaseKey dbKey)
        {
            InterfaceProp_Delete trans = new InterfaceProp_Delete();
            trans.InterfaceProp = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.InterfacePropId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _InterfacePropId;
        private long _SiteId;
        private string _InterfaceType;
        private bool _InUse;
        private string _APIKey1;
        private string _APIKey2;
        private bool _Switch1;
        private bool _Switch2;
        private bool _Switch3;
        private string _FTPAddress;
        private string _FTPUserName;
        private string _FTPPassword;
        private string _CreatedBy;
        private DateTime? _CreatedDate;
        private string _FTPFileDirectory;
        private string _FTPArcDirectory;
        private bool _FilesEncrypted;
        private string _Delimiter;
        private string _JSONSchemaDir;
        private string _PublicKey;
        private string _PrivateKey;
        private string _KeyPass;
        private int _FTPPort;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// InterfacePropId property
        /// </summary>
        [DataMember]
        public long InterfacePropId
        {
            get { return _InterfacePropId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _InterfacePropId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// InterfaceType property
        /// </summary>
        [DataMember]
        public string InterfaceType
        {
            get { return _InterfaceType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _InterfaceType); }
        }

        /// <summary>
        /// InUse property
        /// </summary>
        [DataMember]
        public bool InUse
        {
            get { return _InUse; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InUse); }
        }

        /// <summary>
        /// APIKey1 property
        /// </summary>
        [DataMember]
        public string APIKey1
        {
            get { return _APIKey1; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _APIKey1); }
        }

        /// <summary>
        /// APIKey2 property
        /// </summary>
        [DataMember]
        public string APIKey2
        {
            get { return _APIKey2; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _APIKey2); }
        }

        /// <summary>
        /// Switch1 property
        /// </summary>
        [DataMember]
        public bool Switch1
        {
            get { return _Switch1; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Switch1); }
        }

        /// <summary>
        /// Switch2 property
        /// </summary>
        [DataMember]
        public bool Switch2
        {
            get { return _Switch2; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Switch2); }
        }

        /// <summary>
        /// Switch3 property
        /// </summary>
        [DataMember]
        public bool Switch3
        {
            get { return _Switch3; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Switch3); }
        }

        /// <summary>
        /// FTPAddress property
        /// </summary>
        [DataMember]
        public string FTPAddress
        {
            get { return _FTPAddress; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FTPAddress); }
        }

        /// <summary>
        /// FTPUserName property
        /// </summary>
        [DataMember]
        public string FTPUserName
        {
            get { return _FTPUserName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FTPUserName); }
        }

        /// <summary>
        /// FTPPassword property
        /// </summary>
        [DataMember]
        public string FTPPassword
        {
            get { return _FTPPassword; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FTPPassword); }
        }

        /// <summary>
        /// CreatedBy property
        /// </summary>
        [DataMember]
        public string CreatedBy
        {
            get { return _CreatedBy; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CreatedBy); }
        }

        /// <summary>
        /// CreatedDate property
        /// </summary>
        [DataMember]
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CreatedDate); }
        }

        /// <summary>
        /// FTPFileDirectory property
        /// </summary>
        [DataMember]
        public string FTPFileDirectory
        {
            get { return _FTPFileDirectory; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FTPFileDirectory); }
        }

        /// <summary>
        /// FTPArcDirectory property
        /// </summary>
        [DataMember]
        public string FTPArcDirectory
        {
            get { return _FTPArcDirectory; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FTPArcDirectory); }
        }

        /// <summary>
        /// FilesEncrypted property
        /// </summary>
        [DataMember]
        public bool FilesEncrypted
        {
            get { return _FilesEncrypted; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _FilesEncrypted); }
        }

        /// <summary>
        /// Delimiter property
        /// </summary>
        [DataMember]
        public string Delimiter
        {
            get { return _Delimiter; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Delimiter); }
        }

        /// <summary>
        /// JSONSchemaDir property
        /// </summary>
        [DataMember]
        public string JSONSchemaDir
        {
            get { return _JSONSchemaDir; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _JSONSchemaDir); }
        }

        /// <summary>
        /// PublicKey property
        /// </summary>
        [DataMember]
        public string PublicKey
        {
            get { return _PublicKey; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PublicKey); }
        }

        /// <summary>
        /// PrivateKey property
        /// </summary>
        [DataMember]
        public string PrivateKey
        {
            get { return _PrivateKey; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PrivateKey); }
        }

        /// <summary>
        /// KeyPass property
        /// </summary>
        [DataMember]
        public string KeyPass
        {
            get { return _KeyPass; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _KeyPass); }
        }

        /// <summary>
        /// FTPPort property
        /// </summary>
        [DataMember]
        public int FTPPort
        {
            get { return _FTPPort; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _FTPPort); }
        }
        #endregion


    }
}
