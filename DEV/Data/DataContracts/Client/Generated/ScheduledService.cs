/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ScheduledService table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ScheduledService : DataContractBase, IPermission 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ScheduledService()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ScheduledService dbObj)
        {
		            this.ScheduledServiceId = dbObj.ScheduledServiceId;
            this.ClientId = dbObj.ClientId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ServiceTaskId = dbObj.ServiceTaskId;
            this.EquipmentId = dbObj.EquipmentId;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.Last_ServiceOrderId = dbObj.Last_ServiceOrderId;
            this.LastPerformedDate = dbObj.LastPerformedDate;
            this.LastPerformedMeter1 = dbObj.LastPerformedMeter1;
            this.LastPerformedMeter2 = dbObj.LastPerformedMeter2;
            this.Meter1Interval = dbObj.Meter1Interval;
            this.Meter1Threshold = dbObj.Meter1Threshold;
            this.Meter2Interval = dbObj.Meter2Interval;
            this.Meter2Threshold = dbObj.Meter2Threshold;
            this.NextDueDate = dbObj.NextDueDate;
            this.NextDueMeter1 = dbObj.NextDueMeter1;
            this.NextDueMeter2 = dbObj.NextDueMeter2;
            this.TimeInterval = dbObj.TimeInterval;
            this.TimeIntervalType = dbObj.TimeIntervalType;
            this.TimeThreshold = dbObj.TimeThreshold;
            this.TimeThresoldType = dbObj.TimeThresoldType;
            this.RepairReason = dbObj.RepairReason;
            this.VMRSSystem = dbObj.VMRSSystem;
            this.VMRSAssembly = dbObj.VMRSAssembly;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_ScheduledService dbObj = new b_ScheduledService();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_ScheduledService ToDatabaseObject()
        {
            b_ScheduledService dbObj = new b_ScheduledService();
            dbObj.ScheduledServiceId = this.ScheduledServiceId;
            dbObj.ClientId = this.ClientId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ServiceTaskId = this.ServiceTaskId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.Last_ServiceOrderId = this.Last_ServiceOrderId;
            dbObj.LastPerformedDate = this.LastPerformedDate;
            dbObj.LastPerformedMeter1 = this.LastPerformedMeter1;
            dbObj.LastPerformedMeter2 = this.LastPerformedMeter2;
            dbObj.Meter1Interval = this.Meter1Interval;
            dbObj.Meter1Threshold = this.Meter1Threshold;
            dbObj.Meter2Interval = this.Meter2Interval;
            dbObj.Meter2Threshold = this.Meter2Threshold;
            dbObj.NextDueDate = this.NextDueDate;
            dbObj.NextDueMeter1 = this.NextDueMeter1;
            dbObj.NextDueMeter2 = this.NextDueMeter2;
            dbObj.TimeInterval = this.TimeInterval;
            dbObj.TimeIntervalType = this.TimeIntervalType;
            dbObj.TimeThreshold = this.TimeThreshold;
            dbObj.TimeThresoldType = this.TimeThresoldType;
            dbObj.RepairReason = this.RepairReason;
            dbObj.VMRSSystem = this.VMRSSystem;
            dbObj.VMRSAssembly = this.VMRSAssembly;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            ScheduledService_Create trans = new ScheduledService_Create();
            trans.ScheduledService = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ScheduledService);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            ScheduledService_Retrieve trans = new ScheduledService_Retrieve();
            trans.ScheduledService = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ScheduledService);
        }

        public void Update(DatabaseKey dbKey) 
        {
            ScheduledService_Update trans = new ScheduledService_Update();
            trans.ScheduledService = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ScheduledService);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            ScheduledService_Delete trans = new ScheduledService_Delete();
            trans.ScheduledService = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ScheduledServiceId;
			AuditTargetSiteId = this.SiteId;
			AuditTargetAreaId = this.AreaId;
			AuditTargetDepartmentId = this.DepartmentId;
			AuditTargetStoreRoomId = this.StoreroomId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ScheduledServiceId;
        private long _ClientId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private long _ServiceTaskId;
        private long _EquipmentId;
        private bool _InactiveFlag;
        private long _Last_ServiceOrderId;
        private DateTime? _LastPerformedDate;
        private decimal _LastPerformedMeter1;
        private decimal _LastPerformedMeter2;
        private decimal _Meter1Interval;
        private decimal _Meter1Threshold;
        private decimal _Meter2Interval;
        private decimal _Meter2Threshold;
        private DateTime? _NextDueDate;
        private decimal _NextDueMeter1;
        private decimal _NextDueMeter2;
        private int _TimeInterval;
        private string _TimeIntervalType;
        private int _TimeThreshold;
        private string _TimeThresoldType;
        private string _RepairReason;
        private string _VMRSSystem;
        private string _VMRSAssembly;
        #endregion
        
        #region Properties


        /// <summary>
        /// ScheduledServiceId property
        /// </summary>
        [DataMember]
        public long ScheduledServiceId
        {
            get { return _ScheduledServiceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledServiceId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ServiceTaskId property
        /// </summary>
        [DataMember]
        public long ServiceTaskId
        {
            get { return _ServiceTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ServiceTaskId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// Last_ServiceOrderId property
        /// </summary>
        [DataMember]
        public long Last_ServiceOrderId
        {
            get { return _Last_ServiceOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Last_ServiceOrderId); }
        }

        /// <summary>
        /// LastPerformedDate property
        /// </summary>
        [DataMember]
        public DateTime? LastPerformedDate
        {
            get { return _LastPerformedDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastPerformedDate); }
        }

        /// <summary>
        /// LastPerformedMeter1 property
        /// </summary>
        [DataMember]
        public decimal LastPerformedMeter1
        {
            get { return _LastPerformedMeter1; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _LastPerformedMeter1); }
        }

        /// <summary>
        /// LastPerformedMeter2 property
        /// </summary>
        [DataMember]
        public decimal LastPerformedMeter2
        {
            get { return _LastPerformedMeter2; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _LastPerformedMeter2); }
        }

        /// <summary>
        /// Meter1Interval property
        /// </summary>
        [DataMember]
        public decimal Meter1Interval
        {
            get { return _Meter1Interval; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Meter1Interval); }
        }

        /// <summary>
        /// Meter1Threshold property
        /// </summary>
        [DataMember]
        public decimal Meter1Threshold
        {
            get { return _Meter1Threshold; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Meter1Threshold); }
        }

        /// <summary>
        /// Meter2Interval property
        /// </summary>
        [DataMember]
        public decimal Meter2Interval
        {
            get { return _Meter2Interval; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Meter2Interval); }
        }

        /// <summary>
        /// Meter2Threshold property
        /// </summary>
        [DataMember]
        public decimal Meter2Threshold
        {
            get { return _Meter2Threshold; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Meter2Threshold); }
        }

        /// <summary>
        /// NextDueDate property
        /// </summary>
        [DataMember]
        public DateTime? NextDueDate
        {
            get { return _NextDueDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _NextDueDate); }
        }

        /// <summary>
        /// NextDueMeter1 property
        /// </summary>
        [DataMember]
        public decimal NextDueMeter1
        {
            get { return _NextDueMeter1; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _NextDueMeter1); }
        }

        /// <summary>
        /// NextDueMeter2 property
        /// </summary>
        [DataMember]
        public decimal NextDueMeter2
        {
            get { return _NextDueMeter2; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _NextDueMeter2); }
        }

        /// <summary>
        /// TimeInterval property
        /// </summary>
        [DataMember]
        public int TimeInterval
        {
            get { return _TimeInterval; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _TimeInterval); }
        }

        /// <summary>
        /// TimeIntervalType property
        /// </summary>
        [DataMember]
        public string TimeIntervalType
        {
            get { return _TimeIntervalType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TimeIntervalType); }
        }

        /// <summary>
        /// TimeThreshold property
        /// </summary>
        [DataMember]
        public int TimeThreshold
        {
            get { return _TimeThreshold; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _TimeThreshold); }
        }

        /// <summary>
        /// TimeThresoldType property
        /// </summary>
        [DataMember]
        public string TimeThresoldType
        {
            get { return _TimeThresoldType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TimeThresoldType); }
        }

        /// <summary>
        /// RepairReason property
        /// </summary>
        [DataMember]
        public string RepairReason
        {
            get { return _RepairReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RepairReason); }
        }

        /// <summary>
        /// VMRSSystem property
        /// </summary>
        [DataMember]
        public string VMRSSystem
        {
            get { return _VMRSSystem; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VMRSSystem); }
        }

        /// <summary>
        /// VMRSAssembly property
        /// </summary>
        [DataMember]
        public string VMRSAssembly
        {
            get { return _VMRSAssembly; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VMRSAssembly); }
        }
        #endregion
		
		
    }
}
