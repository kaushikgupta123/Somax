/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PartImportLog table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PartImportLog : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PartImportLog()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PartImportLog dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.PartImportLogId = dbObj.PartImportLogId;
            this.PartId = dbObj.PartId;
            this.SiteId = dbObj.SiteId;
            this.DataImportLogId = dbObj.DataImportLogId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.AverageCost = dbObj.AverageCost;
            this.Description = dbObj.Description;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.IssueUnit = dbObj.IssueUnit;
            this.Manufacturer = dbObj.Manufacturer;
            this.ManufacturerId = dbObj.ManufacturerId;
            this.StockType = dbObj.StockType;
            this.UPCCode = dbObj.UPCCode;
            this.CountFrequency = dbObj.CountFrequency;
            this.QtyMaximum = dbObj.QtyMaximum;
            this.QtyOnHand = dbObj.QtyOnHand;
            this.QtyReorderLevel = dbObj.QtyReorderLevel;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_PartImportLog dbObj = new b_PartImportLog();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_PartImportLog ToDatabaseObject()
        {
            b_PartImportLog dbObj = new b_PartImportLog();
            dbObj.ClientId = this.ClientId;
            dbObj.PartImportLogId = this.PartImportLogId;
            dbObj.PartId = this.PartId;
            dbObj.SiteId = this.SiteId;
            dbObj.DataImportLogId = this.DataImportLogId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.AverageCost = this.AverageCost;
            dbObj.Description = this.Description;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.IssueUnit = this.IssueUnit;
            dbObj.Manufacturer = this.Manufacturer;
            dbObj.ManufacturerId = this.ManufacturerId;
            dbObj.StockType = this.StockType;
            dbObj.UPCCode = this.UPCCode;
            dbObj.CountFrequency = this.CountFrequency;
            dbObj.QtyMaximum = this.QtyMaximum;
            dbObj.QtyOnHand = this.QtyOnHand;
            dbObj.QtyReorderLevel = this.QtyReorderLevel;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            PartImportLog_Create trans = new PartImportLog_Create();
            trans.PartImportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PartImportLog);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            PartImportLog_Retrieve trans = new PartImportLog_Retrieve();
            trans.PartImportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PartImportLog);
        }

        public void Update(DatabaseKey dbKey) 
        {
            PartImportLog_Update trans = new PartImportLog_Update();
            trans.PartImportLog = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PartImportLog);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            PartImportLog_Delete trans = new PartImportLog_Delete();
            trans.PartImportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PartImportLogId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _PartImportLogId;
        private long _PartId;
        private long _SiteId;
        private long _DataImportLogId;
        private string _ClientLookupId;
        private decimal _AverageCost;
        private string _Description;
        private bool _InactiveFlag;
        private string _IssueUnit;
        private string _Manufacturer;
        private string _ManufacturerId;
        private string _StockType;
        private string _UPCCode;
        private int _CountFrequency;
        private decimal _QtyMaximum;
        private decimal _QtyOnHand;
        private decimal _QtyReorderLevel;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PartImportLogId property
        /// </summary>
        [DataMember]
        public long PartImportLogId
        {
            get { return _PartImportLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartImportLogId); }
        }

        /// <summary>
        /// PartId property
        /// </summary>
        [DataMember]
        public long PartId
        {
            get { return _PartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// DataImportLogId property
        /// </summary>
        [DataMember]
        public long DataImportLogId
        {
            get { return _DataImportLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DataImportLogId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// AverageCost property
        /// </summary>
        [DataMember]
        public decimal AverageCost
        {
            get { return _AverageCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _AverageCost); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// IssueUnit property
        /// </summary>
        [DataMember]
        public string IssueUnit
        {
            get { return _IssueUnit; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _IssueUnit); }
        }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        [DataMember]
        public string Manufacturer
        {
            get { return _Manufacturer; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Manufacturer); }
        }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        [DataMember]
        public string ManufacturerId
        {
            get { return _ManufacturerId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ManufacturerId); }
        }

        /// <summary>
        /// StockType property
        /// </summary>
        [DataMember]
        public string StockType
        {
            get { return _StockType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _StockType); }
        }

        /// <summary>
        /// UPCCode property
        /// </summary>
        [DataMember]
        public string UPCCode
        {
            get { return _UPCCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UPCCode); }
        }

        /// <summary>
        /// CountFrequency property
        /// </summary>
        [DataMember]
        public int CountFrequency
        {
            get { return _CountFrequency; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _CountFrequency); }
        }

        /// <summary>
        /// QtyMaximum property
        /// </summary>
        [DataMember]
        public decimal QtyMaximum
        {
            get { return _QtyMaximum; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _QtyMaximum); }
        }

        /// <summary>
        /// QtyOnHand property
        /// </summary>
        [DataMember]
        public decimal QtyOnHand
        {
            get { return _QtyOnHand; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _QtyOnHand); }
        }

        /// <summary>
        /// QtyReorderLevel property
        /// </summary>
        [DataMember]
        public decimal QtyReorderLevel
        {
            get { return _QtyReorderLevel; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _QtyReorderLevel); }
        }
        #endregion
		
		
    }
}
