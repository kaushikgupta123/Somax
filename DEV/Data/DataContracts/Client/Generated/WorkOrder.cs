/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the WorkOrder table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class WorkOrder : DataContractBase, IPermission
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public WorkOrder()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_WorkOrder dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.WorkOrderId = dbObj.WorkOrderId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.ActionCode = dbObj.ActionCode;
            this.ActualDuration = dbObj.ActualDuration;
            this.ActualFinishDate = dbObj.ActualFinishDate;
            this.ActualLaborCosts = dbObj.ActualLaborCosts;
            this.ActualLaborHours = dbObj.ActualLaborHours;
            this.ActualMaterialCosts = dbObj.ActualMaterialCosts;
            this.ActualOutsideServiceCosts = dbObj.ActualOutsideServiceCosts;
            this.ActualStartDate = dbObj.ActualStartDate;
            this.ActualTotalCosts = dbObj.ActualTotalCosts;
            this.ApprovalRequired = dbObj.ApprovalRequired;
            this.ApproveBy_PersonnelId = dbObj.ApproveBy_PersonnelId;
            this.ApproveDate = dbObj.ApproveDate;
            this.CancelReason = dbObj.CancelReason;
            this.ChargeToId = dbObj.ChargeToId;
            this.ChargeType = dbObj.ChargeType;
            this.ChargeTo_Name = dbObj.ChargeTo_Name;
            this.CloseBy_PersonnelId = dbObj.CloseBy_PersonnelId;
            this.CloseDate = dbObj.CloseDate;
            this.CompleteAllTasks = dbObj.CompleteAllTasks;
            this.CompleteBy_PersonnelId = dbObj.CompleteBy_PersonnelId;
            this.CompleteComments = dbObj.CompleteComments;
            this.CompleteDate = dbObj.CompleteDate;
            this.Creator_PersonnelId = dbObj.Creator_PersonnelId;
            this.Crew = dbObj.Crew;
            this.Description = dbObj.Description;
            this.DownRequired = dbObj.DownRequired;
            this.EquipDown = dbObj.EquipDown;
            this.EquipDownDate = dbObj.EquipDownDate;
            this.EquipDownHours = dbObj.EquipDownHours;
            this.EquipUpDate = dbObj.EquipUpDate;
            this.EstimatedLaborCosts = dbObj.EstimatedLaborCosts;
            this.EstimatedLaborHours = dbObj.EstimatedLaborHours;
            this.EstimatedMaterialCosts = dbObj.EstimatedMaterialCosts;
            this.EstimatedOutsideServiceCosts = dbObj.EstimatedOutsideServiceCosts;
            this.EstimatedPurchaseMaterialCosts = dbObj.EstimatedPurchaseMaterialCosts;
            this.EstimatedTotalCosts = dbObj.EstimatedTotalCosts;
            this.FailureCode = dbObj.FailureCode;
            this.JobPlan = dbObj.JobPlan;
            this.Labor_AccountId = dbObj.Labor_AccountId;
            this.Location = dbObj.Location;
            this.Material_AccountId = dbObj.Material_AccountId;
            this.MeterId = dbObj.MeterId;
            this.MeterReadingDone = dbObj.MeterReadingDone;
            this.MeterReadingDue = dbObj.MeterReadingDue;
            this.Other_AccountId = dbObj.Other_AccountId;
            this.Planner_PersonnelId = dbObj.Planner_PersonnelId;
            this.PrevMaintBatchId = dbObj.PrevMaintBatchId;
            this.PrimaveraProjectNumber = dbObj.PrimaveraProjectNumber;
            this.Printed = dbObj.Printed;
            this.Priority = dbObj.Priority;
            this.ProjectId = dbObj.ProjectId;
            this.ReasonforDown = dbObj.ReasonforDown;
            this.ReasonNotDone = dbObj.ReasonNotDone;
            this.ReleaseBy_PersonnelId = dbObj.ReleaseBy_PersonnelId;
            this.ReleaseDate = dbObj.ReleaseDate;
            this.RequestDate = dbObj.RequestDate;
            this.Requestor_PersonnelId = dbObj.Requestor_PersonnelId;
            this.RequestorLocation = dbObj.RequestorLocation;
            this.RequestorPhone = dbObj.RequestorPhone;
            this.RequiredDate = dbObj.RequiredDate;
            this.RIMEAssetCriticality = dbObj.RIMEAssetCriticality;
            this.RIMEPriority = dbObj.RIMEPriority;
            this.RIMEWorkClass = dbObj.RIMEWorkClass;
            this.ScheduledDuration = dbObj.ScheduledDuration;
            this.ScheduledFinishDate = dbObj.ScheduledFinishDate;
            this.ScheduledStartDate = dbObj.ScheduledStartDate;
            this.Scheduler_PersonnelId = dbObj.Scheduler_PersonnelId;
            this.Section = dbObj.Section;
            this.Shift = dbObj.Shift;
            this.SignOffDate = dbObj.SignOffDate;
            this.SignoffBy_PersonnelId = dbObj.SignoffBy_PersonnelId;
            this.SourceId = dbObj.SourceId;
            this.SourceType = dbObj.SourceType;
            this.Status = dbObj.Status;
            this.SuspendDuration = dbObj.SuspendDuration;
            this.Type = dbObj.Type;
            this.WorkAssigned_PersonnelId = dbObj.WorkAssigned_PersonnelId;
            this.DeniedReason = dbObj.DeniedReason;
            this.DeniedDate = dbObj.DeniedDate;
            this.DeniedBy_PersonnelId = dbObj.DeniedBy_PersonnelId;
            this.DeniedComment = dbObj.DeniedComment;
            this.EmergencyWorkOrder = dbObj.EmergencyWorkOrder;
            this.CancelDate = dbObj.CancelDate;
            this.Category = dbObj.Category;
            this.RequestorName = dbObj.RequestorName;
            this.RequestorPhoneNumber = dbObj.RequestorPhoneNumber;
            this.RequestorEmail = dbObj.RequestorEmail;
            this.SchedInitDate = dbObj.SchedInitDate;
            this.PartsOnOrder = dbObj.PartsOnOrder;
            this.RootCauseCode = dbObj.RootCauseCode;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_WorkOrder dbObj = new b_WorkOrder();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_WorkOrder ToDatabaseObject()
        {
            b_WorkOrder dbObj = new b_WorkOrder();
            dbObj.ClientId = this.ClientId;
            dbObj.WorkOrderId = this.WorkOrderId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.ActionCode = this.ActionCode;
            dbObj.ActualDuration = this.ActualDuration;
            dbObj.ActualFinishDate = this.ActualFinishDate;
            dbObj.ActualLaborCosts = this.ActualLaborCosts;
            dbObj.ActualLaborHours = this.ActualLaborHours;
            dbObj.ActualMaterialCosts = this.ActualMaterialCosts;
            dbObj.ActualOutsideServiceCosts = this.ActualOutsideServiceCosts;
            dbObj.ActualStartDate = this.ActualStartDate;
            dbObj.ActualTotalCosts = this.ActualTotalCosts;
            dbObj.ApprovalRequired = this.ApprovalRequired;
            dbObj.ApproveBy_PersonnelId = this.ApproveBy_PersonnelId;
            dbObj.ApproveDate = this.ApproveDate;
            dbObj.CancelReason = this.CancelReason;
            dbObj.ChargeToId = this.ChargeToId;
            dbObj.ChargeType = this.ChargeType;
            dbObj.ChargeTo_Name = this.ChargeTo_Name;
            dbObj.CloseBy_PersonnelId = this.CloseBy_PersonnelId;
            dbObj.CloseDate = this.CloseDate;
            dbObj.CompleteAllTasks = this.CompleteAllTasks;
            dbObj.CompleteBy_PersonnelId = this.CompleteBy_PersonnelId;
            dbObj.CompleteComments = this.CompleteComments;
            dbObj.CompleteDate = this.CompleteDate;
            dbObj.Creator_PersonnelId = this.Creator_PersonnelId;
            dbObj.Crew = this.Crew;
            dbObj.Description = this.Description;
            dbObj.DownRequired = this.DownRequired;
            dbObj.EquipDown = this.EquipDown;
            dbObj.EquipDownDate = this.EquipDownDate;
            dbObj.EquipDownHours = this.EquipDownHours;
            dbObj.EquipUpDate = this.EquipUpDate;
            dbObj.EstimatedLaborCosts = this.EstimatedLaborCosts;
            dbObj.EstimatedLaborHours = this.EstimatedLaborHours;
            dbObj.EstimatedMaterialCosts = this.EstimatedMaterialCosts;
            dbObj.EstimatedOutsideServiceCosts = this.EstimatedOutsideServiceCosts;
            dbObj.EstimatedPurchaseMaterialCosts = this.EstimatedPurchaseMaterialCosts;
            dbObj.EstimatedTotalCosts = this.EstimatedTotalCosts;
            dbObj.FailureCode = this.FailureCode;
            dbObj.JobPlan = this.JobPlan;
            dbObj.Labor_AccountId = this.Labor_AccountId;
            dbObj.Location = this.Location;
            dbObj.Material_AccountId = this.Material_AccountId;
            dbObj.MeterId = this.MeterId;
            dbObj.MeterReadingDone = this.MeterReadingDone;
            dbObj.MeterReadingDue = this.MeterReadingDue;
            dbObj.Other_AccountId = this.Other_AccountId;
            dbObj.Planner_PersonnelId = this.Planner_PersonnelId;
            dbObj.PrevMaintBatchId = this.PrevMaintBatchId;
            dbObj.PrimaveraProjectNumber = this.PrimaveraProjectNumber;
            dbObj.Printed = this.Printed;
            dbObj.Priority = this.Priority;
            dbObj.ProjectId = this.ProjectId;
            dbObj.ReasonforDown = this.ReasonforDown;
            dbObj.ReasonNotDone = this.ReasonNotDone;
            dbObj.ReleaseBy_PersonnelId = this.ReleaseBy_PersonnelId;
            dbObj.ReleaseDate = this.ReleaseDate;
            dbObj.RequestDate = this.RequestDate;
            dbObj.Requestor_PersonnelId = this.Requestor_PersonnelId;
            dbObj.RequestorLocation = this.RequestorLocation;
            dbObj.RequestorPhone = this.RequestorPhone;
            dbObj.RequiredDate = this.RequiredDate;
            dbObj.RIMEAssetCriticality = this.RIMEAssetCriticality;
            dbObj.RIMEPriority = this.RIMEPriority;
            dbObj.RIMEWorkClass = this.RIMEWorkClass;
            dbObj.ScheduledDuration = this.ScheduledDuration;
            dbObj.ScheduledFinishDate = this.ScheduledFinishDate;
            dbObj.ScheduledStartDate = this.ScheduledStartDate;
            dbObj.Scheduler_PersonnelId = this.Scheduler_PersonnelId;
            dbObj.Section = this.Section;
            dbObj.Shift = this.Shift;
            dbObj.SignOffDate = this.SignOffDate;
            dbObj.SignoffBy_PersonnelId = this.SignoffBy_PersonnelId;
            dbObj.SourceId = this.SourceId;
            dbObj.SourceType = this.SourceType;
            dbObj.Status = this.Status;
            dbObj.SuspendDuration = this.SuspendDuration;
            dbObj.Type = this.Type;
            dbObj.WorkAssigned_PersonnelId = this.WorkAssigned_PersonnelId;
            dbObj.DeniedReason = this.DeniedReason;
            dbObj.DeniedDate = this.DeniedDate;
            dbObj.DeniedBy_PersonnelId = this.DeniedBy_PersonnelId;
            dbObj.DeniedComment = this.DeniedComment;
            dbObj.EmergencyWorkOrder = this.EmergencyWorkOrder;
            dbObj.CancelDate = this.CancelDate;
            dbObj.Category = this.Category;
            dbObj.RequestorName = this.RequestorName;
            dbObj.RequestorPhoneNumber = this.RequestorPhoneNumber;
            dbObj.RequestorEmail = this.RequestorEmail;
            dbObj.SchedInitDate = this.SchedInitDate;
            dbObj.PartsOnOrder = this.PartsOnOrder;
            dbObj.RootCauseCode = this.RootCauseCode;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            WorkOrder_Create trans = new WorkOrder_Create();
            trans.WorkOrder = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.WorkOrder);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            WorkOrder_Retrieve trans = new WorkOrder_Retrieve();
            trans.WorkOrder = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.WorkOrder);
        }

        public void Update(DatabaseKey dbKey)
        {
            WorkOrder_Update trans = new WorkOrder_Update();
            trans.WorkOrder = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.WorkOrder);
        }

        public void Delete(DatabaseKey dbKey)
        {
            WorkOrder_Delete trans = new WorkOrder_Delete();
            trans.WorkOrder = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.WorkOrderId;
            AuditTargetSiteId = this.SiteId;
            AuditTargetAreaId = this.AreaId;
            AuditTargetDepartmentId = this.DepartmentId;
            AuditTargetStoreRoomId = this.StoreroomId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _WorkOrderId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private string _ClientLookupId;
        private string _ActionCode;
        private decimal _ActualDuration;
        private DateTime? _ActualFinishDate;
        private decimal _ActualLaborCosts;
        private decimal _ActualLaborHours;
        private decimal _ActualMaterialCosts;
        private decimal _ActualOutsideServiceCosts;
        private DateTime? _ActualStartDate;
        private decimal _ActualTotalCosts;
        private bool _ApprovalRequired;
        private long _ApproveBy_PersonnelId;
        private DateTime? _ApproveDate;
        private string _CancelReason;
        private long _ChargeToId;
        private string _ChargeType;
        private string _ChargeTo_Name;
        private long _CloseBy_PersonnelId;
        private DateTime? _CloseDate;
        private bool _CompleteAllTasks;
        private long _CompleteBy_PersonnelId;
        private string _CompleteComments;
        private DateTime? _CompleteDate;
        private long _Creator_PersonnelId;
        private string _Crew;
        private string _Description;
        private bool _DownRequired;
        private bool _EquipDown;
        private DateTime? _EquipDownDate;
        private decimal _EquipDownHours;
        private DateTime? _EquipUpDate;
        private decimal _EstimatedLaborCosts;
        private decimal _EstimatedLaborHours;
        private decimal _EstimatedMaterialCosts;
        private decimal _EstimatedOutsideServiceCosts;
        private decimal _EstimatedPurchaseMaterialCosts;
        private decimal _EstimatedTotalCosts;
        private string _FailureCode;
        private string _JobPlan;
        private long _Labor_AccountId;
        private string _Location;
        private long _Material_AccountId;
        private long _MeterId;
        private decimal _MeterReadingDone;
        private decimal _MeterReadingDue;
        private long _Other_AccountId;
        private long _Planner_PersonnelId;
        private long _PrevMaintBatchId;
        private int _PrimaveraProjectNumber;
        private int _Printed;
        private string _Priority;
        private long _ProjectId;
        private string _ReasonforDown;
        private string _ReasonNotDone;
        private long _ReleaseBy_PersonnelId;
        private DateTime? _ReleaseDate;
        private DateTime? _RequestDate;
        private long _Requestor_PersonnelId;
        private string _RequestorLocation;
        private string _RequestorPhone;
        private DateTime? _RequiredDate;
        private int _RIMEAssetCriticality;
        private int _RIMEPriority;
        private int _RIMEWorkClass;
        private decimal _ScheduledDuration;
        private DateTime? _ScheduledFinishDate;
        private DateTime? _ScheduledStartDate;
        private long _Scheduler_PersonnelId;
        private string _Section;
        private string _Shift;
        private DateTime? _SignOffDate;
        private long _SignoffBy_PersonnelId;
        private long _SourceId;
        private string _SourceType;
        private string _Status;
        private decimal _SuspendDuration;
        private string _Type;
        private long _WorkAssigned_PersonnelId;
        private string _DeniedReason;
        private DateTime? _DeniedDate;
        private long _DeniedBy_PersonnelId;
        private string _DeniedComment;
        private bool _EmergencyWorkOrder;
        private DateTime? _CancelDate;
        private string _Category;
        private string _RequestorName;
        private string _RequestorPhoneNumber;
        private string _RequestorEmail;
        private DateTime? _SchedInitDate;
        private int _PartsOnOrder;
        private string _RootCauseCode;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// WorkOrderId property
        /// </summary>
        [DataMember]
        public long WorkOrderId
        {
            get { return _WorkOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkOrderId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// ActionCode property
        /// </summary>
        [DataMember]
        public string ActionCode
        {
            get { return _ActionCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ActionCode); }
        }

        /// <summary>
        /// ActualDuration property
        /// </summary>
        [DataMember]
        public decimal ActualDuration
        {
            get { return _ActualDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ActualDuration); }
        }

        /// <summary>
        /// ActualFinishDate property
        /// </summary>
        [DataMember]
        public DateTime? ActualFinishDate
        {
            get { return _ActualFinishDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ActualFinishDate); }
        }

        /// <summary>
        /// ActualLaborCosts property
        /// </summary>
        [DataMember]
        public decimal ActualLaborCosts
        {
            get { return _ActualLaborCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ActualLaborCosts); }
        }

        /// <summary>
        /// ActualLaborHours property
        /// </summary>
        [DataMember]
        public decimal ActualLaborHours
        {
            get { return _ActualLaborHours; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ActualLaborHours); }
        }

        /// <summary>
        /// ActualMaterialCosts property
        /// </summary>
        [DataMember]
        public decimal ActualMaterialCosts
        {
            get { return _ActualMaterialCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ActualMaterialCosts); }
        }

        /// <summary>
        /// ActualOutsideServiceCosts property
        /// </summary>
        [DataMember]
        public decimal ActualOutsideServiceCosts
        {
            get { return _ActualOutsideServiceCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ActualOutsideServiceCosts); }
        }

        /// <summary>
        /// ActualStartDate property
        /// </summary>
        [DataMember]
        public DateTime? ActualStartDate
        {
            get { return _ActualStartDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ActualStartDate); }
        }

        /// <summary>
        /// ActualTotalCosts property
        /// </summary>
        [DataMember]
        public decimal ActualTotalCosts
        {
            get { return _ActualTotalCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ActualTotalCosts); }
        }

        /// <summary>
        /// ApprovalRequired property
        /// </summary>
        [DataMember]
        public bool ApprovalRequired
        {
            get { return _ApprovalRequired; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _ApprovalRequired); }
        }

        /// <summary>
        /// ApproveBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long ApproveBy_PersonnelId
        {
            get { return _ApproveBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ApproveBy_PersonnelId); }
        }

        /// <summary>
        /// ApproveDate property
        /// </summary>
        [DataMember]
        public DateTime? ApproveDate
        {
            get { return _ApproveDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ApproveDate); }
        }

        /// <summary>
        /// CancelReason property
        /// </summary>
        [DataMember]
        public string CancelReason
        {
            get { return _CancelReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CancelReason); }
        }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        [DataMember]
        public long ChargeToId
        {
            get { return _ChargeToId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId); }
        }

        /// <summary>
        /// ChargeType property
        /// </summary>
        [DataMember]
        public string ChargeType
        {
            get { return _ChargeType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType); }
        }

        /// <summary>
        /// ChargeTo_Name property
        /// </summary>
        [DataMember]
        public string ChargeTo_Name
        {
            get { return _ChargeTo_Name; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeTo_Name); }
        }

        /// <summary>
        /// CloseBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CloseBy_PersonnelId
        {
            get { return _CloseBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CloseBy_PersonnelId); }
        }

        /// <summary>
        /// CloseDate property
        /// </summary>
        [DataMember]
        public DateTime? CloseDate
        {
            get { return _CloseDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CloseDate); }
        }

        /// <summary>
        /// CompleteAllTasks property
        /// </summary>
        [DataMember]
        public bool CompleteAllTasks
        {
            get { return _CompleteAllTasks; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteAllTasks); }
        }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CompleteBy_PersonnelId
        {
            get { return _CompleteBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteBy_PersonnelId); }
        }

        /// <summary>
        /// CompleteComments property
        /// </summary>
        [DataMember]
        public string CompleteComments
        {
            get { return _CompleteComments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteComments); }
        }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        [DataMember]
        public DateTime? CompleteDate
        {
            get { return _CompleteDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteDate); }
        }

        /// <summary>
        /// Creator_PersonnelId property
        /// </summary>
        [DataMember]
        public long Creator_PersonnelId
        {
            get { return _Creator_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Creator_PersonnelId); }
        }

        /// <summary>
        /// Crew property
        /// </summary>
        [DataMember]
        public string Crew
        {
            get { return _Crew; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Crew); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// DownRequired property
        /// </summary>
        [DataMember]
        public bool DownRequired
        {
            get { return _DownRequired; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DownRequired); }
        }

        /// <summary>
        /// EquipDown property
        /// </summary>
        [DataMember]
        public bool EquipDown
        {
            get { return _EquipDown; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _EquipDown); }
        }

        /// <summary>
        /// EquipDownDate property
        /// </summary>
        [DataMember]
        public DateTime? EquipDownDate
        {
            get { return _EquipDownDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _EquipDownDate); }
        }

        /// <summary>
        /// EquipDownHours property
        /// </summary>
        [DataMember]
        public decimal EquipDownHours
        {
            get { return _EquipDownHours; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EquipDownHours); }
        }

        /// <summary>
        /// EquipUpDate property
        /// </summary>
        [DataMember]
        public DateTime? EquipUpDate
        {
            get { return _EquipUpDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _EquipUpDate); }
        }

        /// <summary>
        /// EstimatedLaborCosts property
        /// </summary>
        [DataMember]
        public decimal EstimatedLaborCosts
        {
            get { return _EstimatedLaborCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EstimatedLaborCosts); }
        }

        /// <summary>
        /// EstimatedLaborHours property
        /// </summary>
        [DataMember]
        public decimal EstimatedLaborHours
        {
            get { return _EstimatedLaborHours; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EstimatedLaborHours); }
        }

        /// <summary>
        /// EstimatedMaterialCosts property
        /// </summary>
        [DataMember]
        public decimal EstimatedMaterialCosts
        {
            get { return _EstimatedMaterialCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EstimatedMaterialCosts); }
        }

        /// <summary>
        /// EstimatedOutsideServiceCosts property
        /// </summary>
        [DataMember]
        public decimal EstimatedOutsideServiceCosts
        {
            get { return _EstimatedOutsideServiceCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EstimatedOutsideServiceCosts); }
        }

        /// <summary>
        /// EstimatedPurchaseMaterialCosts property
        /// </summary>
        [DataMember]
        public decimal EstimatedPurchaseMaterialCosts
        {
            get { return _EstimatedPurchaseMaterialCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EstimatedPurchaseMaterialCosts); }
        }

        /// <summary>
        /// EstimatedTotalCosts property
        /// </summary>
        [DataMember]
        public decimal EstimatedTotalCosts
        {
            get { return _EstimatedTotalCosts; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EstimatedTotalCosts); }
        }

        /// <summary>
        /// FailureCode property
        /// </summary>
        [DataMember]
        public string FailureCode
        {
            get { return _FailureCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FailureCode); }
        }

        /// <summary>
        /// JobPlan property
        /// </summary>
        [DataMember]
        public string JobPlan
        {
            get { return _JobPlan; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _JobPlan); }
        }

        /// <summary>
        /// Labor_AccountId property
        /// </summary>
        [DataMember]
        public long Labor_AccountId
        {
            get { return _Labor_AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Labor_AccountId); }
        }

        /// <summary>
        /// Location property
        /// </summary>
        [DataMember]
        public string Location
        {
            get { return _Location; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Location); }
        }

        /// <summary>
        /// Material_AccountId property
        /// </summary>
        [DataMember]
        public long Material_AccountId
        {
            get { return _Material_AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Material_AccountId); }
        }

        /// <summary>
        /// MeterId property
        /// </summary>
        [DataMember]
        public long MeterId
        {
            get { return _MeterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MeterId); }
        }

        /// <summary>
        /// MeterReadingDone property
        /// </summary>
        [DataMember]
        public decimal MeterReadingDone
        {
            get { return _MeterReadingDone; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterReadingDone); }
        }

        /// <summary>
        /// MeterReadingDue property
        /// </summary>
        [DataMember]
        public decimal MeterReadingDue
        {
            get { return _MeterReadingDue; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterReadingDue); }
        }

        /// <summary>
        /// Other_AccountId property
        /// </summary>
        [DataMember]
        public long Other_AccountId
        {
            get { return _Other_AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Other_AccountId); }
        }

        /// <summary>
        /// Planner_PersonnelId property
        /// </summary>
        [DataMember]
        public long Planner_PersonnelId
        {
            get { return _Planner_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Planner_PersonnelId); }
        }

        /// <summary>
        /// PrevMaintBatchId property
        /// </summary>
        [DataMember]
        public long PrevMaintBatchId
        {
            get { return _PrevMaintBatchId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintBatchId); }
        }

        /// <summary>
        /// PrimaveraProjectNumber property
        /// </summary>
        [DataMember]
        public int PrimaveraProjectNumber
        {
            get { return _PrimaveraProjectNumber; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _PrimaveraProjectNumber); }
        }

        /// <summary>
        /// Printed property
        /// </summary>
        [DataMember]
        public int Printed
        {
            get { return _Printed; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Printed); }
        }

        /// <summary>
        /// Priority property
        /// </summary>
        [DataMember]
        public string Priority
        {
            get { return _Priority; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Priority); }
        }

        /// <summary>
        /// ProjectId property
        /// </summary>
        [DataMember]
        public long ProjectId
        {
            get { return _ProjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProjectId); }
        }

        /// <summary>
        /// ReasonforDown property
        /// </summary>
        [DataMember]
        public string ReasonforDown
        {
            get { return _ReasonforDown; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReasonforDown); }
        }

        /// <summary>
        /// ReasonNotDone property
        /// </summary>
        [DataMember]
        public string ReasonNotDone
        {
            get { return _ReasonNotDone; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReasonNotDone); }
        }

        /// <summary>
        /// ReleaseBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long ReleaseBy_PersonnelId
        {
            get { return _ReleaseBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReleaseBy_PersonnelId); }
        }

        /// <summary>
        /// ReleaseDate property
        /// </summary>
        [DataMember]
        public DateTime? ReleaseDate
        {
            get { return _ReleaseDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReleaseDate); }
        }

        /// <summary>
        /// RequestDate property
        /// </summary>
        [DataMember]
        public DateTime? RequestDate
        {
            get { return _RequestDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _RequestDate); }
        }

        /// <summary>
        /// Requestor_PersonnelId property
        /// </summary>
        [DataMember]
        public long Requestor_PersonnelId
        {
            get { return _Requestor_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Requestor_PersonnelId); }
        }

        /// <summary>
        /// RequestorLocation property
        /// </summary>
        [DataMember]
        public string RequestorLocation
        {
            get { return _RequestorLocation; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RequestorLocation); }
        }

        /// <summary>
        /// RequestorPhone property
        /// </summary>
        [DataMember]
        public string RequestorPhone
        {
            get { return _RequestorPhone; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RequestorPhone); }
        }

        /// <summary>
        /// RequiredDate property
        /// </summary>
        [DataMember]
        public DateTime? RequiredDate
        {
            get { return _RequiredDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _RequiredDate); }
        }

        /// <summary>
        /// RIMEAssetCriticality property
        /// </summary>
        [DataMember]
        public int RIMEAssetCriticality
        {
            get { return _RIMEAssetCriticality; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _RIMEAssetCriticality); }
        }

        /// <summary>
        /// RIMEPriority property
        /// </summary>
        [DataMember]
        public int RIMEPriority
        {
            get { return _RIMEPriority; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _RIMEPriority); }
        }

        /// <summary>
        /// RIMEWorkClass property
        /// </summary>
        [DataMember]
        public int RIMEWorkClass
        {
            get { return _RIMEWorkClass; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _RIMEWorkClass); }
        }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        [DataMember]
        public decimal ScheduledDuration
        {
            get { return _ScheduledDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledDuration); }
        }

        /// <summary>
        /// ScheduledFinishDate property
        /// </summary>
        [DataMember]
        public DateTime? ScheduledFinishDate
        {
            get { return _ScheduledFinishDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledFinishDate); }
        }

        /// <summary>
        /// ScheduledStartDate property
        /// </summary>
        [DataMember]
        public DateTime? ScheduledStartDate
        {
            get { return _ScheduledStartDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledStartDate); }
        }

        /// <summary>
        /// Scheduler_PersonnelId property
        /// </summary>
        [DataMember]
        public long Scheduler_PersonnelId
        {
            get { return _Scheduler_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Scheduler_PersonnelId); }
        }

        /// <summary>
        /// Section property
        /// </summary>
        [DataMember]
        public string Section
        {
            get { return _Section; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Section); }
        }

        /// <summary>
        /// Shift property
        /// </summary>
        [DataMember]
        public string Shift
        {
            get { return _Shift; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Shift); }
        }

        /// <summary>
        /// SignOffDate property
        /// </summary>
        [DataMember]
        public DateTime? SignOffDate
        {
            get { return _SignOffDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _SignOffDate); }
        }

        /// <summary>
        /// SignoffBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long SignoffBy_PersonnelId
        {
            get { return _SignoffBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SignoffBy_PersonnelId); }
        }

        /// <summary>
        /// SourceId property
        /// </summary>
        [DataMember]
        public long SourceId
        {
            get { return _SourceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SourceId); }
        }

        /// <summary>
        /// SourceType property
        /// </summary>
        [DataMember]
        public string SourceType
        {
            get { return _SourceType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SourceType); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// SuspendDuration property
        /// </summary>
        [DataMember]
        public decimal SuspendDuration
        {
            get { return _SuspendDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _SuspendDuration); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// WorkAssigned_PersonnelId property
        /// </summary>
        [DataMember]
        public long WorkAssigned_PersonnelId
        {
            get { return _WorkAssigned_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkAssigned_PersonnelId); }
        }

        /// <summary>
        /// DeniedReason property
        /// </summary>
        [DataMember]
        public string DeniedReason
        {
            get { return _DeniedReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _DeniedReason); }
        }

        /// <summary>
        /// DeniedDate property
        /// </summary>
        [DataMember]
        public DateTime? DeniedDate
        {
            get { return _DeniedDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _DeniedDate); }
        }

        /// <summary>
        /// DeniedBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long DeniedBy_PersonnelId
        {
            get { return _DeniedBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DeniedBy_PersonnelId); }
        }

        /// <summary>
        /// DeniedComment property
        /// </summary>
        [DataMember]
        public string DeniedComment
        {
            get { return _DeniedComment; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _DeniedComment); }
        }

        /// <summary>
        /// EmergencyWorkOrder property
        /// </summary>
        [DataMember]
        public bool EmergencyWorkOrder
        {
            get { return _EmergencyWorkOrder; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _EmergencyWorkOrder); }
        }

        /// <summary>
        /// CancelDate property
        /// </summary>
        [DataMember]
        public DateTime? CancelDate
        {
            get { return _CancelDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CancelDate); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// RequestorName property
        /// </summary>
        [DataMember]
        public string RequestorName
        {
            get { return _RequestorName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RequestorName); }
        }

        /// <summary>
        /// RequestorPhoneNumber property
        /// </summary>
        [DataMember]
        public string RequestorPhoneNumber
        {
            get { return _RequestorPhoneNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RequestorPhoneNumber); }
        }

        /// <summary>
        /// RequestorEmail property
        /// </summary>
        [DataMember]
        public string RequestorEmail
        {
            get { return _RequestorEmail; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RequestorEmail); }
        }

        /// <summary>
        /// SchedInitDate property
        /// </summary>
        [DataMember]
        public DateTime? SchedInitDate
        {
            get { return _SchedInitDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _SchedInitDate); }
        }

        /// <summary>
        /// PartsOnOrder property
        /// </summary>
        [DataMember]
        public int PartsOnOrder
        {
            get { return _PartsOnOrder; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _PartsOnOrder); }
        }

        /// <summary>
        /// RootCauseCode property
        /// </summary>
        [DataMember]
        public string RootCauseCode
        {
            get { return _RootCauseCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RootCauseCode); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
