/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SanitationJobTask table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class SanitationJobTask : DataContractBase , IPermission
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SanitationJobTask()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_SanitationJobTask dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.SanitationJobTaskId = dbObj.SanitationJobTaskId;
            this.SanitationJobId = dbObj.SanitationJobId;
            this.SanitationMasterTaskId = dbObj.SanitationMasterTaskId;
            this.CancelReason = dbObj.CancelReason;
            this.CompleteBy_PersonnelId = dbObj.CompleteBy_PersonnelId;
            this.CompleteComments = dbObj.CompleteComments;
            this.CompleteDate = dbObj.CompleteDate;
            this.Description = dbObj.Description;
            this.Status = dbObj.Status;
            this.TaskId = dbObj.TaskId;
            this.RecordedValue = dbObj.RecordedValue;
            this.PerformTime = dbObj.PerformTime;
            this.SanOnDemandMasterTaskId = dbObj.SanOnDemandMasterTaskId;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_SanitationJobTask dbObj = new b_SanitationJobTask();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_SanitationJobTask ToDatabaseObject()
        {
            b_SanitationJobTask dbObj = new b_SanitationJobTask();
            dbObj.ClientId = this.ClientId;
            dbObj.SanitationJobTaskId = this.SanitationJobTaskId;
            dbObj.SanitationJobId = this.SanitationJobId;
            dbObj.SanitationMasterTaskId = this.SanitationMasterTaskId;
            dbObj.CancelReason = this.CancelReason;
            dbObj.CompleteBy_PersonnelId = this.CompleteBy_PersonnelId;
            dbObj.CompleteComments = this.CompleteComments;
            dbObj.CompleteDate = this.CompleteDate;
            dbObj.Description = this.Description;
            dbObj.Status = this.Status;
            dbObj.TaskId = this.TaskId;
            dbObj.RecordedValue = this.RecordedValue;
            dbObj.PerformTime = this.PerformTime;
            dbObj.SanOnDemandMasterTaskId = this.SanOnDemandMasterTaskId;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            SanitationJobTask_Create trans = new SanitationJobTask_Create();
            trans.SanitationJobTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.SanitationJobTask);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            SanitationJobTask_Retrieve trans = new SanitationJobTask_Retrieve();
            trans.SanitationJobTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SanitationJobTask);
        }

        public void Update(DatabaseKey dbKey) 
        {
            SanitationJobTask_Update trans = new SanitationJobTask_Update();
            trans.SanitationJobTask = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.SanitationJobTask);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            SanitationJobTask_Delete trans = new SanitationJobTask_Delete();
            trans.SanitationJobTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.SanitationJobTaskId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _SanitationJobTaskId;
        private long _SanitationJobId;
        private long _SanitationMasterTaskId;
        private string _CancelReason;
        private long _CompleteBy_PersonnelId;
        private string _CompleteComments;
        private DateTime? _CompleteDate;
        private string _Description;
        private string _Status;
        private string _TaskId;
        private string _RecordedValue;
        private string _PerformTime;
        private long _SanOnDemandMasterTaskId;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SanitationJobTaskId property
        /// </summary>
        [DataMember]
        public long SanitationJobTaskId
        {
            get { return _SanitationJobTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationJobTaskId); }
        }

        /// <summary>
        /// SanitationJobId property
        /// </summary>
        [DataMember]
        public long SanitationJobId
        {
            get { return _SanitationJobId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationJobId); }
        }

        /// <summary>
        /// SanitationMasterTaskId property
        /// </summary>
        [DataMember]
        public long SanitationMasterTaskId
        {
            get { return _SanitationMasterTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationMasterTaskId); }
        }

        /// <summary>
        /// CancelReason property
        /// </summary>
        [DataMember]
        public string CancelReason
        {
            get { return _CancelReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CancelReason); }
        }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CompleteBy_PersonnelId
        {
            get { return _CompleteBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteBy_PersonnelId); }
        }

        /// <summary>
        /// CompleteComments property
        /// </summary>
        [DataMember]
        public string CompleteComments
        {
            get { return _CompleteComments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteComments); }
        }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        [DataMember]
        public DateTime? CompleteDate
        {
            get { return _CompleteDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteDate); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// TaskId property
        /// </summary>
        [DataMember]
        public string TaskId
        {
            get { return _TaskId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TaskId); }
        }

        /// <summary>
        /// RecordedValue property
        /// </summary>
        [DataMember]
        public string RecordedValue
        {
            get { return _RecordedValue; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RecordedValue); }
        }

        /// <summary>
        /// PerformTime property
        /// </summary>
        [DataMember]
        public string PerformTime
        {
            get { return _PerformTime; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PerformTime); }
        }

        /// <summary>
        /// SanOnDemandMasterTaskId property
        /// </summary>
        [DataMember]
        public long SanOnDemandMasterTaskId
        {
            get { return _SanOnDemandMasterTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanOnDemandMasterTaskId); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }

        public long AreaId { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        public long DepartmentId { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        public long StoreroomId { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        #endregion


    }
}
