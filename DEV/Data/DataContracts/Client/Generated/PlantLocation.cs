/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using Database;
using Database.Business;
using System;
using System.Reflection;
using System.Runtime.Serialization;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PlantLocation table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PlantLocation : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PlantLocation()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PlantLocation dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.PlantLocationId = dbObj.PlantLocationId;
            this.SiteId = dbObj.SiteId;
            this.ParentId = dbObj.ParentId;
            this.InActiveFlag = dbObj.InActiveFlag;
            this.Description = dbObj.Description;
            this.AccountId = dbObj.AccountId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.LineId = dbObj.LineId;
            this.AllowMaintenance = dbObj.AllowMaintenance;
            this.AllowSanitation = dbObj.AllowSanitation;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_PlantLocation dbObj = new b_PlantLocation();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_PlantLocation ToDatabaseObject()
        {
            b_PlantLocation dbObj = new b_PlantLocation();
            dbObj.ClientId = this.ClientId;
            dbObj.PlantLocationId = this.PlantLocationId;
            dbObj.SiteId = this.SiteId;
            dbObj.ParentId = this.ParentId;
            dbObj.InActiveFlag = this.InActiveFlag;
            dbObj.Description = this.Description;
            dbObj.AccountId = this.AccountId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.LineId = this.LineId;
            dbObj.AllowMaintenance = this.AllowMaintenance;
            dbObj.AllowSanitation = this.AllowSanitation;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            PlantLocation_Create trans = new PlantLocation_Create();
            trans.PlantLocation = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PlantLocation);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            PlantLocation_Retrieve trans = new PlantLocation_Retrieve();
            trans.PlantLocation = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PlantLocation);
        }

        public void Update(DatabaseKey dbKey) 
        {
            PlantLocation_Update trans = new PlantLocation_Update();
            trans.PlantLocation = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PlantLocation);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            PlantLocation_Delete trans = new PlantLocation_Delete();
            trans.PlantLocation = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PlantLocationId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _PlantLocationId;
        private long _SiteId;
        private long _ParentId;
        private bool _InActiveFlag;
        private string _Description;
        private long _AccountId;
        private long _AreaId;
        private long _DepartmentId;
        private long _LineId;
        private bool _AllowMaintenance;
        private bool _AllowSanitation;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PlantLocationId property
        /// </summary>
        [DataMember]
        public long PlantLocationId
        {
            get { return _PlantLocationId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PlantLocationId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// ParentId property
        /// </summary>
        [DataMember]
        public long ParentId
        {
            get { return _ParentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ParentId); }
        }

        /// <summary>
        /// InActiveFlag property
        /// </summary>
        [DataMember]
        public bool InActiveFlag
        {
            get { return _InActiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InActiveFlag); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// AccountId property
        /// </summary>
        [DataMember]
        public long AccountId
        {
            get { return _AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AccountId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// LineId property
        /// </summary>
        [DataMember]
        public long LineId
        {
            get { return _LineId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _LineId); }
        }

        /// <summary>
        /// AllowMaintenance property
        /// </summary>
        [DataMember]
        public bool AllowMaintenance
        {
            get { return _AllowMaintenance; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _AllowMaintenance); }
        }

        /// <summary>
        /// AllowSanitation property
        /// </summary>
        [DataMember]
        public bool AllowSanitation
        {
            get { return _AllowSanitation; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _AllowSanitation); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
