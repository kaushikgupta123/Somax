/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the UserReportGridDefintion table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class UserReportGridDefintion : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserReportGridDefintion()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_UserReportGridDefintion dbObj)
        {
		            this.UserReportGridDefintionId = dbObj.UserReportGridDefintionId;
            this.ReportId = dbObj.ReportId;
            this.Sequence = dbObj.Sequence;
            this.Columns = dbObj.Columns;
            this.Heading = dbObj.Heading;
            this.Alignment = dbObj.Alignment;
            this.Display = dbObj.Display;
            this.Required = dbObj.Required;
            this.AvailableonFilter = dbObj.AvailableonFilter;
            this.IsGroupTotaled = dbObj.IsGroupTotaled;
            this.IsGrandTotal = dbObj.IsGrandTotal;
            this.LocalizeDate = dbObj.LocalizeDate;
            this.IsChildColumn = dbObj.IsChildColumn;
            this.Del = dbObj.Del;
            this.Filter = dbObj.Filter;
            this.NumofDecPlaces = dbObj.NumofDecPlaces;
            this.NumericFormat = dbObj.NumericFormat;
            this.FilterMethod = dbObj.FilterMethod;
            this.DateDisplay = dbObj.DateDisplay;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_UserReportGridDefintion dbObj = new b_UserReportGridDefintion();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_UserReportGridDefintion ToDatabaseObject()
        {
            b_UserReportGridDefintion dbObj = new b_UserReportGridDefintion();
            dbObj.UserReportGridDefintionId = this.UserReportGridDefintionId;
            dbObj.ReportId = this.ReportId;
            dbObj.Sequence = this.Sequence;
            dbObj.Columns = this.Columns;
            dbObj.Heading = this.Heading;
            dbObj.Alignment = this.Alignment;
            dbObj.Display = this.Display;
            dbObj.Required = this.Required;
            dbObj.AvailableonFilter = this.AvailableonFilter;
            dbObj.IsGroupTotaled = this.IsGroupTotaled;
            dbObj.IsGrandTotal = this.IsGrandTotal;
            dbObj.LocalizeDate = this.LocalizeDate;
            dbObj.IsChildColumn = this.IsChildColumn;
            dbObj.Del = this.Del;
            dbObj.Filter = this.Filter;
            dbObj.NumofDecPlaces = this.NumofDecPlaces;
            dbObj.NumericFormat = this.NumericFormat;
            dbObj.FilterMethod = this.FilterMethod;
            dbObj.DateDisplay = this.DateDisplay;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            UserReportGridDefintion_Create trans = new UserReportGridDefintion_Create();
            trans.UserReportGridDefintion = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.UserReportGridDefintion);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            UserReportGridDefintion_Retrieve trans = new UserReportGridDefintion_Retrieve();
            trans.UserReportGridDefintion = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.UserReportGridDefintion);
        }

        public void Update(DatabaseKey dbKey) 
        {
            UserReportGridDefintion_Update trans = new UserReportGridDefintion_Update();
            trans.UserReportGridDefintion = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.UserReportGridDefintion);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            UserReportGridDefintion_Delete trans = new UserReportGridDefintion_Delete();
            trans.UserReportGridDefintion = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.UserReportGridDefintionId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _UserReportGridDefintionId;
        private long _ReportId;
        private int _Sequence;
        private string _Columns;
        private string _Heading;
        private string _Alignment;
        private bool _Display;
        private bool _Required;
        private bool _AvailableonFilter;
        private bool _IsGroupTotaled;
        private bool _IsGrandTotal;
        private bool _LocalizeDate;
        private bool _IsChildColumn;
        private bool _Del;
        private string _Filter;
        private int _NumofDecPlaces;
        private string _NumericFormat;
        private string _FilterMethod;
        private bool _DateDisplay;
        #endregion
        
        #region Properties


        /// <summary>
        /// UserReportGridDefintionId property
        /// </summary>
        [DataMember]
        public long UserReportGridDefintionId
        {
            get { return _UserReportGridDefintionId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UserReportGridDefintionId); }
        }

        /// <summary>
        /// ReportId property
        /// </summary>
        [DataMember]
        public long ReportId
        {
            get { return _ReportId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReportId); }
        }

        /// <summary>
        /// Sequence property
        /// </summary>
        [DataMember]
        public int Sequence
        {
            get { return _Sequence; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Sequence); }
        }

        /// <summary>
        /// Columns property
        /// </summary>
        [DataMember]
        public string Columns
        {
            get { return _Columns; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Columns); }
        }

        /// <summary>
        /// Heading property
        /// </summary>
        [DataMember]
        public string Heading
        {
            get { return _Heading; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Heading); }
        }

        /// <summary>
        /// Alignment property
        /// </summary>
        [DataMember]
        public string Alignment
        {
            get { return _Alignment; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Alignment); }
        }

        /// <summary>
        /// Display property
        /// </summary>
        [DataMember]
        public bool Display
        {
            get { return _Display; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Display); }
        }

        /// <summary>
        /// Required property
        /// </summary>
        [DataMember]
        public bool Required
        {
            get { return _Required; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Required); }
        }

        /// <summary>
        /// AvailableonFilter property
        /// </summary>
        [DataMember]
        public bool AvailableonFilter
        {
            get { return _AvailableonFilter; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _AvailableonFilter); }
        }

        /// <summary>
        /// IsGroupTotaled property
        /// </summary>
        [DataMember]
        public bool IsGroupTotaled
        {
            get { return _IsGroupTotaled; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsGroupTotaled); }
        }

        /// <summary>
        /// IsGrandTotal property
        /// </summary>
        [DataMember]
        public bool IsGrandTotal
        {
            get { return _IsGrandTotal; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsGrandTotal); }
        }

        /// <summary>
        /// LocalizeDate property
        /// </summary>
        [DataMember]
        public bool LocalizeDate
        {
            get { return _LocalizeDate; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _LocalizeDate); }
        }

        /// <summary>
        /// IsChildColumn property
        /// </summary>
        [DataMember]
        public bool IsChildColumn
        {
            get { return _IsChildColumn; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsChildColumn); }
        }

        /// <summary>
        /// Del property
        /// </summary>
        [DataMember]
        public bool Del
        {
            get { return _Del; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Del); }
        }

        /// <summary>
        /// Filter property
        /// </summary>
        [DataMember]
        public string Filter
        {
            get { return _Filter; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Filter); }
        }

        /// <summary>
        /// NumofDecPlaces property
        /// </summary>
        [DataMember]
        public int NumofDecPlaces
        {
            get { return _NumofDecPlaces; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _NumofDecPlaces); }
        }

        /// <summary>
        /// NumericFormat property
        /// </summary>
        [DataMember]
        public string NumericFormat
        {
            get { return _NumericFormat; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _NumericFormat); }
        }

        /// <summary>
        /// FilterMethod property
        /// </summary>
        [DataMember]
        public string FilterMethod
        {
            get { return _FilterMethod; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FilterMethod); }
        }

        /// <summary>
        /// DateDisplay property
        /// </summary>
        [DataMember]
        public bool DateDisplay
        {
            get { return _DateDisplay; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DateDisplay); }
        }
        #endregion
		
		
    }
}
