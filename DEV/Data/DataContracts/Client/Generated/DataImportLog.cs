/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the DataImportLog table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class DataImportLog : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public DataImportLog()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_DataImportLog dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.DataImportLogId = dbObj.DataImportLogId;
            this.SiteId = dbObj.SiteId;
            this.RunBy_PersonnelId = dbObj.RunBy_PersonnelId;
            this.Type = dbObj.Type;
            this.SuccessfulTransactions = dbObj.SuccessfulTransactions;
            this.Filename = dbObj.Filename;
            this.RunDate = dbObj.RunDate;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_DataImportLog dbObj = new b_DataImportLog();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_DataImportLog ToDatabaseObject()
        {
            b_DataImportLog dbObj = new b_DataImportLog();
            dbObj.ClientId = this.ClientId;
            dbObj.DataImportLogId = this.DataImportLogId;
            dbObj.SiteId = this.SiteId;
            dbObj.RunBy_PersonnelId = this.RunBy_PersonnelId;
            dbObj.Type = this.Type;
            dbObj.SuccessfulTransactions = this.SuccessfulTransactions;
            dbObj.Filename = this.Filename;
            dbObj.RunDate = this.RunDate;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            DataImportLog_Create trans = new DataImportLog_Create();
            trans.DataImportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.DataImportLog);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            DataImportLog_Retrieve trans = new DataImportLog_Retrieve();
            trans.DataImportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.DataImportLog);
        }

        public void Update(DatabaseKey dbKey) 
        {
            DataImportLog_Update trans = new DataImportLog_Update();
            trans.DataImportLog = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.DataImportLog);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            DataImportLog_Delete trans = new DataImportLog_Delete();
            trans.DataImportLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.DataImportLogId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _DataImportLogId;
        private long _SiteId;
        private long _RunBy_PersonnelId;
        private string _Type;
        private int _SuccessfulTransactions;
        private string _Filename;
        private DateTime? _RunDate;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// DataImportLogId property
        /// </summary>
        [DataMember]
        public long DataImportLogId
        {
            get { return _DataImportLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DataImportLogId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// RunBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long RunBy_PersonnelId
        {
            get { return _RunBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _RunBy_PersonnelId); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// SuccessfulTransactions property
        /// </summary>
        [DataMember]
        public int SuccessfulTransactions
        {
            get { return _SuccessfulTransactions; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _SuccessfulTransactions); }
        }

        /// <summary>
        /// Filename property
        /// </summary>
        [DataMember]
        public string Filename
        {
            get { return _Filename; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Filename); }
        }

        /// <summary>
        /// RunDate property
        /// </summary>
        [DataMember]
        public DateTime? RunDate
        {
            get { return _RunDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _RunDate); }
        }
        #endregion
		
		
    }
}
