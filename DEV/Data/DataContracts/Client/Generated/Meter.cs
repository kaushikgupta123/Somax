/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Meter table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Meter : DataContractBase, IPermission
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Meter()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Meter dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.MeterId = dbObj.MeterId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.Name = dbObj.Name;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.ReadingCurrent = dbObj.ReadingCurrent;
            this.ReadingDate = dbObj.ReadingDate;
            this.ReadingLife = dbObj.ReadingLife;
            this.ReadingMax = dbObj.ReadingMax;
            this.ReadingUnits = dbObj.ReadingUnits;
            this.ReadingBy = dbObj.ReadingBy;
            this.Type = dbObj.Type;
            this.IoTDeviceId = dbObj.IoTDeviceId;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_Meter dbObj = new b_Meter();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_Meter ToDatabaseObject()
        {
            b_Meter dbObj = new b_Meter();
            dbObj.ClientId = this.ClientId;
            dbObj.MeterId = this.MeterId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.Name = this.Name;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.ReadingCurrent = this.ReadingCurrent;
            dbObj.ReadingDate = this.ReadingDate;
            dbObj.ReadingLife = this.ReadingLife;
            dbObj.ReadingMax = this.ReadingMax;
            dbObj.ReadingUnits = this.ReadingUnits;
            dbObj.ReadingBy = this.ReadingBy;
            dbObj.Type = this.Type;
            dbObj.IoTDeviceId = this.IoTDeviceId;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            Meter_Create trans = new Meter_Create();
            trans.Meter = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Meter);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            Meter_Retrieve trans = new Meter_Retrieve();
            trans.Meter = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Meter);
        }

        public void Update(DatabaseKey dbKey)
        {
            Meter_Update trans = new Meter_Update();
            trans.Meter = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Meter);
        }

        public void Delete(DatabaseKey dbKey)
        {
            Meter_Delete trans = new Meter_Delete();
            trans.Meter = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.MeterId;
            AuditTargetSiteId = this.SiteId;
            AuditTargetAreaId = this.AreaId;
            AuditTargetDepartmentId = this.DepartmentId;
            AuditTargetStoreRoomId = this.StoreroomId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _MeterId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private string _ClientLookupId;
        private string _Name;
        private bool _InactiveFlag;
        private decimal _ReadingCurrent;
        private DateTime? _ReadingDate;
        private decimal _ReadingLife;
        private decimal _ReadingMax;
        private string _ReadingUnits;
        private long _ReadingBy;
        private string _Type;
        private long _IoTDeviceId;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// MeterId property
        /// </summary>
        [DataMember]
        public long MeterId
        {
            get { return _MeterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MeterId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// Name property
        /// </summary>
        [DataMember]
        public string Name
        {
            get { return _Name; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Name); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// ReadingCurrent property
        /// </summary>
        [DataMember]
        public decimal ReadingCurrent
        {
            get { return _ReadingCurrent; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingCurrent); }
        }

        /// <summary>
        /// ReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? ReadingDate
        {
            get { return _ReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingDate); }
        }

        /// <summary>
        /// ReadingLife property
        /// </summary>
        [DataMember]
        public decimal ReadingLife
        {
            get { return _ReadingLife; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingLife); }
        }

        /// <summary>
        /// ReadingMax property
        /// </summary>
        [DataMember]
        public decimal ReadingMax
        {
            get { return _ReadingMax; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingMax); }
        }

        /// <summary>
        /// ReadingUnits property
        /// </summary>
        [DataMember]
        public string ReadingUnits
        {
            get { return _ReadingUnits; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingUnits); }
        }

        /// <summary>
        /// ReadingBy property
        /// </summary>
        [DataMember]
        public long ReadingBy
        {
            get { return _ReadingBy; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingBy); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// IoTDeviceId property
        /// </summary>
        [DataMember]
        public long IoTDeviceId
        {
            get { return _IoTDeviceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _IoTDeviceId); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
