/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Data.Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Menu table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Menu : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Menu()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Menu dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.MenuId = dbObj.MenuId;
            this.MenuName = dbObj.MenuName;
            this.ParentMenuId = dbObj.ParentMenuId;
            this.MenuLevel = dbObj.MenuLevel;
            this.MenuUrl = dbObj.MenuUrl;
            this.MenuPosition = dbObj.MenuPosition;
            this.ToolTip = dbObj.ToolTip;
            this.CssClass = dbObj.CssClass;
            this.MenuType = dbObj.MenuType;
            this.InactiveFlag = dbObj.InactiveFlag;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_Menu dbObj = new b_Menu();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_Menu ToDatabaseObject()
        {
            b_Menu dbObj = new b_Menu();
            dbObj.ClientId = this.ClientId;
            dbObj.MenuId = this.MenuId;
            dbObj.MenuName = this.MenuName;
            dbObj.ParentMenuId = this.ParentMenuId;
            dbObj.MenuLevel = this.MenuLevel;
            dbObj.MenuUrl = this.MenuUrl;
            dbObj.MenuPosition = this.MenuPosition;
            dbObj.ToolTip = this.ToolTip;
            dbObj.CssClass = this.CssClass;
            dbObj.MenuType = this.MenuType;
            dbObj.InactiveFlag = this.InactiveFlag;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            Menu_Create trans = new Menu_Create();
            trans.Menu = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Menu);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            Menu_Retrieve trans = new Menu_Retrieve();
            trans.Menu = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Menu);
        }

        public void Update(DatabaseKey dbKey) 
        {
            Menu_Update trans = new Menu_Update();
            trans.Menu = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Menu);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            Menu_Delete trans = new Menu_Delete();
            trans.Menu = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.MenuId;
            return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _MenuId;
        private string _MenuName;
        private long _ParentMenuId;
        private long _MenuLevel;
        private string _MenuUrl;
        private int _MenuPosition;
        private string _ToolTip;
        private string _CssClass;
        private string _MenuType;
        private bool _InactiveFlag;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// MenuId property
        /// </summary>
        [DataMember]
        public long MenuId
        {
            get { return _MenuId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MenuId); }
        }

        /// <summary>
        /// MenuName property
        /// </summary>
        [DataMember]
        public string MenuName
        {
            get { return _MenuName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _MenuName); }
        }

        /// <summary>
        /// ParentMenuId property
        /// </summary>
        [DataMember]
        public long ParentMenuId
        {
            get { return _ParentMenuId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ParentMenuId); }
        }

        /// <summary>
        /// MenuLevel property
        /// </summary>
        [DataMember]
        public long MenuLevel
        {
            get { return _MenuLevel; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MenuLevel); }
        }

        /// <summary>
        /// MenuUrl property
        /// </summary>
        [DataMember]
        public string MenuUrl
        {
            get { return _MenuUrl; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _MenuUrl); }
        }

        /// <summary>
        /// MenuPosition property
        /// </summary>
        [DataMember]
        public int MenuPosition
        {
            get { return _MenuPosition; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _MenuPosition); }
        }

        /// <summary>
        /// ToolTip property
        /// </summary>
        [DataMember]
        public string ToolTip
        {
            get { return _ToolTip; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ToolTip); }
        }

        /// <summary>
        /// CssClass property
        /// </summary>
        [DataMember]
        public string CssClass
        {
            get { return _CssClass; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CssClass); }
        }

        /// <summary>
        /// MenuType property
        /// </summary>
        [DataMember]
        public string MenuType
        {
            get { return _MenuType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _MenuType); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }
        #endregion
		
		
    }
}
