/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the FleetMeterReading table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class FleetMeterReading : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public FleetMeterReading()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_FleetMeterReading dbObj)
        {
		            this.FleetMeterReadingId = dbObj.FleetMeterReadingId;
            this.ClientId = dbObj.ClientId;
            this.EquipmentId = dbObj.EquipmentId;
            this.Meter2Indicator = dbObj.Meter2Indicator;
            this.Reading = dbObj.Reading;
            this.ReadingDate = dbObj.ReadingDate;
            this.SourceType = dbObj.SourceType;
            this.SourceId = dbObj.SourceId;
            this.Void = dbObj.Void;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_FleetMeterReading dbObj = new b_FleetMeterReading();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_FleetMeterReading ToDatabaseObject()
        {
            b_FleetMeterReading dbObj = new b_FleetMeterReading();
            dbObj.FleetMeterReadingId = this.FleetMeterReadingId;
            dbObj.ClientId = this.ClientId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.Meter2Indicator = this.Meter2Indicator;
            dbObj.Reading = this.Reading;
            dbObj.ReadingDate = this.ReadingDate;
            dbObj.SourceType = this.SourceType;
            dbObj.SourceId = this.SourceId;
            dbObj.Void = this.Void;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            FleetMeterReading_Create trans = new FleetMeterReading_Create();
            trans.FleetMeterReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.FleetMeterReading);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            FleetMeterReading_Retrieve trans = new FleetMeterReading_Retrieve();
            trans.FleetMeterReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.FleetMeterReading);
        }

        public void Update(DatabaseKey dbKey) 
        {
            FleetMeterReading_Update trans = new FleetMeterReading_Update();
            trans.FleetMeterReading = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.FleetMeterReading);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            FleetMeterReading_Delete trans = new FleetMeterReading_Delete();
            trans.FleetMeterReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.FleetMeterReadingId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _FleetMeterReadingId;
        private long _ClientId;
        private long _EquipmentId;
        private bool _Meter2Indicator;
        private decimal _Reading;
        private DateTime? _ReadingDate;
        private string _SourceType;
        private long _SourceId;
        private bool _Void;
        #endregion
        
        #region Properties


        /// <summary>
        /// FleetMeterReadingId property
        /// </summary>
        [DataMember]
        public long FleetMeterReadingId
        {
            get { return _FleetMeterReadingId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _FleetMeterReadingId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// Meter2Indicator property
        /// </summary>
        [DataMember]
        public bool Meter2Indicator
        {
            get { return _Meter2Indicator; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Meter2Indicator); }
        }

        /// <summary>
        /// Reading property
        /// </summary>
        [DataMember]
        public decimal Reading
        {
            get { return _Reading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Reading); }
        }

        /// <summary>
        /// ReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? ReadingDate
        {
            get { return _ReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingDate); }
        }

        /// <summary>
        /// SourceType property
        /// </summary>
        [DataMember]
        public string SourceType
        {
            get { return _SourceType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SourceType); }
        }

        /// <summary>
        /// SourceId property
        /// </summary>
        [DataMember]
        public long SourceId
        {
            get { return _SourceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SourceId); }
        }

        /// <summary>
        /// Void property
        /// </summary>
        [DataMember]
        public bool Void
        {
            get { return _Void; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Void); }
        }
        #endregion
		
		
    }
}
