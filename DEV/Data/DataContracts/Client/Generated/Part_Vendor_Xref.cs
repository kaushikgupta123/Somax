/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Part_Vendor_Xref table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Part_Vendor_Xref : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Part_Vendor_Xref()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Part_Vendor_Xref dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.Part_Vendor_XrefId = dbObj.Part_Vendor_XrefId;
            this.PartId = dbObj.PartId;
            this.VendorId = dbObj.VendorId;
            this.PreferredVendor = dbObj.PreferredVendor;
            this.CatalogNumber = dbObj.CatalogNumber;
            this.IssueOrder = dbObj.IssueOrder;
            this.Manufacturer = dbObj.Manufacturer;
            this.ManufacturerId = dbObj.ManufacturerId;
            this.OrderQuantity = dbObj.OrderQuantity;
            this.OrderUnit = dbObj.OrderUnit;
            this.Price = dbObj.Price;
            this.UOMConvRequired = dbObj.UOMConvRequired;
            this.Punchout = dbObj.Punchout;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_Part_Vendor_Xref dbObj = new b_Part_Vendor_Xref();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_Part_Vendor_Xref ToDatabaseObject()
        {
            b_Part_Vendor_Xref dbObj = new b_Part_Vendor_Xref();
            dbObj.ClientId = this.ClientId;
            dbObj.Part_Vendor_XrefId = this.Part_Vendor_XrefId;
            dbObj.PartId = this.PartId;
            dbObj.VendorId = this.VendorId;
            dbObj.PreferredVendor = this.PreferredVendor;
            dbObj.CatalogNumber = this.CatalogNumber;
            dbObj.IssueOrder = this.IssueOrder;
            dbObj.Manufacturer = this.Manufacturer;
            dbObj.ManufacturerId = this.ManufacturerId;
            dbObj.OrderQuantity = this.OrderQuantity;
            dbObj.OrderUnit = this.OrderUnit;
            dbObj.Price = this.Price;
            dbObj.UOMConvRequired = this.UOMConvRequired;
            dbObj.Punchout = this.Punchout;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            Part_Vendor_Xref_Create trans = new Part_Vendor_Xref_Create();
            trans.Part_Vendor_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Part_Vendor_Xref);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            Part_Vendor_Xref_Retrieve trans = new Part_Vendor_Xref_Retrieve();
            trans.Part_Vendor_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Part_Vendor_Xref);
        }

        public void Update(DatabaseKey dbKey)
        {
            Part_Vendor_Xref_Update trans = new Part_Vendor_Xref_Update();
            trans.Part_Vendor_Xref = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Part_Vendor_Xref);
        }

        public void Delete(DatabaseKey dbKey)
        {
            Part_Vendor_Xref_Delete trans = new Part_Vendor_Xref_Delete();
            trans.Part_Vendor_Xref = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.Part_Vendor_XrefId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _Part_Vendor_XrefId;
        private long _PartId;
        private long _VendorId;
        private bool _PreferredVendor;
        private string _CatalogNumber;
        private decimal _IssueOrder;
        private string _Manufacturer;
        private string _ManufacturerId;
        private int _OrderQuantity;
        private string _OrderUnit;
        private decimal _Price;
        private bool _UOMConvRequired;
        private bool _Punchout;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// Part_Vendor_XrefId property
        /// </summary>
        [DataMember]
        public long Part_Vendor_XrefId
        {
            get { return _Part_Vendor_XrefId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Part_Vendor_XrefId); }
        }

        /// <summary>
        /// PartId property
        /// </summary>
        [DataMember]
        public long PartId
        {
            get { return _PartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartId); }
        }

        /// <summary>
        /// VendorId property
        /// </summary>
        [DataMember]
        public long VendorId
        {
            get { return _VendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorId); }
        }

        /// <summary>
        /// PreferredVendor property
        /// </summary>
        [DataMember]
        public bool PreferredVendor
        {
            get { return _PreferredVendor; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PreferredVendor); }
        }

        /// <summary>
        /// CatalogNumber property
        /// </summary>
        [DataMember]
        public string CatalogNumber
        {
            get { return _CatalogNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CatalogNumber); }
        }

        /// <summary>
        /// IssueOrder property
        /// </summary>
        [DataMember]
        public decimal IssueOrder
        {
            get { return _IssueOrder; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _IssueOrder); }
        }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        [DataMember]
        public string Manufacturer
        {
            get { return _Manufacturer; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Manufacturer); }
        }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        [DataMember]
        public string ManufacturerId
        {
            get { return _ManufacturerId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ManufacturerId); }
        }

        /// <summary>
        /// OrderQuantity property
        /// </summary>
        [DataMember]
        public int OrderQuantity
        {
            get { return _OrderQuantity; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _OrderQuantity); }
        }

        /// <summary>
        /// OrderUnit property
        /// </summary>
        [DataMember]
        public string OrderUnit
        {
            get { return _OrderUnit; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _OrderUnit); }
        }

        /// <summary>
        /// Price property
        /// </summary>
        [DataMember]
        public decimal Price
        {
            get { return _Price; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Price); }
        }

        /// <summary>
        /// UOMConvRequired property
        /// </summary>
        [DataMember]
        public bool UOMConvRequired
        {
            get { return _UOMConvRequired; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _UOMConvRequired); }
        }

        /// <summary>
        /// Punchout property
        /// </summary>
        [DataMember]
        public bool Punchout
        {
            get { return _Punchout; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Punchout); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
