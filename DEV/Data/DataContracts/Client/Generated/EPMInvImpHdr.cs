/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the EPMInvImpHdr table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class EPMInvImpHdr : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public EPMInvImpHdr()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_EPMInvImpHdr dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.EPMInvImpHdrId = dbObj.EPMInvImpHdrId;
            this.SiteId = dbObj.SiteId;
            this.InvoiceNumber = dbObj.InvoiceNumber;
            this.InvoiceDate = dbObj.InvoiceDate;
            this.PONumber = dbObj.PONumber;
            this.PODate = dbObj.PODate;
            this.TotalInvoiceAmount = dbObj.TotalInvoiceAmount;
            this.Vendor = dbObj.Vendor;
            this.VendorName = dbObj.VendorName;
            this.ErrorCodes = dbObj.ErrorCodes;
            this.ErrorMessage = dbObj.ErrorMessage;
            this.LastProcess = dbObj.LastProcess;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_EPMInvImpHdr dbObj = new b_EPMInvImpHdr();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_EPMInvImpHdr ToDatabaseObject()
        {
            b_EPMInvImpHdr dbObj = new b_EPMInvImpHdr();
            dbObj.ClientId = this.ClientId;
            dbObj.EPMInvImpHdrId = this.EPMInvImpHdrId;
            dbObj.SiteId = this.SiteId;
            dbObj.InvoiceNumber = this.InvoiceNumber;
            dbObj.InvoiceDate = this.InvoiceDate;
            dbObj.PONumber = this.PONumber;
            dbObj.PODate = this.PODate;
            dbObj.TotalInvoiceAmount = this.TotalInvoiceAmount;
            dbObj.Vendor = this.Vendor;
            dbObj.VendorName = this.VendorName;
            dbObj.ErrorCodes = this.ErrorCodes;
            dbObj.ErrorMessage = this.ErrorMessage;
            dbObj.LastProcess = this.LastProcess;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            EPMInvImpHdr_Create trans = new EPMInvImpHdr_Create();
            trans.EPMInvImpHdr = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.EPMInvImpHdr);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            EPMInvImpHdr_Retrieve trans = new EPMInvImpHdr_Retrieve();
            trans.EPMInvImpHdr = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.EPMInvImpHdr);
        }

        public void Update(DatabaseKey dbKey) 
        {
            EPMInvImpHdr_Update trans = new EPMInvImpHdr_Update();
            trans.EPMInvImpHdr = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.EPMInvImpHdr);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            EPMInvImpHdr_Delete trans = new EPMInvImpHdr_Delete();
            trans.EPMInvImpHdr = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.EPMInvImpHdrId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _EPMInvImpHdrId;
        private long _SiteId;
        private string _InvoiceNumber;
        private DateTime? _InvoiceDate;
        private string _PONumber;
        private DateTime? _PODate;
        private decimal _TotalInvoiceAmount;
        private string _Vendor;
        private string _VendorName;
        private string _ErrorCodes;
        private string _ErrorMessage;
        private DateTime? _LastProcess;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// EPMInvImpHdrId property
        /// </summary>
        [DataMember]
        public long EPMInvImpHdrId
        {
            get { return _EPMInvImpHdrId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EPMInvImpHdrId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// InvoiceNumber property
        /// </summary>
        [DataMember]
        public string InvoiceNumber
        {
            get { return _InvoiceNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _InvoiceNumber); }
        }

        /// <summary>
        /// InvoiceDate property
        /// </summary>
        [DataMember]
        public DateTime? InvoiceDate
        {
            get { return _InvoiceDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _InvoiceDate); }
        }

        /// <summary>
        /// PONumber property
        /// </summary>
        [DataMember]
        public string PONumber
        {
            get { return _PONumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PONumber); }
        }

        /// <summary>
        /// PODate property
        /// </summary>
        [DataMember]
        public DateTime? PODate
        {
            get { return _PODate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PODate); }
        }

        /// <summary>
        /// TotalInvoiceAmount property
        /// </summary>
        [DataMember]
        public decimal TotalInvoiceAmount
        {
            get { return _TotalInvoiceAmount; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _TotalInvoiceAmount); }
        }

        /// <summary>
        /// Vendor property
        /// </summary>
        [DataMember]
        public string Vendor
        {
            get { return _Vendor; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Vendor); }
        }

        /// <summary>
        /// VendorName property
        /// </summary>
        [DataMember]
        public string VendorName
        {
            get { return _VendorName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VendorName); }
        }

        /// <summary>
        /// ErrorCodes property
        /// </summary>
        [DataMember]
        public string ErrorCodes
        {
            get { return _ErrorCodes; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorCodes); }
        }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        [DataMember]
        public string ErrorMessage
        {
            get { return _ErrorMessage; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorMessage); }
        }

        /// <summary>
        /// LastProcess property
        /// </summary>
        [DataMember]
        public DateTime? LastProcess
        {
            get { return _LastProcess; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastProcess); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
