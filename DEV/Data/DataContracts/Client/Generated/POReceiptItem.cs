/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2017 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the POReceiptItem table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class POReceiptItem : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public POReceiptItem()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_POReceiptItem dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.POReceiptItemId = dbObj.POReceiptItemId;
            this.POReceiptHeaderId = dbObj.POReceiptHeaderId;
            this.PurchaseOrderLineItemId = dbObj.PurchaseOrderLineItemId;
            this.AccountId = dbObj.AccountId;
            this.Invoiced = dbObj.Invoiced;
            this.QuantityReceived = dbObj.QuantityReceived;
            this.Reversed = dbObj.Reversed;
            this.ReversedBy_PersonnelId = dbObj.ReversedBy_PersonnelId;
            this.ReversedComments = dbObj.ReversedComments;
            this.ReversedDate = dbObj.ReversedDate;
            this.UnitCost = dbObj.UnitCost;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.PurchaseUOM = dbObj.PurchaseUOM;
            this.PurchaseCost = dbObj.PurchaseCost;
            this.UOMConversion = dbObj.UOMConversion;
            this.PurchaseQuantityReceived = dbObj.PurchaseQuantityReceived;
            this.ExReceiptTxnId = dbObj.ExReceiptTxnId;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_POReceiptItem dbObj = new b_POReceiptItem();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_POReceiptItem ToDatabaseObject()
        {
            b_POReceiptItem dbObj = new b_POReceiptItem();
            dbObj.ClientId = this.ClientId;
            dbObj.POReceiptItemId = this.POReceiptItemId;
            dbObj.POReceiptHeaderId = this.POReceiptHeaderId;
            dbObj.PurchaseOrderLineItemId = this.PurchaseOrderLineItemId;
            dbObj.AccountId = this.AccountId;
            dbObj.Invoiced = this.Invoiced;
            dbObj.QuantityReceived = this.QuantityReceived;
            dbObj.Reversed = this.Reversed;
            dbObj.ReversedBy_PersonnelId = this.ReversedBy_PersonnelId;
            dbObj.ReversedComments = this.ReversedComments;
            dbObj.ReversedDate = this.ReversedDate;
            dbObj.UnitCost = this.UnitCost;
            dbObj.UnitOfMeasure = this.UnitOfMeasure;
            dbObj.PurchaseUOM = this.PurchaseUOM;
            dbObj.PurchaseCost = this.PurchaseCost;
            dbObj.UOMConversion = this.UOMConversion;
            dbObj.PurchaseQuantityReceived = this.PurchaseQuantityReceived;
            dbObj.ExReceiptTxnId = this.ExReceiptTxnId;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            POReceiptItem_Create trans = new POReceiptItem_Create();
            trans.POReceiptItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.POReceiptItem);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            POReceiptItem_Retrieve trans = new POReceiptItem_Retrieve();
            trans.POReceiptItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.POReceiptItem);
        }
        public void Update(DatabaseKey dbKey) 
        {
            POReceiptItem_Update trans = new POReceiptItem_Update();
            trans.POReceiptItem = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.POReceiptItem);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            POReceiptItem_Delete trans = new POReceiptItem_Delete();
            trans.POReceiptItem = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.POReceiptItemId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _POReceiptItemId;
        private long _POReceiptHeaderId;
        private long _PurchaseOrderLineItemId;
        private long _AccountId;
        private bool _Invoiced;
        private decimal _QuantityReceived;
        private bool _Reversed;
        private long _ReversedBy_PersonnelId;
        private string _ReversedComments;
        private DateTime? _ReversedDate;
        private decimal _UnitCost;
        private string _UnitOfMeasure;
        private string _PurchaseUOM;
        private decimal _PurchaseCost;
        private decimal _UOMConversion;
        private decimal _PurchaseQuantityReceived;
        private long _ExReceiptTxnId;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// POReceiptItemId property
        /// </summary>
        [DataMember]
        public long POReceiptItemId
        {
            get { return _POReceiptItemId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _POReceiptItemId); }
        }

        /// <summary>
        /// POReceiptHeaderId property
        /// </summary>
        [DataMember]
        public long POReceiptHeaderId
        {
            get { return _POReceiptHeaderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _POReceiptHeaderId); }
        }

        /// <summary>
        /// PurchaseOrderLineItemId property
        /// </summary>
        [DataMember]
        public long PurchaseOrderLineItemId
        {
            get { return _PurchaseOrderLineItemId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseOrderLineItemId); }
        }

        /// <summary>
        /// AccountId property
        /// </summary>
        [DataMember]
        public long AccountId
        {
            get { return _AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AccountId); }
        }

        /// <summary>
        /// Invoiced property
        /// </summary>
        [DataMember]
        public bool Invoiced
        {
            get { return _Invoiced; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Invoiced); }
        }

        /// <summary>
        /// QuantityReceived property
        /// </summary>
        [DataMember]
        public decimal QuantityReceived
        {
            get { return _QuantityReceived; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _QuantityReceived); }
        }

        /// <summary>
        /// Reversed property
        /// </summary>
        [DataMember]
        public bool Reversed
        {
            get { return _Reversed; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Reversed); }
        }

        /// <summary>
        /// ReversedBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long ReversedBy_PersonnelId
        {
            get { return _ReversedBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReversedBy_PersonnelId); }
        }

        /// <summary>
        /// ReversedComments property
        /// </summary>
        [DataMember]
        public string ReversedComments
        {
            get { return _ReversedComments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReversedComments); }
        }

        /// <summary>
        /// ReversedDate property
        /// </summary>
        [DataMember]
        public DateTime? ReversedDate
        {
            get { return _ReversedDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReversedDate); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        [DataMember]
        public string UnitOfMeasure
        {
            get { return _UnitOfMeasure; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UnitOfMeasure); }
        }

        /// <summary>
        /// PurchaseUOM property
        /// </summary>
        [DataMember]
        public string PurchaseUOM
        {
            get { return _PurchaseUOM; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseUOM); }
        }

        /// <summary>
        /// PurchaseCost property
        /// </summary>
        [DataMember]
        public decimal PurchaseCost
        {
            get { return _PurchaseCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseCost); }
        }

        /// <summary>
        /// UOMConversion property
        /// </summary>
        [DataMember]
        public decimal UOMConversion
        {
            get { return _UOMConversion; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UOMConversion); }
        }

        /// <summary>
        /// PurchaseQuantityReceived property
        /// </summary>
        [DataMember]
        public decimal PurchaseQuantityReceived
        {
            get { return _PurchaseQuantityReceived; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _PurchaseQuantityReceived); }
        }

        /// <summary>
        /// ExReceiptTxnId property
        /// </summary>
        [DataMember]
        public long ExReceiptTxnId
        {
            get { return _ExReceiptTxnId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ExReceiptTxnId); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
