/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ShoppingCart table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ShoppingCart : DataContractBase, IPermission 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ShoppingCart()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ShoppingCart dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.ShoppingCartId = dbObj.ShoppingCartId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ApprovedBy_PersonnelId = dbObj.ApprovedBy_PersonnelId;
            this.Approved_Date = dbObj.Approved_Date;
            this.CreatedBy_PersonnelId = dbObj.CreatedBy_PersonnelId;
            this.Process_Comments = dbObj.Process_Comments;
            this.Reason = dbObj.Reason;
            this.Processed_Date = dbObj.Processed_Date;
            this.ProcessBy_PersonnelId = dbObj.ProcessBy_PersonnelId;
            this.Status = dbObj.Status;
            this.BuyerReview = dbObj.BuyerReview;
            this.Buyer_PersonnelId = dbObj.Buyer_PersonnelId;
            this.AutoPurch = dbObj.AutoPurch;
            this.ProcessLogId = dbObj.ProcessLogId;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_ShoppingCart dbObj = new b_ShoppingCart();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_ShoppingCart ToDatabaseObject()
        {
            b_ShoppingCart dbObj = new b_ShoppingCart();
            dbObj.ClientId = this.ClientId;
            dbObj.ShoppingCartId = this.ShoppingCartId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ApprovedBy_PersonnelId = this.ApprovedBy_PersonnelId;
            dbObj.Approved_Date = this.Approved_Date;
            dbObj.CreatedBy_PersonnelId = this.CreatedBy_PersonnelId;
            dbObj.Process_Comments = this.Process_Comments;
            dbObj.Reason = this.Reason;
            dbObj.Processed_Date = this.Processed_Date;
            dbObj.ProcessBy_PersonnelId = this.ProcessBy_PersonnelId;
            dbObj.Status = this.Status;
            dbObj.BuyerReview = this.BuyerReview;
            dbObj.Buyer_PersonnelId = this.Buyer_PersonnelId;
            dbObj.AutoPurch = this.AutoPurch;
            dbObj.ProcessLogId = this.ProcessLogId;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            ShoppingCart_Create trans = new ShoppingCart_Create();
            trans.ShoppingCart = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ShoppingCart);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            ShoppingCart_Retrieve trans = new ShoppingCart_Retrieve();
            trans.ShoppingCart = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ShoppingCart);
        }

        public void Update(DatabaseKey dbKey) 
        {
            ShoppingCart_Update trans = new ShoppingCart_Update();
            trans.ShoppingCart = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ShoppingCart);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            ShoppingCart_Delete trans = new ShoppingCart_Delete();
            trans.ShoppingCart = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ShoppingCartId;
			AuditTargetSiteId = this.SiteId;
			AuditTargetAreaId = this.AreaId;
			AuditTargetDepartmentId = this.DepartmentId;
			AuditTargetStoreRoomId = this.StoreroomId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _ShoppingCartId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private long _ApprovedBy_PersonnelId;
        private DateTime? _Approved_Date;
        private long _CreatedBy_PersonnelId;
        private string _Process_Comments;
        private string _Reason;
        private DateTime? _Processed_Date;
        private long _ProcessBy_PersonnelId;
        private string _Status;
        private bool _BuyerReview;
        private long _Buyer_PersonnelId;
        private bool _AutoPurch;
        private long _ProcessLogId;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// ShoppingCartId property
        /// </summary>
        [DataMember]
        public long ShoppingCartId
        {
            get { return _ShoppingCartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ShoppingCartId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ApprovedBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long ApprovedBy_PersonnelId
        {
            get { return _ApprovedBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ApprovedBy_PersonnelId); }
        }

        /// <summary>
        /// Approved_Date property
        /// </summary>
        [DataMember]
        public DateTime? Approved_Date
        {
            get { return _Approved_Date; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _Approved_Date); }
        }

        /// <summary>
        /// CreatedBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CreatedBy_PersonnelId
        {
            get { return _CreatedBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CreatedBy_PersonnelId); }
        }

        /// <summary>
        /// Process_Comments property
        /// </summary>
        [DataMember]
        public string Process_Comments
        {
            get { return _Process_Comments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Process_Comments); }
        }

        /// <summary>
        /// Reason property
        /// </summary>
        [DataMember]
        public string Reason
        {
            get { return _Reason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Reason); }
        }

        /// <summary>
        /// Processed_Date property
        /// </summary>
        [DataMember]
        public DateTime? Processed_Date
        {
            get { return _Processed_Date; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _Processed_Date); }
        }

        /// <summary>
        /// ProcessBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long ProcessBy_PersonnelId
        {
            get { return _ProcessBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProcessBy_PersonnelId); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// BuyerReview property
        /// </summary>
        [DataMember]
        public bool BuyerReview
        {
            get { return _BuyerReview; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _BuyerReview); }
        }

        /// <summary>
        /// Buyer_PersonnelId property
        /// </summary>
        [DataMember]
        public long Buyer_PersonnelId
        {
            get { return _Buyer_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Buyer_PersonnelId); }
        }

        /// <summary>
        /// AutoPurch property
        /// </summary>
        [DataMember]
        public bool AutoPurch
        {
            get { return _AutoPurch; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _AutoPurch); }
        }

        /// <summary>
        /// ProcessLogId property
        /// </summary>
        [DataMember]
        public long ProcessLogId
        {
            get { return _ProcessLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProcessLogId); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
