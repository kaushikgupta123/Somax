/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the FleetFluids table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class FleetFluids : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public FleetFluids()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_FleetFluids dbObj)
        {
		            this.FleetFluidsId = dbObj.FleetFluidsId;
            this.ClientId = dbObj.ClientId;
            this.EquipmentId = dbObj.EquipmentId;
            this.FuelQuality = dbObj.FuelQuality;
            this.FuelType = dbObj.FuelType;
            this.FuelTankCapacity1 = dbObj.FuelTankCapacity1;
            this.FuelTankCapacity2 = dbObj.FuelTankCapacity2;
            this.EPACity = dbObj.EPACity;
            this.EPAHighway = dbObj.EPAHighway;
            this.EPACombined = dbObj.EPACombined;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_FleetFluids dbObj = new b_FleetFluids();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_FleetFluids ToDatabaseObject()
        {
            b_FleetFluids dbObj = new b_FleetFluids();
            dbObj.FleetFluidsId = this.FleetFluidsId;
            dbObj.ClientId = this.ClientId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.FuelQuality = this.FuelQuality;
            dbObj.FuelType = this.FuelType;
            dbObj.FuelTankCapacity1 = this.FuelTankCapacity1;
            dbObj.FuelTankCapacity2 = this.FuelTankCapacity2;
            dbObj.EPACity = this.EPACity;
            dbObj.EPAHighway = this.EPAHighway;
            dbObj.EPACombined = this.EPACombined;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            FleetFluids_Create trans = new FleetFluids_Create();
            trans.FleetFluids = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.FleetFluids);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            FleetFluids_Retrieve trans = new FleetFluids_Retrieve();
            trans.FleetFluids = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.FleetFluids);
        }

        public void Update(DatabaseKey dbKey) 
        {
            FleetFluids_Update trans = new FleetFluids_Update();
            trans.FleetFluids = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.FleetFluids);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            FleetFluids_Delete trans = new FleetFluids_Delete();
            trans.FleetFluids = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.FleetFluidsId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _FleetFluidsId;
        private long _ClientId;
        private long _EquipmentId;
        private string _FuelQuality;
        private string _FuelType;
        private decimal _FuelTankCapacity1;
        private decimal _FuelTankCapacity2;
        private decimal _EPACity;
        private decimal _EPAHighway;
        private decimal _EPACombined;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// FleetFluidsId property
        /// </summary>
        [DataMember]
        public long FleetFluidsId
        {
            get { return _FleetFluidsId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _FleetFluidsId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// FuelQuality property
        /// </summary>
        [DataMember]
        public string FuelQuality
        {
            get { return _FuelQuality; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FuelQuality); }
        }

        /// <summary>
        /// FuelType property
        /// </summary>
        [DataMember]
        public string FuelType
        {
            get { return _FuelType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FuelType); }
        }

        /// <summary>
        /// FuelTankCapacity1 property
        /// </summary>
        [DataMember]
        public decimal FuelTankCapacity1
        {
            get { return _FuelTankCapacity1; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _FuelTankCapacity1); }
        }

        /// <summary>
        /// FuelTankCapacity2 property
        /// </summary>
        [DataMember]
        public decimal FuelTankCapacity2
        {
            get { return _FuelTankCapacity2; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _FuelTankCapacity2); }
        }

        /// <summary>
        /// EPACity property
        /// </summary>
        [DataMember]
        public decimal EPACity
        {
            get { return _EPACity; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EPACity); }
        }

        /// <summary>
        /// EPAHighway property
        /// </summary>
        [DataMember]
        public decimal EPAHighway
        {
            get { return _EPAHighway; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EPAHighway); }
        }

        /// <summary>
        /// EPACombined property
        /// </summary>
        [DataMember]
        public decimal EPACombined
        {
            get { return _EPACombined; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _EPACombined); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
