/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Equipment table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Equipment : DataContractBase, IPermission
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Equipment()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Equipment dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.EquipmentId = dbObj.EquipmentId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.AcquiredCost = dbObj.AcquiredCost;
            this.AcquiredDate = dbObj.AcquiredDate;
            this.BIMIdentifier = dbObj.BIMIdentifier;
            this.BookValue = dbObj.BookValue;
            this.BusinessGroup = dbObj.BusinessGroup;
            this.CatalogNumber = dbObj.CatalogNumber;
            this.Category = dbObj.Category;
            this.CostCenter = dbObj.CostCenter;
            this.DeprCode = dbObj.DeprCode;
            this.DeprLifeToDate = dbObj.DeprLifeToDate;
            this.DeprPercent = dbObj.DeprPercent;
            this.DeprYearToDate = dbObj.DeprYearToDate;
            this.ElectricalParent = dbObj.ElectricalParent;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.CriticalFlag = dbObj.CriticalFlag;
            this.InstallDate = dbObj.InstallDate;
            this.Labor_AccountId = dbObj.Labor_AccountId;
            this.LifeinMonths = dbObj.LifeinMonths;
            this.LifeinYears = dbObj.LifeinYears;
            this.Location = dbObj.Location;
            this.LocationId = dbObj.LocationId;
            this.Maint_VendorId = dbObj.Maint_VendorId;
            this.Maint_WarrantyDesc = dbObj.Maint_WarrantyDesc;
            this.Maint_WarrantyExpire = dbObj.Maint_WarrantyExpire;
            this.Make = dbObj.Make;
            this.Material_AccountId = dbObj.Material_AccountId;
            this.Model = dbObj.Model;
            this.Name = dbObj.Name;
            this.NoCostRollUp = dbObj.NoCostRollUp;
            this.NoPartXRef = dbObj.NoPartXRef;
            this.OriginalValue = dbObj.OriginalValue;
            this.OutofService = dbObj.OutofService;
            this.ParentId = dbObj.ParentId;
            this.PartId = dbObj.PartId;
            this.Purch_VendorId = dbObj.Purch_VendorId;
            this.Purch_WarrantyDesc = dbObj.Purch_WarrantyDesc;
            this.Purch_WarrantyExpire = dbObj.Purch_WarrantyExpire;
            this.RIMEClass = dbObj.RIMEClass;
            this.SalvageValue = dbObj.SalvageValue;
            this.SerialNumber = dbObj.SerialNumber;
            this.Size = dbObj.Size;
            this.SizeUnits = dbObj.SizeUnits;
            this.Status = dbObj.Status;
            this.Type = dbObj.Type;
            this.AssetNumber = dbObj.AssetNumber;
            this.ProcessSystemId = dbObj.ProcessSystemId;
            this.PlantLocationId = dbObj.PlantLocationId;
            this.EquipmentMasterId = dbObj.EquipmentMasterId;
            this.LineId = dbObj.LineId;
            this.SystemInfoId = dbObj.SystemInfoId;
            this.AssetCategory = dbObj.AssetCategory;
            this.SubType = dbObj.SubType;
            this.AssetGroup1 = dbObj.AssetGroup1;
            this.AssetGroup2 = dbObj.AssetGroup2;
            this.AssetGroup3 = dbObj.AssetGroup3;
            this.VIN = dbObj.VIN;
            this.VehicleType = dbObj.VehicleType;
            this.License = dbObj.License;
            this.RegistrationLoc = dbObj.RegistrationLoc;
            this.VehicleYear = dbObj.VehicleYear;
            this.CurrentReading = dbObj.CurrentReading;
            this.CurrentReadingDate = dbObj.CurrentReadingDate;
            this.FuelUnits = dbObj.FuelUnits;
            this.Meter1CurrentReading = dbObj.Meter1CurrentReading;
            this.Meter1CurrentReadingDate = dbObj.Meter1CurrentReadingDate;
            this.Meter1Type = dbObj.Meter1Type;
            this.Meter1Units = dbObj.Meter1Units;
            this.Meter2CurrentReading = dbObj.Meter2CurrentReading;
            this.Meter2CurrentReadingDate = dbObj.Meter2CurrentReadingDate;
            this.Meter2Type = dbObj.Meter2Type;
            this.Meter2Units = dbObj.Meter2Units;
            this.RemoveFromService = dbObj.RemoveFromService;
            this.RemoveFromServiceDate = dbObj.RemoveFromServiceDate;
            this.ExpectedReturnToService = dbObj.ExpectedReturnToService;
            this.RemoveFromServiceReason = dbObj.RemoveFromServiceReason;
            this.RemoveFromServiceReasonCode = dbObj.RemoveFromServiceReasonCode;
            this.Assigned = dbObj.Assigned;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_Equipment dbObj = new b_Equipment();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_Equipment ToDatabaseObject()
        {
            b_Equipment dbObj = new b_Equipment();
            dbObj.ClientId = this.ClientId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.AcquiredCost = this.AcquiredCost;
            dbObj.AcquiredDate = this.AcquiredDate;
            dbObj.BIMIdentifier = this.BIMIdentifier;
            dbObj.BookValue = this.BookValue;
            dbObj.BusinessGroup = this.BusinessGroup;
            dbObj.CatalogNumber = this.CatalogNumber;
            dbObj.Category = this.Category;
            dbObj.CostCenter = this.CostCenter;
            dbObj.DeprCode = this.DeprCode;
            dbObj.DeprLifeToDate = this.DeprLifeToDate;
            dbObj.DeprPercent = this.DeprPercent;
            dbObj.DeprYearToDate = this.DeprYearToDate;
            dbObj.ElectricalParent = this.ElectricalParent;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.CriticalFlag = this.CriticalFlag;
            dbObj.InstallDate = this.InstallDate;
            dbObj.Labor_AccountId = this.Labor_AccountId;
            dbObj.LifeinMonths = this.LifeinMonths;
            dbObj.LifeinYears = this.LifeinYears;
            dbObj.Location = this.Location;
            dbObj.LocationId = this.LocationId;
            dbObj.Maint_VendorId = this.Maint_VendorId;
            dbObj.Maint_WarrantyDesc = this.Maint_WarrantyDesc;
            dbObj.Maint_WarrantyExpire = this.Maint_WarrantyExpire;
            dbObj.Make = this.Make;
            dbObj.Material_AccountId = this.Material_AccountId;
            dbObj.Model = this.Model;
            dbObj.Name = this.Name;
            dbObj.NoCostRollUp = this.NoCostRollUp;
            dbObj.NoPartXRef = this.NoPartXRef;
            dbObj.OriginalValue = this.OriginalValue;
            dbObj.OutofService = this.OutofService;
            dbObj.ParentId = this.ParentId;
            dbObj.PartId = this.PartId;
            dbObj.Purch_VendorId = this.Purch_VendorId;
            dbObj.Purch_WarrantyDesc = this.Purch_WarrantyDesc;
            dbObj.Purch_WarrantyExpire = this.Purch_WarrantyExpire;
            dbObj.RIMEClass = this.RIMEClass;
            dbObj.SalvageValue = this.SalvageValue;
            dbObj.SerialNumber = this.SerialNumber;
            dbObj.Size = this.Size;
            dbObj.SizeUnits = this.SizeUnits;
            dbObj.Status = this.Status;
            dbObj.Type = this.Type;
            dbObj.AssetNumber = this.AssetNumber;
            dbObj.ProcessSystemId = this.ProcessSystemId;
            dbObj.PlantLocationId = this.PlantLocationId;
            dbObj.EquipmentMasterId = this.EquipmentMasterId;
            dbObj.LineId = this.LineId;
            dbObj.SystemInfoId = this.SystemInfoId;
            dbObj.AssetCategory = this.AssetCategory;
            dbObj.SubType = this.SubType;
            dbObj.AssetGroup1 = this.AssetGroup1;
            dbObj.AssetGroup2 = this.AssetGroup2;
            dbObj.AssetGroup3 = this.AssetGroup3;
            dbObj.VIN = this.VIN;
            dbObj.VehicleType = this.VehicleType;
            dbObj.License = this.License;
            dbObj.RegistrationLoc = this.RegistrationLoc;
            dbObj.VehicleYear = this.VehicleYear;
            dbObj.CurrentReading = this.CurrentReading;
            dbObj.CurrentReadingDate = this.CurrentReadingDate;
            dbObj.FuelUnits = this.FuelUnits;
            dbObj.Meter1CurrentReading = this.Meter1CurrentReading;
            dbObj.Meter1CurrentReadingDate = this.Meter1CurrentReadingDate;
            dbObj.Meter1Type = this.Meter1Type;
            dbObj.Meter1Units = this.Meter1Units;
            dbObj.Meter2CurrentReading = this.Meter2CurrentReading;
            dbObj.Meter2CurrentReadingDate = this.Meter2CurrentReadingDate;
            dbObj.Meter2Type = this.Meter2Type;
            dbObj.Meter2Units = this.Meter2Units;
            dbObj.RemoveFromService = this.RemoveFromService;
            dbObj.RemoveFromServiceDate = this.RemoveFromServiceDate;
            dbObj.ExpectedReturnToService = this.ExpectedReturnToService;
            dbObj.RemoveFromServiceReason = this.RemoveFromServiceReason;
            dbObj.RemoveFromServiceReasonCode = this.RemoveFromServiceReasonCode;
            dbObj.Assigned = this.Assigned;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            Equipment_Create trans = new Equipment_Create();
            trans.Equipment = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Equipment);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            Equipment_Retrieve trans = new Equipment_Retrieve();
            trans.Equipment = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Equipment);
        }

        public void Update(DatabaseKey dbKey)
        {
            Equipment_Update trans = new Equipment_Update();
            trans.Equipment = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Equipment);
        }

        public void Delete(DatabaseKey dbKey)
        {
            Equipment_Delete trans = new Equipment_Delete();
            trans.Equipment = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.EquipmentId;
            AuditTargetSiteId = this.SiteId;
            AuditTargetAreaId = this.AreaId;
            AuditTargetDepartmentId = this.DepartmentId;
            AuditTargetStoreRoomId = this.StoreroomId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _EquipmentId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private string _ClientLookupId;
        private decimal _AcquiredCost;
        private DateTime? _AcquiredDate;
        private Guid? _BIMIdentifier;
        private decimal _BookValue;
        private string _BusinessGroup;
        private string _CatalogNumber;
        private string _Category;
        private string _CostCenter;
        private string _DeprCode;
        private decimal _DeprLifeToDate;
        private decimal _DeprPercent;
        private decimal _DeprYearToDate;
        private long _ElectricalParent;
        private bool _InactiveFlag;
        private bool _CriticalFlag;
        private DateTime? _InstallDate;
        private long _Labor_AccountId;
        private int _LifeinMonths;
        private int _LifeinYears;
        private string _Location;
        private long _LocationId;
        private long _Maint_VendorId;
        private string _Maint_WarrantyDesc;
        private DateTime? _Maint_WarrantyExpire;
        private string _Make;
        private long _Material_AccountId;
        private string _Model;
        private string _Name;
        private bool _NoCostRollUp;
        private bool _NoPartXRef;
        private decimal _OriginalValue;
        private DateTime? _OutofService;
        private long _ParentId;
        private long _PartId;
        private long _Purch_VendorId;
        private string _Purch_WarrantyDesc;
        private DateTime? _Purch_WarrantyExpire;
        private int _RIMEClass;
        private decimal _SalvageValue;
        private string _SerialNumber;
        private int _Size;
        private string _SizeUnits;
        private string _Status;
        private string _Type;
        private string _AssetNumber;
        private long _ProcessSystemId;
        private long _PlantLocationId;
        private long _EquipmentMasterId;
        private long _LineId;
        private long _SystemInfoId;
        private string _AssetCategory;
        private string _SubType;
        private long _AssetGroup1;
        private long _AssetGroup2;
        private long _AssetGroup3;
        private string _VIN;
        private string _VehicleType;
        private string _License;
        private string _RegistrationLoc;
        private int _VehicleYear;
        private decimal _CurrentReading;
        private DateTime? _CurrentReadingDate;
        private string _FuelUnits;
        private decimal _Meter1CurrentReading;
        private DateTime? _Meter1CurrentReadingDate;
        private string _Meter1Type;
        private string _Meter1Units;
        private decimal _Meter2CurrentReading;
        private DateTime? _Meter2CurrentReadingDate;
        private string _Meter2Type;
        private string _Meter2Units;
        private bool _RemoveFromService;
        private DateTime? _RemoveFromServiceDate;
        private DateTime? _ExpectedReturnToService;
        private string _RemoveFromServiceReason;
        private string _RemoveFromServiceReasonCode;
        private long _Assigned;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// AcquiredCost property
        /// </summary>
        [DataMember]
        public decimal AcquiredCost
        {
            get { return _AcquiredCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _AcquiredCost); }
        }

        /// <summary>
        /// AcquiredDate property
        /// </summary>
        [DataMember]
        public DateTime? AcquiredDate
        {
            get { return _AcquiredDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _AcquiredDate); }
        }

        /// <summary>
        /// BIMIdentifier property
        /// </summary>
        [DataMember]
        public Guid? BIMIdentifier
        {
            get { return _BIMIdentifier; }
            set { Set<Guid?>(MethodBase.GetCurrentMethod().Name, value, ref _BIMIdentifier); }
        }

        /// <summary>
        /// BookValue property
        /// </summary>
        [DataMember]
        public decimal BookValue
        {
            get { return _BookValue; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _BookValue); }
        }

        /// <summary>
        /// BusinessGroup property
        /// </summary>
        [DataMember]
        public string BusinessGroup
        {
            get { return _BusinessGroup; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _BusinessGroup); }
        }

        /// <summary>
        /// CatalogNumber property
        /// </summary>
        [DataMember]
        public string CatalogNumber
        {
            get { return _CatalogNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CatalogNumber); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// CostCenter property
        /// </summary>
        [DataMember]
        public string CostCenter
        {
            get { return _CostCenter; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CostCenter); }
        }

        /// <summary>
        /// DeprCode property
        /// </summary>
        [DataMember]
        public string DeprCode
        {
            get { return _DeprCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _DeprCode); }
        }

        /// <summary>
        /// DeprLifeToDate property
        /// </summary>
        [DataMember]
        public decimal DeprLifeToDate
        {
            get { return _DeprLifeToDate; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _DeprLifeToDate); }
        }

        /// <summary>
        /// DeprPercent property
        /// </summary>
        [DataMember]
        public decimal DeprPercent
        {
            get { return _DeprPercent; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _DeprPercent); }
        }

        /// <summary>
        /// DeprYearToDate property
        /// </summary>
        [DataMember]
        public decimal DeprYearToDate
        {
            get { return _DeprYearToDate; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _DeprYearToDate); }
        }

        /// <summary>
        /// ElectricalParent property
        /// </summary>
        [DataMember]
        public long ElectricalParent
        {
            get { return _ElectricalParent; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ElectricalParent); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// CriticalFlag property
        /// </summary>
        [DataMember]
        public bool CriticalFlag
        {
            get { return _CriticalFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _CriticalFlag); }
        }

        /// <summary>
        /// InstallDate property
        /// </summary>
        [DataMember]
        public DateTime? InstallDate
        {
            get { return _InstallDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _InstallDate); }
        }

        /// <summary>
        /// Labor_AccountId property
        /// </summary>
        [DataMember]
        public long Labor_AccountId
        {
            get { return _Labor_AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Labor_AccountId); }
        }

        /// <summary>
        /// LifeinMonths property
        /// </summary>
        [DataMember]
        public int LifeinMonths
        {
            get { return _LifeinMonths; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _LifeinMonths); }
        }

        /// <summary>
        /// LifeinYears property
        /// </summary>
        [DataMember]
        public int LifeinYears
        {
            get { return _LifeinYears; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _LifeinYears); }
        }

        /// <summary>
        /// Location property
        /// </summary>
        [DataMember]
        public string Location
        {
            get { return _Location; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Location); }
        }

        /// <summary>
        /// LocationId property
        /// </summary>
        [DataMember]
        public long LocationId
        {
            get { return _LocationId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _LocationId); }
        }

        /// <summary>
        /// Maint_VendorId property
        /// </summary>
        [DataMember]
        public long Maint_VendorId
        {
            get { return _Maint_VendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Maint_VendorId); }
        }

        /// <summary>
        /// Maint_WarrantyDesc property
        /// </summary>
        [DataMember]
        public string Maint_WarrantyDesc
        {
            get { return _Maint_WarrantyDesc; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Maint_WarrantyDesc); }
        }

        /// <summary>
        /// Maint_WarrantyExpire property
        /// </summary>
        [DataMember]
        public DateTime? Maint_WarrantyExpire
        {
            get { return _Maint_WarrantyExpire; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _Maint_WarrantyExpire); }
        }

        /// <summary>
        /// Make property
        /// </summary>
        [DataMember]
        public string Make
        {
            get { return _Make; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Make); }
        }

        /// <summary>
        /// Material_AccountId property
        /// </summary>
        [DataMember]
        public long Material_AccountId
        {
            get { return _Material_AccountId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Material_AccountId); }
        }

        /// <summary>
        /// Model property
        /// </summary>
        [DataMember]
        public string Model
        {
            get { return _Model; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Model); }
        }

        /// <summary>
        /// Name property
        /// </summary>
        [DataMember]
        public string Name
        {
            get { return _Name; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Name); }
        }

        /// <summary>
        /// NoCostRollUp property
        /// </summary>
        [DataMember]
        public bool NoCostRollUp
        {
            get { return _NoCostRollUp; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _NoCostRollUp); }
        }

        /// <summary>
        /// NoPartXRef property
        /// </summary>
        [DataMember]
        public bool NoPartXRef
        {
            get { return _NoPartXRef; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _NoPartXRef); }
        }

        /// <summary>
        /// OriginalValue property
        /// </summary>
        [DataMember]
        public decimal OriginalValue
        {
            get { return _OriginalValue; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _OriginalValue); }
        }

        /// <summary>
        /// OutofService property
        /// </summary>
        [DataMember]
        public DateTime? OutofService
        {
            get { return _OutofService; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _OutofService); }
        }

        /// <summary>
        /// ParentId property
        /// </summary>
        [DataMember]
        public long ParentId
        {
            get { return _ParentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ParentId); }
        }

        /// <summary>
        /// PartId property
        /// </summary>
        [DataMember]
        public long PartId
        {
            get { return _PartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartId); }
        }

        /// <summary>
        /// Purch_VendorId property
        /// </summary>
        [DataMember]
        public long Purch_VendorId
        {
            get { return _Purch_VendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Purch_VendorId); }
        }

        /// <summary>
        /// Purch_WarrantyDesc property
        /// </summary>
        [DataMember]
        public string Purch_WarrantyDesc
        {
            get { return _Purch_WarrantyDesc; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Purch_WarrantyDesc); }
        }

        /// <summary>
        /// Purch_WarrantyExpire property
        /// </summary>
        [DataMember]
        public DateTime? Purch_WarrantyExpire
        {
            get { return _Purch_WarrantyExpire; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _Purch_WarrantyExpire); }
        }

        /// <summary>
        /// RIMEClass property
        /// </summary>
        [DataMember]
        public int RIMEClass
        {
            get { return _RIMEClass; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _RIMEClass); }
        }

        /// <summary>
        /// SalvageValue property
        /// </summary>
        [DataMember]
        public decimal SalvageValue
        {
            get { return _SalvageValue; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _SalvageValue); }
        }

        /// <summary>
        /// SerialNumber property
        /// </summary>
        [DataMember]
        public string SerialNumber
        {
            get { return _SerialNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SerialNumber); }
        }

        /// <summary>
        /// Size property
        /// </summary>
        [DataMember]
        public int Size
        {
            get { return _Size; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Size); }
        }

        /// <summary>
        /// SizeUnits property
        /// </summary>
        [DataMember]
        public string SizeUnits
        {
            get { return _SizeUnits; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SizeUnits); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// AssetNumber property
        /// </summary>
        [DataMember]
        public string AssetNumber
        {
            get { return _AssetNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _AssetNumber); }
        }

        /// <summary>
        /// ProcessSystemId property
        /// </summary>
        [DataMember]
        public long ProcessSystemId
        {
            get { return _ProcessSystemId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProcessSystemId); }
        }

        /// <summary>
        /// PlantLocationId property
        /// </summary>
        [DataMember]
        public long PlantLocationId
        {
            get { return _PlantLocationId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PlantLocationId); }
        }

        /// <summary>
        /// EquipmentMasterId property
        /// </summary>
        [DataMember]
        public long EquipmentMasterId
        {
            get { return _EquipmentMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentMasterId); }
        }

        /// <summary>
        /// LineId property
        /// </summary>
        [DataMember]
        public long LineId
        {
            get { return _LineId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _LineId); }
        }

        /// <summary>
        /// SystemInfoId property
        /// </summary>
        [DataMember]
        public long SystemInfoId
        {
            get { return _SystemInfoId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SystemInfoId); }
        }

        /// <summary>
        /// AssetCategory property
        /// </summary>
        [DataMember]
        public string AssetCategory
        {
            get { return _AssetCategory; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _AssetCategory); }
        }

        /// <summary>
        /// SubType property
        /// </summary>
        [DataMember]
        public string SubType
        {
            get { return _SubType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SubType); }
        }

        /// <summary>
        /// AssetGroup1 property
        /// </summary>
        [DataMember]
        public long AssetGroup1
        {
            get { return _AssetGroup1; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssetGroup1); }
        }

        /// <summary>
        /// AssetGroup2 property
        /// </summary>
        [DataMember]
        public long AssetGroup2
        {
            get { return _AssetGroup2; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssetGroup2); }
        }

        /// <summary>
        /// AssetGroup3 property
        /// </summary>
        [DataMember]
        public long AssetGroup3
        {
            get { return _AssetGroup3; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssetGroup3); }
        }

        /// <summary>
        /// VIN property
        /// </summary>
        [DataMember]
        public string VIN
        {
            get { return _VIN; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VIN); }
        }

        /// <summary>
        /// VehicleType property
        /// </summary>
        [DataMember]
        public string VehicleType
        {
            get { return _VehicleType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _VehicleType); }
        }

        /// <summary>
        /// License property
        /// </summary>
        [DataMember]
        public string License
        {
            get { return _License; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _License); }
        }

        /// <summary>
        /// RegistrationLoc property
        /// </summary>
        [DataMember]
        public string RegistrationLoc
        {
            get { return _RegistrationLoc; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RegistrationLoc); }
        }

        /// <summary>
        /// VehicleYear property
        /// </summary>
        [DataMember]
        public int VehicleYear
        {
            get { return _VehicleYear; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _VehicleYear); }
        }

        /// <summary>
        /// CurrentReading property
        /// </summary>
        [DataMember]
        public decimal CurrentReading
        {
            get { return _CurrentReading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _CurrentReading); }
        }

        /// <summary>
        /// CurrentReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? CurrentReadingDate
        {
            get { return _CurrentReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CurrentReadingDate); }
        }

        /// <summary>
        /// FuelUnits property
        /// </summary>
        [DataMember]
        public string FuelUnits
        {
            get { return _FuelUnits; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FuelUnits); }
        }

        /// <summary>
        /// Meter1CurrentReading property
        /// </summary>
        [DataMember]
        public decimal Meter1CurrentReading
        {
            get { return _Meter1CurrentReading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Meter1CurrentReading); }
        }

        /// <summary>
        /// Meter1CurrentReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? Meter1CurrentReadingDate
        {
            get { return _Meter1CurrentReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _Meter1CurrentReadingDate); }
        }

        /// <summary>
        /// Meter1Type property
        /// </summary>
        [DataMember]
        public string Meter1Type
        {
            get { return _Meter1Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Meter1Type); }
        }

        /// <summary>
        /// Meter1Units property
        /// </summary>
        [DataMember]
        public string Meter1Units
        {
            get { return _Meter1Units; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Meter1Units); }
        }

        /// <summary>
        /// Meter2CurrentReading property
        /// </summary>
        [DataMember]
        public decimal Meter2CurrentReading
        {
            get { return _Meter2CurrentReading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Meter2CurrentReading); }
        }

        /// <summary>
        /// Meter2CurrentReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? Meter2CurrentReadingDate
        {
            get { return _Meter2CurrentReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _Meter2CurrentReadingDate); }
        }

        /// <summary>
        /// Meter2Type property
        /// </summary>
        [DataMember]
        public string Meter2Type
        {
            get { return _Meter2Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Meter2Type); }
        }

        /// <summary>
        /// Meter2Units property
        /// </summary>
        [DataMember]
        public string Meter2Units
        {
            get { return _Meter2Units; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Meter2Units); }
        }

        /// <summary>
        /// RemoveFromService property
        /// </summary>
        [DataMember]
        public bool RemoveFromService
        {
            get { return _RemoveFromService; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _RemoveFromService); }
        }

        /// <summary>
        /// RemoveFromServiceDate property
        /// </summary>
        [DataMember]
        public DateTime? RemoveFromServiceDate
        {
            get { return _RemoveFromServiceDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _RemoveFromServiceDate); }
        }

        /// <summary>
        /// ExpectedReturnToService property
        /// </summary>
        [DataMember]
        public DateTime? ExpectedReturnToService
        {
            get { return _ExpectedReturnToService; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ExpectedReturnToService); }
        }

        /// <summary>
        /// RemoveFromServiceReason property
        /// </summary>
        [DataMember]
        public string RemoveFromServiceReason
        {
            get { return _RemoveFromServiceReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RemoveFromServiceReason); }
        }

        /// <summary>
        /// RemoveFromServiceReasonCode property
        /// </summary>
        [DataMember]
        public string RemoveFromServiceReasonCode
        {
            get { return _RemoveFromServiceReasonCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RemoveFromServiceReasonCode); }
        }

        /// <summary>
        /// Assigned property
        /// </summary>
        [DataMember]
        public long Assigned
        {
            get { return _Assigned; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Assigned); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
