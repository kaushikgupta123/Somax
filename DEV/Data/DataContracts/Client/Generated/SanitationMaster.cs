/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2015 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SanitationMaster table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class SanitationMaster : DataContractBase, IPermission 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SanitationMaster()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_SanitationMaster dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.SanitationMasterId = dbObj.SanitationMasterId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.Assignto_PersonnelId = dbObj.Assignto_PersonnelId;
            this.ChargeType = dbObj.ChargeType;
            this.ChargeToId = dbObj.ChargeToId;
            this.Description = dbObj.Description;
            this.ExclusionDays = dbObj.ExclusionDays;
            this.Frequency = dbObj.Frequency;
            this.LastScheduled = dbObj.LastScheduled;
            this.NextDue = dbObj.NextDue;
            this.OnDemandGroup = dbObj.OnDemandGroup;
            this.ScheduledDuration = dbObj.ScheduledDuration;
            this.ScheduledType = dbObj.ScheduledType;
            this.Shift = dbObj.Shift;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_SanitationMaster dbObj = new b_SanitationMaster();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_SanitationMaster ToDatabaseObject()
        {
            b_SanitationMaster dbObj = new b_SanitationMaster();
            dbObj.ClientId = this.ClientId;
            dbObj.SanitationMasterId = this.SanitationMasterId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.Assignto_PersonnelId = this.Assignto_PersonnelId;
            dbObj.ChargeType = this.ChargeType;
            dbObj.ChargeToId = this.ChargeToId;
            dbObj.Description = this.Description;
            dbObj.ExclusionDays = this.ExclusionDays;
            dbObj.Frequency = this.Frequency;
            dbObj.LastScheduled = this.LastScheduled;
            dbObj.NextDue = this.NextDue;
            dbObj.OnDemandGroup = this.OnDemandGroup;
            dbObj.ScheduledDuration = this.ScheduledDuration;
            dbObj.ScheduledType = this.ScheduledType;
            dbObj.Shift = this.Shift;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            SanitationMaster_Create trans = new SanitationMaster_Create();
            trans.SanitationMaster = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.SanitationMaster);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            SanitationMaster_Retrieve trans = new SanitationMaster_Retrieve();
            trans.SanitationMaster = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SanitationMaster);
        }

        public void Update(DatabaseKey dbKey) 
        {
            SanitationMaster_Update trans = new SanitationMaster_Update();
            trans.SanitationMaster = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.SanitationMaster);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            SanitationMaster_Delete trans = new SanitationMaster_Delete();
            trans.SanitationMaster = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.SanitationMasterId;
			AuditTargetSiteId = this.SiteId;
			AuditTargetAreaId = this.AreaId;
			AuditTargetDepartmentId = this.DepartmentId;
			AuditTargetStoreRoomId = this.StoreroomId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _SanitationMasterId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private long _Assignto_PersonnelId;
        private string _ChargeType;
        private long _ChargeToId;
        private string _Description;
        private string _ExclusionDays;
        private int _Frequency;
        private DateTime? _LastScheduled;
        private DateTime? _NextDue;
        private string _OnDemandGroup;
        private decimal _ScheduledDuration;
        private string _ScheduledType;
        private string _Shift;
        private bool _InactiveFlag;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SanitationMasterId property
        /// </summary>
        [DataMember]
        public long SanitationMasterId
        {
            get { return _SanitationMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SanitationMasterId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// Assignto_PersonnelId property
        /// </summary>
        [DataMember]
        public long Assignto_PersonnelId
        {
            get { return _Assignto_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Assignto_PersonnelId); }
        }

        /// <summary>
        /// ChargeType property
        /// </summary>
        [DataMember]
        public string ChargeType
        {
            get { return _ChargeType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType); }
        }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        [DataMember]
        public long ChargeToId
        {
            get { return _ChargeToId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// ExclusionDays property
        /// </summary>
        [DataMember]
        public string ExclusionDays
        {
            get { return _ExclusionDays; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExclusionDays); }
        }

        /// <summary>
        /// Frequency property
        /// </summary>
        [DataMember]
        public int Frequency
        {
            get { return _Frequency; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Frequency); }
        }

        /// <summary>
        /// LastScheduled property
        /// </summary>
        [DataMember]
        public DateTime? LastScheduled
        {
            get { return _LastScheduled; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastScheduled); }
        }

        /// <summary>
        /// NextDue property
        /// </summary>
        [DataMember]
        public DateTime? NextDue
        {
            get { return _NextDue; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _NextDue); }
        }

        /// <summary>
        /// OnDemandGroup property
        /// </summary>
        [DataMember]
        public string OnDemandGroup
        {
            get { return _OnDemandGroup; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _OnDemandGroup); }
        }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        [DataMember]
        public decimal ScheduledDuration
        {
            get { return _ScheduledDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledDuration); }
        }

        /// <summary>
        /// ScheduledType property
        /// </summary>
        [DataMember]
        public string ScheduledType
        {
            get { return _ScheduledType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledType); }
        }

        /// <summary>
        /// Shift property
        /// </summary>
        [DataMember]
        public string Shift
        {
            get { return _Shift; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Shift); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
