/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2019 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;
using DataContracts;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Attachment table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Attachment : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Attachment()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Attachment dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.AttachmentId = dbObj.AttachmentId;
            this.ObjectName = dbObj.ObjectName;
            this.ObjectId = dbObj.ObjectId;
            this.AttachmentURL = dbObj.AttachmentURL;
            this.UploadedBy_PersonnelId = dbObj.UploadedBy_PersonnelId;
            this.Description = dbObj.Description;
            this.FileName = dbObj.FileName;
            this.FileType = dbObj.FileType;
            this.Image = dbObj.Image;
            this.Profile = dbObj.Profile;
            this.External = dbObj.External;
            this.Reference = dbObj.Reference;
            this.ContentType = dbObj.ContentType;
            this.FileSize = dbObj.FileSize;
            this.PrintwithForm = dbObj.PrintwithForm;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_Attachment dbObj = new b_Attachment();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_Attachment ToDatabaseObject()
        {
            b_Attachment dbObj = new b_Attachment();
            dbObj.ClientId = this.ClientId;
            dbObj.AttachmentId = this.AttachmentId;
            dbObj.ObjectName = this.ObjectName;
            dbObj.ObjectId = this.ObjectId;
            dbObj.AttachmentURL = this.AttachmentURL;
            dbObj.UploadedBy_PersonnelId = this.UploadedBy_PersonnelId;
            dbObj.Description = this.Description;
            dbObj.FileName = this.FileName;
            dbObj.FileType = this.FileType;
            dbObj.Image = this.Image;
            dbObj.Profile = this.Profile;
            dbObj.External = this.External;
            dbObj.Reference = this.Reference;
            dbObj.ContentType = this.ContentType;
            dbObj.FileSize = this.FileSize;
            dbObj.PrintwithForm = this.PrintwithForm;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            Attachment_Create trans = new Attachment_Create();
            trans.Attachment = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Attachment);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            Attachment_Retrieve trans = new Attachment_Retrieve();
            trans.Attachment = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Attachment);
        }

        public void Update(DatabaseKey dbKey)
        {
            Attachment_Update trans = new Attachment_Update();
            trans.Attachment = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Attachment);
        }

        public void Delete(DatabaseKey dbKey)
        {
            Attachment_Delete trans = new Attachment_Delete();
            trans.Attachment = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.AttachmentId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _AttachmentId;
        private string _ObjectName;
        private long _ObjectId;
        private string _AttachmentURL;
        private long _UploadedBy_PersonnelId;
        private string _Description;
        private string _FileName;
        private string _FileType;
        private bool _Image;
        private bool _Profile;
        private bool _External;
        private bool _Reference;
        private string _ContentType;
        private int _FileSize;
        private bool _PrintwithForm;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// AttachmentId property
        /// </summary>
        [DataMember]
        public long AttachmentId
        {
            get { return _AttachmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AttachmentId); }
        }

        /// <summary>
        /// ObjectName property
        /// </summary>
        [DataMember]
        public string ObjectName
        {
            get { return _ObjectName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectName); }
        }

        /// <summary>
        /// ObjectId property
        /// </summary>
        [DataMember]
        public long ObjectId
        {
            get { return _ObjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectId); }
        }

        /// <summary>
        /// AttachmentURL property
        /// </summary>
        [DataMember]
        public string AttachmentURL
        {
            get { return _AttachmentURL; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _AttachmentURL); }
        }

        /// <summary>
        /// UploadedBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long UploadedBy_PersonnelId
        {
            get { return _UploadedBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UploadedBy_PersonnelId); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// FileName property
        /// </summary>
        [DataMember]
        public string FileName
        {
            get { return _FileName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FileName); }
        }

        /// <summary>
        /// FileType property
        /// </summary>
        [DataMember]
        public string FileType
        {
            get { return _FileType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FileType); }
        }

        /// <summary>
        /// Image property
        /// </summary>
        [DataMember]
        public bool Image
        {
            get { return _Image; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Image); }
        }

        /// <summary>
        /// Profile property
        /// </summary>
        [DataMember]
        public bool Profile
        {
            get { return _Profile; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Profile); }
        }

        /// <summary>
        /// External property
        /// </summary>
        [DataMember]
        public bool External
        {
            get { return _External; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _External); }
        }

        /// <summary>
        /// Reference property
        /// </summary>
        [DataMember]
        public bool Reference
        {
            get { return _Reference; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Reference); }
        }

        /// <summary>
        /// ContentType property
        /// </summary>
        [DataMember]
        public string ContentType
        {
            get { return _ContentType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ContentType); }
        }

        /// <summary>
        /// FileSize property
        /// </summary>
        [DataMember]
        public int FileSize
        {
            get { return _FileSize; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _FileSize); }
        }

        /// <summary>
        /// PrintwithForm property
        /// </summary>
        [DataMember]
        public bool PrintwithForm
        {
            get { return _PrintwithForm; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PrintwithForm); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
