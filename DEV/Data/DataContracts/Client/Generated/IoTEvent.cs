/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2024 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the IoTEvent table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class IoTEvent : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public IoTEvent()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_IoTEvent dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.IoTEventId = dbObj.IoTEventId;
            this.SiteId = dbObj.SiteId;
            this.IoTDeviceId = dbObj.IoTDeviceId;
            this.EquipmentId = dbObj.EquipmentId;
            this.SourceType = dbObj.SourceType;
            this.EventType = dbObj.EventType;
            this.Status = dbObj.Status;
            this.ProcessBy_PersonnelId = dbObj.ProcessBy_PersonnelId;
            this.ProcessDate = dbObj.ProcessDate;
            this.Disposition = dbObj.Disposition;
            this.DismissReason = dbObj.DismissReason;
            this.WorkOrderId = dbObj.WorkOrderId;
            this.FaultCode = dbObj.FaultCode;
            this.Comments = dbObj.Comments;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_IoTEvent dbObj = new b_IoTEvent();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_IoTEvent ToDatabaseObject()
        {
            b_IoTEvent dbObj = new b_IoTEvent();
            dbObj.ClientId = this.ClientId;
            dbObj.IoTEventId = this.IoTEventId;
            dbObj.SiteId = this.SiteId;
            dbObj.IoTDeviceId = this.IoTDeviceId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.SourceType = this.SourceType;
            dbObj.EventType = this.EventType;
            dbObj.Status = this.Status;
            dbObj.ProcessBy_PersonnelId = this.ProcessBy_PersonnelId;
            dbObj.ProcessDate = this.ProcessDate;
            dbObj.Disposition = this.Disposition;
            dbObj.DismissReason = this.DismissReason;
            dbObj.WorkOrderId = this.WorkOrderId;
            dbObj.FaultCode = this.FaultCode;
            dbObj.Comments = this.Comments;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            IoTEvent_Create trans = new IoTEvent_Create();
            trans.IoTEvent = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.IoTEvent);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            IoTEvent_Retrieve trans = new IoTEvent_Retrieve();
            trans.IoTEvent = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.IoTEvent);
        }

        public void Update(DatabaseKey dbKey)
        {
            IoTEvent_Update trans = new IoTEvent_Update();
            trans.IoTEvent = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.IoTEvent);
        }

        public void Delete(DatabaseKey dbKey)
        {
            IoTEvent_Delete trans = new IoTEvent_Delete();
            trans.IoTEvent = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.IoTEventId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _IoTEventId;
        private long _SiteId;
        private long _IoTDeviceId;
        private long _EquipmentId;
        private string _SourceType;
        private string _EventType;
        private string _Status;
        private long _ProcessBy_PersonnelId;
        private DateTime? _ProcessDate;
        private string _Disposition;
        private string _DismissReason;
        private long _WorkOrderId;
        private string _FaultCode;
        private string _Comments;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// IoTEventId property
        /// </summary>
        [DataMember]
        public long IoTEventId
        {
            get { return _IoTEventId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _IoTEventId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// IoTDeviceId property
        /// </summary>
        [DataMember]
        public long IoTDeviceId
        {
            get { return _IoTDeviceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _IoTDeviceId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// SourceType property
        /// </summary>
        [DataMember]
        public string SourceType
        {
            get { return _SourceType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SourceType); }
        }

        /// <summary>
        /// EventType property
        /// </summary>
        [DataMember]
        public string EventType
        {
            get { return _EventType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _EventType); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// ProcessBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long ProcessBy_PersonnelId
        {
            get { return _ProcessBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProcessBy_PersonnelId); }
        }

        /// <summary>
        /// ProcessDate property
        /// </summary>
        [DataMember]
        public DateTime? ProcessDate
        {
            get { return _ProcessDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ProcessDate); }
        }

        /// <summary>
        /// Disposition property
        /// </summary>
        [DataMember]
        public string Disposition
        {
            get { return _Disposition; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Disposition); }
        }

        /// <summary>
        /// DismissReason property
        /// </summary>
        [DataMember]
        public string DismissReason
        {
            get { return _DismissReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _DismissReason); }
        }

        /// <summary>
        /// WorkOrderId property
        /// </summary>
        [DataMember]
        public long WorkOrderId
        {
            get { return _WorkOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkOrderId); }
        }

        /// <summary>
        /// FaultCode property
        /// </summary>
        [DataMember]
        public string FaultCode
        {
            get { return _FaultCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FaultCode); }
        }

        /// <summary>
        /// Comments property
        /// </summary>
        [DataMember]
        public string Comments
        {
            get { return _Comments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Comments); }
        }
        #endregion


    }
}
