/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2013 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PrevMaintTask table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PrevMaintTask : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PrevMaintTask()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PrevMaintTask dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.PrevMaintTaskId = dbObj.PrevMaintTaskId;
            this.PrevMaintMasterId = dbObj.PrevMaintMasterId;
            this.AssignedTo_PersonnelId = dbObj.AssignedTo_PersonnelId;
            this.ChargeToId = dbObj.ChargeToId;
            this.ChargeType = dbObj.ChargeType;
            this.Description = dbObj.Description;
            this.MeterId = dbObj.MeterId;
            this.ReadingType = dbObj.ReadingType;
            this.ScheduledDuration = dbObj.ScheduledDuration;
            this.TaskNumber = dbObj.TaskNumber;
            this.Type = dbObj.Type;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_PrevMaintTask dbObj = new b_PrevMaintTask();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_PrevMaintTask ToDatabaseObject()
        {
            b_PrevMaintTask dbObj = new b_PrevMaintTask();
            dbObj.ClientId = this.ClientId;
            dbObj.PrevMaintTaskId = this.PrevMaintTaskId;
            dbObj.PrevMaintMasterId = this.PrevMaintMasterId;
            dbObj.AssignedTo_PersonnelId = this.AssignedTo_PersonnelId;
            dbObj.ChargeToId = this.ChargeToId;
            dbObj.ChargeType = this.ChargeType;
            dbObj.Description = this.Description;
            dbObj.MeterId = this.MeterId;
            dbObj.ReadingType = this.ReadingType;
            dbObj.ScheduledDuration = this.ScheduledDuration;
            dbObj.TaskNumber = this.TaskNumber;
            dbObj.Type = this.Type;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            PrevMaintTask_Create trans = new PrevMaintTask_Create();
            trans.PrevMaintTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PrevMaintTask);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            PrevMaintTask_Retrieve trans = new PrevMaintTask_Retrieve();
            trans.PrevMaintTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PrevMaintTask);
        }

        public void Update(DatabaseKey dbKey)
        {
            PrevMaintTask_Update trans = new PrevMaintTask_Update();
            trans.PrevMaintTask = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PrevMaintTask);
        }

        public void Delete(DatabaseKey dbKey)
        {
            PrevMaintTask_Delete trans = new PrevMaintTask_Delete();
            trans.PrevMaintTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PrevMaintTaskId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _PrevMaintTaskId;
        private long _PrevMaintMasterId;
        private long _AssignedTo_PersonnelId;
        private long _ChargeToId;
        private string _ChargeType;
        private string _Description;
        private long _MeterId;
        private string _ReadingType;
        private decimal _ScheduledDuration;
        private string _TaskNumber;
        private string _Type;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PrevMaintTaskId property
        /// </summary>
        [DataMember]
        public long PrevMaintTaskId
        {
            get { return _PrevMaintTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintTaskId); }
        }

        /// <summary>
        /// PrevMaintMasterId property
        /// </summary>
        [DataMember]
        public long PrevMaintMasterId
        {
            get { return _PrevMaintMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintMasterId); }
        }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        [DataMember]
        public long AssignedTo_PersonnelId
        {
            get { return _AssignedTo_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssignedTo_PersonnelId); }
        }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        [DataMember]
        public long ChargeToId
        {
            get { return _ChargeToId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId); }
        }

        /// <summary>
        /// ChargeType property
        /// </summary>
        [DataMember]
        public string ChargeType
        {
            get { return _ChargeType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// MeterId property
        /// </summary>
        [DataMember]
        public long MeterId
        {
            get { return _MeterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MeterId); }
        }

        /// <summary>
        /// ReadingType property
        /// </summary>
        [DataMember]
        public string ReadingType
        {
            get { return _ReadingType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingType); }
        }

        /// <summary>
        /// ScheduledDuration property
        /// </summary>
        [DataMember]
        public decimal ScheduledDuration
        {
            get { return _ScheduledDuration; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledDuration); }
        }

        /// <summary>
        /// TaskNumber property
        /// </summary>
        [DataMember]
        public string TaskNumber
        {
            get { return _TaskNumber; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TaskNumber); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }
        #endregion


    }
}
