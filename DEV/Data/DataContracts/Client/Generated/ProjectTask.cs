/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ProjectTask table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ProjectTask : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ProjectTask()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ProjectTask dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.ProjectTaskId = dbObj.ProjectTaskId;
            this.ProjectId = dbObj.ProjectId;
            this.WorkOrderId = dbObj.WorkOrderId;
            this.StartDate = dbObj.StartDate;
            this.EndDate = dbObj.EndDate;
            this.Progress = dbObj.Progress;
            this.Type = dbObj.Type;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_ProjectTask dbObj = new b_ProjectTask();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_ProjectTask ToDatabaseObject()
        {
            b_ProjectTask dbObj = new b_ProjectTask();
            dbObj.ClientId = this.ClientId;
            dbObj.ProjectTaskId = this.ProjectTaskId;
            dbObj.ProjectId = this.ProjectId;
            dbObj.WorkOrderId = this.WorkOrderId;
            dbObj.StartDate = this.StartDate;
            dbObj.EndDate = this.EndDate;
            dbObj.Progress = this.Progress;
            dbObj.Type = this.Type;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            ProjectTask_Create trans = new ProjectTask_Create();
            trans.ProjectTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ProjectTask);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            ProjectTask_Retrieve trans = new ProjectTask_Retrieve();
            trans.ProjectTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ProjectTask);
        }

        public void Update(DatabaseKey dbKey) 
        {
            ProjectTask_Update trans = new ProjectTask_Update();
            trans.ProjectTask = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ProjectTask);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            ProjectTask_Delete trans = new ProjectTask_Delete();
            trans.ProjectTask = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ProjectTaskId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _ProjectTaskId;
        private long _ProjectId;
        private long _WorkOrderId;
        private DateTime? _StartDate;
        private DateTime? _EndDate;
        private decimal _Progress;
        private string _Type;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// ProjectTaskId property
        /// </summary>
        [DataMember]
        public long ProjectTaskId
        {
            get { return _ProjectTaskId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProjectTaskId); }
        }

        /// <summary>
        /// ProjectId property
        /// </summary>
        [DataMember]
        public long ProjectId
        {
            get { return _ProjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProjectId); }
        }

        /// <summary>
        /// WorkOrderId property
        /// </summary>
        [DataMember]
        public long WorkOrderId
        {
            get { return _WorkOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WorkOrderId); }
        }

        /// <summary>
        /// StartDate property
        /// </summary>
        [DataMember]
        public DateTime? StartDate
        {
            get { return _StartDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _StartDate); }
        }

        /// <summary>
        /// EndDate property
        /// </summary>
        [DataMember]
        public DateTime? EndDate
        {
            get { return _EndDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _EndDate); }
        }

        /// <summary>
        /// Progress property
        /// </summary>
        [DataMember]
        public decimal Progress
        {
            get { return _Progress; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Progress); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }
        #endregion
		
		
    }
}
