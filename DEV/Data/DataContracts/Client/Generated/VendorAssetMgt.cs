/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the VendorAssetMgt table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class VendorAssetMgt : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public VendorAssetMgt()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_VendorAssetMgt dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.VendorAssetMgtId = dbObj.VendorAssetMgtId;
            this.VendorId = dbObj.VendorId;
            this.Active = dbObj.Active;
            this.Company = dbObj.Company;
            this.Contact = dbObj.Contact;
            this.Contract = dbObj.Contract;
            this.EffectiveDate = dbObj.EffectiveDate;
            this.ExpireDate = dbObj.ExpireDate;
            this.PKGContactorRecBy = dbObj.PKGContactorRecBy;
            this.PKGReceiveBy = dbObj.PKGReceiveBy;
            this.PKGSent = dbObj.PKGSent;
            this.SentVia = dbObj.SentVia;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_VendorAssetMgt dbObj = new b_VendorAssetMgt();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_VendorAssetMgt ToDatabaseObject()
        {
            b_VendorAssetMgt dbObj = new b_VendorAssetMgt();
            dbObj.ClientId = this.ClientId;
            dbObj.VendorAssetMgtId = this.VendorAssetMgtId;
            dbObj.VendorId = this.VendorId;
            dbObj.Active = this.Active;
            dbObj.Company = this.Company;
            dbObj.Contact = this.Contact;
            dbObj.Contract = this.Contract;
            dbObj.EffectiveDate = this.EffectiveDate;
            dbObj.ExpireDate = this.ExpireDate;
            dbObj.PKGContactorRecBy = this.PKGContactorRecBy;
            dbObj.PKGReceiveBy = this.PKGReceiveBy;
            dbObj.PKGSent = this.PKGSent;
            dbObj.SentVia = this.SentVia;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            VendorAssetMgt_Create trans = new VendorAssetMgt_Create();
            trans.VendorAssetMgt = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.VendorAssetMgt);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            VendorAssetMgt_Retrieve trans = new VendorAssetMgt_Retrieve();
            trans.VendorAssetMgt = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.VendorAssetMgt);
        }

        public void Update(DatabaseKey dbKey) 
        {
            VendorAssetMgt_Update trans = new VendorAssetMgt_Update();
            trans.VendorAssetMgt = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.VendorAssetMgt);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            VendorAssetMgt_Delete trans = new VendorAssetMgt_Delete();
            trans.VendorAssetMgt = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.VendorAssetMgtId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _VendorAssetMgtId;
        private long _VendorId;
        private bool _Active;
        private string _Company;
        private string _Contact;
        private string _Contract;
        private DateTime? _EffectiveDate;
        private DateTime? _ExpireDate;
        private DateTime? _PKGContactorRecBy;
        private DateTime? _PKGReceiveBy;
        private DateTime? _PKGSent;
        private string _SentVia;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// VendorAssetMgtId property
        /// </summary>
        [DataMember]
        public long VendorAssetMgtId
        {
            get { return _VendorAssetMgtId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorAssetMgtId); }
        }

        /// <summary>
        /// VendorId property
        /// </summary>
        [DataMember]
        public long VendorId
        {
            get { return _VendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorId); }
        }

        /// <summary>
        /// Active property
        /// </summary>
        [DataMember]
        public bool Active
        {
            get { return _Active; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Active); }
        }

        /// <summary>
        /// Company property
        /// </summary>
        [DataMember]
        public string Company
        {
            get { return _Company; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Company); }
        }

        /// <summary>
        /// Contact property
        /// </summary>
        [DataMember]
        public string Contact
        {
            get { return _Contact; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Contact); }
        }

        /// <summary>
        /// Contract property
        /// </summary>
        [DataMember]
        public string Contract
        {
            get { return _Contract; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Contract); }
        }

        /// <summary>
        /// EffectiveDate property
        /// </summary>
        [DataMember]
        public DateTime? EffectiveDate
        {
            get { return _EffectiveDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _EffectiveDate); }
        }

        /// <summary>
        /// ExpireDate property
        /// </summary>
        [DataMember]
        public DateTime? ExpireDate
        {
            get { return _ExpireDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ExpireDate); }
        }

        /// <summary>
        /// PKGContactorRecBy property
        /// </summary>
        [DataMember]
        public DateTime? PKGContactorRecBy
        {
            get { return _PKGContactorRecBy; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PKGContactorRecBy); }
        }

        /// <summary>
        /// PKGReceiveBy property
        /// </summary>
        [DataMember]
        public DateTime? PKGReceiveBy
        {
            get { return _PKGReceiveBy; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PKGReceiveBy); }
        }

        /// <summary>
        /// PKGSent property
        /// </summary>
        [DataMember]
        public DateTime? PKGSent
        {
            get { return _PKGSent; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _PKGSent); }
        }

        /// <summary>
        /// SentVia property
        /// </summary>
        [DataMember]
        public string SentVia
        {
            get { return _SentVia; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SentVia); }
        }
        #endregion
		
		
    }
}
