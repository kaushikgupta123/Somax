/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2016 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the MeterReading table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class MeterReading : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public MeterReading()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_MeterReading dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.MeterId = dbObj.MeterId;
            this.MeterReadingId = dbObj.MeterReadingId;
            this.Reading = dbObj.Reading;
            this.ReadingDate = dbObj.ReadingDate;
            this.ReadingBy_PersonnelId = dbObj.ReadingBy_PersonnelId;
            this.Reset = dbObj.Reset;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_MeterReading dbObj = new b_MeterReading();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_MeterReading ToDatabaseObject()
        {
            b_MeterReading dbObj = new b_MeterReading();
            dbObj.ClientId = this.ClientId;
            dbObj.MeterId = this.MeterId;
            dbObj.MeterReadingId = this.MeterReadingId;
            dbObj.Reading = this.Reading;
            dbObj.ReadingDate = this.ReadingDate;
            dbObj.ReadingBy_PersonnelId = this.ReadingBy_PersonnelId;
            dbObj.Reset = this.Reset;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            MeterReading_Create trans = new MeterReading_Create();
            trans.MeterReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.MeterReading);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            MeterReading_Retrieve trans = new MeterReading_Retrieve();
            trans.MeterReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.MeterReading);
        }

        public void Update(DatabaseKey dbKey) 
        {
            MeterReading_Update trans = new MeterReading_Update();
            trans.MeterReading = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.MeterReading);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            MeterReading_Delete trans = new MeterReading_Delete();
            trans.MeterReading = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.MeterReadingId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _MeterId;
        private long _MeterReadingId;
        private decimal _Reading;
        private DateTime? _ReadingDate;
        private long _ReadingBy_PersonnelId;
        private bool _Reset;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// MeterId property
        /// </summary>
        [DataMember]
        public long MeterId
        {
            get { return _MeterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MeterId); }
        }

        /// <summary>
        /// MeterReadingId property
        /// </summary>
        [DataMember]
        public long MeterReadingId
        {
            get { return _MeterReadingId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MeterReadingId); }
        }

        /// <summary>
        /// Reading property
        /// </summary>
        [DataMember]
        public decimal Reading
        {
            get { return _Reading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Reading); }
        }

        /// <summary>
        /// ReadingDate property
        /// </summary>
        [DataMember]
        public DateTime? ReadingDate
        {
            get { return _ReadingDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingDate); }
        }

        /// <summary>
        /// ReadingBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long ReadingBy_PersonnelId
        {
            get { return _ReadingBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReadingBy_PersonnelId); }
        }

        /// <summary>
        /// Reset property
        /// </summary>
        [DataMember]
        public bool Reset
        {
            get { return _Reset; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Reset); }
        }
        #endregion
		
		
    }
}
