/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the RepairableSpareLog table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class RepairableSpareLog : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public RepairableSpareLog()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_RepairableSpareLog dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.RepairableSpareLogId = dbObj.RepairableSpareLogId;
            this.SiteId = dbObj.SiteId;
            this.EquipmentId = dbObj.EquipmentId;
            this.TransactionDate = dbObj.TransactionDate;
            this.Status = dbObj.Status;
            this.PersonnelId = dbObj.PersonnelId;
            this.Location = dbObj.Location;
            this.ParentId = dbObj.ParentId;
            this.AssetGroup1 = dbObj.AssetGroup1;
            this.AssetGroup2 = dbObj.AssetGroup2;
            this.AssetGroup3 = dbObj.AssetGroup3;
            this.Assigned = dbObj.Assigned;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_RepairableSpareLog dbObj = new b_RepairableSpareLog();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_RepairableSpareLog ToDatabaseObject()
        {
            b_RepairableSpareLog dbObj = new b_RepairableSpareLog();
            dbObj.ClientId = this.ClientId;
            dbObj.RepairableSpareLogId = this.RepairableSpareLogId;
            dbObj.SiteId = this.SiteId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.TransactionDate = this.TransactionDate;
            dbObj.Status = this.Status;
            dbObj.PersonnelId = this.PersonnelId;
            dbObj.Location = this.Location;
            dbObj.ParentId = this.ParentId;
            dbObj.AssetGroup1 = this.AssetGroup1;
            dbObj.AssetGroup2 = this.AssetGroup2;
            dbObj.AssetGroup3 = this.AssetGroup3;
            dbObj.Assigned = this.Assigned;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            RepairableSpareLog_Create trans = new RepairableSpareLog_Create();
            trans.RepairableSpareLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.RepairableSpareLog);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            RepairableSpareLog_Retrieve trans = new RepairableSpareLog_Retrieve();
            trans.RepairableSpareLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.RepairableSpareLog);
        }

        public void Update(DatabaseKey dbKey)
        {
            RepairableSpareLog_Update trans = new RepairableSpareLog_Update();
            trans.RepairableSpareLog = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.RepairableSpareLog);
        }

        public void Delete(DatabaseKey dbKey)
        {
            RepairableSpareLog_Delete trans = new RepairableSpareLog_Delete();
            trans.RepairableSpareLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.RepairableSpareLogId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _RepairableSpareLogId;
        private long _SiteId;
        private long _EquipmentId;
        private DateTime? _TransactionDate;
        private string _Status;
        private long _PersonnelId;
        private string _Location;
        private long _ParentId;
        private long _AssetGroup1;
        private long _AssetGroup2;
        private long _AssetGroup3;
        private long _Assigned;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// RepairableSpareLogId property
        /// </summary>
        [DataMember]
        public long RepairableSpareLogId
        {
            get { return _RepairableSpareLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _RepairableSpareLogId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// TransactionDate property
        /// </summary>
        [DataMember]
        public DateTime? TransactionDate
        {
            get { return _TransactionDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _TransactionDate); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// PersonnelId property
        /// </summary>
        [DataMember]
        public long PersonnelId
        {
            get { return _PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PersonnelId); }
        }

        /// <summary>
        /// Location property
        /// </summary>
        [DataMember]
        public string Location
        {
            get { return _Location; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Location); }
        }

        /// <summary>
        /// ParentId property
        /// </summary>
        [DataMember]
        public long ParentId
        {
            get { return _ParentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ParentId); }
        }

        /// <summary>
        /// AssetGroup1 property
        /// </summary>
        [DataMember]
        public long AssetGroup1
        {
            get { return _AssetGroup1; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssetGroup1); }
        }

        /// <summary>
        /// AssetGroup2 property
        /// </summary>
        [DataMember]
        public long AssetGroup2
        {
            get { return _AssetGroup2; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssetGroup2); }
        }

        /// <summary>
        /// AssetGroup3 property
        /// </summary>
        [DataMember]
        public long AssetGroup3
        {
            get { return _AssetGroup3; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssetGroup3); }
        }

        /// <summary>
        /// Assigned property
        /// </summary>
        [DataMember]
        public long Assigned
        {
            get { return _Assigned; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Assigned); }
        }
        #endregion


    }
}
