/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2018 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PartMaster table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PartMaster : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PartMaster()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PartMaster dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.PartMasterId = dbObj.PartMasterId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.OEMPart = dbObj.OEMPart;
            this.EXPartId = dbObj.EXPartId;
            this.EXAltPartId1 = dbObj.EXAltPartId1;
            this.EXAltPartId2 = dbObj.EXAltPartId2;
            this.EXAltPartId3 = dbObj.EXAltPartId3;
            this.ExUniqueId = dbObj.ExUniqueId;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.LongDescription = dbObj.LongDescription;
            this.Manufacturer = dbObj.Manufacturer;
            this.ManufacturerId = dbObj.ManufacturerId;
            this.ShortDescription = dbObj.ShortDescription;
            this.UnitCost = dbObj.UnitCost;
            this.UnitOfMeasure = dbObj.UnitOfMeasure;
            this.Category = dbObj.Category;
            this.UPCCode = dbObj.UPCCode;
            this.ImageURL = dbObj.ImageURL;
            this.SXPart = dbObj.SXPart;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_PartMaster dbObj = new b_PartMaster();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_PartMaster ToDatabaseObject()
        {
            b_PartMaster dbObj = new b_PartMaster();
            dbObj.ClientId = this.ClientId;
            dbObj.PartMasterId = this.PartMasterId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.OEMPart = this.OEMPart;
            dbObj.EXPartId = this.EXPartId;
            dbObj.EXAltPartId1 = this.EXAltPartId1;
            dbObj.EXAltPartId2 = this.EXAltPartId2;
            dbObj.EXAltPartId3 = this.EXAltPartId3;
            dbObj.ExUniqueId = this.ExUniqueId;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.LongDescription = this.LongDescription;
            dbObj.Manufacturer = this.Manufacturer;
            dbObj.ManufacturerId = this.ManufacturerId;
            dbObj.ShortDescription = this.ShortDescription;
            dbObj.UnitCost = this.UnitCost;
            dbObj.UnitOfMeasure = this.UnitOfMeasure;
            dbObj.Category = this.Category;
            dbObj.UPCCode = this.UPCCode;
            dbObj.ImageURL = this.ImageURL;
            dbObj.SXPart = this.SXPart;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            PartMaster_Create trans = new PartMaster_Create();
            trans.PartMaster = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PartMaster);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            PartMaster_Retrieve trans = new PartMaster_Retrieve();
            trans.PartMaster = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PartMaster);
        }

        public void Update(DatabaseKey dbKey) 
        {
            PartMaster_Update trans = new PartMaster_Update();
            trans.PartMaster = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PartMaster);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            PartMaster_Delete trans = new PartMaster_Delete();
            trans.PartMaster = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PartMasterId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _PartMasterId;
        private string _ClientLookupId;
        private bool _OEMPart;
        private long _EXPartId;
        private string _EXAltPartId1;
        private string _EXAltPartId2;
        private string _EXAltPartId3;
        private Guid _ExUniqueId;
        private bool _InactiveFlag;
        private string _LongDescription;
        private string _Manufacturer;
        private string _ManufacturerId;
        private string _ShortDescription;
        private decimal _UnitCost;
        private string _UnitOfMeasure;
        private string _Category;
        private string _UPCCode;
        private string _ImageURL;
        private bool _SXPart;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PartMasterId property
        /// </summary>
        [DataMember]
        public long PartMasterId
        {
            get { return _PartMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PartMasterId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// OEMPart property
        /// </summary>
        [DataMember]
        public bool OEMPart
        {
            get { return _OEMPart; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _OEMPart); }
        }

        /// <summary>
        /// EXPartId property
        /// </summary>
        [DataMember]
        public long EXPartId
        {
            get { return _EXPartId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EXPartId); }
        }

        /// <summary>
        /// EXAltPartId1 property
        /// </summary>
        [DataMember]
        public string EXAltPartId1
        {
            get { return _EXAltPartId1; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _EXAltPartId1); }
        }

        /// <summary>
        /// EXAltPartId2 property
        /// </summary>
        [DataMember]
        public string EXAltPartId2
        {
            get { return _EXAltPartId2; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _EXAltPartId2); }
        }

        /// <summary>
        /// EXAltPartId3 property
        /// </summary>
        [DataMember]
        public string EXAltPartId3
        {
            get { return _EXAltPartId3; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _EXAltPartId3); }
        }

        /// <summary>
        /// ExUniqueId property
        /// </summary>
        [DataMember]
        public Guid ExUniqueId
        {
            get { return _ExUniqueId; }
            set { Set<Guid>(MethodBase.GetCurrentMethod().Name, value, ref _ExUniqueId); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// LongDescription property
        /// </summary>
        [DataMember]
        public string LongDescription
        {
            get { return _LongDescription; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _LongDescription); }
        }

        /// <summary>
        /// Manufacturer property
        /// </summary>
        [DataMember]
        public string Manufacturer
        {
            get { return _Manufacturer; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Manufacturer); }
        }

        /// <summary>
        /// ManufacturerId property
        /// </summary>
        [DataMember]
        public string ManufacturerId
        {
            get { return _ManufacturerId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ManufacturerId); }
        }

        /// <summary>
        /// ShortDescription property
        /// </summary>
        [DataMember]
        public string ShortDescription
        {
            get { return _ShortDescription; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ShortDescription); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }

        /// <summary>
        /// UnitOfMeasure property
        /// </summary>
        [DataMember]
        public string UnitOfMeasure
        {
            get { return _UnitOfMeasure; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UnitOfMeasure); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// UPCCode property
        /// </summary>
        [DataMember]
        public string UPCCode
        {
            get { return _UPCCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UPCCode); }
        }

        /// <summary>
        /// ImageURL property
        /// </summary>
        [DataMember]
        public string ImageURL
        {
            get { return _ImageURL; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ImageURL); }
        }

        /// <summary>
        /// SXPart property
        /// </summary>
        [DataMember]
        public bool SXPart
        {
            get { return _SXPart; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _SXPart); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
