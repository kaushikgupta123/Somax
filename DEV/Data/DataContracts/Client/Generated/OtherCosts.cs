/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the OtherCosts table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class OtherCosts : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public OtherCosts()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_OtherCosts dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.OtherCostsId = dbObj.OtherCostsId;
            this.ObjectType = dbObj.ObjectType;
            this.ObjectId = dbObj.ObjectId;
            this.Category = dbObj.Category;
            this.CategoryId = dbObj.CategoryId;
            this.Description = dbObj.Description;
            this.UnitCost = dbObj.UnitCost;
            this.Quantity = dbObj.Quantity;
            this.Source = dbObj.Source;
            this.VendorId = dbObj.VendorId;
            this.ObjectType_Secondary = dbObj.ObjectType_Secondary;
            this.ObjectId_Secondary = dbObj.ObjectId_Secondary;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_OtherCosts dbObj = new b_OtherCosts();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_OtherCosts ToDatabaseObject()
        {
            b_OtherCosts dbObj = new b_OtherCosts();
            dbObj.ClientId = this.ClientId;
            dbObj.OtherCostsId = this.OtherCostsId;
            dbObj.ObjectType = this.ObjectType;
            dbObj.ObjectId = this.ObjectId;
            dbObj.Category = this.Category;
            dbObj.CategoryId = this.CategoryId;
            dbObj.Description = this.Description;
            dbObj.UnitCost = this.UnitCost;
            dbObj.Quantity = this.Quantity;
            dbObj.Source = this.Source;
            dbObj.VendorId = this.VendorId;
            dbObj.ObjectType_Secondary = this.ObjectType_Secondary;
            dbObj.ObjectId_Secondary = this.ObjectId_Secondary;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            OtherCosts_Create trans = new OtherCosts_Create();
            trans.OtherCosts = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.OtherCosts);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            OtherCosts_Retrieve trans = new OtherCosts_Retrieve();
            trans.OtherCosts = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.OtherCosts);
        }

        public void Update(DatabaseKey dbKey) 
        {
            OtherCosts_Update trans = new OtherCosts_Update();
            trans.OtherCosts = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.OtherCosts);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            OtherCosts_Delete trans = new OtherCosts_Delete();
            trans.OtherCosts = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.OtherCostsId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _OtherCostsId;
        private string _ObjectType;
        private long _ObjectId;
        private string _Category;
        private long _CategoryId;
        private string _Description;
        private decimal _UnitCost;
        private decimal _Quantity;
        private string _Source;
        private long _VendorId;
        private string _ObjectType_Secondary;
        private long _ObjectId_Secondary;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// OtherCostsId property
        /// </summary>
        [DataMember]
        public long OtherCostsId
        {
            get { return _OtherCostsId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _OtherCostsId); }
        }

        /// <summary>
        /// ObjectType property
        /// </summary>
        [DataMember]
        public string ObjectType
        {
            get { return _ObjectType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectType); }
        }

        /// <summary>
        /// ObjectId property
        /// </summary>
        [DataMember]
        public long ObjectId
        {
            get { return _ObjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectId); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// CategoryId property
        /// </summary>
        [DataMember]
        public long CategoryId
        {
            get { return _CategoryId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CategoryId); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// UnitCost property
        /// </summary>
        [DataMember]
        public decimal UnitCost
        {
            get { return _UnitCost; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _UnitCost); }
        }

        /// <summary>
        /// Quantity property
        /// </summary>
        [DataMember]
        public decimal Quantity
        {
            get { return _Quantity; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Quantity); }
        }

        /// <summary>
        /// Source property
        /// </summary>
        [DataMember]
        public string Source
        {
            get { return _Source; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Source); }
        }

        /// <summary>
        /// VendorId property
        /// </summary>
        [DataMember]
        public long VendorId
        {
            get { return _VendorId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _VendorId); }
        }

        /// <summary>
        /// ObjectType_Secondary property
        /// </summary>
        [DataMember]
        public string ObjectType_Secondary
        {
            get { return _ObjectType_Secondary; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectType_Secondary); }
        }

        /// <summary>
        /// ObjectId_Secondary property
        /// </summary>
        [DataMember]
        public long ObjectId_Secondary
        {
            get { return _ObjectId_Secondary; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectId_Secondary); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
