/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PasswordSettings table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PasswordSettings : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PasswordSettings()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PasswordSettings dbObj)
        {
		            this.PasswordSettingsId = dbObj.PasswordSettingsId;
            this.ClientId = dbObj.ClientId;
            this.PWReqMinLength = dbObj.PWReqMinLength;
            this.PWMinLength = dbObj.PWMinLength;
            this.PWReqExpiration = dbObj.PWReqExpiration;
            this.PWExpiresDays = dbObj.PWExpiresDays;
            this.PWRequireNumber = dbObj.PWRequireNumber;
            this.PWRequireAlpha = dbObj.PWRequireAlpha;
            this.PWRequireMixedCase = dbObj.PWRequireMixedCase;
            this.PWRequireSpecialChar = dbObj.PWRequireSpecialChar;
            this.PWNoRepeatChar = dbObj.PWNoRepeatChar;
            this.PWNotEqualUserName = dbObj.PWNotEqualUserName;
            this.AllowAdminReset = dbObj.AllowAdminReset;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_PasswordSettings dbObj = new b_PasswordSettings();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_PasswordSettings ToDatabaseObject()
        {
            b_PasswordSettings dbObj = new b_PasswordSettings();
            dbObj.PasswordSettingsId = this.PasswordSettingsId;
            dbObj.ClientId = this.ClientId;
            dbObj.PWReqMinLength = this.PWReqMinLength;
            dbObj.PWMinLength = this.PWMinLength;
            dbObj.PWReqExpiration = this.PWReqExpiration;
            dbObj.PWExpiresDays = this.PWExpiresDays;
            dbObj.PWRequireNumber = this.PWRequireNumber;
            dbObj.PWRequireAlpha = this.PWRequireAlpha;
            dbObj.PWRequireMixedCase = this.PWRequireMixedCase;
            dbObj.PWRequireSpecialChar = this.PWRequireSpecialChar;
            dbObj.PWNoRepeatChar = this.PWNoRepeatChar;
            dbObj.PWNotEqualUserName = this.PWNotEqualUserName;
            dbObj.AllowAdminReset = this.AllowAdminReset;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            PasswordSettings_Create trans = new PasswordSettings_Create();
            trans.PasswordSettings = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PasswordSettings);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            PasswordSettings_Retrieve trans = new PasswordSettings_Retrieve();
            trans.PasswordSettings = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PasswordSettings);
        }

        public void Update(DatabaseKey dbKey) 
        {
            PasswordSettings_Update trans = new PasswordSettings_Update();
            trans.PasswordSettings = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PasswordSettings);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            PasswordSettings_Delete trans = new PasswordSettings_Delete();
            trans.PasswordSettings = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PasswordSettingsId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _PasswordSettingsId;
        private long _ClientId;
        private bool _PWReqMinLength;
        private int _PWMinLength;
        private bool _PWReqExpiration;
        private int _PWExpiresDays;
        private bool _PWRequireNumber;
        private bool _PWRequireAlpha;
        private bool _PWRequireMixedCase;
        private bool _PWRequireSpecialChar;
        private bool _PWNoRepeatChar;
        private bool _PWNotEqualUserName;
        private bool _AllowAdminReset;
        #endregion
        
        #region Properties


        /// <summary>
        /// PasswordSettingsId property
        /// </summary>
        [DataMember]
        public long PasswordSettingsId
        {
            get { return _PasswordSettingsId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PasswordSettingsId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PWReqMinLength property
        /// </summary>
        [DataMember]
        public bool PWReqMinLength
        {
            get { return _PWReqMinLength; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PWReqMinLength); }
        }

        /// <summary>
        /// PWMinLength property
        /// </summary>
        [DataMember]
        public int PWMinLength
        {
            get { return _PWMinLength; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _PWMinLength); }
        }

        /// <summary>
        /// PWReqExpiration property
        /// </summary>
        [DataMember]
        public bool PWReqExpiration
        {
            get { return _PWReqExpiration; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PWReqExpiration); }
        }

        /// <summary>
        /// PWExpiresDays property
        /// </summary>
        [DataMember]
        public int PWExpiresDays
        {
            get { return _PWExpiresDays; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _PWExpiresDays); }
        }

        /// <summary>
        /// PWRequireNumber property
        /// </summary>
        [DataMember]
        public bool PWRequireNumber
        {
            get { return _PWRequireNumber; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PWRequireNumber); }
        }

        /// <summary>
        /// PWRequireAlpha property
        /// </summary>
        [DataMember]
        public bool PWRequireAlpha
        {
            get { return _PWRequireAlpha; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PWRequireAlpha); }
        }

        /// <summary>
        /// PWRequireMixedCase property
        /// </summary>
        [DataMember]
        public bool PWRequireMixedCase
        {
            get { return _PWRequireMixedCase; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PWRequireMixedCase); }
        }

        /// <summary>
        /// PWRequireSpecialChar property
        /// </summary>
        [DataMember]
        public bool PWRequireSpecialChar
        {
            get { return _PWRequireSpecialChar; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PWRequireSpecialChar); }
        }

        /// <summary>
        /// PWNoRepeatChar property
        /// </summary>
        [DataMember]
        public bool PWNoRepeatChar
        {
            get { return _PWNoRepeatChar; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PWNoRepeatChar); }
        }

        /// <summary>
        /// PWNotEqualUserName property
        /// </summary>
        [DataMember]
        public bool PWNotEqualUserName
        {
            get { return _PWNotEqualUserName; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PWNotEqualUserName); }
        }

        /// <summary>
        /// AllowAdminReset property
        /// </summary>
        [DataMember]
        public bool AllowAdminReset
        {
            get { return _AllowAdminReset; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _AllowAdminReset); }
        }
        #endregion
		
		
    }
}
