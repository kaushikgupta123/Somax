/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the DataDictionary table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class DataDictionary : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public DataDictionary()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_DataDictionary dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.DataDictionaryId = dbObj.DataDictionaryId;
            this.TableName = dbObj.TableName;
            this.ColumnName = dbObj.ColumnName;
            this.ColumnLabel = dbObj.ColumnLabel;
            this.ColumnType = dbObj.ColumnType;
            this.LookupType = dbObj.LookupType;
            this.LookupName = dbObj.LookupName;
            this.UDF = dbObj.UDF;
            this.Enabled = dbObj.Enabled;
            this.DisplayonForm = dbObj.DisplayonForm;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_DataDictionary dbObj = new b_DataDictionary();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_DataDictionary ToDatabaseObject()
        {
            b_DataDictionary dbObj = new b_DataDictionary();
            dbObj.ClientId = this.ClientId;
            dbObj.DataDictionaryId = this.DataDictionaryId;
            dbObj.TableName = this.TableName;
            dbObj.ColumnName = this.ColumnName;
            dbObj.ColumnLabel = this.ColumnLabel;
            dbObj.ColumnType = this.ColumnType;
            dbObj.LookupType = this.LookupType;
            dbObj.LookupName = this.LookupName;
            dbObj.UDF = this.UDF;
            dbObj.Enabled = this.Enabled;
            dbObj.DisplayonForm = this.DisplayonForm;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            DataDictionary_Create trans = new DataDictionary_Create();
            trans.DataDictionary = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.DataDictionary);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            DataDictionary_Retrieve trans = new DataDictionary_Retrieve();
            trans.DataDictionary = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.DataDictionary);
        }

        public void Update(DatabaseKey dbKey)
        {
            DataDictionary_Update trans = new DataDictionary_Update();
            trans.DataDictionary = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.DataDictionary);
        }

        public void Delete(DatabaseKey dbKey)
        {
            DataDictionary_Delete trans = new DataDictionary_Delete();
            trans.DataDictionary = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.DataDictionaryId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _DataDictionaryId;
        private string _TableName;
        private string _ColumnName;
        private string _ColumnLabel;
        private string _ColumnType;
        private string _LookupType;
        private string _LookupName;
        private bool _UDF;
        private bool _Enabled;
        private bool _DisplayonForm;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// DataDictionaryId property
        /// </summary>
        [DataMember]
        public long DataDictionaryId
        {
            get { return _DataDictionaryId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DataDictionaryId); }
        }

        /// <summary>
        /// TableName property
        /// </summary>
        [DataMember]
        public string TableName
        {
            get { return _TableName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TableName); }
        }

        /// <summary>
        /// ColumnName property
        /// </summary>
        [DataMember]
        public string ColumnName
        {
            get { return _ColumnName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ColumnName); }
        }

        /// <summary>
        /// ColumnLabel property
        /// </summary>
        [DataMember]
        public string ColumnLabel
        {
            get { return _ColumnLabel; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ColumnLabel); }
        }

        /// <summary>
        /// ColumnType property
        /// </summary>
        [DataMember]
        public string ColumnType
        {
            get { return _ColumnType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ColumnType); }
        }

        /// <summary>
        /// LookupType property
        /// </summary>
        [DataMember]
        public string LookupType
        {
            get { return _LookupType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _LookupType); }
        }

        /// <summary>
        /// LookupName property
        /// </summary>
        [DataMember]
        public string LookupName
        {
            get { return _LookupName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _LookupName); }
        }

        /// <summary>
        /// UDF property
        /// </summary>
        [DataMember]
        public bool UDF
        {
            get { return _UDF; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _UDF); }
        }

        /// <summary>
        /// Enabled property
        /// </summary>
        [DataMember]
        public bool Enabled
        {
            get { return _Enabled; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Enabled); }
        }

        /// <summary>
        /// DisplayonForm property
        /// </summary>
        [DataMember]
        public bool DisplayonForm
        {
            get { return _DisplayonForm; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DisplayonForm); }
        }
        #endregion


    }
}
