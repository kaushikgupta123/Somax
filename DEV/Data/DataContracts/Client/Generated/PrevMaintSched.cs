/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2016 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;
using Database.Business;
using Database;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the PrevMaintSched table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class PrevMaintSched : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PrevMaintSched()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_PrevMaintSched dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.PrevMaintSchedId = dbObj.PrevMaintSchedId;
            this.PrevMaintMasterId = dbObj.PrevMaintMasterId;
            this.AssignedTo_PersonnelId = dbObj.AssignedTo_PersonnelId;
            this.AssociationGroup = dbObj.AssociationGroup;
            this.CalendarSlack = dbObj.CalendarSlack;
            this.ChargeToId = dbObj.ChargeToId;
            this.ChargeType = dbObj.ChargeType;
            this.Crew = dbObj.Crew;
            this.CurrentWOComplete = dbObj.CurrentWOComplete;
            this.DownRequired = dbObj.DownRequired;
            this.ExcludeDOW = dbObj.ExcludeDOW;
            this.Frequency = dbObj.Frequency;
            this.FrequencyType = dbObj.FrequencyType;
            this.InactiveFlag = dbObj.InactiveFlag;
            this.JobPlan = dbObj.JobPlan;
            this.Last_WorkOrderId = dbObj.Last_WorkOrderId;
            this.LastPerformed = dbObj.LastPerformed;
            this.LastScheduled = dbObj.LastScheduled;
            this.MeterHighLevel = dbObj.MeterHighLevel;
            this.MeterId = dbObj.MeterId;
            this.MeterInterval = dbObj.MeterInterval;
            this.MeterLastDone = dbObj.MeterLastDone;
            this.MeterLastDue = dbObj.MeterLastDue;
            this.MeterLastReading = dbObj.MeterLastReading;
            this.MeterLowLevel = dbObj.MeterLowLevel;
            this.MeterMethod = dbObj.MeterMethod;
            this.MeterOn = dbObj.MeterOn;
            this.MeterSlack = dbObj.MeterSlack;
            this.NextDueDate = dbObj.NextDueDate;
            this.OnDemandGroup = dbObj.OnDemandGroup;
            this.Priority = dbObj.Priority;
            this.Scheduled = dbObj.Scheduled;
            this.ScheduleMethod = dbObj.ScheduleMethod;
            this.ScheduleType = dbObj.ScheduleType;
            this.ScheduleType_ = dbObj.ScheduleType_;
            this.ScheduleWeeks = dbObj.ScheduleWeeks;
            this.Section = dbObj.Section;
            this.Shift = dbObj.Shift;
            this.Type = dbObj.Type;
            this.RIMEWorkClass = dbObj.RIMEWorkClass;
            this.Category = dbObj.Category;
            this.GaugeEventType = dbObj.GaugeEventType;
            this.RootCauseCode = dbObj.RootCauseCode;
            this.ActionCode = dbObj.ActionCode;
            this.FailureCode = dbObj.FailureCode;
            this.Planner_PersonnelId = dbObj.Planner_PersonnelId;
            this.PlanningRequired = dbObj.PlanningRequired;
            this.UpdateIndex = dbObj.UpdateIndex;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_PrevMaintSched dbObj = new b_PrevMaintSched();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_PrevMaintSched ToDatabaseObject()
        {
            b_PrevMaintSched dbObj = new b_PrevMaintSched();
            dbObj.ClientId = this.ClientId;
            dbObj.PrevMaintSchedId = this.PrevMaintSchedId;
            dbObj.PrevMaintMasterId = this.PrevMaintMasterId;
            dbObj.AssignedTo_PersonnelId = this.AssignedTo_PersonnelId;
            dbObj.AssociationGroup = this.AssociationGroup;
            dbObj.CalendarSlack = this.CalendarSlack;
            dbObj.ChargeToId = this.ChargeToId;
            dbObj.ChargeType = this.ChargeType;
            dbObj.Crew = this.Crew;
            dbObj.CurrentWOComplete = this.CurrentWOComplete;
            dbObj.DownRequired = this.DownRequired;
            dbObj.ExcludeDOW = this.ExcludeDOW;
            dbObj.Frequency = this.Frequency;
            dbObj.FrequencyType = this.FrequencyType;
            dbObj.InactiveFlag = this.InactiveFlag;
            dbObj.JobPlan = this.JobPlan;
            dbObj.Last_WorkOrderId = this.Last_WorkOrderId;
            dbObj.LastPerformed = this.LastPerformed;
            dbObj.LastScheduled = this.LastScheduled;
            dbObj.MeterHighLevel = this.MeterHighLevel;
            dbObj.MeterId = this.MeterId;
            dbObj.MeterInterval = this.MeterInterval;
            dbObj.MeterLastDone = this.MeterLastDone;
            dbObj.MeterLastDue = this.MeterLastDue;
            dbObj.MeterLastReading = this.MeterLastReading;
            dbObj.MeterLowLevel = this.MeterLowLevel;
            dbObj.MeterMethod = this.MeterMethod;
            dbObj.MeterOn = this.MeterOn;
            dbObj.MeterSlack = this.MeterSlack;
            dbObj.NextDueDate = this.NextDueDate;
            dbObj.OnDemandGroup = this.OnDemandGroup;
            dbObj.Priority = this.Priority;
            dbObj.Scheduled = this.Scheduled;
            dbObj.ScheduleMethod = this.ScheduleMethod;
            dbObj.ScheduleType = this.ScheduleType;
            dbObj.ScheduleType_ = this.ScheduleType_;
            dbObj.ScheduleWeeks = this.ScheduleWeeks;
            dbObj.Section = this.Section;
            dbObj.Shift = this.Shift;
            dbObj.Type = this.Type;
            dbObj.RIMEWorkClass = this.RIMEWorkClass;
            dbObj.Category = this.Category;
            dbObj.GaugeEventType = this.GaugeEventType;
            dbObj.RootCauseCode = this.RootCauseCode;
            dbObj.ActionCode = this.ActionCode;
            dbObj.FailureCode = this.FailureCode;
            dbObj.Planner_PersonnelId = this.Planner_PersonnelId;
            dbObj.PlanningRequired = this.PlanningRequired;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            PrevMaintSched_Create trans = new PrevMaintSched_Create();
            trans.PrevMaintSched = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.PrevMaintSched);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            PrevMaintSched_Retrieve trans = new PrevMaintSched_Retrieve();
            trans.PrevMaintSched = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.PrevMaintSched);
        }

        public void Update(DatabaseKey dbKey)
        {
            PrevMaintSched_Update trans = new PrevMaintSched_Update();
            trans.PrevMaintSched = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.PrevMaintSched);
        }

        public void Delete(DatabaseKey dbKey)
        {
            PrevMaintSched_Delete trans = new PrevMaintSched_Delete();
            trans.PrevMaintSched = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.PrevMaintSchedId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _PrevMaintSchedId;
        private long _PrevMaintMasterId;
        private long _AssignedTo_PersonnelId;
        private string _AssociationGroup;
        private int _CalendarSlack;
        private long _ChargeToId;
        private string _ChargeType;
        private string _Crew;
        private DateTime? _CurrentWOComplete;
        private bool _DownRequired;
        private string _ExcludeDOW;
        private int _Frequency;
        private string _FrequencyType;
        private bool _InactiveFlag;
        private string _JobPlan;
        private long _Last_WorkOrderId;
        private DateTime? _LastPerformed;
        private DateTime? _LastScheduled;
        private decimal _MeterHighLevel;
        private long _MeterId;
        private decimal _MeterInterval;
        private decimal _MeterLastDone;
        private decimal _MeterLastDue;
        private decimal _MeterLastReading;
        private decimal _MeterLowLevel;
        private string _MeterMethod;
        private bool _MeterOn;
        private decimal _MeterSlack;
        private DateTime? _NextDueDate;
        private string _OnDemandGroup;
        private string _Priority;
        private bool _Scheduled;
        private string _ScheduleMethod;
        private string _ScheduleType;
        private string _ScheduleType_;
        private string _ScheduleWeeks;
        private string _Section;
        private string _Shift;
        private string _Type;
        private int _RIMEWorkClass;
        private string _Category;
        private string _GaugeEventType;
        private string _RootCauseCode;
        private string _ActionCode;
        private string _FailureCode;
        private long _Planner_PersonnelId;
        private bool _PlanningRequired;
        private int _UpdateIndex;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// PrevMaintSchedId property
        /// </summary>
        [DataMember]
        public long PrevMaintSchedId
        {
            get { return _PrevMaintSchedId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintSchedId); }
        }

        /// <summary>
        /// PrevMaintMasterId property
        /// </summary>
        [DataMember]
        public long PrevMaintMasterId
        {
            get { return _PrevMaintMasterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PrevMaintMasterId); }
        }

        /// <summary>
        /// AssignedTo_PersonnelId property
        /// </summary>
        [DataMember]
        public long AssignedTo_PersonnelId
        {
            get { return _AssignedTo_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssignedTo_PersonnelId); }
        }

        /// <summary>
        /// AssociationGroup property
        /// </summary>
        [DataMember]
        public string AssociationGroup
        {
            get { return _AssociationGroup; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _AssociationGroup); }
        }

        /// <summary>
        /// CalendarSlack property
        /// </summary>
        [DataMember]
        public int CalendarSlack
        {
            get { return _CalendarSlack; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _CalendarSlack); }
        }

        /// <summary>
        /// ChargeToId property
        /// </summary>
        [DataMember]
        public long ChargeToId
        {
            get { return _ChargeToId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeToId); }
        }

        /// <summary>
        /// ChargeType property
        /// </summary>
        [DataMember]
        public string ChargeType
        {
            get { return _ChargeType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChargeType); }
        }

        /// <summary>
        /// Crew property
        /// </summary>
        [DataMember]
        public string Crew
        {
            get { return _Crew; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Crew); }
        }

        /// <summary>
        /// CurrentWOComplete property
        /// </summary>
        [DataMember]
        public DateTime? CurrentWOComplete
        {
            get { return _CurrentWOComplete; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CurrentWOComplete); }
        }

        /// <summary>
        /// DownRequired property
        /// </summary>
        [DataMember]
        public bool DownRequired
        {
            get { return _DownRequired; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DownRequired); }
        }

        /// <summary>
        /// ExcludeDOW property
        /// </summary>
        [DataMember]
        public string ExcludeDOW
        {
            get { return _ExcludeDOW; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExcludeDOW); }
        }

        /// <summary>
        /// Frequency property
        /// </summary>
        [DataMember]
        public int Frequency
        {
            get { return _Frequency; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _Frequency); }
        }

        /// <summary>
        /// FrequencyType property
        /// </summary>
        [DataMember]
        public string FrequencyType
        {
            get { return _FrequencyType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FrequencyType); }
        }

        /// <summary>
        /// InactiveFlag property
        /// </summary>
        [DataMember]
        public bool InactiveFlag
        {
            get { return _InactiveFlag; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _InactiveFlag); }
        }

        /// <summary>
        /// JobPlan property
        /// </summary>
        [DataMember]
        public string JobPlan
        {
            get { return _JobPlan; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _JobPlan); }
        }

        /// <summary>
        /// Last_WorkOrderId property
        /// </summary>
        [DataMember]
        public long Last_WorkOrderId
        {
            get { return _Last_WorkOrderId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Last_WorkOrderId); }
        }

        /// <summary>
        /// LastPerformed property
        /// </summary>
        [DataMember]
        public DateTime? LastPerformed
        {
            get { return _LastPerformed; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastPerformed); }
        }

        /// <summary>
        /// LastScheduled property
        /// </summary>
        [DataMember]
        public DateTime? LastScheduled
        {
            get { return _LastScheduled; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastScheduled); }
        }

        /// <summary>
        /// MeterHighLevel property
        /// </summary>
        [DataMember]
        public decimal MeterHighLevel
        {
            get { return _MeterHighLevel; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterHighLevel); }
        }

        /// <summary>
        /// MeterId property
        /// </summary>
        [DataMember]
        public long MeterId
        {
            get { return _MeterId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _MeterId); }
        }

        /// <summary>
        /// MeterInterval property
        /// </summary>
        [DataMember]
        public decimal MeterInterval
        {
            get { return _MeterInterval; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterInterval); }
        }

        /// <summary>
        /// MeterLastDone property
        /// </summary>
        [DataMember]
        public decimal MeterLastDone
        {
            get { return _MeterLastDone; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterLastDone); }
        }

        /// <summary>
        /// MeterLastDue property
        /// </summary>
        [DataMember]
        public decimal MeterLastDue
        {
            get { return _MeterLastDue; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterLastDue); }
        }

        /// <summary>
        /// MeterLastReading property
        /// </summary>
        [DataMember]
        public decimal MeterLastReading
        {
            get { return _MeterLastReading; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterLastReading); }
        }

        /// <summary>
        /// MeterLowLevel property
        /// </summary>
        [DataMember]
        public decimal MeterLowLevel
        {
            get { return _MeterLowLevel; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterLowLevel); }
        }

        /// <summary>
        /// MeterMethod property
        /// </summary>
        [DataMember]
        public string MeterMethod
        {
            get { return _MeterMethod; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _MeterMethod); }
        }

        /// <summary>
        /// MeterOn property
        /// </summary>
        [DataMember]
        public bool MeterOn
        {
            get { return _MeterOn; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _MeterOn); }
        }

        /// <summary>
        /// MeterSlack property
        /// </summary>
        [DataMember]
        public decimal MeterSlack
        {
            get { return _MeterSlack; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _MeterSlack); }
        }

        /// <summary>
        /// NextDueDate property
        /// </summary>
        [DataMember]
        public DateTime? NextDueDate
        {
            get { return _NextDueDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _NextDueDate); }
        }

        /// <summary>
        /// OnDemandGroup property
        /// </summary>
        [DataMember]
        public string OnDemandGroup
        {
            get { return _OnDemandGroup; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _OnDemandGroup); }
        }

        /// <summary>
        /// Priority property
        /// </summary>
        [DataMember]
        public string Priority
        {
            get { return _Priority; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Priority); }
        }

        /// <summary>
        /// Scheduled property
        /// </summary>
        [DataMember]
        public bool Scheduled
        {
            get { return _Scheduled; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Scheduled); }
        }

        /// <summary>
        /// ScheduleMethod property
        /// </summary>
        [DataMember]
        public string ScheduleMethod
        {
            get { return _ScheduleMethod; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleMethod); }
        }

        /// <summary>
        /// ScheduleType property
        /// </summary>
        [DataMember]
        public string ScheduleType
        {
            get { return _ScheduleType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleType); }
        }

        /// <summary>
        /// ScheduleType_ property
        /// </summary>
        [DataMember]
        public string ScheduleType_
        {
            get { return _ScheduleType_; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleType_); }
        }

        /// <summary>
        /// ScheduleWeeks property
        /// </summary>
        [DataMember]
        public string ScheduleWeeks
        {
            get { return _ScheduleWeeks; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleWeeks); }
        }

        /// <summary>
        /// Section property
        /// </summary>
        [DataMember]
        public string Section
        {
            get { return _Section; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Section); }
        }

        /// <summary>
        /// Shift property
        /// </summary>
        [DataMember]
        public string Shift
        {
            get { return _Shift; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Shift); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// RIMEWorkClass property
        /// </summary>
        [DataMember]
        public int RIMEWorkClass
        {
            get { return _RIMEWorkClass; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _RIMEWorkClass); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// GaugeEventType property
        /// </summary>
        [DataMember]
        public string GaugeEventType
        {
            get { return _GaugeEventType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _GaugeEventType); }
        }

        /// <summary>
        /// RootCauseCode property
        /// </summary>
        [DataMember]
        public string RootCauseCode
        {
            get { return _RootCauseCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _RootCauseCode); }
        }

        /// <summary>
        /// ActionCode property
        /// </summary>
        [DataMember]
        public string ActionCode
        {
            get { return _ActionCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ActionCode); }
        }

        /// <summary>
        /// FailureCode property
        /// </summary>
        [DataMember]
        public string FailureCode
        {
            get { return _FailureCode; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _FailureCode); }
        }

        /// <summary>
        /// Planner_PersonnelId property
        /// </summary>
        [DataMember]
        public long Planner_PersonnelId
        {
            get { return _Planner_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Planner_PersonnelId); }
        }

        /// <summary>
        /// PlanningRequired property
        /// </summary>
        [DataMember]
        public bool PlanningRequired
        {
            get { return _PlanningRequired; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _PlanningRequired); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion


    }
}
