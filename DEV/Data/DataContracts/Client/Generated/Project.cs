/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Project table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Project : DataContractBase, IPermission 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Project()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Project dbObj)
        {
            this.ProjectId = dbObj.ProjectId;
            this.ClientId = dbObj.ClientId;
            this.SiteId = dbObj.SiteId;
            this.AreaId = dbObj.AreaId;
            this.DepartmentId = dbObj.DepartmentId;
            this.StoreroomId = dbObj.StoreroomId;
            this.ClientLookupId = dbObj.ClientLookupId;
            this.ActualFinish = dbObj.ActualFinish;
            this.ActualStart = dbObj.ActualStart;
            this.Budget = dbObj.Budget;
            this.CancelDate = dbObj.CancelDate;
            this.CancelBy_PersonnelId = dbObj.CancelBy_PersonnelId;
            this.CancelReason = dbObj.CancelReason;
            this.CloseDate = dbObj.CloseDate;
            this.CloseBy_PersonnelId = dbObj.CloseBy_PersonnelId;
            this.CompleteDate = dbObj.CompleteDate;
            this.CompleteBy_PersonnelId = dbObj.CompleteBy_PersonnelId;
            this.Coordinator_PersonnelId = dbObj.Coordinator_PersonnelId;
            this.Description = dbObj.Description;
            this.FiscalYear = dbObj.FiscalYear;
            this.HoldDate = dbObj.HoldDate;
            this.HoldBy_PersonnelId = dbObj.HoldBy_PersonnelId;
            this.Owner_PersonnelId = dbObj.Owner_PersonnelId;
            this.ReturnFunds = dbObj.ReturnFunds;
            this.ScheduleFinish = dbObj.ScheduleFinish;
            this.ScheduleStart = dbObj.ScheduleStart;
            this.Status = dbObj.Status;
            this.Type = dbObj.Type;
            this.Category = dbObj.Category;
            this.AssignedAssetGroup1 = dbObj.AssignedAssetGroup1;
            this.AssignedAssetGroup2 = dbObj.AssignedAssetGroup2;
            this.AssignedAssetGroup3 = dbObj.AssignedAssetGroup3;
           
            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_Project dbObj = new b_Project();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_Project ToDatabaseObject()
        {
            b_Project dbObj = new b_Project();
            dbObj.ProjectId = this.ProjectId;
            dbObj.ClientId = this.ClientId;
            dbObj.SiteId = this.SiteId;
            dbObj.AreaId = this.AreaId;
            dbObj.DepartmentId = this.DepartmentId;
            dbObj.StoreroomId = this.StoreroomId;
            dbObj.ClientLookupId = this.ClientLookupId;
            dbObj.ActualFinish = this.ActualFinish;
            dbObj.ActualStart = this.ActualStart;
            dbObj.Budget = this.Budget;
            dbObj.CancelDate = this.CancelDate;
            dbObj.CancelBy_PersonnelId = this.CancelBy_PersonnelId;
            dbObj.CancelReason = this.CancelReason;
            dbObj.CloseDate = this.CloseDate;
            dbObj.CloseBy_PersonnelId = this.CloseBy_PersonnelId;
            dbObj.CompleteDate = this.CompleteDate;
            dbObj.CompleteBy_PersonnelId = this.CompleteBy_PersonnelId;
            dbObj.Coordinator_PersonnelId = this.Coordinator_PersonnelId;
            dbObj.Description = this.Description;
            dbObj.FiscalYear = this.FiscalYear;
            dbObj.HoldDate = this.HoldDate;
            dbObj.HoldBy_PersonnelId = this.HoldBy_PersonnelId;
            dbObj.Owner_PersonnelId = this.Owner_PersonnelId;
            dbObj.ReturnFunds = this.ReturnFunds;
            dbObj.ScheduleFinish = this.ScheduleFinish;
            dbObj.ScheduleStart = this.ScheduleStart;
            dbObj.Status = this.Status;
            dbObj.Type = this.Type;
            dbObj.Category = this.Category;
            dbObj.AssignedAssetGroup1 = this.AssignedAssetGroup1;
            dbObj.AssignedAssetGroup2 = this.AssignedAssetGroup2;
            dbObj.AssignedAssetGroup3 = this.AssignedAssetGroup3;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            Project_Create trans = new Project_Create();
            trans.Project = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Project);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            Project_Retrieve trans = new Project_Retrieve();
            trans.Project = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Project);
        }

        public void Update(DatabaseKey dbKey)
        {
            Project_Update trans = new Project_Update();
            trans.Project = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Project);
        }

        public void Delete(DatabaseKey dbKey)
        {
            Project_Delete trans = new Project_Delete();
            trans.Project = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ProjectId;
            AuditTargetSiteId = this.SiteId;
            AuditTargetAreaId = this.AreaId;
            AuditTargetDepartmentId = this.DepartmentId;
            AuditTargetStoreRoomId = this.StoreroomId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ProjectId;
        private long _ClientId;
        private long _SiteId;
        private long _AreaId;
        private long _DepartmentId;
        private long _StoreroomId;
        private string _ClientLookupId;
        private DateTime? _ActualFinish;
        private DateTime? _ActualStart;
        private decimal _Budget;
        private DateTime? _CancelDate;
        private long _CancelBy_PersonnelId;
        private string _CancelReason;
        private DateTime? _CloseDate;
        private long _CloseBy_PersonnelId;
        private DateTime? _CompleteDate;
        private long _CompleteBy_PersonnelId;
        private long _Coordinator_PersonnelId;
        private string _Description;
        private int _FiscalYear;
        private DateTime? _HoldDate;
        private long _HoldBy_PersonnelId;
        private long _Owner_PersonnelId;
        private decimal _ReturnFunds;
        private DateTime? _ScheduleFinish;
        private DateTime? _ScheduleStart;
        private string _Status;
        private string _Type;
        private string _Category;
        private long _AssignedAssetGroup1;
        private long _AssignedAssetGroup2;
        private long _AssignedAssetGroup3;
        #endregion

        #region Properties


        /// <summary>
        /// ProjectId property
        /// </summary>
        [DataMember]
        public long ProjectId
        {
            get { return _ProjectId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ProjectId); }
        }

        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// AreaId property
        /// </summary>
        [DataMember]
        public long AreaId
        {
            get { return _AreaId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AreaId); }
        }

        /// <summary>
        /// DepartmentId property
        /// </summary>
        [DataMember]
        public long DepartmentId
        {
            get { return _DepartmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _DepartmentId); }
        }

        /// <summary>
        /// StoreroomId property
        /// </summary>
        [DataMember]
        public long StoreroomId
        {
            get { return _StoreroomId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _StoreroomId); }
        }

        /// <summary>
        /// ClientLookupId property
        /// </summary>
        [DataMember]
        public string ClientLookupId
        {
            get { return _ClientLookupId; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ClientLookupId); }
        }

        /// <summary>
        /// ActualFinish property
        /// </summary>
        [DataMember]
        public DateTime? ActualFinish
        {
            get { return _ActualFinish; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ActualFinish); }
        }

        /// <summary>
        /// ActualStart property
        /// </summary>
        [DataMember]
        public DateTime? ActualStart
        {
            get { return _ActualStart; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ActualStart); }
        }

        /// <summary>
        /// Budget property
        /// </summary>
        [DataMember]
        public decimal Budget
        {
            get { return _Budget; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _Budget); }
        }

        /// <summary>
        /// CancelDate property
        /// </summary>
        [DataMember]
        public DateTime? CancelDate
        {
            get { return _CancelDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CancelDate); }
        }

        /// <summary>
        /// CancelBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CancelBy_PersonnelId
        {
            get { return _CancelBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CancelBy_PersonnelId); }
        }

        /// <summary>
        /// CancelReason property
        /// </summary>
        [DataMember]
        public string CancelReason
        {
            get { return _CancelReason; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CancelReason); }
        }

        /// <summary>
        /// CloseDate property
        /// </summary>
        [DataMember]
        public DateTime? CloseDate
        {
            get { return _CloseDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CloseDate); }
        }

        /// <summary>
        /// CloseBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CloseBy_PersonnelId
        {
            get { return _CloseBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CloseBy_PersonnelId); }
        }

        /// <summary>
        /// CompleteDate property
        /// </summary>
        [DataMember]
        public DateTime? CompleteDate
        {
            get { return _CompleteDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteDate); }
        }

        /// <summary>
        /// CompleteBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long CompleteBy_PersonnelId
        {
            get { return _CompleteBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _CompleteBy_PersonnelId); }
        }

        /// <summary>
        /// Coordinator_PersonnelId property
        /// </summary>
        [DataMember]
        public long Coordinator_PersonnelId
        {
            get { return _Coordinator_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Coordinator_PersonnelId); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// FiscalYear property
        /// </summary>
        [DataMember]
        public int FiscalYear
        {
            get { return _FiscalYear; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _FiscalYear); }
        }

        /// <summary>
        /// HoldDate property
        /// </summary>
        [DataMember]
        public DateTime? HoldDate
        {
            get { return _HoldDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _HoldDate); }
        }

        /// <summary>
        /// HoldBy_PersonnelId property
        /// </summary>
        [DataMember]
        public long HoldBy_PersonnelId
        {
            get { return _HoldBy_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _HoldBy_PersonnelId); }
        }

        /// <summary>
        /// Owner_PersonnelId property
        /// </summary>
        [DataMember]
        public long Owner_PersonnelId
        {
            get { return _Owner_PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Owner_PersonnelId); }
        }

        /// <summary>
        /// ReturnFunds property
        /// </summary>
        [DataMember]
        public decimal ReturnFunds
        {
            get { return _ReturnFunds; }
            set { Set<decimal>(MethodBase.GetCurrentMethod().Name, value, ref _ReturnFunds); }
        }

        /// <summary>
        /// ScheduleFinish property
        /// </summary>
        [DataMember]
        public DateTime? ScheduleFinish
        {
            get { return _ScheduleFinish; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleFinish); }
        }

        /// <summary>
        /// ScheduleStart property
        /// </summary>
        [DataMember]
        public DateTime? ScheduleStart
        {
            get { return _ScheduleStart; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduleStart); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// Type property
        /// </summary>
        [DataMember]
        public string Type
        {
            get { return _Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Type); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// AssignedAssetGroup1 property
        /// </summary>
        [DataMember]
        public long AssignedAssetGroup1
        {
            get { return _AssignedAssetGroup1; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssignedAssetGroup1); }
        }

        /// <summary>
        /// AssignedAssetGroup2 property
        /// </summary>
        [DataMember]
        public long AssignedAssetGroup2
        {
            get { return _AssignedAssetGroup2; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssignedAssetGroup2); }
        }

        /// <summary>
        /// AssignedAssetGroup3 property
        /// </summary>
        [DataMember]
        public long AssignedAssetGroup3
        {
            get { return _AssignedAssetGroup3; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _AssignedAssetGroup3); }
        }

        #endregion


    }
}
