/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2021 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ReportListing table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ReportListing : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ReportListing()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ReportListing dbObj)
        {
            this.ReportListingId = dbObj.ReportListingId;
            this.ReportName = dbObj.ReportName;
            this.Description = dbObj.Description;
            this.ReportGroup = dbObj.ReportGroup;
            this.SourceName = dbObj.SourceName;
            this.UseSP = dbObj.UseSP;
            this.PrimarySortColumn = dbObj.PrimarySortColumn;
            this.SecondarySortColumn = dbObj.SecondarySortColumn;
            this.IsGrouped = dbObj.IsGrouped;
            this.GroupColumn = dbObj.GroupColumn;
            this.IncludePrompt = dbObj.IncludePrompt;
            this.Prompt1Source = dbObj.Prompt1Source;
            this.Prompt1Type = dbObj.Prompt1Type;
            this.Prompt1ListSource = dbObj.Prompt1ListSource;
            this.Prompt1List = dbObj.Prompt1List;
            this.Prompt2Source = dbObj.Prompt2Source;
            this.Prompt2Type = dbObj.Prompt2Type;
            this.Prompt2ListSource = dbObj.Prompt2ListSource;
            this.Prompt2List = dbObj.Prompt2List;
            this.ChildSourceName = dbObj.ChildSourceName;
            this.MasterLinkColumn = dbObj.MasterLinkColumn;
            this.ChildLinkColumn = dbObj.ChildLinkColumn;
            this.IncludeChild = dbObj.IncludeChild;
            this.IsEnterprise = dbObj.IsEnterprise;
            this.BaseQuery = dbObj.BaseQuery;
            this.NoExcel = dbObj.NoExcel;
            this.NoCSV = dbObj.NoCSV;
            this.DevExpressRpt = dbObj.DevExpressRpt;
            this.DevExpressRptName = dbObj.DevExpressRptName;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_ReportListing dbObj = new b_ReportListing();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_ReportListing ToDatabaseObject()
        {
            b_ReportListing dbObj = new b_ReportListing();
            dbObj.ReportListingId = this.ReportListingId;
            dbObj.ReportName = this.ReportName;
            dbObj.Description = this.Description;
            dbObj.ReportGroup = this.ReportGroup;
            dbObj.SourceName = this.SourceName;
            dbObj.UseSP = this.UseSP;
            dbObj.PrimarySortColumn = this.PrimarySortColumn;
            dbObj.SecondarySortColumn = this.SecondarySortColumn;
            dbObj.IsGrouped = this.IsGrouped;
            dbObj.GroupColumn = this.GroupColumn;
            dbObj.IncludePrompt = this.IncludePrompt;
            dbObj.Prompt1Source = this.Prompt1Source;
            dbObj.Prompt1Type = this.Prompt1Type;
            dbObj.Prompt1ListSource = this.Prompt1ListSource;
            dbObj.Prompt1List = this.Prompt1List;
            dbObj.Prompt2Source = this.Prompt2Source;
            dbObj.Prompt2Type = this.Prompt2Type;
            dbObj.Prompt2ListSource = this.Prompt2ListSource;
            dbObj.Prompt2List = this.Prompt2List;
            dbObj.ChildSourceName = this.ChildSourceName;
            dbObj.MasterLinkColumn = this.MasterLinkColumn;
            dbObj.ChildLinkColumn = this.ChildLinkColumn;
            dbObj.IncludeChild = this.IncludeChild;
            dbObj.IsEnterprise = this.IsEnterprise;
            dbObj.BaseQuery = this.BaseQuery;
            dbObj.NoExcel = this.NoExcel;
            dbObj.NoCSV = this.NoCSV;
            dbObj.DevExpressRpt = this.DevExpressRpt;
            dbObj.DevExpressRptName = this.DevExpressRptName;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            ReportListing_Create trans = new ReportListing_Create();
            trans.ReportListing = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ReportListing);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            ReportListing_Retrieve trans = new ReportListing_Retrieve();
            trans.ReportListing = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ReportListing);
        }

        public void Update(DatabaseKey dbKey)
        {
            ReportListing_Update trans = new ReportListing_Update();
            trans.ReportListing = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ReportListing);
        }

        public void Delete(DatabaseKey dbKey)
        {
            ReportListing_Delete trans = new ReportListing_Delete();
            trans.ReportListing = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ReportListingId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ReportListingId;
        private string _ReportName;
        private string _Description;
        private string _ReportGroup;
        private string _SourceName;
        private bool _UseSP;
        private string _PrimarySortColumn;
        private string _SecondarySortColumn;
        private bool _IsGrouped;
        private string _GroupColumn;
        private bool _IncludePrompt;
        private string _Prompt1Source;
        private string _Prompt1Type;
        private string _Prompt1ListSource;
        private string _Prompt1List;
        private string _Prompt2Source;
        private string _Prompt2Type;
        private string _Prompt2ListSource;
        private string _Prompt2List;
        private string _ChildSourceName;
        private string _MasterLinkColumn;
        private string _ChildLinkColumn;
        private bool _IncludeChild;
        private bool _IsEnterprise;
        private string _BaseQuery;
        private bool _NoExcel;
        private bool _NoCSV;
        private bool _DevExpressRpt;
        private string _DevExpressRptName;
        #endregion

        #region Properties


        /// <summary>
        /// ReportListingId property
        /// </summary>
        [DataMember]
        public long ReportListingId
        {
            get { return _ReportListingId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ReportListingId); }
        }

        /// <summary>
        /// ReportName property
        /// </summary>
        [DataMember]
        public string ReportName
        {
            get { return _ReportName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReportName); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// ReportGroup property
        /// </summary>
        [DataMember]
        public string ReportGroup
        {
            get { return _ReportGroup; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ReportGroup); }
        }

        /// <summary>
        /// SourceName property
        /// </summary>
        [DataMember]
        public string SourceName
        {
            get { return _SourceName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SourceName); }
        }

        /// <summary>
        /// UseSP property
        /// </summary>
        [DataMember]
        public bool UseSP
        {
            get { return _UseSP; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _UseSP); }
        }

        /// <summary>
        /// PrimarySortColumn property
        /// </summary>
        [DataMember]
        public string PrimarySortColumn
        {
            get { return _PrimarySortColumn; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _PrimarySortColumn); }
        }

        /// <summary>
        /// SecondarySortColumn property
        /// </summary>
        [DataMember]
        public string SecondarySortColumn
        {
            get { return _SecondarySortColumn; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SecondarySortColumn); }
        }

        /// <summary>
        /// IsGrouped property
        /// </summary>
        [DataMember]
        public bool IsGrouped
        {
            get { return _IsGrouped; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsGrouped); }
        }

        /// <summary>
        /// GroupColumn property
        /// </summary>
        [DataMember]
        public string GroupColumn
        {
            get { return _GroupColumn; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _GroupColumn); }
        }

        /// <summary>
        /// IncludePrompt property
        /// </summary>
        [DataMember]
        public bool IncludePrompt
        {
            get { return _IncludePrompt; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IncludePrompt); }
        }

        /// <summary>
        /// Prompt1Source property
        /// </summary>
        [DataMember]
        public string Prompt1Source
        {
            get { return _Prompt1Source; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Prompt1Source); }
        }

        /// <summary>
        /// Prompt1Type property
        /// </summary>
        [DataMember]
        public string Prompt1Type
        {
            get { return _Prompt1Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Prompt1Type); }
        }

        /// <summary>
        /// Prompt1ListSource property
        /// </summary>
        [DataMember]
        public string Prompt1ListSource
        {
            get { return _Prompt1ListSource; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Prompt1ListSource); }
        }

        /// <summary>
        /// Prompt1List property
        /// </summary>
        [DataMember]
        public string Prompt1List
        {
            get { return _Prompt1List; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Prompt1List); }
        }

        /// <summary>
        /// Prompt2Source property
        /// </summary>
        [DataMember]
        public string Prompt2Source
        {
            get { return _Prompt2Source; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Prompt2Source); }
        }

        /// <summary>
        /// Prompt2Type property
        /// </summary>
        [DataMember]
        public string Prompt2Type
        {
            get { return _Prompt2Type; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Prompt2Type); }
        }

        /// <summary>
        /// Prompt2ListSource property
        /// </summary>
        [DataMember]
        public string Prompt2ListSource
        {
            get { return _Prompt2ListSource; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Prompt2ListSource); }
        }

        /// <summary>
        /// Prompt2List property
        /// </summary>
        [DataMember]
        public string Prompt2List
        {
            get { return _Prompt2List; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Prompt2List); }
        }

        /// <summary>
        /// ChildSourceName property
        /// </summary>
        [DataMember]
        public string ChildSourceName
        {
            get { return _ChildSourceName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChildSourceName); }
        }

        /// <summary>
        /// MasterLinkColumn property
        /// </summary>
        [DataMember]
        public string MasterLinkColumn
        {
            get { return _MasterLinkColumn; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _MasterLinkColumn); }
        }

        /// <summary>
        /// ChildLinkColumn property
        /// </summary>
        [DataMember]
        public string ChildLinkColumn
        {
            get { return _ChildLinkColumn; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ChildLinkColumn); }
        }

        /// <summary>
        /// IncludeChild property
        /// </summary>
        [DataMember]
        public bool IncludeChild
        {
            get { return _IncludeChild; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IncludeChild); }
        }

        /// <summary>
        /// IsEnterprise property
        /// </summary>
        [DataMember]
        public bool IsEnterprise
        {
            get { return _IsEnterprise; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsEnterprise); }
        }

        /// <summary>
        /// BaseQuery property
        /// </summary>
        [DataMember]
        public string BaseQuery
        {
            get { return _BaseQuery; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _BaseQuery); }
        }

        /// <summary>
        /// NoExcel property
        /// </summary>
        [DataMember]
        public bool NoExcel
        {
            get { return _NoExcel; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _NoExcel); }
        }

        /// <summary>
        /// NoCSV property
        /// </summary>
        [DataMember]
        public bool NoCSV
        {
            get { return _NoCSV; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _NoCSV); }
        }

        /// <summary>
        /// DevExpressRpt property
        /// </summary>
        [DataMember]
        public bool DevExpressRpt
        {
            get { return _DevExpressRpt; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _DevExpressRpt); }
        }

        /// <summary>
        /// DevExpressRptName property
        /// </summary>
        [DataMember]
        public string DevExpressRptName
        {
            get { return _DevExpressRptName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _DevExpressRptName); }
        }
        #endregion


    }
}
