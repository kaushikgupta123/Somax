/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using Database;
using Database.Business;
using System;
using System.Reflection;
using System.Runtime.Serialization;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Equipment_TechSpecs table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class Equipment_TechSpecs : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Equipment_TechSpecs()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_Equipment_TechSpecs dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.Equipment_TechSpecsId = dbObj.Equipment_TechSpecsId;
            this.EquipmentId = dbObj.EquipmentId;
            this.TechSpecId = dbObj.TechSpecId;
            this.SpecValue = dbObj.SpecValue;
            this.Comments = dbObj.Comments;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_Equipment_TechSpecs dbObj = new b_Equipment_TechSpecs();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_Equipment_TechSpecs ToDatabaseObject()
        {
            b_Equipment_TechSpecs dbObj = new b_Equipment_TechSpecs();
            dbObj.ClientId = this.ClientId;
            dbObj.Equipment_TechSpecsId = this.Equipment_TechSpecsId;
            dbObj.EquipmentId = this.EquipmentId;
            dbObj.TechSpecId = this.TechSpecId;
            dbObj.SpecValue = this.SpecValue;
            dbObj.Comments = this.Comments;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            Equipment_TechSpecs_Create trans = new Equipment_TechSpecs_Create();
            trans.Equipment_TechSpecs = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Equipment_TechSpecs);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            Equipment_TechSpecs_Retrieve trans = new Equipment_TechSpecs_Retrieve();
            trans.Equipment_TechSpecs = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Equipment_TechSpecs);
        }

        public void Update(DatabaseKey dbKey) 
        {
            Equipment_TechSpecs_Update trans = new Equipment_TechSpecs_Update();
            trans.Equipment_TechSpecs = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Equipment_TechSpecs);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            Equipment_TechSpecs_Delete trans = new Equipment_TechSpecs_Delete();
            trans.Equipment_TechSpecs = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.Equipment_TechSpecsId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _Equipment_TechSpecsId;
        private long _EquipmentId;
        private long _TechSpecId;
        private string _SpecValue;
        private string _Comments;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// Equipment_TechSpecsId property
        /// </summary>
        [DataMember]
        public long Equipment_TechSpecsId
        {
            get { return _Equipment_TechSpecsId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _Equipment_TechSpecsId); }
        }

        /// <summary>
        /// EquipmentId property
        /// </summary>
        [DataMember]
        public long EquipmentId
        {
            get { return _EquipmentId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _EquipmentId); }
        }

        /// <summary>
        /// TechSpecId property
        /// </summary>
        [DataMember]
        public long TechSpecId
        {
            get { return _TechSpecId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _TechSpecId); }
        }

        /// <summary>
        /// SpecValue property
        /// </summary>
        [DataMember]
        public string SpecValue
        {
            get { return _SpecValue; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SpecValue); }
        }

        /// <summary>
        /// Comments property
        /// </summary>
        [DataMember]
        public string Comments
        {
            get { return _Comments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Comments); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
