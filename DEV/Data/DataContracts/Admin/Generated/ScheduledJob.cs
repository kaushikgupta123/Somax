/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using SOMAX.G4.Data.Database;
using SOMAX.G4.Data.Database.Business;

namespace SOMAX.G4.Data.DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ScheduledJob table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ScheduledJob : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ScheduledJob()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ScheduledJob dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.ScheduledJobId = dbObj.ScheduledJobId;
            this.ObjectName = dbObj.ObjectName;
            this.ServiceName = dbObj.ServiceName;
            this.WaitTime = dbObj.WaitTime;
            this.NextDue = dbObj.NextDue;
            this.Status = dbObj.Status;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_ScheduledJob dbObj = new b_ScheduledJob();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_ScheduledJob ToDatabaseObject()
        {
            b_ScheduledJob dbObj = new b_ScheduledJob();
            dbObj.ClientId = this.ClientId;
            dbObj.ScheduledJobId = this.ScheduledJobId;
            dbObj.ObjectName = this.ObjectName;
            dbObj.ServiceName = this.ServiceName;
            dbObj.WaitTime = this.WaitTime;
            dbObj.NextDue = this.NextDue;
            dbObj.Status = this.Status;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            ScheduledJob_Create trans = new ScheduledJob_Create();
            trans.ScheduledJob = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ScheduledJob);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            ScheduledJob_Retrieve trans = new ScheduledJob_Retrieve();
            trans.ScheduledJob = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ScheduledJob);
        }

        public void Update(DatabaseKey dbKey) 
        {
            ScheduledJob_Update trans = new ScheduledJob_Update();
            trans.ScheduledJob = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ScheduledJob);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            ScheduledJob_Delete trans = new ScheduledJob_Delete();
            trans.ScheduledJob = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ScheduledJobId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _ScheduledJobId;
        private string _ObjectName;
        private string _ServiceName;
        private long _WaitTime;
        private DateTime? _NextDue;
        private string _Status;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// ScheduledJobId property
        /// </summary>
        [DataMember]
        public long ScheduledJobId
        {
            get { return _ScheduledJobId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ScheduledJobId); }
        }

        /// <summary>
        /// ObjectName property
        /// </summary>
        [DataMember]
        public string ObjectName
        {
            get { return _ObjectName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ObjectName); }
        }

        /// <summary>
        /// ServiceName property
        /// </summary>
        [DataMember]
        public string ServiceName
        {
            get { return _ServiceName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ServiceName); }
        }

        /// <summary>
        /// WaitTime property
        /// </summary>
        [DataMember]
        public long WaitTime
        {
            get { return _WaitTime; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _WaitTime); }
        }

        /// <summary>
        /// NextDue property
        /// </summary>
        [DataMember]
        public DateTime? NextDue
        {
            get { return _NextDue; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _NextDue); }
        }

        /// <summary>
        /// Status property
        /// </summary>
        [DataMember]
        public string Status
        {
            get { return _Status; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Status); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
