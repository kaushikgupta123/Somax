/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2020 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the KBTopics table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class KBTopics : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public KBTopics()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_KBTopics dbObj)
        {
		    this.KBTopicsId = dbObj.KBTopicsId;
            this.Title = dbObj.Title;
            this.Category = dbObj.Category;
            this.Description = dbObj.Description;
            this.Tags = dbObj.Tags;
            this.Folder = dbObj.Folder;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_KBTopics dbObj = new b_KBTopics();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_KBTopics ToDatabaseObject()
        {
            b_KBTopics dbObj = new b_KBTopics();
            dbObj.KBTopicsId = this.KBTopicsId;
            dbObj.Title = this.Title;
            dbObj.Category = this.Category;
            dbObj.Description = this.Description;
            dbObj.Tags = this.Tags;
            dbObj.Folder = this.Folder;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            KBTopics_Create trans = new KBTopics_Create();
            trans.KBTopics = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.KBTopics);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            KBTopics_Retrieve trans = new KBTopics_Retrieve();
            trans.KBTopics = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.KBTopics);
        }

        public void Update(DatabaseKey dbKey) 
        {
            KBTopics_Update trans = new KBTopics_Update();
            trans.KBTopics = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.KBTopics);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            KBTopics_Delete trans = new KBTopics_Delete();
            trans.KBTopics = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.KBTopicsId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _KBTopicsId;
        private string _Title;
        private string _Category;
        private string _Description;
        private string _Tags;
        private string _Folder;
        #endregion
        
        #region Properties


        /// <summary>
        /// KBTopicsId property
        /// </summary>
        [DataMember]
        public long KBTopicsId
        {
            get { return _KBTopicsId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _KBTopicsId); }
        }

        /// <summary>
        /// Title property
        /// </summary>
        [DataMember]
        public string Title
        {
            get { return _Title; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Title); }
        }

        /// <summary>
        /// Category property
        /// </summary>
        [DataMember]
        public string Category
        {
            get { return _Category; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Category); }
        }

        /// <summary>
        /// Description property
        /// </summary>
        [DataMember]
        public string Description
        {
            get { return _Description; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Description); }
        }

        /// <summary>
        /// Tags property
        /// </summary>
        [DataMember]
        public string Tags
        {
            get { return _Tags; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Tags); }
        }

        /// <summary>
        /// Folder property
        /// </summary>
        [DataMember]
        public string Folder
        {
            get { return _Folder; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Folder); }
        }
        #endregion
		
		
    }
}
