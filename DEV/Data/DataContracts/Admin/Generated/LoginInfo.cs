/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the LoginInfo table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class LoginInfo : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public LoginInfo()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_LoginInfo dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.LoginInfoId = dbObj.LoginInfoId;
            this.UserInfoId = dbObj.UserInfoId;
            this.UserName = dbObj.UserName;
            this.Password = dbObj.Password;
            this.SecurityQuestion = dbObj.SecurityQuestion;
            this.SecurityResponse = dbObj.SecurityResponse;
            this.FailedAttempts = dbObj.FailedAttempts;
            this.LastFailureDate = dbObj.LastFailureDate;
            this.LastLoginDate = dbObj.LastLoginDate;
            this.IsActive = dbObj.IsActive;
            this.ResetPasswordCode = dbObj.ResetPasswordCode;
            this.ResetPasswordRequestDate = dbObj.ResetPasswordRequestDate;
            this.TempPassword = dbObj.TempPassword;
            this.LastPWChangeDate = dbObj.LastPWChangeDate;
            this.SOMAXAdmin = dbObj.SOMAXAdmin;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_LoginInfo dbObj = new b_LoginInfo();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_LoginInfo ToDatabaseObject()
        {
            b_LoginInfo dbObj = new b_LoginInfo();
            dbObj.ClientId = this.ClientId;
            dbObj.LoginInfoId = this.LoginInfoId;
            dbObj.UserInfoId = this.UserInfoId;
            dbObj.UserName = this.UserName;
            dbObj.Password = this.Password;
            dbObj.SecurityQuestion = this.SecurityQuestion;
            dbObj.SecurityResponse = this.SecurityResponse;
            dbObj.FailedAttempts = this.FailedAttempts;
            dbObj.LastFailureDate = this.LastFailureDate;
            dbObj.LastLoginDate = this.LastLoginDate;
            dbObj.IsActive = this.IsActive;
            dbObj.ResetPasswordCode = this.ResetPasswordCode;
            dbObj.ResetPasswordRequestDate = this.ResetPasswordRequestDate;
            dbObj.TempPassword = this.TempPassword;
            dbObj.LastPWChangeDate = this.LastPWChangeDate;
            dbObj.SOMAXAdmin = this.SOMAXAdmin;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            LoginInfo_Create trans = new LoginInfo_Create();
            trans.LoginInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.LoginInfo);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            LoginInfo_Retrieve trans = new LoginInfo_Retrieve();
            trans.LoginInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.LoginInfo);
        }

        public void Update(DatabaseKey dbKey) 
        {
            LoginInfo_Update trans = new LoginInfo_Update();
            trans.LoginInfo = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.LoginInfo);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            LoginInfo_Delete trans = new LoginInfo_Delete();
            trans.LoginInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.LoginInfoId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _LoginInfoId;
        private long _UserInfoId;
        private string _UserName;
        private string _Password;
        private string _SecurityQuestion;
        private string _SecurityResponse;
        private int _FailedAttempts;
        private DateTime? _LastFailureDate;
        private DateTime _LastLoginDate;
        private bool _IsActive;
        private Guid _ResetPasswordCode;
        private DateTime? _ResetPasswordRequestDate;
        private string _TempPassword;
        private DateTime? _LastPWChangeDate;
        private bool _SOMAXAdmin;
        private long _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// LoginInfoId property
        /// </summary>
        [DataMember]
        public long LoginInfoId
        {
            get { return _LoginInfoId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _LoginInfoId); }
        }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        [DataMember]
        public long UserInfoId
        {
            get { return _UserInfoId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UserInfoId); }
        }

        /// <summary>
        /// UserName property
        /// </summary>
        [DataMember]
        public string UserName
        {
            get { return _UserName; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _UserName); }
        }

        /// <summary>
        /// Password property
        /// </summary>
        [DataMember]
        public string Password
        {
            get { return _Password; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Password); }
        }

        /// <summary>
        /// SecurityQuestion property
        /// </summary>
        [DataMember]
        public string SecurityQuestion
        {
            get { return _SecurityQuestion; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SecurityQuestion); }
        }

        /// <summary>
        /// SecurityResponse property
        /// </summary>
        [DataMember]
        public string SecurityResponse
        {
            get { return _SecurityResponse; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SecurityResponse); }
        }

        /// <summary>
        /// FailedAttempts property
        /// </summary>
        [DataMember]
        public int FailedAttempts
        {
            get { return _FailedAttempts; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _FailedAttempts); }
        }

        /// <summary>
        /// LastFailureDate property
        /// </summary>
        [DataMember]
        public DateTime? LastFailureDate
        {
            get { return _LastFailureDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastFailureDate); }
        }

        /// <summary>
        /// LastLoginDate property
        /// </summary>
        [DataMember]
        public DateTime LastLoginDate
        {
            get { return _LastLoginDate; }
            set { Set<DateTime>(MethodBase.GetCurrentMethod().Name, value, ref _LastLoginDate); }
        }

        /// <summary>
        /// IsActive property
        /// </summary>
        [DataMember]
        public bool IsActive
        {
            get { return _IsActive; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _IsActive); }
        }

        /// <summary>
        /// ResetPasswordCode property
        /// </summary>
        [DataMember]
        public Guid ResetPasswordCode
        {
            get { return _ResetPasswordCode; }
            set { Set<Guid>(MethodBase.GetCurrentMethod().Name, value, ref _ResetPasswordCode); }
        }

        /// <summary>
        /// ResetPasswordRequestDate property
        /// </summary>
        [DataMember]
        public DateTime? ResetPasswordRequestDate
        {
            get { return _ResetPasswordRequestDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _ResetPasswordRequestDate); }
        }

        /// <summary>
        /// TempPassword property
        /// </summary>
        [DataMember]
        public string TempPassword
        {
            get { return _TempPassword; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TempPassword); }
        }

        /// <summary>
        /// LastPWChangeDate property
        /// </summary>
        [DataMember]
        public DateTime? LastPWChangeDate
        {
            get { return _LastPWChangeDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _LastPWChangeDate); }
        }

        /// <summary>
        /// SOMAXAdmin property
        /// </summary>
        [DataMember]
        public bool SOMAXAdmin
        {
            get { return _SOMAXAdmin; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _SOMAXAdmin); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public long UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
