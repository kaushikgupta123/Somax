/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2022 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the STEventLog table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class STEventLog : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public STEventLog()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_STEventLog dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.STEventLogId = dbObj.STEventLogId;
            this.SiteId = dbObj.SiteId;
            this.SupportTicketId = dbObj.SupportTicketId;
            this.TransactionDate = dbObj.TransactionDate;
            this.Event = dbObj.Event;
            this.PersonnelId = dbObj.PersonnelId;
            this.Comments = dbObj.Comments;
            this.SourceTable = dbObj.SourceTable;
            this.SourceId = dbObj.SourceId;

            // Turn on auditing
            AuditEnabled = true;
        }

        private void Initialize()
        {
            b_STEventLog dbObj = new b_STEventLog();
            UpdateFromDatabaseObject(dbObj);

            // Turn off auditing for object initialization
            AuditEnabled = false;
        }

        public b_STEventLog ToDatabaseObject()
        {
            b_STEventLog dbObj = new b_STEventLog();
            dbObj.ClientId = this.ClientId;
            dbObj.STEventLogId = this.STEventLogId;
            dbObj.SiteId = this.SiteId;
            dbObj.SupportTicketId = this.SupportTicketId;
            dbObj.TransactionDate = this.TransactionDate;
            dbObj.Event = this.Event;
            dbObj.PersonnelId = this.PersonnelId;
            dbObj.Comments = this.Comments;
            dbObj.SourceTable = this.SourceTable;
            dbObj.SourceId = this.SourceId;
            return dbObj;
        }

        #endregion

        #region Transaction Methods

        public void Create(DatabaseKey dbKey)
        {
            STEventLog_Create trans = new STEventLog_Create();
            trans.STEventLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.STEventLog);
        }

        public void Retrieve(DatabaseKey dbKey)
        {
            STEventLog_Retrieve trans = new STEventLog_Retrieve();
            trans.STEventLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.STEventLog);
        }

        public void Update(DatabaseKey dbKey)
        {
            STEventLog_Update trans = new STEventLog_Update();
            trans.STEventLog = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.STEventLog);
        }

        public void Delete(DatabaseKey dbKey)
        {
            STEventLog_Delete trans = new STEventLog_Delete();
            trans.STEventLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.STEventLogId;
            return BuildChangeLogDbObject(dbKey);
        }

        #endregion

        #region Private Variables

        private long _ClientId;
        private long _STEventLogId;
        private long _SiteId;
        private long _SupportTicketId;
        private DateTime? _TransactionDate;
        private string _Event;
        private long _PersonnelId;
        private string _Comments;
        private string _SourceTable;
        private long _SourceId;
        #endregion

        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// STEventLogId property
        /// </summary>
        [DataMember]
        public long STEventLogId
        {
            get { return _STEventLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _STEventLogId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// SupportTicketId property
        /// </summary>
        [DataMember]
        public long SupportTicketId
        {
            get { return _SupportTicketId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SupportTicketId); }
        }

        /// <summary>
        /// TransactionDate property
        /// </summary>
        [DataMember]
        public DateTime? TransactionDate
        {
            get { return _TransactionDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _TransactionDate); }
        }

        /// <summary>
        /// Event property
        /// </summary>
        [DataMember]
        public string Event
        {
            get { return _Event; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Event); }
        }

        /// <summary>
        /// PersonnelId property
        /// </summary>
        [DataMember]
        public long PersonnelId
        {
            get { return _PersonnelId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _PersonnelId); }
        }

        /// <summary>
        /// Comments property
        /// </summary>
        [DataMember]
        public string Comments
        {
            get { return _Comments; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Comments); }
        }

        /// <summary>
        /// SourceTable property
        /// </summary>
        [DataMember]
        public string SourceTable
        {
            get { return _SourceTable; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _SourceTable); }
        }

        /// <summary>
        /// SourceId property
        /// </summary>
        [DataMember]
        public long SourceId
        {
            get { return _SourceId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SourceId); }
        }
        #endregion


    }
}
