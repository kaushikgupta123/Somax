/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2023 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using Database;
using Database.Business;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the SiteBilling table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class SiteBilling : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SiteBilling()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_SiteBilling dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.SiteId = dbObj.SiteId;
            this.SiteBillingId = dbObj.SiteBillingId;
            this.AnniversaryDate = dbObj.AnniversaryDate;
            this.InvoiceFreq = dbObj.InvoiceFreq;
            this.Terms = dbObj.Terms;
            this.CurrentInvoice = dbObj.CurrentInvoice;
            this.InvoiceDate = dbObj.InvoiceDate;
            this.NextInvoiceDate = dbObj.NextInvoiceDate;
            this.QuoteRequired = dbObj.QuoteRequired;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_SiteBilling dbObj = new b_SiteBilling();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_SiteBilling ToDatabaseObject()
        {
            b_SiteBilling dbObj = new b_SiteBilling();
            dbObj.ClientId = this.ClientId;
            dbObj.SiteId = this.SiteId;
            dbObj.SiteBillingId = this.SiteBillingId;
            dbObj.AnniversaryDate = this.AnniversaryDate;
            dbObj.InvoiceFreq = this.InvoiceFreq;
            dbObj.Terms = this.Terms;
            dbObj.CurrentInvoice = this.CurrentInvoice;
            dbObj.InvoiceDate = this.InvoiceDate;
            dbObj.NextInvoiceDate = this.NextInvoiceDate;
            dbObj.QuoteRequired = this.QuoteRequired;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            SiteBilling_Create trans = new SiteBilling_Create();
            trans.SiteBilling = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.SiteBilling);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            SiteBilling_Retrieve trans = new SiteBilling_Retrieve();
            trans.SiteBilling = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.SiteBilling);
        }

        public void Update(DatabaseKey dbKey) 
        {
            SiteBilling_Update trans = new SiteBilling_Update();
            trans.SiteBilling = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.SiteBilling);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            SiteBilling_Delete trans = new SiteBilling_Delete();
            trans.SiteBilling = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.SiteBillingId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _SiteId;
        private long _SiteBillingId;
        private DateTime? _AnniversaryDate;
        private string _InvoiceFreq;
        private string _Terms;
        private string _CurrentInvoice;
        private DateTime? _InvoiceDate;
        private DateTime? _NextInvoiceDate;
        private bool _QuoteRequired;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// SiteId property
        /// </summary>
        [DataMember]
        public long SiteId
        {
            get { return _SiteId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteId); }
        }

        /// <summary>
        /// SiteBillingId property
        /// </summary>
        [DataMember]
        public long SiteBillingId
        {
            get { return _SiteBillingId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _SiteBillingId); }
        }

        /// <summary>
        /// AnniversaryDate property
        /// </summary>
        [DataMember]
        public DateTime? AnniversaryDate
        {
            get { return _AnniversaryDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _AnniversaryDate); }
        }

        /// <summary>
        /// InvoiceFreq property
        /// </summary>
        [DataMember]
        public string InvoiceFreq
        {
            get { return _InvoiceFreq; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _InvoiceFreq); }
        }

        /// <summary>
        /// Terms property
        /// </summary>
        [DataMember]
        public string Terms
        {
            get { return _Terms; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Terms); }
        }

        /// <summary>
        /// CurrentInvoice property
        /// </summary>
        [DataMember]
        public string CurrentInvoice
        {
            get { return _CurrentInvoice; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _CurrentInvoice); }
        }

        /// <summary>
        /// InvoiceDate property
        /// </summary>
        [DataMember]
        public DateTime? InvoiceDate
        {
            get { return _InvoiceDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _InvoiceDate); }
        }

        /// <summary>
        /// NextInvoiceDate property
        /// </summary>
        [DataMember]
        public DateTime? NextInvoiceDate
        {
            get { return _NextInvoiceDate; }
            set { Set<DateTime?>(MethodBase.GetCurrentMethod().Name, value, ref _NextInvoiceDate); }
        }

        /// <summary>
        /// QuoteRequired property
        /// </summary>
        [DataMember]
        public bool QuoteRequired
        {
            get { return _QuoteRequired; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _QuoteRequired); }
        }
        #endregion
		
		
    }
}
