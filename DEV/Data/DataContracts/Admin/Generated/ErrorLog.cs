/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Reflection;

using SOMAX.G4.Data.Database;
using SOMAX.G4.Data.Database.Business;

namespace SOMAX.G4.Data.DataContracts
{
    /// <summary>
    /// Business object that stores a record from the ErrorLog table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class ErrorLog : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ErrorLog()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_ErrorLog dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.ErrorLogId = dbObj.ErrorLogId;
            this.UserInfoId = dbObj.UserInfoId;
            this.SessionId = dbObj.SessionId;
            this.ExceptionType = dbObj.ExceptionType;
            this.ErrorMessage = dbObj.ErrorMessage;
            this.Source = dbObj.Source;
            this.StackTrace = dbObj.StackTrace;
            this.TargetSite = dbObj.TargetSite;
            this.Url = dbObj.Url;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_ErrorLog dbObj = new b_ErrorLog();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_ErrorLog ToDatabaseObject()
        {
            b_ErrorLog dbObj = new b_ErrorLog();
            dbObj.ClientId = this.ClientId;
            dbObj.ErrorLogId = this.ErrorLogId;
            dbObj.UserInfoId = this.UserInfoId;
            dbObj.SessionId = this.SessionId;
            dbObj.ExceptionType = this.ExceptionType;
            dbObj.ErrorMessage = this.ErrorMessage;
            dbObj.Source = this.Source;
            dbObj.StackTrace = this.StackTrace;
            dbObj.TargetSite = this.TargetSite;
            dbObj.Url = this.Url;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            ErrorLog_Create trans = new ErrorLog_Create();
            trans.ErrorLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.ErrorLog);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            ErrorLog_Retrieve trans = new ErrorLog_Retrieve();
            trans.ErrorLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.ErrorLog);
        }

        public void Update(DatabaseKey dbKey) 
        {
            ErrorLog_Update trans = new ErrorLog_Update();
            trans.ErrorLog = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.ErrorLog);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            ErrorLog_Delete trans = new ErrorLog_Delete();
            trans.ErrorLog = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.ErrorLogId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _ErrorLogId;
        private long _UserInfoId;
        private Guid _SessionId;
        private string _ExceptionType;
        private string _ErrorMessage;
        private string _Source;
        private string _StackTrace;
        private string _TargetSite;
        private string _Url;
        private int _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// ErrorLogId property
        /// </summary>
        [DataMember]
        public long ErrorLogId
        {
            get { return _ErrorLogId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorLogId); }
        }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        [DataMember]
        public long UserInfoId
        {
            get { return _UserInfoId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UserInfoId); }
        }

        /// <summary>
        /// SessionId property
        /// </summary>
        [DataMember]
        public Guid SessionId
        {
            get { return _SessionId; }
            set { Set<Guid>(MethodBase.GetCurrentMethod().Name, value, ref _SessionId); }
        }

        /// <summary>
        /// ExceptionType property
        /// </summary>
        [DataMember]
        public string ExceptionType
        {
            get { return _ExceptionType; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ExceptionType); }
        }

        /// <summary>
        /// ErrorMessage property
        /// </summary>
        [DataMember]
        public string ErrorMessage
        {
            get { return _ErrorMessage; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _ErrorMessage); }
        }

        /// <summary>
        /// Source property
        /// </summary>
        [DataMember]
        public string Source
        {
            get { return _Source; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Source); }
        }

        /// <summary>
        /// StackTrace property
        /// </summary>
        [DataMember]
        public string StackTrace
        {
            get { return _StackTrace; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _StackTrace); }
        }

        /// <summary>
        /// TargetSite property
        /// </summary>
        [DataMember]
        public string TargetSite
        {
            get { return _TargetSite; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _TargetSite); }
        }

        /// <summary>
        /// Url property
        /// </summary>
        [DataMember]
        public string Url
        {
            get { return _Url; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Url); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<int>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
