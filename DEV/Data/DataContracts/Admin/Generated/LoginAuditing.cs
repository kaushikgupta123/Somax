/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2012 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Runtime.Serialization;
using System.Reflection;
using Database.Business;
using Database.Transactions;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the LoginAuditing table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class LoginAuditing : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public LoginAuditing()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_LoginAuditing dbObj)
        {
		            this.ClientId = dbObj.ClientId;
            this.LoginAuditingId = dbObj.LoginAuditingId;
            this.LoginInfoId = dbObj.LoginInfoId;
            this.UserInfoId = dbObj.UserInfoId;
            this.SessionId = dbObj.SessionId;
            this.Browser = dbObj.Browser;
            this.IPAddress = dbObj.IPAddress;
            this.Active = dbObj.Active;
            this.UpdateIndex = dbObj.UpdateIndex;
			
			// Turn on auditing
			AuditEnabled = true;
		}

        private void Initialize()
        {
            b_LoginAuditing dbObj = new b_LoginAuditing();
            UpdateFromDatabaseObject(dbObj);
			
			// Turn off auditing for object initialization
			AuditEnabled = false;
        }

        public b_LoginAuditing ToDatabaseObject()
        {
            b_LoginAuditing dbObj = new b_LoginAuditing();
            dbObj.ClientId = this.ClientId;
            dbObj.LoginAuditingId = this.LoginAuditingId;
            dbObj.LoginInfoId = this.LoginInfoId;
            dbObj.UserInfoId = this.UserInfoId;
            dbObj.SessionId = this.SessionId;
            dbObj.Browser = this.Browser;
            dbObj.IPAddress = this.IPAddress;
            dbObj.Active = this.Active;
            dbObj.UpdateIndex = this.UpdateIndex;
            return dbObj;
        }      

        #endregion

        #region Transaction Methods
        
        public void Create(DatabaseKey dbKey) 
        {
            LoginAuditing_Create trans = new LoginAuditing_Create();
            trans.LoginAuditing = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.LoginAuditing);
        }

        public void Retrieve(DatabaseKey dbKey) 
        {
            LoginAuditing_Retrieve trans = new LoginAuditing_Retrieve();
            trans.LoginAuditing = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.LoginAuditing);
        }

        public void Update(DatabaseKey dbKey) 
        {
            LoginAuditing_Update trans = new LoginAuditing_Update();
            trans.LoginAuditing = this.ToDatabaseObject();
			trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.LoginAuditing);
        }

        public void Delete(DatabaseKey dbKey) 
        {
            LoginAuditing_Delete trans = new LoginAuditing_Delete();
            trans.LoginAuditing = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
		
		protected b_ChangeLog GetChangeLogObject(DatabaseKey dbKey)
        {
            AuditTargetObjectId = this.LoginAuditingId;
			return BuildChangeLogDbObject(dbKey);
        }
        
        #endregion
		
		#region Private Variables

        private long _ClientId;
        private long _LoginAuditingId;
        private long _LoginInfoId;
        private long _UserInfoId;
        private Guid _SessionId;
        private string _Browser;
        private string _IPAddress;
        private bool _Active;
        private long _UpdateIndex;
        #endregion
        
        #region Properties


        /// <summary>
        /// ClientId property
        /// </summary>
        [DataMember]
        public long ClientId
        {
            get { return _ClientId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _ClientId); }
        }

        /// <summary>
        /// LoginAuditingId property
        /// </summary>
        [DataMember]
        public long LoginAuditingId
        {
            get { return _LoginAuditingId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _LoginAuditingId); }
        }

        /// <summary>
        /// LoginInfoId property
        /// </summary>
        [DataMember]
        public long LoginInfoId
        {
            get { return _LoginInfoId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _LoginInfoId); }
        }

        /// <summary>
        /// UserInfoId property
        /// </summary>
        [DataMember]
        public long UserInfoId
        {
            get { return _UserInfoId; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UserInfoId); }
        }

        /// <summary>
        /// SessionId property
        /// </summary>
        [DataMember]
        public Guid SessionId
        {
            get { return _SessionId; }
            set { Set<Guid>(MethodBase.GetCurrentMethod().Name, value, ref _SessionId); }
        }

        /// <summary>
        /// Browser property
        /// </summary>
        [DataMember]
        public string Browser
        {
            get { return _Browser; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _Browser); }
        }

        /// <summary>
        /// IPAddress property
        /// </summary>
        [DataMember]
        public string IPAddress
        {
            get { return _IPAddress; }
            set { Set<string>(MethodBase.GetCurrentMethod().Name, value, ref _IPAddress); }
        }

        /// <summary>
        /// Active property
        /// </summary>
        [DataMember]
        public bool Active
        {
            get { return _Active; }
            set { Set<bool>(MethodBase.GetCurrentMethod().Name, value, ref _Active); }
        }

        /// <summary>
        /// UpdateIndex property
        /// </summary>
        [DataMember]
        public long UpdateIndex
        {
            get { return _UpdateIndex; }
            set { Set<long>(MethodBase.GetCurrentMethod().Name, value, ref _UpdateIndex); }
        }
        #endregion
		
		
    }
}
