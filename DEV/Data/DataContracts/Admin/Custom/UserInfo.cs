/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Database.Business;
using Database.Transactions;
using Database;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the UserInfo table.
    /// </summary>
    public partial class UserInfo : DataContractBase 
    {
        public string LoginUserName { get; set; }
         //V2-911
        public long ClientUserInfoListID { get; set; }
        public long LoginClientID { get; set; }

        #region  V2-962
        public string SecurityProfileName { get; set; }
        public string SecurityProfileDescription { get; set; }
        public string CompanyName { get; set; }
        public bool IsActive { get; set; }
        public long Personnel_CraftId { get; set; }
        public long Personnel_PersonnelId { get; set; }
        #endregion
        public void UpdateAdditionalDataFromDatabaseObject(b_UserInfo dbObj)
        {
            UpdateFromDatabaseObject(dbObj);
            this.LoginUserName = dbObj.LoginUserName;
        }

        #region Transaction Methods

        

        public static List<UserInfo> RetrieveAll(DatabaseKey dbKey)
        {
            UserInfo_RetrieveAll trans = new UserInfo_RetrieveAll()
            {
                dbKey = dbKey.ToTransDbKey()
            };
            trans.Execute();

            List<UserInfo> result = new List<UserInfo>();
            foreach (b_UserInfo ui in trans.UserInfoList)
            {
                UserInfo newUI = new UserInfo();
                newUI.UpdateFromDatabaseObject(ui);
                result.Add(newUI);
            }
            return result;
        }

        public List<UserInfo> RetrieveByGroupId(DatabaseKey dbKey) 
        {
            UserSecurityGroup userSecurityGroup = new UserSecurityGroup() { ClientId = dbKey.Client.ClientId, SecurityGroupId = SecurityGroupId };
            List<UserSecurityGroup> securityGroups = userSecurityGroup.RetrieveGroupNamesByGroupId(dbKey);

            UserInfo_RetrieveByClientId trans = new UserInfo_RetrieveByClientId()
			{
				CallerUserInfoId = dbKey.User.UserInfoId,
				CallerUserName = dbKey.UserName
			};
            trans.UserInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            List<UserInfo> userInfoList = new List<UserInfo>();
            foreach (b_UserInfo userInfo in trans.UserInfoList)
            {
                UserSecurityGroup tmpUserSecurityGroup = securityGroups.FirstOrDefault(item => item.UserInfoId == userInfo.UserInfoId);
                if (tmpUserSecurityGroup != null)
                {
                    UserInfo temp = new UserInfo();
                    temp.UpdateAdditionalDataFromDatabaseObject(userInfo);
                    temp.UserSecurityGroupId = tmpUserSecurityGroup.UserSecurityGroupId;
                    userInfoList.Add(temp);
                }
            }

            return userInfoList;
        }

        public void UpdateWithLogin(DatabaseKey dbKey, LoginInfo loginInfo)
        {
            UserInfo_UpdateWithLogin trans = new UserInfo_UpdateWithLogin();
            trans.UserInfo = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.LoginInfo = loginInfo.ToDatabaseObject();
            trans.LoginInfoChangeLog = loginInfo.GetChangeLog(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.UserInfo);
            loginInfo.UpdateFromDatabaseObject(trans.LoginInfo);
        }

        public void DeleteWithLogin(DatabaseKey dbKey, LoginInfo loginInfo)
        {
            UserInfo_DeleteWithLogin trans = new UserInfo_DeleteWithLogin();
            trans.UserInfo = this.ToDatabaseObject();
            trans.LoginInfo = loginInfo.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }

        public void CreateWithLogin(DatabaseKey dbKey, LoginInfo loginInfo)
        {
            UserInfo_CreateWithLogin trans = new UserInfo_CreateWithLogin();
            trans.UserInfo = this.ToDatabaseObject();
            trans.LoginInfo = loginInfo.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.UserInfo);
            loginInfo.UpdateFromDatabaseObject(trans.LoginInfo);
        }

        //public List<UserInfo> RetrieveLoginInfoByUserInfoId(DatabaseKey dbKey)
        //{

        //    UserLoginInfo_Retrieve trans = new UserLoginInfo_Retrieve()
        //    {
        //        CallerUserInfoId = dbKey.User.UserInfoId,
        //        CallerUserName = dbKey.UserName
        //    };
        //    trans.UserInfo = this.ToDateBaseObjectForRetriveAll();
        //    trans.dbKey = dbKey.ToTransDbKey();
        //    trans.Execute();

        //    List<UserInfo> result = new List<UserInfo>();
        //    foreach (b_UserInfo ui in trans.UserInfoList)
        //    {
        //        UserInfo newUI = new UserInfo();

        //        newUI.UpdateAdditionalDataFromDatabaseObject(ui);
        //        //newUI.UserName = ui.UserName;
        //        result.Add(newUI);
        //    }
        //    return result;
        //}
        //public b_UserInfo ToDateBaseObjectForRetriveAll()
        //{
        //    b_UserInfo dbObj = this.ToDatabaseObject();
        //    dbObj.LoginUserName = this.LoginUserName;
        //    return dbObj;
        //}

        public List<UserInfo> UpdateFromDatabaseObjectlist(List<b_UserInfo> dbObjlist)
        {
            List<UserInfo> temp = new List<UserInfo>();

            UserInfo objUserInfo;

            foreach (b_UserInfo userinfo in dbObjlist)
            {
                objUserInfo = new UserInfo();
                objUserInfo.UpdateFromDatabaseObject(userinfo);
                objUserInfo.UserName = userinfo.UserName;
                temp.Add(objUserInfo);
            }

            return (temp);
        }

        public List<UserInfo> RetrieveByClientId(DatabaseKey dbKey)
        {
            UserInfo_RetrieveByClientId trans = new UserInfo_RetrieveByClientId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.UserInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            return (UpdateFromDatabaseObjectlist(trans.UserInfoList));
        }

        public List<UserInfo> RetrieveLoginInfoByClientId(DatabaseKey dbKey)//SOM-794
        {
            UserInfo_RetrieveByClientId trans = new UserInfo_RetrieveByClientId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName               
            };

            trans.UserInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            UpdateFromDatabaseObject(trans.UserInfo);

            return UpdateFromDatabaseObjectlist(trans.UserInfoList);
           
        }
        // RKL - Changed this back to use UserInfo_RetrieveByClientId
        public void RetrieveLoginInfoByUserInfoId(DatabaseKey dbKey)
        {
//            UserLoginInfo_Retrieve trans = new UserLoginInfo_Retrieve()
            UserInfo_RetrieveByClientId trans = new UserInfo_RetrieveByClientId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.UserInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            UpdateFromDatabaseObject(trans.UserInfo);
            this.LoginUserName = trans.UserInfo.LoginUserName;

        }
        // Added this to be used form password reset
        public void RetrieveLoginInfoByUserInfoId2(DatabaseKey dbKey)
        {
          UserLoginInfo_Retrieve trans = new UserLoginInfo_Retrieve()
          {
            CallerUserInfoId = dbKey.User.UserInfoId,
            CallerUserName = dbKey.UserName
          };

          trans.UserInfo = this.ToDatabaseObject();
          trans.dbKey = dbKey.ToTransDbKey();
          trans.Execute();

          UpdateFromDatabaseObject(trans.UserInfo);
          this.LoginUserName = trans.UserInfo.LoginUserName;

        }

        public void UserDelete(DatabaseKey dbKey)
        {
            UserInfo_UserDelete trans = new UserInfo_UserDelete();
            trans.UserInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
        }
        public void RetrieveByPKAdmin(DatabaseKey dbKey)
        {
            AdminUserInfo_RetrieveByPK trans = new AdminUserInfo_RetrieveByPK()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.UserInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            UpdateFromDatabaseObject(trans.UserInfo);
            //this.LoginUserName = trans.UserInfo.LoginUserName;

        }
        public void UpdateByPKAdmin(DatabaseKey dbKey)
        {
            UserInfo_UpdateByPKAdmin trans = new UserInfo_UpdateByPKAdmin()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.UserInfo = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.UserInfo);
        }
        public void RetrieveUserType(DatabaseKey dbKey)
        {
            UserInfo_RetrieveUserType trans = new UserInfo_RetrieveUserType()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };

            trans.UserInfo = this.ToDatabaseObjectUserType();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            UpdateFromDatabaseObject(trans.UserInfo);
        }
        public b_UserInfo ToDatabaseObjectUserType()
        {
            b_UserInfo userInfo = new b_UserInfo();
            userInfo = this.ToDatabaseObject();
            userInfo.UserName = this.UserName;

            return userInfo;
        }
        #endregion

        #region Private Variables
        private string m_LocalizationCulture;
        private string m_LocalizationLanguage;
        private string m_LocalizationLocation;
        private string m_LocalizationCompany;
        private string m_LocalizationHierarchicalLevel1;
        private string m_LocalizationHierarchicalLevel2;
        private string m_UIConfigurationLocation;
        private string m_UIConfigurationCompany;
        private string m_UIConfigurationHierarchicalLevel1;
        private string m_UIConfigurationHierarchicalLevel2;
        private List<string> m_LocalizationValues;
        private List<string> m_UIConfigurationValues;
        #endregion

        #region Properties
        [DataMember]
        public string UserName { get; set; }

        [DataMember]
        public string FullName
        {
            get { return FirstName + " " + LastName; }
        }

        [DataMember]
        public string FullNameByLastName
        {
            get
            {
                if (string.IsNullOrWhiteSpace(LastName))
                {
                    return FirstName;
                }
                else if (string.IsNullOrWhiteSpace(FirstName))
                {
                    return LastName;
                }
                else
                {
                    return string.Format("{0}, {1}", LastName, FirstName);
                }
            }
        }


        [DataMember]
        public long SecurityGroupId { get; set; }

        [DataMember]
        public long UserSecurityGroupId { get; set; }

        [DataMember]
        public string LocalizationCulture 
        {
            get { return GetLocalizationValue(1); }
            set
            {
                m_LocalizationCulture = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationLanguage 
        {
            get { return GetLocalizationValue(0); }
            set
            {
                m_LocalizationLanguage = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationLocation
        {
            get { return GetLocalizationValue(3); }
            set
            {
                m_LocalizationLocation = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationCompany
        {
            get { return GetLocalizationValue(2); }
            set
            {
                m_LocalizationCompany = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationHierarchicalLevel1
        {
            get { return GetLocalizationValue(4); }
            set
            {
                m_LocalizationHierarchicalLevel1 = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationHierarchicalLevel2
        {
            get { return GetLocalizationValue(5); }
            set
            {
                m_LocalizationHierarchicalLevel2 = value;
               Localization =  BuildLocalization();
            }
        }

        [DataMember]
        public string UIConfigurationLocation
        {
            get { return GetUIConfigurationValue(1); }
            set
            {
                m_UIConfigurationLocation = value;
                UIConfiguration = BuildUIConfiguration();
            }
        }

        [DataMember]
        public string UIConfigurationCompany
        {
            get { return GetUIConfigurationValue(0); }
            set
            {
                m_UIConfigurationCompany = value;
                UIConfiguration = BuildUIConfiguration();
            }
        }


        [DataMember]
        public string UIConfigurationHierarchicalLevel1
        {
            get { return GetUIConfigurationValue(2); }
            set
            {
                m_UIConfigurationHierarchicalLevel1 = value;
                UIConfiguration = BuildUIConfiguration();
            }
        }

        [DataMember]
        public string UIConfigurationHierarchicalLevel2
        {
            get { return GetUIConfigurationValue(3); }
            set
            {
                m_UIConfigurationHierarchicalLevel2 = value;
                UIConfiguration = BuildUIConfiguration();
            }
        }

        #endregion

        #region Private Methods
        private string GetLocalizationValue(int index)
        {
            if (m_LocalizationValues == null)
            {
                string[] temp = Localization.Split(new char[] { '-', '_', '/' }, StringSplitOptions.RemoveEmptyEntries);
                m_LocalizationValues = new List<string>(temp);
            }
            return (m_LocalizationValues.Count > index) ? m_LocalizationValues[index] : string.Empty;
        }

        private string BuildLocalization()
        {
            StringBuilder local = new StringBuilder();
            if (string.IsNullOrEmpty(m_LocalizationLanguage)) { return string.Empty; }
            local.Append(m_LocalizationLanguage);

            if (string.IsNullOrEmpty(m_LocalizationCulture)) { return local.ToString(); }
            local.Append("-");
            local.Append(m_LocalizationCulture);

            if (string.IsNullOrEmpty(m_LocalizationCompany)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_LocalizationCompany);

            if (string.IsNullOrEmpty(m_LocalizationLocation)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_LocalizationLocation);

            if (string.IsNullOrEmpty(m_LocalizationHierarchicalLevel1)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_LocalizationHierarchicalLevel1);

            if (string.IsNullOrEmpty(m_LocalizationHierarchicalLevel2)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_LocalizationHierarchicalLevel2);

            return local.ToString();
        }

        private string BuildUIConfiguration()
        {
            StringBuilder local = new StringBuilder();

            if (string.IsNullOrEmpty(m_UIConfigurationCompany)) { return string.Empty; }
            local.Append(m_UIConfigurationCompany);

            if (string.IsNullOrEmpty(m_UIConfigurationLocation)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_UIConfigurationLocation);

            if (string.IsNullOrEmpty(m_UIConfigurationHierarchicalLevel1)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_UIConfigurationHierarchicalLevel1);

            if (string.IsNullOrEmpty(m_UIConfigurationHierarchicalLevel2)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_UIConfigurationHierarchicalLevel2);

            return local.ToString();
        }

        private string GetUIConfigurationValue(int index)
        {
            if (m_UIConfigurationValues == null)
            {
                string[] temp = UIConfiguration.Split(new char[] { '-', '_', '/' }, StringSplitOptions.RemoveEmptyEntries);
                m_UIConfigurationValues = new List<string>(temp);
            }
            return (m_UIConfigurationValues.Count > index) ? m_UIConfigurationValues[index] : string.Empty;
        }
        #endregion
        public void Create_V2(DatabaseKey dbKey)
        {
            UserInfo_Create_V2 trans = new UserInfo_Create_V2();
            trans.UserInfo = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.UserInfo);
        }
        #region Update Data
        public void UpdateCustomForSomaxAdminDetails(DatabaseKey dbKey)
        {
            UserInfo_UpdateCustomForSomaxAdminDetails trans = new UserInfo_UpdateCustomForSomaxAdminDetails();
            trans.UserInfo = this.ToDatabaseObjectUpdateCustomForSomaxAdminDetails();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.UserInfo);
        }
        public b_UserInfo ToDatabaseObjectUpdateCustomForSomaxAdminDetails()
        {
            b_UserInfo userInfo = new b_UserInfo();
            userInfo = this.ToDatabaseObject();
            userInfo.ClientUserInfoListID = this.ClientUserInfoListID;
            userInfo.LoginClientID = this.LoginClientID;
            userInfo.UserName = this.UserName;
            return userInfo;
        }
        #endregion
        #region V2-962
        public void RetrieveUserDetailsByUserInfoId(DatabaseKey dbKey)
        {
            UserInfo_RetrieveUserDetailsByUserInfoIdFromAdmin trans = new UserInfo_RetrieveUserDetailsByUserInfoIdFromAdmin()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName

            };
            trans.UserInfo = this.ToDatabaseObjectForRetrieveUserDetailsByUserInfoId();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObjectForRetrieveUserDetailsByUserInfoId(trans.UserInfo);
        }
        public void UpdateFromDatabaseObjectForRetrieveUserDetailsByUserInfoId(b_UserInfo dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.CompanyName = dbObj.CompanyName;
            this.UserInfoId = dbObj.UserInfoId;
            this.UserName = dbObj.UserName;
            this.FirstName = dbObj.FirstName;
            this.LastName = dbObj.LastName;
            this.MiddleName = dbObj.MiddleName;
            this.Email = dbObj.Email;
            this.IsSuperUser = dbObj.IsSuperUser;
            this.IsActive = dbObj.IsActive;
            this.UserType = dbObj.UserType;
            this.SecurityProfileId = dbObj.SecurityProfileId;
            this.DefaultSiteId = dbObj.DefaultSiteId;
            this.Personnel_PersonnelId = dbObj.Personnel_PersonnelId;
            this.Personnel_CraftId = dbObj.Personnel_CraftId;
            this.SecurityProfileName = dbObj.SecurityProfileName;
            this.SecurityProfileDescription = dbObj.SecurityProfileDescription;
        }
        public b_UserInfo ToDatabaseObjectForRetrieveUserDetailsByUserInfoId()
        {
            b_UserInfo dbObj = new b_UserInfo();
            dbObj.ClientId = this.ClientId;
            dbObj.UserInfoId = this.UserInfoId;
            return dbObj;
        }
        #endregion
    }
}
