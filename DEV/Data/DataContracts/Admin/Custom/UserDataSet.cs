/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Common.Enumerations;
using Database.Business;
using Database.Transactions;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the Site table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class UserDataSet : DataContractBase 
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserDataSet()
        {
            Initialize();
        }

        public void Clear()
        {
            Initialize();
        }

        public void UpdateFromDatabaseObject(b_UserDataSet dbObj)
        {
            this.AdminDeploymentEnvironment = dbObj.AdminDeploymentEnvironment;
            this.ClientDeploymentEnvironment = dbObj.ClientDeploymentEnvironment;
            this.SessionId = dbObj.SessionId;

            Client client = new Client();
            client.UpdateFromDatabaseObject(dbObj.Client);
            this.Client = client;

            UserInfo user = new UserInfo();
            user.UpdateFromDatabaseObject(dbObj.User);
            this.User = user;

            LoginInfo loginInfo = new LoginInfo();
            loginInfo.UpdateFromDatabaseObject(dbObj.LoginInfo);
            this.LoginInfo = loginInfo;

            LoginAuditing loginAuditing = new LoginAuditing();
            loginAuditing.UpdateFromExtendedDatabaseObject(dbObj.LoginAuditing);
            this.LoginAuditing = loginAuditing;

            Personnel personnel = new Personnel();
            personnel.UpdateFromDatabaseObject(dbObj.Personnel);           
            this.Personnel = personnel;
            this.Personnel.PersonnelInitial = dbObj.Personnel.PersonnelInitial==null ? "" : dbObj.Personnel.PersonnelInitial;

            this.IsFound = dbObj.IsFound;

            ApprovalGroupSettings approvalGroupSettings = new ApprovalGroupSettings();
            approvalGroupSettings.UpdateFromDatabaseObjectForLogin(dbObj.ApprovalGroupSettings);
            this.ApprovalGroupSettings=approvalGroupSettings;
        }

        private void Initialize()
        {
            b_UserDataSet dbObj = new b_UserDataSet();
            UpdateFromDatabaseObject(dbObj);
        }

        public b_UserDataSet ToDatabaseObject()
        {
            b_UserDataSet dbObj = new b_UserDataSet();
            dbObj.SessionId = this.SessionId;
            dbObj.AdminDeploymentEnvironment = this.AdminDeploymentEnvironment;
            dbObj.ClientDeploymentEnvironment = this.ClientDeploymentEnvironment;
            dbObj.Client = this.Client.ToDatabaseObject();
            dbObj.User = this.User.ToDatabaseObject();
            dbObj.Personnel = this.Personnel.ToDatabaseObject();
            dbObj.LoginInfo = this.LoginInfo.ToDatabaseObject();
            dbObj.LoginAuditing = this.LoginAuditing.ToExtendedDatabaseObject();
            dbObj.IsFound = this.IsFound;
            dbObj.ApprovalGroupSettings = this.ApprovalGroupSettings.ToDatabaseObjectForLogin();
            return dbObj;
        }      

        #endregion

        #region Transaction Methods


        public void RetrieveBySessionId(DatabaseKey dbKey) 
        {
            UserDataSet_RetrieveBySessionId trans = new UserDataSet_RetrieveBySessionId()
			{
				CallerUserInfoId = dbKey.User.UserInfoId,
				CallerUserName = dbKey.UserName
			};
            trans.UserDataSet = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            UpdateFromDatabaseObject(trans.UserDataSet);
        }
        public void RetrieveBySessionIdAdmin(DatabaseKey dbKey)
        {
            UserDataSet_RetrieveBySessionIdAdmin trans = new UserDataSet_RetrieveBySessionIdAdmin()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.UserDataSet = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            UpdateFromDatabaseObject(trans.UserDataSet);
        }
        public void RetrievePersonnelByUserInfoId(DatabaseKey dbKey)
        {
            Personnel_RetrieveByUserInfoId trans = new Personnel_RetrieveByUserInfoId()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.UserDataSet = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.UseDatabase = DatabaseTypeEnum.Client;
            trans.Execute();

            UpdateFromDatabaseObject(trans.UserDataSet);
        }

        public void RetrieveDeploymentEnvironment(DatabaseKey dbKey)
        {
            DeploymentEnvironment_Retrieve trans = new DeploymentEnvironment_Retrieve()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.UserDataSet = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            UpdateFromDatabaseObject(trans.UserDataSet);
        }

        #endregion
        
        #region Properties

        /// <summary>
        /// SessionId property
        /// </summary>
        [DataMember]
        public Guid SessionId { get; set; }

        /// <summary>
        /// Client property
        /// </summary>
        [DataMember]
        public Client Client { get; set; }

        /// <summary>
        /// User property
        /// </summary>
        [DataMember]
        public UserInfo User { get; set; }

        /// <summary>
        /// LoginInfo property
        /// </summary>
        [DataMember]
        public LoginInfo LoginInfo { get; set; }

        /// <summary>
        /// User property
        /// </summary>
        [DataMember]
        public Personnel Personnel { get; set; }

        /// <summary>
        /// LoginAuditing property
        /// </summary>
        [DataMember]
        public LoginAuditing LoginAuditing { get; set; }

        /// <summary>
        /// AdminDeploymentEnvironment property
        /// </summary>
        [DataMember]
        public string AdminDeploymentEnvironment { get; set; }

        /// <summary>
        /// ClientDeploymentEnvironment property
        /// </summary>
        [DataMember]
        public string ClientDeploymentEnvironment { get; set; }

        /// <summary>
        /// IsFound property
        /// </summary>
        [DataMember]
        public bool IsFound { get; set; }
        /// <summary>
        /// ApprovalGroupSettings property
        /// </summary>
        [DataMember]
        public ApprovalGroupSettings ApprovalGroupSettings { get; set;}
        #endregion
        #region V2-419 Enterprise User Management - Add/Remove Sites
        public List<UserDataSet> RetrieveUserSiteDetailsByUserInfoID(DatabaseKey dbKey)
        {
            List<UserDataSet> userList = new List<UserDataSet>();
            UserDataSet_RetrieveUserSiteDetialsByUserID trans = new UserDataSet_RetrieveUserSiteDetialsByUserID()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.UserDetails = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            userList = UpdateFromDatabaseObjectList(trans.UserDetailsList, dbKey.User.UserInfoId);

            return userList;

        }
        public static List<UserDataSet> UpdateFromDatabaseObjectList(List<b_UserDataSet> dbObj, long userInfoId)
        {
            List<UserDataSet> result = new List<UserDataSet>();
            foreach (b_UserDataSet contact in dbObj)
            {
                UserDataSet tmp = new UserDataSet();
                tmp.UpdateFromDatabaseExtendedObject(contact);
                result.Add(tmp);
            }
            return result;
        }

        public void UpdateFromDatabaseExtendedObject(b_UserDataSet dbObj)
        {
            this.AdminDeploymentEnvironment = dbObj.AdminDeploymentEnvironment;
            this.ClientDeploymentEnvironment = dbObj.ClientDeploymentEnvironment;
            this.SessionId = dbObj.SessionId;

            Client client = new Client();
            client.UpdateFromDatabaseObject(dbObj.Client);
            this.Client = client;

            UserInfo user = new UserInfo();
            user.UpdateFromDatabaseObject(dbObj.User);
            this.User = user;

            LoginInfo loginInfo = new LoginInfo();
            loginInfo.UpdateFromDatabaseObject(dbObj.LoginInfo);
            this.LoginInfo = loginInfo;

            LoginAuditing loginAuditing = new LoginAuditing();
            loginAuditing.UpdateFromExtendedDatabaseObject(dbObj.LoginAuditing);
            this.LoginAuditing = loginAuditing;

            Personnel personnel = new Personnel();
            personnel.UpdateFromDatabaseObjectExtendedForSelectedUser(dbObj.Personnel);
            this.Personnel = personnel;
            this.Personnel.PersonnelInitial = dbObj.Personnel.PersonnelInitial == null ? "" : dbObj.Personnel.PersonnelInitial;

            this.IsFound = dbObj.IsFound;
        }
        #endregion
    }
}
