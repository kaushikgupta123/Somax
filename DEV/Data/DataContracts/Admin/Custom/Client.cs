/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Database.Business;
using System.Data.SqlClient;
using System.Data;
using Database.Transactions;
using Database;

namespace DataContracts
{
    public partial class Client : DataContractBase, IStoredProcedureValidation
    {
        #region properties
        public List<b_Client> listOfClient { get; set; }
        public string SearchText { get; set; }
        public Int32 TotalCount { get; set; }
        public string Name { get; set; }
        public string Contact { get; set; }
        public Int32 CustomQueryDisplayId { get; set; }
        public string OrderbyColumn { get; set; }
        public string OrderBy { get; set; }
        public Int32 OffSetVal { get; set; }
        public Int32 NextRow { get; set; }
        public DateTime CreateDate { get; set; }
        public Int32 Count { get; set; }
        public String LocalizationName { get; set; }
        public String TimeZoneName { get; set; }
        #region V2-964
        public long SiteId { get; set; }
        public int ChildCount { get; set; }
        //public string SiteName { get; set; }
        //public string SiteDescription { get; set; }
        //public string SiteTimezone { get; set; }
        //public bool APM { get; set; }
        //public bool CMMS { get; set; }
        //public int SiteMaxAppUsers { get; set; }
        //public int SiteMaxSanitationUsers { get; set; }
        #endregion
        #endregion

        public List<Client> UpdateFromDatabaseObjectList(List<b_Client> dbObj)
        {
            List<Client> result = new List<Client>();
            foreach (b_Client client in dbObj)
            {
                Client tmp = new Client();
                tmp.UpdateFromDatabaseObject(client);
                result.Add(tmp);
            }

            return result;
        }

        public List<Client> RetrieveAll(DatabaseKey dbKey)
        {
            Client_RetrieveAll trans = new Client_RetrieveAll()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.ClientList = new List<b_Client>();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return this.UpdateFromDatabaseObjectList(trans.ClientList);
        }

        public List<Client> RetrieveByClientSearch(DatabaseKey dbKey)
        {
            Client_RetrieveByClientSearch trans = new Client_RetrieveByClientSearch()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            //trans.ClientList = this.ToDatabaseObjectList();
            trans.Client = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return UpdateFromDatabaseObjectList(trans.ClientList);
        }

        public List<StoredProcValidationError> RetrieveStoredProcValidationData(DatabaseKey dbKey)
        {
            Client_Validate trans = new Client_Validate()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.Client = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            List<StoredProcValidationError> errors = StoredProcValidationError.UpdateFromDatabaseObjects(trans.StoredProcValidationErrorList);

            return errors;

        }

        public void CreateWithValidation(DatabaseKey dbKey)
        {
            this.Validate<Client>(dbKey);

            if (this.IsValid) {
                CreateBySomaxAdmin(dbKey);
            }
        }

        //--------------------Added By Indusnet Technologies--------------------------------------------
        public long CreateClientSecurityGroup(DatabaseKey dbKey, string ClientConnectionString, string ClientSecurityGroupName)
        {
            Client_SecurityGroupCreate trans = new Client_SecurityGroupCreate();
            trans.Client = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.ConnectionString = ClientConnectionString;
            trans.SecurityGroupName = ClientSecurityGroupName;
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObject(trans.Client);
            return (trans.retSecurityGroupId);
        }

        public bool CheckIsClientConnectionStringValid(string StrConnectionString)
        {
            bool IsValid = false;

            System.Data.Common.DbConnectionStringBuilder dbConBuild = new System.Data.Common.DbConnectionStringBuilder();

            try
            {

                dbConBuild.ConnectionString = StrConnectionString;
                SqlConnection con = null;
                con = new SqlConnection(StrConnectionString);
                try
                {
                    con.Open();
                    if (con.State == ConnectionState.Open)
                    {
                        IsValid = true;
                    }
                }
                catch (Exception ex)
                {
                    IsValid = false;
                }
                finally
                {
                    con.Close();
                    con.Dispose();
                }
            }
            catch (Exception ex)
            {
                IsValid = false;
            }      
                 
            return(IsValid);
        }

        public void UpdateFromDatabaseObjectExtended(b_Client dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.CreatedClientId = dbObj.CreatedClientId;          
        }

        public b_Client ToDatabaseObjectExtended()
        {
            b_Client dbObj = this.ToDatabaseObject();
            dbObj.CreatedClientId = this.CreatedClientId;         
            return dbObj;
        }

        public void CreateBySomaxAdmin(DatabaseKey dbKey)
        {
            Client_CreateBySomaxAdmin trans = new Client_CreateBySomaxAdmin();
            trans.Client = this.ToDatabaseObjectExtended();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObjectExtended(trans.Client);
        }

        public void RetrieveBySomaxAdmin(DatabaseKey dbKey)
        {
            Client_RetrieveBySomaxAdmin trans = new Client_RetrieveBySomaxAdmin();
            trans.Client = this.ToDatabaseObjectExtended();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObject(trans.Client);
        }

        public void RetrieveBySomaxAdmin_V2(DatabaseKey dbKey)
        {
            Client_RetrieveBySomaxAdmin_V2 trans = new Client_RetrieveBySomaxAdmin_V2();
            trans.Client = this.ToDatabaseObjectExtended();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();
            UpdateFromDatabaseObjectForRetrieveBySomaxAdmin(trans.Client);
        }

        public void UpdateFromDatabaseObjectForRetrieveBySomaxAdmin(b_Client dbObj)
        {
            this.UpdateFromDatabaseObject(dbObj);            
            this.TimeZoneName = dbObj.TimeZoneName; 
            this.CreateDate = dbObj.CreateDate; 
        }
        public void UpdateBySomaxAdmin(DatabaseKey dbKey)
        {
            Client_UpdateBySomaxAdmin trans = new Client_UpdateBySomaxAdmin();
            trans.Client = this.ToDatabaseObject();
            trans.ChangeLog = GetChangeLogObject(dbKey);
            trans.dbKey = dbKey.ToTransDbKey();
            trans.vClientId = this.CreatedClientId;
            trans.Execute();

            // The create procedure changed the Update Index.
            UpdateFromDatabaseObject(trans.Client);
        }

        public List<Client> ClientRetrieveChunkSearchV2(DatabaseKey dbKey, string TimeZone)
        {
            Admin_RetrieveClientChunkSearchV2 trans = new Admin_RetrieveClientChunkSearchV2()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.Client = this.ToDateBaseObjectForChunkSearch();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            List<Client> Clientlist = new List<Client>();
            foreach (b_Client Client in trans.Client.listOfClient)
            {
                Client tmpClient = new Client();

                tmpClient.UpdateFromDatabaseObjectForClientChunkSearch(Client, TimeZone);
                Clientlist.Add(tmpClient);
            }
            return Clientlist;
        }

        public b_Client ToDateBaseObjectForChunkSearch()
        {
            b_Client dbObj = this.ToDatabaseObject();
            dbObj.OrderBy = this.OrderBy;
            dbObj.OrderbyColumn = this.OrderbyColumn;
            dbObj.OffSetVal = this.OffSetVal;
            dbObj.NextRow = this.NextRow;
            dbObj.CustomQueryDisplayId = this.CustomQueryDisplayId;
            dbObj.CreatedClientId = this.CreatedClientId;
            dbObj.SiteId = this.SiteId;
            dbObj.Name = this.Name;
            dbObj.Contact = this.Contact;
            dbObj.SearchText = this.SearchText;            
            return dbObj;

        }


        public void UpdateFromDatabaseObjectForClientChunkSearch(b_Client dbObj, string TimeZone)
        {
            this.UpdateFromDatabaseObject(dbObj);
            this.Name= dbObj.Name;
            this.Contact = dbObj.Contact;
            this.CreateDate = dbObj.CreateDate;           
            this.ChildCount = dbObj.ChildCount;
            this.TotalCount = dbObj.TotalCount;

        }

        //public List<Client> RetrieveAllActiveClient(DatabaseKey dbKey)
        //{
        //    Client_RetrieveAllActive trans = new Client_RetrieveAllActive();
        //    trans.ClientList = this.listOfClient;
        //    trans.dbKey = dbKey.ToTransDbKey();

        //    trans.Execute();

        //    List<b_Client> client = trans.ClientList;
        //    List<Client> result = UpdateFromDatabaseObjectList(client);

        //    return result;

        //}


        public List<Client> RetrieveAllActiveClient(DatabaseKey dbKey)
        {
            Client_RetrieveAllActive trans = new Client_RetrieveAllActive()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
         trans.Client = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            List<Client> Clientlist = new List<Client>();
            foreach (b_Client bClient in trans.ClientList)
            {
                Client tmpClient = new Client();

                tmpClient.UpdateFromDatabaseObjectForActiveClient(bClient);
                Clientlist.Add(tmpClient);
            }
            return Clientlist;
        }

       

        public void UpdateFromDatabaseObjectForActiveClient(b_Client dbObj)
        {         
            this.ClientId = dbObj.ClientId;
            this.CompanyName = dbObj.CompanyName;
           
        }

        public List<Client> RetrieveCountForUserExist(DatabaseKey dbKey)
        {
            Retrieve_CountforCompanyName trans = new Retrieve_CountforCompanyName()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.Client = this.ToDatabaseObject();
            trans.Client.CreatedClientId = this.CreatedClientId;
            trans.Client.Name = this.Name;
            trans.dbKey = dbKey.ToTransDbKey();

            trans.Execute();
            UpdateFromDatabaseObject(trans.Client);
            List<Client> ClientList = new List<Client>();
            foreach (b_Client Client in trans.countList)
            {
                Client tmpClient = new Client()
                {
                    Count = Client.Count,
                };
                ClientList.Add(tmpClient);
            }
            return ClientList;
        }


        //public List<Client> RetrieveAllActiveClient(DatabaseKey dbKey)
        //{
        //    Client_RetrieveAllActive trans = new Client_RetrieveAllActive();
        //    trans.ClientList = this.ToDatabaseObject();
        //    trans.dbKey = dbKey.ToTransDbKey();

        //    trans.Execute();

        //    List<b_Client> lookup = trans.ClientList;
        //    List<Client> result = UpdateFromDatabaseClientList(lookup);

        //    return result;

        //}
        //public static List<Client> UpdateFromDatabaseClientList(List<b_Client> dbObjs)
        //{
        //    List<Client> result = new List<Client>();

        //    foreach (b_Client dbObj in dbObjs)
        //    {
        //        Client tmp = new Client();
        //        tmp.UpdateFromDatabaseObject(dbObj);
        //        result.Add(tmp);
        //    }
        //    return result;
        //}
        //--------------------End Added By Indusnet Technologies--------------------------------------------

        #region Properties


        //---------------------Added By Indusnet Technologies-------------------------------------------------
        [DataMember]
        public string LocalizationLanguageAndCulture
        {
            get 
            {
                if (!string.IsNullOrEmpty(GetLocalizationValue(0)) && !string.IsNullOrEmpty(GetLocalizationValue(1)))
                {
                  // SOM-???? 2019-07-16 - RKL 
                  //return (GetLocalizationValue(1) + "-" + GetLocalizationValue(0));
                  return (GetLocalizationValue(0) + "-" + GetLocalizationValue(1));
                }
                else
                {
                    return (string.Empty);
                }
               
            }
            set
            {
                string[] temp = value.Split(new char[] {'-'}, StringSplitOptions.RemoveEmptyEntries);

                m_LocalizationLanguage = temp.Length > 0 ? temp[0] : string.Empty;
                m_LocalizationCulture = temp.Length > 0 ? temp[1] : string.Empty; ;
                Localization = BuildLocalization();
            }
        }
        //---------------------End Added By Indusnet Technologies---------------------------------------------


        [DataMember]
        public string LocalizationCulture
        {
            get { return GetLocalizationValue(1); }
            set
            {
                m_LocalizationCulture = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationLanguage
        {
            get { return GetLocalizationValue(0); }
            set
            {
                m_LocalizationLanguage = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationLocation
        {
            get { return GetLocalizationValue(3); }
            set
            {
                m_LocalizationLocation = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationCompany
        {
            get { return GetLocalizationValue(2); }
            set
            {
                m_LocalizationCompany = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationHierarchicalLevel1
        {
            get { return GetLocalizationValue(4); }
            set
            {
                m_LocalizationHierarchicalLevel1 = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string LocalizationHierarchicalLevel2
        {
            get { return GetLocalizationValue(5); }
            set
            {
                m_LocalizationHierarchicalLevel2 = value;
                Localization = BuildLocalization();
            }
        }

        [DataMember]
        public string UIConfigurationLocation
        {
            get { return GetUIConfigurationValue(1); }
            set
            {
                m_UIConfigurationLocation = value;
                UIConfiguration = BuildUIConfiguration();
            }
        }

        [DataMember]
        public string UIConfigurationCompany
        {
            get { return GetUIConfigurationValue(0); }
            set
            {
                m_UIConfigurationCompany = value;
                UIConfiguration = BuildUIConfiguration();
            }
        }


        [DataMember]
        public string UIConfigurationHierarchicalLevel1
        {
            get { return GetUIConfigurationValue(2); }
            set
            {
                m_UIConfigurationHierarchicalLevel1 = value;
                UIConfiguration = BuildUIConfiguration();
            }
        }

        [DataMember]
        public string UIConfigurationHierarchicalLevel2
        {
            get { return GetUIConfigurationValue(3); }
            set
            {
                m_UIConfigurationHierarchicalLevel2 = value;
                UIConfiguration = BuildUIConfiguration();
            }
        }

        #endregion

        #region Private Variables
        private string m_LocalizationCulture;
        private string m_LocalizationLanguage;
        private string m_LocalizationLocation;
        private string m_LocalizationCompany;
        private string m_LocalizationHierarchicalLevel1;
        private string m_LocalizationHierarchicalLevel2;
        private string m_UIConfigurationLocation;
        private string m_UIConfigurationCompany;
        private string m_UIConfigurationHierarchicalLevel1;
        private string m_UIConfigurationHierarchicalLevel2;
        private List<string> m_LocalizationValues;
        private List<string> m_UIConfigurationValues;

        public long CreatedClientId { get; set; }
        #endregion

        #region Private Methods
        private string GetLocalizationValue(int index)
        {
            if (m_LocalizationValues == null)
            {
                // Get the localization values from Localization
                string[] temp = Localization.Split(new char[] { '-', '_', '/' }, StringSplitOptions.RemoveEmptyEntries);
                m_LocalizationValues = new List<string>(temp);
            }
            return (m_LocalizationValues.Count > index) ? m_LocalizationValues[index] : string.Empty;
        }

        private string BuildLocalization()
        {
            StringBuilder local = new StringBuilder();
            if (string.IsNullOrEmpty(m_LocalizationLanguage)) { return string.Empty; }
            local.Append(m_LocalizationLanguage);

            if (string.IsNullOrEmpty(m_LocalizationCulture)) { return local.ToString(); }
            local.Append("-");
            local.Append(m_LocalizationCulture);

            if (string.IsNullOrEmpty(m_LocalizationCompany)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_LocalizationCompany);

            if (string.IsNullOrEmpty(m_LocalizationLocation)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_LocalizationLocation);

            if (string.IsNullOrEmpty(m_LocalizationHierarchicalLevel1)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_LocalizationHierarchicalLevel1);

            if (string.IsNullOrEmpty(m_LocalizationHierarchicalLevel2)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_LocalizationHierarchicalLevel2);

            return local.ToString();
        }

        private string BuildUIConfiguration()
        {
            StringBuilder local = new StringBuilder();

            if (string.IsNullOrEmpty(m_UIConfigurationCompany)) { return string.Empty; }
            local.Append(m_UIConfigurationCompany);

            if (string.IsNullOrEmpty(m_UIConfigurationLocation)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_UIConfigurationLocation);

            if (string.IsNullOrEmpty(m_UIConfigurationHierarchicalLevel1)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_UIConfigurationHierarchicalLevel1);

            if (string.IsNullOrEmpty(m_UIConfigurationHierarchicalLevel2)) { return local.ToString(); }
            local.Append("/");
            local.Append(m_UIConfigurationHierarchicalLevel2);

            return local.ToString();
        }

        private string GetUIConfigurationValue(int index)
        {
            if (m_UIConfigurationValues == null)
            {
                // Get the UI Configuration values from UIConfiguration
                string[] temp = UIConfiguration.Split(new char[] { '-', '_', '/' }, StringSplitOptions.RemoveEmptyEntries);
                m_UIConfigurationValues = new List<string>(temp);
            }
            return (m_UIConfigurationValues.Count > index) ? m_UIConfigurationValues[index] : string.Empty;
        }
        #endregion

        #region V2-964
        public void CreateBySomaxAdminV2(DatabaseKey dbKey)
        {
            Client_CreateBySomaxAdminV2 trans = new Client_CreateBySomaxAdminV2();
            trans.Client = this.ToDatabaseObjectForAddClient();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            // The create procedure may have populated an auto-incremented key. 
            UpdateFromDatabaseObjectExtended(trans.Client);
        }
        public b_Client ToDatabaseObjectForAddClient()
        {
            b_Client dbObj = new b_Client();
            dbObj.CreatedClientId = this.CreatedClientId;
            dbObj.CompanyName = this.CompanyName;
            dbObj.LegalName = this.LegalName;
            dbObj.PrimaryContact = this.PrimaryContact;
            dbObj.Email = this.Email;
            dbObj.BusinessType = this.BusinessType;
            dbObj.PackageLevel = this.PackageLevel;
            dbObj.MaxSites = this.MaxSites;
            dbObj.SiteControl = this.SiteControl;
            dbObj.MaxAppUsers = this.MaxAppUsers;
            dbObj.MaxSanitationUsers = this.MaxSanitationUsers;
            dbObj.MaxWorkRequestUsers = this.MaxWorkRequestUsers;
            dbObj.Localization = this.Localization;
            dbObj.LocalizationLanguage = this.LocalizationLanguage;
            dbObj.LocalizationCulture = this.LocalizationCulture;
            return dbObj;
        }
        
        #endregion
    }
}
