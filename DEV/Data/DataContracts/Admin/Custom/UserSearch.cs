/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Database.Business;
using Data.Database;
using Common.Constants;

namespace DataContracts
{
    /// <summary>
    /// Business object that stores a record from the LoginAuditing table.
    /// </summary>
    [Serializable()]
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/SOMAX.DataContracts")]
    public partial class UserSearch : DataContractBase
    {
        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserSearch()
        {
            Initialize();
        }

        private List<UserSearch> UpdateFromDatabaseObjectList(List<b_UserSearch> dbObj)
        {
            List<UserSearch> result = new List<UserSearch>();
            foreach (b_UserSearch userSearch in dbObj)
            {
                UserSearch tmp = new UserSearch();
                tmp.UpdateFromDatabaseObject(userSearch);
                result.Add(tmp);
            }

            return result;
        }
        private List<UserSearch> UpdateFromDatabaseObjectAdminList(List<b_UserSearch> dbObj)
        {
            List<UserSearch> result = new List<UserSearch>();
            foreach (b_UserSearch userSearch in dbObj)
            {
                UserSearch tmp = new UserSearch();
                tmp.UpdateFromDatabaseObjectAdmin(userSearch);
                result.Add(tmp);
            }

            return result;
        }

        private void Initialize()
        {
            b_UserSearch dbObj = new b_UserSearch();
            this.ClientId = dbObj.ClientId;
            this.FirstName = dbObj.FirstName;
            this.LastName = dbObj.LastName;
            this.UserName = dbObj.UserName;
            this.UserInfoId = dbObj.UserInfoId;
            this.LoginInfoId = dbObj.LoginInfoId;
            this.CompanyName = dbObj.CompanyName;
            this.Email = dbObj.Email;
            this.IsActive = dbObj.IsActive;
            this.IsSuperUser = dbObj.IsSuperUser;
            this.DefaultSiteId = dbObj.DefaultSiteId;
            this.UserType = dbObj.UserType;
            this.PersonnelClientLookupId = dbObj.PersonnelClientLookupId;
            this.PersonnelCraftId = dbObj.PersonnelCraftId;
            this.PersonnelShift = dbObj.PersonnelShift;
            this.CraftDescription = dbObj.CraftDescription;
            this.SecurityProfileId = dbObj.SecurityProfileId;
            this.SecurityProfile = string.Empty;

        }

        public b_UserSearch ToDatabaseObject()
        {
            b_UserSearch dbObj = new b_UserSearch();
            dbObj.ClientId = this.ClientId;
            dbObj.FirstName = this.FirstName;
            dbObj.LastName = this.LastName;
            dbObj.UserName = this.UserName;
            dbObj.UserInfoId = this.UserInfoId;
            dbObj.LoginInfoId = this.LoginInfoId;
            dbObj.CompanyName = this.CompanyName;
            dbObj.Email = this.Email;
            dbObj.IsActive = this.IsActive;
            dbObj.IsSuperUser = this.IsSuperUser;
            dbObj.DefaultSiteId = this.DefaultSiteId;
            dbObj.UserType = this.UserType;
            dbObj.PersonnelClientLookupId = this.PersonnelClientLookupId;
            dbObj.PersonnelCraftId = this.PersonnelCraftId;
            dbObj.PersonnelShift = this.PersonnelShift;
            dbObj.CraftDescription = this.CraftDescription;
            dbObj.SecurityProfileId = this.SecurityProfileId;
            /* V2-402 */
            dbObj.PackageLevel = this.PackageLevel;
            dbObj.SearchText = this.SearchText;
            dbObj.CaseNo = this.CaseNo;
            dbObj.Offset = this.Offset;
            dbObj.NextRow = this.Nextrow;
            dbObj.OrderBy = this.OrderBy;
            dbObj.OrderByColumn = this.OrderByColumn;
            dbObj.SelectedSites = this.SelectedSites;
            dbObj.TotalCount = this.TotalCount;
            dbObj.SiteCount = this.SiteCount;
            dbObj.SecurityProfileDescription = this.SecurityProfileDescription;
            dbObj.SiteName = this.SiteName;
            /* V2-402 */
            dbObj.SecurityProfileIds = this.SecurityProfileIds;/* V2-802 */
            #region V2-905
            dbObj.Shift = this.Shift;
            dbObj.IsActiveStatus = this.IsActiveStatus;
            #endregion
            dbObj.EmployeeId = this.EmployeeId; //V2-1160
            return dbObj;
        }

        public void UpdateFromDatabaseObject(b_UserSearch dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.FirstName = dbObj.FirstName;
            this.LastName = dbObj.LastName;
            this.UserName = dbObj.UserName;
            this.UserInfoId = dbObj.UserInfoId;
            this.LoginInfoId = dbObj.LoginInfoId;
            this.CompanyName = dbObj.CompanyName;
            this.Email = dbObj.Email;
            this.IsActive = dbObj.IsActive;
            this.IsSuperUser = dbObj.IsSuperUser;
            this.DefaultSiteId = dbObj.DefaultSiteId;
            this.UserType = dbObj.UserType;
            this.PersonnelClientLookupId = dbObj.PersonnelClientLookupId;
            this.PersonnelCraftId = dbObj.PersonnelCraftId;
            this.PersonnelShift = dbObj.PersonnelShift;
            this.CraftDescription = dbObj.CraftDescription;
            this.SecurityProfileId = dbObj.SecurityProfileId;
            this.EmployeeId = dbObj.EmployeeId; //V2-1160
            // RKL - SOM-1681 - Update the SecurityProfile using localization
            switch (this.SecurityProfileId)
            {
                case 1:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Admin;
                    break;
                case 2:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile1;
                    break;
                case 3:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile2;
                    break;
                case 4:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile3;
                    break;
                case 5:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile4;
                    break;
                case 6:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile5;
                    break;
                case 7:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile6;
                    break;
                case 8:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile7;
                    break;
                case 9:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_WorkRequest;
                    break;
                case 10:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Sanitation;
                    break;
                case 11:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Inventory;
                    break;
                case 12:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile8;
                    break;
                case 13:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile9;
                    break;
                case 14:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile10;
                    break;
                case 15:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile11;
                    break;
                case 16:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile12;
                    break;
                case 17:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile13;
                    break;
                case 18:
                    this.SecurityProfile = SecurityProfileConstants.SOMAX_Profile14;
                    break;
                case 0:
                    this.SecurityProfile = "No Profile Set";
                    break;
                default:
                    //this.SecurityProfile = "Invalid Profile";
                    this.SecurityProfile = "New Profile";
                    break;
            }

            /* V2-402 */
            this.PackageLevel = dbObj.PackageLevel;
            this.SearchText = dbObj.SearchText;
            this.CaseNo = dbObj.CaseNo;
            this.Offset = dbObj.Offset;
            this.Nextrow = dbObj.NextRow;
            this.OrderBy = dbObj.OrderBy;
            this.OrderByColumn = dbObj.OrderByColumn;
            this.SelectedSites = dbObj.SelectedSites;
            this.TotalCount = dbObj.TotalCount;
            this.SiteCount = dbObj.SiteCount;
            this.SecurityProfileDescription = dbObj.SecurityProfileDescription;
            this.SiteName = dbObj.SiteName;
            /* V2-402 */
        }

        public void UpdateFromDatabaseObjectAdmin(b_UserSearch dbObj)
        {

            this.ClientId = dbObj.ClientId;
            this.FirstName = dbObj.FirstName;
            this.LastName = dbObj.LastName;
            this.UserName = dbObj.UserName;
            this.UserInfoId = dbObj.UserInfoId;
            this.LoginInfoId = dbObj.LoginInfoId;
            this.CompanyName = dbObj.CompanyName;
            this.Email = dbObj.Email;
            this.IsActive = dbObj.IsActive;
            this.IsSuperUser = dbObj.IsSuperUser;
            this.DefaultSiteId = dbObj.DefaultSiteId;
            this.UserType = dbObj.UserType;
            this.PersonnelClientLookupId = dbObj.PersonnelClientLookupId;
            this.PersonnelCraftId = dbObj.PersonnelCraftId;
            this.PersonnelShift = dbObj.PersonnelShift;
            this.CraftDescription = dbObj.CraftDescription;
            this.SecurityProfileId = dbObj.SecurityProfileId;
        }
        #endregion

        #region Transaction Methods
        /*
         * Removed By RKL 2019-May-10 - Not Used
                public List<UserSearch> RetrieveByUserSearch(DatabaseKey dbKey)
                {
                    UserSearch_Retrieve trans = new UserSearch_Retrieve()
                    {
                        CallerUserInfoId = dbKey.User.UserInfoId,
                        CallerUserName = dbKey.UserName
                    };
                    trans.UserSeach = this.ToDatabaseObject();
                    trans.dbKey = dbKey.ToTransDbKey();
                    trans.Execute();

                    return UpdateFromDatabaseObject(trans.UserSearchList);
                }
        */
        //---------------------Added By Indusnet Technology-----------------

        public List<UserSearch> RetrieveUserListFromAdmin(DatabaseKey dbKey)
        {
            UserSearch_RetrieveUserListFromAdmin trans = new UserSearch_RetrieveUserListFromAdmin()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.UserSeach = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return UpdateFromDatabaseObjectAdminList(trans.UserSearchList);
        }

        public List<UserSearch> RetrieveUserListByClientAndSite(DatabaseKey dbKey)
        {
            UserSearch_RetrieveUserByClientAndSite trans = new UserSearch_RetrieveUserByClientAndSite()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName
            };
            trans.UserSeach = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return UpdateFromDatabaseObjectList(trans.UserSearchList);
        }
        //--------------------End Added By Indusnet Technology--------------
        #endregion

        #region V2-402
        public List<UserSearch> RetrieveUserSearchListForEnterprise(DatabaseKey dbKey)
        {
            UserSearch_RetrieveUserSearchListForEnterprise trans = new UserSearch_RetrieveUserSearchListForEnterprise()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.UserSeach = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return UpdateFromDatabaseObjectList(trans.UserSearchList);
        }
        public List<UserSearch> RetrieveUserSearchListForBasicProfessional(DatabaseKey dbKey)
        {
            UserSearch_RetrieveUserSearchListForBasicProfessional trans = new UserSearch_RetrieveUserSearchListForBasicProfessional()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.UserSeach = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return UpdateFromDatabaseObjectList(trans.UserSearchList);
        }
        public List<UserSearch> RetrieveUserSearchCraftDetails(DatabaseKey dbKey)
        {
            UserSearch_RetrieveUserSearchCraftDetails trans = new UserSearch_RetrieveUserSearchCraftDetails()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.UserSeach = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return UpdateFromDatabaseObjectList(trans.UserSearchList);
        }
        #endregion

        public long ClientId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string UserName { get; set; }
        public long UserInfoId { get; set; }
        public long LoginInfoId { get; set; }
        public string CompanyName { get; set; }
        public string Email { get; set; }
        public bool IsActive { get; set; }
        public bool IsSuperUser { get; set; }
        public long DefaultSiteId { get; set; }
        public string UserType { get; set; }
        public string PersonnelClientLookupId { get; set; }
        public long PersonnelCraftId { get; set; }
        public string PersonnelShift { get; set; }
        public string CraftDescription { get; set; }
        public long SecurityProfileId { get; set; }
        public string SecurityProfile { get; set; }
        /* V2-402 */
        public string PackageLevel { get; set; }
        public string SearchText { get; set; }
        public int CaseNo { get; set; }
        public int Offset { get; set; }
        public int Nextrow { get; set; }
        public string OrderBy { get; set; }
        public string OrderByColumn { get; set; }
        public string SelectedSites { get; set; }
        public long TotalCount { get; set; }
        public int SiteCount { get; set; }
        public string SecurityProfileDescription { get; set; }
        public string SiteName { get; set; }
        /* V2-402 */
        public string SecurityProfileIds { get; set; } //V2-802
        #region V2-905
        public string Shift { get; set; }
        public bool ? IsActiveStatus { get;set; }
        #endregion
        #region V2-962
        public string SecurityProfileName { get; set; }
        public List<UserSearch> RetrieveUserSearchListForAdmin(DatabaseKey dbKey)
        {
            UserSearch_RetrieveUserSearchListForAdmin trans = new UserSearch_RetrieveUserSearchListForAdmin()
            {
                CallerUserInfoId = dbKey.User.UserInfoId,
                CallerUserName = dbKey.UserName,
            };
            trans.UserSeach = this.ToDatabaseObject();
            trans.dbKey = dbKey.ToTransDbKey();
            trans.Execute();

            return UpdateFromDatabaseObjectListForAdmin(trans.UserSearchList);
        }
        private List<UserSearch> UpdateFromDatabaseObjectListForAdmin(List<b_UserSearch> dbObj)
        {
            List<UserSearch> result = new List<UserSearch>();
            foreach (b_UserSearch userSearch in dbObj)
            {
                UserSearch tmp = new UserSearch();
                tmp.UpdateFromDatabaseObjectForAdmin(userSearch);
                result.Add(tmp);
            }

            return result;
        }
        public void UpdateFromDatabaseObjectForAdmin(b_UserSearch dbObj)
        {
            this.ClientId = dbObj.ClientId;
            this.FirstName = dbObj.FirstName;
            this.LastName = dbObj.LastName;
            this.UserName = dbObj.UserName;
            this.UserInfoId = dbObj.UserInfoId;
            this.CompanyName = dbObj.CompanyName;
            this.Email = dbObj.Email;
            this.IsActive = dbObj.IsActive;
            this.DefaultSiteId = dbObj.DefaultSiteId;
            this.SecurityProfileName = dbObj.SecurityProfileName;
            
         
            this.SearchText = dbObj.SearchText;
            this.CaseNo = dbObj.CaseNo;
            this.Offset = dbObj.Offset;
            this.Nextrow = dbObj.NextRow;
            this.OrderBy = dbObj.OrderBy;
            this.OrderByColumn = dbObj.OrderByColumn;
            this.TotalCount = dbObj.TotalCount;
            this.SiteCount = dbObj.SiteCount;
            
          
           
        }
        #endregion
        public string EmployeeId { get; set; } //V2-1160
    }
}

