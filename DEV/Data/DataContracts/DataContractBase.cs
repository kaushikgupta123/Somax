/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text.RegularExpressions;
using Database.Business;
using Database.Transactions;
using Common.Constants;
using System.Linq;

namespace DataContracts
{
    [Serializable()]
    public class DataContractBase
    {

        #region Constructors
        public DataContractBase()
        {
            CallerUserInfoId = 0;
            CallerUserName = string.Empty;
            _auditHistory = new AuditHistory();
            AuditEnabled = false;
        }
        #endregion

        #region Properties
        public long CallerUserInfoId { get; set; }
        public string CallerUserName { get; set; }
        #endregion

        #region Properties for Stored Procedure Validation
        public List<string> ErrorMessages { get; set; }
        public List<string> ErrorObj { get; set; }
        public List<Int64> ErrorCodd { get; set; }
        public bool IsValid
        {
            get
            {
                if (ErrorMessages == null)
                {
                    return true;
                }
                else
                {
                    return (ErrorMessages.Count == 0);
                }
            }
        }
        #endregion

        #region Properties for Audit
        protected bool AuditEnabled { get; set; }
        protected long AuditTargetObjectId { get; set; }
        protected long AuditTargetSiteId { get; set; }
        protected long AuditTargetAreaId { get; set; }
        protected long AuditTargetDepartmentId { get; set; }
        protected long AuditTargetStoreRoomId { get; set; }
        #endregion

        #region Private Variables
        private AuditHistory _auditHistory;
        #endregion

        #region Public Methods
        /// <summary>
        /// Returns the string value of a the property.
        /// </summary>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public string GetPropertyValue(string propertyName)
        {
            foreach (PropertyInfo pi in this.GetType().GetProperties())
            {
                if (pi.Name.ToLower() == propertyName.ToLower())
                {
                    return pi.GetValue(this, null).ToString();
                }
            }
            return "";
        }

        public static List<string> GetDistinctEntriesFromTable(DatabaseKey databaseKey, string table, string column)
        {
            RetrieveDistinctColumnFromTable trans = new RetrieveDistinctColumnFromTable()
            {
                dbKey = databaseKey.ToTransDbKey(),
                Table = table,
                Column = column
            };
            trans.Execute();
            return trans.ColumnEntries;
        }

        public static long RetrieveIdByClientLookupId(DatabaseKey databaseKey, string table, string lookupId)
        {
            RetrieveIdFromClientLookupId trans = new RetrieveIdFromClientLookupId()
            {
                dbKey = databaseKey.ToTransDbKey(),
                Table = table,
                LookupId = lookupId
            };
            trans.Execute();
            return trans.Id;
        }

        #endregion

        #region Protected Methods
        protected List<KeyValuePair<string, string>> GetPropertyValueList()
        {
            List<KeyValuePair<string, string>> result = new List<KeyValuePair<string, string>>();

            foreach (PropertyInfo pi in this.GetType().GetProperties())
            {
                result.Add(new KeyValuePair<string, string>(pi.Name.ToLower(), pi.GetValue(this, null).ToString()));
            }

            return result;
        }

        protected void Validate<T>(DatabaseKey dbKey) where T : DataContractBase, IStoredProcedureValidation
        {
            T dataContractObj = (T)this;

            dataContractObj.ErrorMessages = new List<string>();
            dataContractObj.ErrorObj = new List<string>();
            dataContractObj.ErrorCodd = new List<Int64>();
            List<StoredProcValidationError> validationList = dataContractObj.RetrieveStoredProcValidationData(dbKey);
            if (validationList == null) { return; }
            foreach (StoredProcValidationError validation in validationList)
            {
                // Retrieve the error message based on the error code from localization
                Localizations _DcLoc = new Localizations();
                _DcLoc.LocaleId = dbKey.Localization;//"en-us"
                _DcLoc.ResourceSet = LocalizeResourceSetConstants.StoredProcValidation;
                List<Localizations> locValid = _DcLoc.RetrieveByResourceSet(dbKey).Where(v => v.ResourceId == validation.ErrorCode.ToString()).ToList();

                if (locValid != null && locValid.Count>0)
                {
                    if (!string.IsNullOrEmpty(locValid.First().Value))
                    {
                        string errorMessage = locValid.First().Value.Replace("{0}", validation.Arg0).Replace("{1}", validation.Arg1).Replace("{2}", validation.TableName);

                        dataContractObj.ErrorMessages.Add(errorMessage);
                        dataContractObj.ErrorCodd.Add(validation.ErrorCode);
                        dataContractObj.ErrorObj.Add(validation.Arg0);
                    }
                }
                else
                {
                    string errormessage = string.Format("Unable to locate error message {0} in the localization file", validation.ErrorCode);
                    dataContractObj.ErrorMessages.Add(errormessage);
                }

            }
        }

        protected void Set<T>(string propertyName, T newValue, ref T oldValue)
        {
            if (AuditEnabled)
            {
                if (!newValue.Equals(oldValue))
                {
                    // Remove the prefix
                    Regex regex = new Regex("set_");
                    string column = regex.Replace(propertyName, "", 1);

                    string tmpOldValue = (oldValue != null) ? oldValue.ToString() : "";
                    string tmpNewValue = (newValue != null) ? newValue.ToString() : "";

                    AuditColumn history = new AuditColumn() { Name = column, OldValue = tmpOldValue, NewValue = tmpNewValue };
                    _auditHistory.Add(history);

                }
            }

            // Assign the new value to the referenced variable
            oldValue = newValue;
        }

        protected b_ChangeLog BuildChangeLogDbObject(DatabaseKey dbKey)
        {
            b_ChangeLog ChangeLog = null;

            // If no have been made, return null
            if (_auditHistory.Count > 0)
            {
                ChangeLog audit = new ChangeLog()
                {
                    ClientId = dbKey.Client.ClientId,
                    TableName = this.GetType().Name,
                    ObjectId = this.AuditTargetObjectId,
                    UserName = dbKey.User.FullName,
                    UserInfoId = dbKey.User.UserInfoId,
                    SiteId = this.AuditTargetSiteId,
                    AreaId = this.AuditTargetAreaId,
                    DepartmentId = this.AuditTargetDepartmentId,
                    StoreroomId = this.AuditTargetStoreRoomId,
                    History = _auditHistory.Serialize()
                };

                ChangeLog = audit.ToDatabaseObject();
            }

            return ChangeLog;
        }

        #endregion

    }

}
