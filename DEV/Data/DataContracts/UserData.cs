/*
 ******************************************************************************
 * PROPRIETARY DATA 
 ******************************************************************************
 * This work is PROPRIETARY to SOMAX Inc and is protected 
 * under Federal Law as an unpublished Copyrighted work and under State Law as 
 * a Trade Secret. 
 ******************************************************************************
 * Copyright (c) 2011 by SOMAX Inc.
 * All rights reserved. 
 ******************************************************************************
 * THIS CODE HAS BEEN GENERATED BY AN AUTOMATED PROCESS.
 * DO NOT MODIFY BY HAND.    MODIFY THE TEMPLATE AND REGENERATE THE CODE 
 * USING THE CURRENT DATABASE IF MODIFICATIONS ARE NEEDED.
 ******************************************************************************
 */

using System;
using System.Configuration;
using Common.Constants;
using Common.Enumerations;

namespace DataContracts
{
    [Serializable()]
    public class UserData
    {
 
        #region Properties
        public Guid SessionId { get; set; }
        public DatabaseKey DatabaseKey { get; set; }
        public WebSiteEnum WebSite {get; set;}
        public LoginAuditing LoginAuditing { get; set; }
        public Security Security { get; set; }    // RKL - 2014-Jul-27
        public Site Site { get; set; }            // RKL - 2014-Jul-27
        public SiteMaintenance SiteMaint { get; set; }
        public bool IsLoggedInFromMobile { get; set; }

        #endregion

        #region Constructors
        public UserData()
        {
            DatabaseKey = new DatabaseKey();
            LoginAuditing = new LoginAuditing();
        }
        #endregion

        #region Public Methods 
        public void Retrieve(DatabaseKey dbkey)
        {
            if (SessionId.Equals(Guid.Empty)) { return; }

            UserDataSet userDataSet = new UserDataSet() { SessionId = this.SessionId };
            userDataSet.RetrieveBySessionId(dbkey);

            if (userDataSet.IsFound)
            {
                dbkey.ClientConnectionString = userDataSet.Client.ConnectionString;
                // Note: Once we've established the Admin DB, we'll retrieve the Deployment Environment from the client DB as well.
                userDataSet.RetrievePersonnelByUserInfoId(dbkey);
                //userDataSet.RetrieveDeploymentEnvironment(dbkey);

                // Build databasekeyalization, and UI Configuration objects
                BuildData(userDataSet);
            }
        }
        public void RetrieveAdmin(DatabaseKey dbkey)
        {
            if (SessionId.Equals(Guid.Empty)) { return; }

            UserDataSet userDataSet = new UserDataSet() { SessionId = this.SessionId };
            userDataSet.RetrieveBySessionIdAdmin(dbkey);

            if (userDataSet.IsFound)
            {
                dbkey.ClientConnectionString = userDataSet.Client.ConnectionString;
                // Note: Once we've established the Admin DB, we'll retrieve the Deployment Environment from the client DB as well.
                userDataSet.RetrievePersonnelByUserInfoId(dbkey);
                //userDataSet.RetrieveDeploymentEnvironment(dbkey);

                // Build databasekeyalization, and UI Configuration objects
                BuildDataAdmin(userDataSet);
            }
        }
        #endregion

        #region Private Methods


        private void BuildData(UserDataSet userDataSet)
        {
            this.DatabaseKey = new DatabaseKey()
            {
                AdminConnectionString = ConfigurationManager.ConnectionStrings[WebConfigConstants.ADMIN_CONNECTION_STRING].ToString(),
                ClientConnectionString = userDataSet.Client.ConnectionString,
                Client = userDataSet.Client,
                User = userDataSet.User,
                UserName = userDataSet.LoginInfo.UserName,
                Personnel = userDataSet.Personnel,
                AdminDeploymentEnvironment = userDataSet.AdminDeploymentEnvironment,
                ClientDeploymentEnvironment = userDataSet.ClientDeploymentEnvironment,
                CodeDeploymentEnvironment = ConfigurationManager.AppSettings[WebConfigConstants.CODE_DEPLOYMENT_ENVIRONMENT],
                EncryptionKey = ConfigurationManager.AppSettings[WebConfigConstants.ENCRYPTION_KEY],
                ApprovalGroupSettings = userDataSet.ApprovalGroupSettings
            };

            if (this.WebSite == WebSiteEnum.Admin)
            {
               
               // this.AdminUIConfiguration = Business.UIConfiguration.UIConfigurationCache.GetAdmin(this.DatabaseKey.UIConfiguration);
               // this.AdminPageOption = Business.PageOption.PageOptionCache.GetAdmin(this.DatabaseKey.Localization);
            }
            else if (this.WebSite == WebSiteEnum.Client)
            {
               
               // this.ClientUIConfiguration = Business.UIConfiguration.UIConfigurationCache.GetClient(this.DatabaseKey.UIConfiguration);
                // Added by RKL - Maybe later have userdataset contain the security information - one less trip to the server
                this.Security = new Security(this);
                this.Site = new Site()
                {
                  ClientId = this.DatabaseKey.Client.ClientId,
                  SiteId = this.DatabaseKey.User.DefaultSiteId
                };
                Site.Retrieve(this.DatabaseKey);
                #region System Unavailable Message
                string timeZone = Site.TimeZone;
                this.SiteMaint = new SiteMaintenance()
                {
                    TimeZone = timeZone,
                    SameDay = "y"
                };
                SiteMaint.RetrieveNextSch(this.DatabaseKey, timeZone);
                #endregion

            }

            LoginAuditing = userDataSet.LoginAuditing;
        }
        private void BuildDataAdmin(UserDataSet userDataSet)
        {
            this.DatabaseKey = new DatabaseKey()
            {
                AdminConnectionString = ConfigurationManager.ConnectionStrings[WebConfigConstants.ADMIN_CONNECTION_STRING].ToString(),
                ClientConnectionString = userDataSet.Client.ConnectionString,
                Client = userDataSet.Client,
                User = userDataSet.User,
                UserName = userDataSet.LoginInfo.UserName,
                Personnel = userDataSet.Personnel,
                AdminDeploymentEnvironment = userDataSet.AdminDeploymentEnvironment,
                ClientDeploymentEnvironment = userDataSet.ClientDeploymentEnvironment,
                CodeDeploymentEnvironment = ConfigurationManager.AppSettings[WebConfigConstants.CODE_DEPLOYMENT_ENVIRONMENT],
                EncryptionKey = ConfigurationManager.AppSettings[WebConfigConstants.ENCRYPTION_KEY]
            };

            if (this.WebSite == WebSiteEnum.Admin)
            {

                // this.AdminUIConfiguration = Business.UIConfiguration.UIConfigurationCache.GetAdmin(this.DatabaseKey.UIConfiguration);
                // this.AdminPageOption = Business.PageOption.PageOptionCache.GetAdmin(this.DatabaseKey.Localization);
            }
            else if (this.WebSite == WebSiteEnum.Client)
            {

                // this.ClientUIConfiguration = Business.UIConfiguration.UIConfigurationCache.GetClient(this.DatabaseKey.UIConfiguration);
                // Added by RKL - Maybe later have userdataset contain the security information - one less trip to the server
                this.Security = new Security(this);
                this.Site = new Site()
                {
                    ClientId = this.DatabaseKey.Client.ClientId,
                    SiteId = this.DatabaseKey.User.DefaultSiteId,
                    Localization = "en-us",
                    TimeZone= "US Eastern Standard Time"
                };
                //Site.Retrieve(this.DatabaseKey); as site id will be 0
                #region System Unavailable Message
                string timeZone = Site.TimeZone;
                this.SiteMaint = new SiteMaintenance()
                {
                    TimeZone = timeZone,
                    SameDay = "y"
                };
                SiteMaint.RetrieveNextSch(this.DatabaseKey, timeZone);
                #endregion

            }

            LoginAuditing = userDataSet.LoginAuditing;
        }
        #endregion

    }
}
