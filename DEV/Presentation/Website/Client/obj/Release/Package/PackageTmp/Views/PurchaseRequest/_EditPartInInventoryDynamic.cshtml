
@model Client.Models.PurchaseRequest.PurchaseRequestVM
@{
    var AttachedModelName = "EditPRLineItemPartInInventory";
    var fieldName = "";
    var fieldId = "";
    var EmptyLookupList = new List<SelectListItem> { new SelectListItem { } };
    var constAccount = "Account";
    string[] AccountColumns = { "accountid" };
    object Value = null;
    var constUNSPSC = "PartCategoryMaster";
    string[] UNSPSCColumns = { "unspsc" };
}

<div class="m-subheader">
    <div class="new-m-subheader">
        <div class="PageTitle">
            <div class="align-items-center separator">
                <h3 class="m-subheader__title ">
                    @Model.Loc.Where(a => a.ResourceId == "spnPurchaseRequest").FirstOrDefault().Value.ToString()
                </h3>
            </div>
        </div>

        <div class="NewBreadcrumbArea">
            <div class="newBreadcrumb">
                <ul>
                    <li><a href="/Dashboard/Dashboard">&nbsp;</a></li>
                    <li><a href="/PurchaseRequest/Index?page=Procurement_Requests">@Model.Loc.Where(a => a.ResourceId == "spnPdPurchaseRequestSearch").FirstOrDefault().Value.ToString()</a></li>
                    <li><a href="javascript:void(0)" id="brdprlineitem" data-val="@Model.EditPRLineItemPartInInventory.PurchaseRequestId">@Model.EditPRLineItemPartInInventory.ClientLookupId</a></li>
                    <li class="active">@Model.Loc.Where(a => a.ResourceId == "spnPdUpdateLineItem").FirstOrDefault().Value.ToString()</li>
                </ul>
                <div style="clear:both;"></div>
            </div>
        </div>
        <div style="clear:both;"></div>
    </div>
</div>

@Html.Partial("_ErrorDiv")
@if (Model.UIConfigurationDetails != null && Model.UIConfigurationDetails.Count > 0)
{
    using (Ajax.BeginForm("EditPRPartInInventoryDynamic", "PurchaseRequest", new AjaxOptions { HttpMethod = "Post", OnSuccess = "EditLineItemOnSuccess", OnBegin = "AjaxBeginFormBegin", OnComplete = "AjaxBeginFormComplete", OnFailure = "AjaxBeginFormFaillure" }, new { id = "frmPRLineItemEditDynamic" }))
    {
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-xl-12">
                <div class="row">
                    <div class="col-xl-12" id="btnnblock">
                        <div class="m-portlet" id="m_portlet" style="padding:15px;">
                            <div class="bottomBlock">
                                <div class="tabsArea nobg" id="Identifications" style="display:block;">
                                    <ul class="listView nobrd">
                                        @foreach (var data in Model.UIConfigurationDetails)
                                        {
                                            if (data.Section == true)
                                            {
                                                <li>
                                                    <span class="label"><strong>@data.SectionName</strong></span>
                                                </li>
                                                continue;
                                            }
                                            if (string.IsNullOrEmpty(data.ColumnName))
                                            {
                                                continue;
                                            }
                                            else if (!string.IsNullOrEmpty(data.ColumnName))
                                            {
                                                string colName = UtilityFunction.ReturnPropertyNameWithoutCaseComparison(data.ColumnName, Model.EditPRLineItemPartInInventory);
                                                if (string.IsNullOrEmpty(colName))
                                                {
                                                    continue;
                                                }
                                                data.ColumnName = colName;
                                            }

                                            fieldName = AttachedModelName + "." + data.ColumnName;
                                            fieldId = data.ColumnName;
                                            Value = Model.EditPRLineItemPartInInventory.GetType().GetProperty(data.ColumnName).GetValue(Model.EditPRLineItemPartInInventory);
                                            if (data.SystemRequired == true)
                                            {
                                                data.Required = true;
                                            }
                                            if (data.ColumnName == "PartId")
                                            {
                                                string TextFieldName = "", TextFieldId = "", TextFieldValue = "";
                                                TextFieldId = "PartClientLookupId";
                                                TextFieldName = AttachedModelName + "." + TextFieldId;
                                                TextFieldValue = Model.EditPRLineItemPartInInventory.GetType().GetProperty(TextFieldId).GetValue(Model.EditPRLineItemPartInInventory).ToString();
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    <span class="inputText">
                                                        @Html.TextBox(TextFieldName, TextFieldValue, new
                                                                           {
                                                                              id = TextFieldId,
                                                                              @class = "form-control search dropbtn readonly",
                                                                              @readonly = "readonly",
                                                                              autocomplete = "off"
                                                                           })
                                                    </span>
                                                </li>
                                                continue;
                                            }
                                            if (data.LookupType.ToLower() == DataDictionaryLookupTypeConstant.LookupList.ToLower() &&
                                            !string.IsNullOrEmpty(data.LookupName))
                                            {
                                                var LookUpList = Model.AllRequiredLookUplist
                                                .Where(x => x.lookupname == data.LookupName)
                                                .Select(x => new SelectListItem { Text = x.text, Value = x.value })
                                                .ToList();
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    <span class="inputText">
                                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                        @if (LookUpList != null && LookUpList.Count() > 0)
                                                        {
                                                            @Html.DropDownList(fieldName, LookUpList, "--Select--", new
                                                       {
                                                           id = fieldId,
                                                           @class = "form-control search select2picker",
                                                           style = "width:100%;"
                                                       })
                                                        }
                                                        else
                                                        {
                                                            @Html.DropDownList(fieldName, EmptyLookupList, "--Select--", new
                                                       {
                                                           id = fieldId,
                                                           @class = "form-control search select2picker",
                                                           style = "width:100%;"
                                                       })
                                                        }
                                                    </span>
                                                </li>
                                                continue;
                                            }
                                            @*if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAccount.ToLower())
            {
                <li>
                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                    <span class="inputText">
                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                        @if (Model.AccountList != null && Model.AccountList.Count() > 0)
                        {
                            @Html.DropDownList(fieldName, Model.AccountList, "--Select--", new
                       {
                           id = fieldId,
                           @class = "form-control search select2picker",
                           style = "width:100%;"
                       })
                        }
                        else
                        {
                            @Html.DropDownList(fieldName, EmptyLookupList, "--Select--", new
                       {
                           id = fieldId,
                           @class = "form-control search select2picker",
                           style = "width:100%;"
                       })
                        }
                    </span>
                </li>
                continue;
            }*@
                                            if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAccount.ToLower() && data.ColumnName.ToLower() == "AccountId".ToLower())
                                            {

                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)

                                                    @{
                                                        string TextFieldName = "", TextFieldId = "", TextFieldValue = "";
                                                        TextFieldId = "AccountClientLookupId";
                                                        TextFieldName = AttachedModelName + "." + TextFieldId;
                                                        TextFieldValue = Model.EditPRLineItemPartInInventory.GetType().GetProperty(TextFieldId).GetValue(Model.EditPRLineItemPartInInventory).ToString();
                                                    }
                                                    <span class="inputText">
                                                        <div class="dropdown dropTableOuter">
                                                            <div class="input-group">
                                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                                @if (Value == null)
                                                                {
                                                                    @Html.TextBox(fieldName, Value, new
                                                                    {
                                                                    id = fieldId,
                                                                    @class = "form-control search dropbtn readonly",
                                                                    @readonly = "readonly",
                                                                    autocomplete = "off"
                                                                    })

                                                                    @Html.TextBox(TextFieldName, TextFieldValue, new
                                                                    {
                                                                    id = TextFieldId,
                                                                    @class = "form-control search dropbtn readonly",
                                                                    @readonly = "readonly",
                                                                    autocomplete = "off",
                                                                    @style = "display:none"
                                                                    })
                                                                }
                                                                else
                                                                {
                                                                    @Html.TextBox(fieldName, Value, new
                                                                    {
                                                                    id = fieldId,
                                                                    @class = "form-control search dropbtn readonly",
                                                                    @readonly = "readonly",
                                                                    autocomplete = "off",
                                                                    @style = "display:none"
                                                                    })
                                                                    @Html.TextBox(TextFieldName, TextFieldValue, new
                                                                    {
                                                                    id = TextFieldId,
                                                                    @class = "form-control search dropbtn readonly",
                                                                    @readonly = "readonly",
                                                                    autocomplete = "off"
                                                                    })
                                                                }

                                                                @if (data.ViewOnly == false)
                                                                {
                                                                    if (string.IsNullOrEmpty(TextFieldValue))
                                                                    {
                                                                        <div class="input-group-btn">
                                                                            <button class="btn btn-white btntxtInputGroup ClearAccountModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                                                    data-valuefield="@fieldId" style="display:none;">
                                                                                <i id="srcicon" class="fa fa-close"></i>
                                                                            </button>
                                                                        </div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="input-group-btn">
                                                                            <button class="btn btn-white btntxtInputGroup ClearAccountModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                                                    data-valuefield="@fieldId">
                                                                                <i id="srcicon" class="fa fa-close"></i>
                                                                            </button>
                                                                        </div>
                                                                    }
                                                                    <div class="input-group-btn">
                                                                        <button class="btn btn-white btntxtInputGroup OpenAccountModalPopupGrid" type="button" data-textfield="@TextFieldId" data-valuefield="@fieldId">
                                                                            <i id="srcicon" class="fa fa-search"></i>
                                                                        </button>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </span>
                                                </li>
                                                continue;
                                            }
                                            if (data.ColumnName == "UnitCost")
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    <span class="inputText">
                                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                        @Html.UIConfigControl(fieldName, fieldId, data.ColumnType.ToLower(), data.MaxLength, data.ViewOnly)
                                                    </span>
                                                </li>

                                                string TextFieldName = "", TextFieldId = "", TextFieldValue = "";
                                                TextFieldId = "TotalCost";
                                                TextFieldName = AttachedModelName + "." + TextFieldId;
                                                TextFieldValue = Model.EditPRLineItemPartInInventory.GetType().GetProperty(TextFieldId).GetValue(Model.EditPRLineItemPartInInventory).ToString();
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(@Model.Loc.Where(a => a.ResourceId == "spnTotalCost").FirstOrDefault().Value.ToString(), false)
                                                    <span class="inputText">
                                                        @Html.TextBox(TextFieldName, TextFieldValue, new
                                                                           {
                                                                              id = TextFieldId,
                                                                              @class = "form-control search dropbtn readonly",
                                                                              @readonly = "readonly",
                                                                              autocomplete = "off"
                                                                           })
                                                    </span>
                                                </li>
                                                continue;
                                            }
                                            if (data.ColumnName == "Description")
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    <span class="inputText">
                                                        @Html.TextArea(fieldName, Value.ToString(), new
                                                                           {
                                                                              id = fieldId,
                                                                              @class = "form-control search multilineedit",
                                                                              autocomplete = "off"
                                                                           })
                                                    </span>
                                                </li>
                                                continue;
                                            }

                                            if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constUNSPSC.ToLower() && data.ColumnName.ToLower() == "UNSPSC".ToLower())
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)

                                                    @{
                                                        string TextFieldName = "", TextFieldId = "", TextFieldValue = "";
                                                        TextFieldId = "PartCategoryMasterClientLookupId";
                                                        TextFieldName = AttachedModelName + "." + TextFieldId;
                                                        TextFieldValue = Model.EditPRLineItemPartInInventory.GetType().GetProperty(TextFieldId).GetValue(Model.EditPRLineItemPartInInventory).ToString();
                                                    }
                                                    <span class="inputText">
                                                        <div class="dropdown dropTableOuter">
                                                            <div class="input-group">
                                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                                @if (Value == null)
                                                                {
                                                                    @Html.TextBox(fieldName, Value, new
                                                               {
                                                                   id = fieldId,
                                                                   @class = "form-control search dropbtn readonly",
                                                                   @readonly = "readonly",
                                                                   autocomplete = "off"
                                                               })

                                                                    @Html.TextBox(TextFieldName, TextFieldValue, new
                                                               {
                                                                   id = TextFieldId,
                                                                   @class = "form-control search dropbtn readonly",
                                                                   @readonly = "readonly",
                                                                   autocomplete = "off",
                                                                   @style = "display:none"
                                                               })
                                                                }
                                                                else
                                                                {
                                                                    @Html.TextBox(fieldName, Value, new
                                                               {
                                                                   id = fieldId,
                                                                   @class = "form-control search dropbtn readonly",
                                                                   @readonly = "readonly",
                                                                   autocomplete = "off",
                                                                   @style = "display:none"
                                                               })
                                                                    @Html.TextBox(TextFieldName, TextFieldValue, new
                                                               {
                                                                   id = TextFieldId,
                                                                   @class = "form-control search dropbtn readonly",
                                                                   @readonly = "readonly",
                                                                   autocomplete = "off"
                                                               })
                                                                }
                                                                @if (data.ViewOnly == false)
                                                                {
                                                                    if (string.IsNullOrEmpty(TextFieldValue))
                                                                    {
                                                                        <div class="input-group-btn">
                                                                            <button class="btn btn-white btntxtInputGroup ClearPartCategoryMasterModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                                                    data-valuefield="@fieldId" style="display:none;">
                                                                                <i id="srcicon" class="fa fa-close"></i>
                                                                            </button>
                                                                        </div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="input-group-btn">
                                                                            <button class="btn btn-white btntxtInputGroup ClearPartCategoryMasterModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                                                    data-valuefield="@fieldId">
                                                                                <i id="srcicon" class="fa fa-close"></i>
                                                                            </button>
                                                                        </div>
                                                                    }
                                                                    <div class="input-group-btn">
                                                                        <button class="btn btn-white btntxtInputGroup OpenPartCategoryMasterModalPopupGrid" type="button" data-textfield="@TextFieldId" data-valuefield="@fieldId">
                                                                            <i id="srcicon" class="fa fa-search"></i>
                                                                        </button>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </span>
                                                </li>
                                                continue;

                                            }
                                            <li>
                                                @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                <span class="inputText">
                                                    @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                    @Html.UIConfigControl(fieldName, fieldId, data.ColumnType.ToLower(), data.MaxLength, data.ViewOnly)
                                                    @CustomHelperDynamic.GetCountMessageLabel(data.MaxLength, data.ViewOnly, Convert.ToString(Value))
                                                </span>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <div style="clear:both;"></div>
                                <div class="idBttns">
                                    <div class="bttn_pagin">
                                        <div class="bttns2">
                                            <button type="submit" class="btn btn-blue mobBttn" id="btnPREditLineItemSaveDynamic" name="Command" value="save"><i class="fa fa-save faIcon"></i> &nbsp; @Model.Loc.Where(a => a.ResourceId == "globalSave").FirstOrDefault().Value.ToString()</button>
                                        </div>
                                        <div class="bttns"><button type="button" class="btn btn-blue mobBttn" id="btncan"><i class="fa fa-close faIcon"></i> &nbsp; @Model.Loc.Where(a => a.ResourceId == "globalCancel").FirstOrDefault().Value.ToString()</button></div>
                                        <div style="clear:both;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.PurchaseRequestId, new { id = "PurchaseRequestId" })
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.PurchaseRequestLineItemId)
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.UpdateIndex)
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.ViewName, new { id = "ViewName" })
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.UnitofMeasure, new { id = "UiconfigUnitofMeasure" })
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.AccountId, new { id = "UiconfigAccountId" })
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.ChargeType, new { id = "UiconfigChargeType" })
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.IsShopingCart, new { id = "IsShopingCart" })
        @Html.HiddenFor(m => m.EditPRLineItemPartInInventory.Status)
        if (Model.UIConfigurationDetails.Any(x => AccountColumns.Contains(x.ColumnName.ToLower())))
        {
            @Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AccountPopupLookup.cshtml")
        }
        if (Model.UIConfigurationDetails.Any(x => UNSPSCColumns.Contains(x.ColumnName.ToLower())))
        {
            @Html.Partial("~/Views/Shared/LookupTypeTablePopup/_PartCategoryMasterPopup.cshtml")
        }
    }

}

@*@Scripts.Render("~/bundles/PREditPopUp")*@


