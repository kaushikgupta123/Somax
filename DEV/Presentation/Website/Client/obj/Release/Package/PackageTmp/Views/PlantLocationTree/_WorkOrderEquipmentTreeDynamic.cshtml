@model Client.Models.Work_Order.WorkOrderVM
@{
    var pl_id = ViewBag.EquipmentId != null ? Convert.ToInt32(Convert.ToString(ViewBag.EquipmentId)) : -1;
}
<input type="text" id="txtSearch" placeholder="Search" title="" class="form-control search" style="color:black;">
<table id="tblTree" class="table table-rsp jsTT">
    <thead>
        <tr class="container">
            <th class="col-lg-3">
                @Model.Loc.Where(a => a.ResourceId == "spnGlobalEquipmentId").FirstOrDefault().Value.ToString()
            </th>
            <th class="col-lg-3"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.woEquipmentTreeModel.Children)
        {
            <tr data-tt-id="@item.EquipmentId" data-tt-parent-id="@item.ParentId" class="container">
                <td class="col-lg-3">
                    @Html.DisplayFor(modelItem => item.ClientLookupId)
                </td>
                <td class="col-lg-3">
                    @if (pl_id != -1 && pl_id == item.EquipmentId)
                    {
                        <label class="container">
                            <input type="radio" name="radio" class="radSelectWoDynamic" checked="checked" data-equipmentId="@item.EquipmentId" data-clientlookupid="@item.ClientLookupId.Split('(')[0].Trim()" data-itemname="@item.ClientLookupId.Split('(')[1].Trim()">
                            <span class="checkmark"></span>
                        </label>
                    }
                    else
                    {
                        <label class="container" data-toggle="tooltip" title="Please select a Asset!">
                            <input type="radio" data-toggle="tooltip" title="Please select a Asset!" name="radio" class="radSelectWoDynamic" data-equipmentid="@item.EquipmentId" data-clientlookupid="@item.ClientLookupId.Split('(')[0].Trim()" data-itemname="@item.ClientLookupId.Split('(')[1].Trim()">
                            <span class="checkmark" data-toggle="tooltip" title="Please select a Asset!"></span>
                        </label>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<style type="text/css">
    /* The container */
    label.container {
        display: block;
        position: relative;
        padding-left: 35px;
        margin-bottom: 12px;
        cursor: pointer;
        font-size: 22px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }
        /* Hide the browser's default radio button */
        label.container input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
        }
    /* Create a custom radio button */
    .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 15px;
        width: 15px;
        background-color: #eee;
        border-radius: 0;
    }
    /* On mouse-over, add a grey background color */
    label.container:hover input ~ .checkmark {
        background-color: #ccc;
    }
    /* When the radio button is checked, add a blue background */
    label.container input:checked ~ .checkmark { /*background-color: #2196F3;*/
    }
    /* Create the indicator (the dot/circle - hidden when not checked) */
    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }
    /* Show the indicator (dot/circle) when checked */
    label.container input:checked ~ .checkmark:after {
        display: block;
    }
    /* Style the indicator (dot/circle) */
    label.container .checkmark:after {
        content: "\2713";
        font-size: 12px;
        color: #1a3967;
        font-weight: bold;
        margin: -1px 0px 0px 3px;
    }

    tr[data-tt-parent-id="0"] {
        color: #1a3967 !important;
        font-weight: 400 !important;
    }

    .slide-modal-body {
        overflow: scroll !important;
        height: 100vh;
    }

    .slide-modal {
        height: auto !important;
        min-height: auto !important;
    }

    .table-responsive {
        overflow: scroll !important;
        height: auto !important;
        min-height: auto !important;
    }
</style>

<script type="text/javascript">
    jQuery.expr[":"].containsNoCase = function (el, i, m) {
        var search = m[3];
        if (!search) return false;
        return eval("/" + search + "/i").test($(el).text());
    };
    // execute the search
    jQuery('#txtSearch').keyup(function () {
        // only search when there are 3 or more characters in the textbox
        if (jQuery('#txtSearch').val().trim().length > 0) {
            // hide all rows
            jQuery('#tblTree tr').hide();
            // show the header row
            jQuery('#tblTree tr:first').show();
            // show the matching rows (using the containsNoCase from Rick Strahl)
            jQuery('#tblTree tr td:containsNoCase(\'' + jQuery('#txtSearch').val().trim() + '\')').parent().show();
            // show the cancel search image
            jQuery('#imgSearch').show();
        }
        else if (jQuery('#txtSearch').val().length == 0) {
            // if the user removed all of the text, reset the search
            resetSearch();
        }

        // if there were no matching rows, tell the user
        if (jQuery('#tblTree tr:visible').length == 1) {
            // remove the norecords row if it already exists
            jQuery('.norecords').remove();
            // add the norecords row
            jQuery('#tblTree').append('<tr class="norecords"><td colspan="5" class="Normal">No records were found</td></tr>');
        }
    });
    function resetSearch() {
        // clear the textbox
        jQuery('#txtSearch').val('');
        // show all table rows
        jQuery('#tblTree tr').show();
        // remove any no records rows
        jQuery('.norecords').remove();
        // remove the cancel search image
        jQuery('#imgSearch').hide();
        // make sure we re-focus on the textbox for usability
        jQuery('#txtSearch').focus();
    }
</script>



