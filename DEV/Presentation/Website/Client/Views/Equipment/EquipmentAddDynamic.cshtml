@model Client.Models.EquipmentCombined
@{
    var AttachedModelName = "AddEquipment";
    var fieldName = "";
    var fieldId = "";
    var EmptyLookupList = new List<SelectListItem> { new SelectListItem { } };
    const string constVendor = "Vendor";
    const string constAccount = "Account";
    const string constAsset = "Asset";
    string[] AccountColumns = { "material_accountid", "labor_accountid" };
    string[] VendorColumns = { "maint_vendorid", "purch_vendorid" };
    string[] AssetColumns = { "electricalparent" };
}
<div class="m-subheader">
    <div class="new-m-subheader">
        <div class="PageTitle">
            <div class="align-items-center separator">
                <h3 class="m-subheader__title ">
                    @Model.Loc.Where(a => a.ResourceId == "hdrTitle").FirstOrDefault().Value.ToString()
                </h3>
            </div>
        </div>

        <div class="NewBreadcrumbArea">
            <div class="newBreadcrumb">
                <ul>
                    <li><a href="/Dashboard/Dashboard">&nbsp;</a></li>
                    <li><a href="/Equipment/Index?page=Maintenance_Assets" id="anchPagename">Asset Search</a></li>
                    <li class="active">@Model.Loc.Where(a => a.ResourceId == "AddEquip").FirstOrDefault().Value.ToString()</li>
                </ul>
                <div style="clear:both;"></div>
            </div>
        </div>
        <div style="clear:both;"></div>
    </div>
</div>

@Html.Partial("_ErrorDiv")
@if (Model.UIConfigurationDetails != null && Model.UIConfigurationDetails.Count > 0)
{
    using (Ajax.BeginForm("AddEquipmentDynamic", "Equipment", new AjaxOptions { HttpMethod = "Post", OnSuccess = "EquipmentAddDynamicOnSuccess", OnBegin = "onLoginBegin", OnFailure = "onLoginFailure" }, new { enctype = "multipart/form-data", id = "AddAssetDynamicForm" }))
    {
        @Html.AntiForgeryToken()
        <div class="row">          
            <div class="col-xl-12">
                <div class="row">
                    <div class="col-xl-12" id="btnnblock">
                        <div class="m-portlet" id="m_portlet" style="padding:15px;">
                            <div class="bottomBlock">
                                <div class="tabsArea nobg" id="Identifications" style="display:block;">
                                    <ul class="listView nobrd rt-part">
                                        @foreach (var data in Model.UIConfigurationDetails)
                                        {
                                            if (data.Section == true)
                                            {
                                                <li>
                                                    <span class="label"><strong>@data.SectionName</strong></span>
                                                </li>
                                                continue;
                                            }
                                            if (string.IsNullOrEmpty(data.ColumnName))
                                            {
                                                continue;
                                            }
                                            else if (!string.IsNullOrEmpty(data.ColumnName))
                                            {
                                                string colName = UtilityFunction.ReturnPropertyNameWithoutCaseComparison(data.ColumnName, Model.AddEquipment);
                                                if (string.IsNullOrEmpty(colName))
                                                {
                                                    continue;
                                                }
                                                data.ColumnName = colName;
                                            }

                                            fieldName = AttachedModelName + "." + data.ColumnName;
                                            fieldId = data.ColumnName;

                                            if (data.SystemRequired == true)
                                            {
                                                data.Required = true;
                                            }


                                            if (data.ColumnName.ToLower() == "AssetGroup1".ToLower())
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(@Model.AssetGroup1Label, data.Required)
                                                    <span class="inputText">
                                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                        @Html.DropDownList(fieldName, Model.AssetGroup1List, "--Select--", new
                                                   {
                                                       id = fieldId,
                                                       @class = "form-control search select2picker",
                                                       style = "width:100%;"
                                                   })
                                                    </span>
                                                </li>
                                            }
                                            else if (data.ColumnName.ToLower() == "AssetGroup2".ToLower())
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(@Model.AssetGroup2Label, data.Required)
                                                    <span class="inputText">
                                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                        @Html.DropDownList(fieldName, Model.AssetGroup2List, "--Select--", new
                                                   {
                                                       id = fieldId,
                                                       @class = "form-control search select2picker",
                                                       style = "width:100%;"
                                                   })
                                                    </span>
                                                </li>
                                            }
                                            else if (data.ColumnName.ToLower() == "AssetGroup3".ToLower())
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(@Model.AssetGroup3Label, data.Required)
                                                    <span class="inputText">
                                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                        @Html.DropDownList(fieldName, Model.AssetGroup3List, "--Select--", new
                                                   {
                                                       id = fieldId,
                                                       @class = "form-control search select2picker",
                                                       style = "width:100%;"
                                                   })
                                                    </span>
                                                </li>
                                            }
                                            else if (data.ColumnName.ToLower() == "AssetCategory".ToLower())
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    <span class="inputText">
                                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                        @Html.DropDownList(fieldName, Model.AssetCategoryList, "--Select--", new
                                                   {
                                                       id = fieldId,
                                                       @class = "form-control search select2picker",
                                                       style = "width:100%;"
                                                   })
                                                    </span>
                                                </li>
                                            }
                                            else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAccount.ToLower() &&
                                                AccountColumns.Contains(data.ColumnName.ToLower()))
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    @{
                                                        string TextFieldName = "", TextFieldId = "";
                                                        if (data.ColumnName == "Material_AccountId")
                                                        {
                                                            TextFieldId = "Material_AccountName";
                                                        }
                                                        else if (data.ColumnName == "Labor_AccountId")
                                                        {
                                                            TextFieldId = "Labor_AccountName";
                                                        }
                                                        TextFieldName = AttachedModelName + "." + TextFieldId;
                                                    }
                                                    <span class="inputText">
                                                        <div class="dropdown dropTableOuter">
                                                            <div class="input-group">
                                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                                @Html.TextBox(TextFieldName, "", new
                                                                    {
                                                                       id = TextFieldId,
                                                                       @class = "form-control search dropbtn readonly",
                                                                       @readonly = "readonly",
                                                                       autocomplete = "off",
                                                                       style = "display:none;"
                                                                    })
                                                                @Html.TextBox(fieldName, "", new
                                                                   {
                                                                       id = fieldId,
                                                                       @class = "form-control search dropbtn readonly",
                                                                       @readonly = "readonly",
                                                                       autocomplete = "off",
                                                                       style = "display:block;"
                                                                   })
                                                                <div class="input-group-btn">
                                                                    <button class="btn btn-white btntxtInputGroup ClearAccountModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                                            data-valuefield="@fieldId" style="display:none;">
                                                                        <i id="srcicon" class="fa fa-close"></i>
                                                                    </button>
                                                                </div>
                                                                <div class="input-group-btn">
                                                                    <button class="btn btn-white btntxtInputGroup OpenAccountModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                                                            data-valuefield="@fieldId">
                                                                        <i id="srcicon" class="fa fa-search"></i>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </span>
                                                </li>
                                            }
                                            else if (data.LookupType.ToLower() == DataDictionaryLookupTypeConstant.LookupList.ToLower() &&
                                                    !string.IsNullOrEmpty(data.LookupName))
                                            {
                                                var LookUpList = Model.AllRequiredLookUplist
                                                                .Where(x => x.lookupname == data.LookupName)
                                                                .Select(x => new SelectListItem { Text = x.text, Value = x.value })
                                                                .ToList();
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    <span class="inputText">
                                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                        @if (LookUpList != null && LookUpList.Count() > 0)
                                                        {
                                                            @Html.DropDownList(fieldName, LookUpList, "--Select--", new
                                           {
                                               id = fieldId,
                                               @class = "form-control search select2picker",
                                               style = "width:100%;"
                                           })
                                                        }
                                                        else
                                                        {
                                                            @Html.DropDownList(fieldName, EmptyLookupList, "--Select--", new
                                           {
                                               id = fieldId,
                                               @class = "form-control search select2picker",
                                               style = "width:100%;"
                                           })
                                                        }
                                                    </span>
                                                </li>
                                            }
                                            else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constVendor.ToLower() &&
                                                VendorColumns.Contains(data.ColumnName.ToLower()))
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    @{
                                                        string TextFieldName = "", TextFieldId = "";
                                                        if (data.ColumnName == "Maint_VendorId")
                                                        {
                                                            TextFieldId = "Maint_VendorName";
                                                            TextFieldName = AttachedModelName + "." + TextFieldId;
                                                        }

                                                        else if (data.ColumnName == "Purch_VendorId")
                                                        {
                                                            TextFieldId = "Purch_VendorName";
                                                            TextFieldName = AttachedModelName + "." + TextFieldId;
                                                        }
                                                    }
                                                    <span class="inputText">
                                                        <div class="dropdown dropTableOuter">
                                                            <div class="input-group">
                                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                                @Html.TextBox(TextFieldName, "", new
                                                        {
                                                           id = TextFieldId,
                                                           @class = "form-control search dropbtn readonly",
                                                           @readonly = "readonly",
                                                           autocomplete = "off",
                                                           style = "display:none;"
                                                        })
                                                                @Html.TextBox(fieldName, "", new
                                                       {
                                                           id = fieldId,
                                                           @class = "form-control search dropbtn readonly",
                                                           @readonly = "readonly",
                                                           autocomplete = "off",
                                                           style = "display:block;"
                                                       })
                                                                <div class="input-group-btn">
                                                                    <button class="btn btn-white btntxtInputGroup ClearVendorModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                                            data-valuefield="@fieldId" style="display:none;">
                                                                        <i id="srcicon" class="fa fa-close"></i>
                                                                    </button>
                                                                </div>
                                                                <div class="input-group-btn">
                                                                    <button class="btn btn-white btntxtInputGroup OpenVendorModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                                                            data-valuefield="@fieldId">
                                                                        <i id="srcicon" class="fa fa-search"></i>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </span>
                                                </li>
                                            }                                          
                                            else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAsset.ToLower() &&
                                             (data.ColumnName == "ElectricalParent"))
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)

                                                    @{
                                                        string TextFieldName = "", TextFieldId = "";
                                                        TextFieldId = "ElectricalParent_ClientLookupId";
                                                        TextFieldName = AttachedModelName + "." + TextFieldId;

                                                    }
                                                    <span class="inputText">
                                                        <div class="dropdown dropTableOuter">
                                                            <div class="input-group defult-work-order tree-option-block tree-x-option @(Model._userdata.DatabaseKey.Client.AssetTree == true ? "work-order-tree":"")">
                                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })

                                                                @Html.TextBox(fieldName, "", new
                                                   {
                                                       id = fieldId,
                                                       @class = "form-control search dropbtn readonly",
                                                       @readonly = "readonly",
                                                       autocomplete = "off"
                                                   })

                                                                @Html.TextBox(TextFieldName, "", new
                                                   {
                                                       id = TextFieldId,
                                                       @class = "form-control search dropbtn readonly",
                                                       @readonly = "readonly",
                                                       autocomplete = "off",
                                                       @style = "display:none"
                                                   })
                                                                <div class="input-group-btn">
                                                                    <button class="btn btn-white btntxtInputGroup ClearAssetModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                                            data-valuefield="@fieldId" style="display:none">
                                                                        <i id="srcicon" class="fa fa-close"></i>
                                                                    </button>
                                                                </div>
                                                                <div class="input-group-btn">
                                                                    <button class="btn btn-white btntxtInputGroup OpenAssetModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                                                            data-valuefield="@fieldId">
                                                                        <i id="srcicon" class="fa fa-search"></i>
                                                                    </button>

                                                                </div>
                                                                <div class="input-group-btn tree-block-box qr-bt">
                                                                    <button type="button" class="btn btn-blue mobBttn" onclick="QrScannerEquipment('@TextFieldId','@fieldId')"><i class="fa fa-qrcode" style="margin-top:-2px;"></i></button>
                                                                </div>
                                                                <div class="input-group-btn tree-full tree-block-box">
                                                                    @if (Model._userdata.DatabaseKey.Client.AssetTree == true)
                                                                    {
                                                                        <i class="fa fa-tree chargeTree TreeAdjustNew" id="imgChargeToTreeLineItemDynamic" style="display:block;" data-textfield="@TextFieldId"
                                                                           data-valuefield="@fieldId"></i>
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>

                                                    </span>

                                                </li>
                                            }
                                            else
                                            {
                                                <li>
                                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                                    <span class="inputText">
                                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                        @Html.UIConfigControl(fieldName, fieldId, data.ColumnType.ToLower(), data.MaxLength, data.ViewOnly)
                                                        @CustomHelperDynamic.GetCountMessageLabel(data.MaxLength, data.ViewOnly, "")
                                                    </span>
                                                </li>
                                            }

                                        }
                                    </ul>
                                </div>


                                <div style="clear:both;"></div>

                                <div class="idBttns">
                                    <div class="bttn_pagin">
                                        <div class="bttns2">
                                            <button type="submit" class="btn btn-white mobBttn" name="Command" id="btnSaveAnotherOpen" style="cursor:pointer" value="saveAdd"><i class="fa fa-save faIcon"></i> &nbsp; Save & Add Another</button>
                                            <button type="submit" class="btn btn-blue mobBttn" name="Command" id="btnSave" style="cursor:pointer" value="save"><i class="fa fa-save faIcon"></i> &nbsp; Save</button>
                                        </div>
                                        <div class="bttns"><button type="button" class="btn btn-blue mobBttn" id="btnCancelAddEquipment" style="cursor:pointer"><i class="fa fa-close faIcon"></i> &nbsp; Cancel</button></div>

                                        <div style="clear:both;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @Html.HiddenFor(m => m.PlantLocation, new { id = "PlantLocation" })
        if (Model.UIConfigurationDetails.Any(x => VendorColumns.Contains(x.ColumnName.ToLower())))
        {
            @Html.Partial("~/Views/Shared/LookupTypeTablePopup/_VendorPopup.cshtml")
        }
        if (Model.UIConfigurationDetails.Any(x => AccountColumns.Contains(x.ColumnName.ToLower())))
        {
            @Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AccountPopupLookup.cshtml")
        }
        if (Model.UIConfigurationDetails.Any(x => AssetColumns.Contains(x.ColumnName.ToLower())))
        {
            @Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AssetPoopupLookup.cshtml")
        }
    }
}
@if (Model._userdata.DatabaseKey.Client.AssetTree == true)
{
    <div id="woEquipTreeModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="hdrPlantLocation">@Model.Loc.Where(a => a.ResourceId == "spnGlobalEquipmentTreeLookup").FirstOrDefault().Value.ToString()</h4>
                </div>
                <div class="modal-body">
                    <div class="cntTree">
                    </div>
                </div>
            </div>

        </div>
    </div>
}
@Html.Partial("~/Views/Shared/QR/_QrCodeReaderModal.cshtml")
<style type="text/css">
    .select2-container--default .select2-selection--single .select2-selection__rendered {
        padding-right: 30px;
    }

    .ui-tooltip.ui-tooltip1 {
        z-index: 101 !important;
    }
</style>

