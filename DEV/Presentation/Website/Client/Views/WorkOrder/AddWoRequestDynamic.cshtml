@model Client.Models.Work_Order.WorkOrderVM
@{
    var AttachedModelName = "AddWorkRequest";
    var fieldName = "";
    var fieldId = "";
    var EmptyLookupList = new List<SelectListItem> { new SelectListItem { } };
    const string constAsset = "Asset";
    const string constAccount = "Account";
    const string constPlanner = "Planner";
    object Value = null;
}
<div class="m-subheader">
    <div class="new-m-subheader">
        <div class="PageTitle">
            <div class="align-items-center separator">
                <h3 class="m-subheader__title ">
                    @Model.Loc.Where(a => a.ResourceId == "spnWorkRequest").FirstOrDefault().Value.ToString()
                </h3>
            </div>
        </div>

        <div class="NewBreadcrumbArea">
            <div class="newBreadcrumb">
                <ul>
                    <li><a href="/Dashboard/Dashboard">&nbsp;</a></li>
                    <li><a href="/WorkOrder/Index?page=Maintenance_Work_Order_Search">@Model.Loc.Where(a => a.ResourceId == "spnWorkOrderSearch").FirstOrDefault().Value.ToString()</a></li>
                    <li class="active">@Model.Loc.Where(a => a.ResourceId == "spnAddWorkRequest").FirstOrDefault().Value.ToString()</li>
                </ul>
                <div style="clear:both;"></div>
            </div>
        </div>
        <div style="clear:both;"></div>
    </div>
</div>

@Html.Partial("_ErrorDiv")

<div class="row">
    <div class="col-xl-12">
        <div class="m-portlet newPort" id="m_portlet" style="padding:15px;">
            <div class="bottomBlock">
                @using (Ajax.BeginForm("SaveWoRequestDynamic", "WorkOrder", new AjaxOptions { HttpMethod = "Post", OnSuccess = "WorksRequestAddOnSuccess", OnBegin = "AjaxBeginFormBegin", OnComplete = "AjaxBeginFormComplete", OnFailure = "AjaxBeginFormFaillure" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="tabsArea nobg">
                        <ul class="listView nobrd">
                            @foreach (var data in Model.UIConfigurationDetails)
                            {
                                if (data.Section == true)
                                {
                                    <li>
                                        <span class="label"><strong>@data.SectionName</strong></span>
                                    </li>
                                    continue;
                                }
                                if (string.IsNullOrEmpty(data.ColumnName))
                                {
                                    continue;
                                }
                                else if (!string.IsNullOrEmpty(data.ColumnName))
                                {
                                    string colName = UtilityFunction.ReturnPropertyNameWithoutCaseComparison(data.ColumnName, Model.AddWorkRequest);
                                    if (string.IsNullOrEmpty(colName))
                                    {
                                        continue;
                                    }
                                    data.ColumnName = colName;
                                }
                                fieldName = AttachedModelName + "." + data.ColumnName;
                                fieldId = data.ColumnName;

                                if (data.SystemRequired == true)
                                {
                                    data.Required = true;
                                }
                                if (data.LookupType.ToLower() == DataDictionaryLookupTypeConstant.LookupList.ToLower() &&
!string.IsNullOrEmpty(data.LookupName))
                                {
                                    if (Model.IsWorkOrderRequest && data.ColumnName == "Type")
                                    {
                                        var LookUpListUnplanned = Model.AllRequiredLookUplist
                                                .Where(x => x.lookupname == LookupListConstants.WR_WO_TYPE)
                                                .Select(x => new SelectListItem { Text = x.text, Value = x.value })
                                                .ToList();
                                        <li>
                                            @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                            <span class="inputText">
                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                @if (LookUpListUnplanned != null && LookUpListUnplanned.Count() > 0)
                                                {

                                                    if (data.ViewOnly == true)
                                                    {
                                                        string TextBoxValue = "", TextBoxId = "";
                                                        if (Model.AllRequiredLookUplist.Any(x => x.lookupname == LookupListConstants.WR_WO_TYPE && x.value == Value.ToString()))
                                                        {
                                                            TextBoxValue = Model.AllRequiredLookUplist
                                                                        .Where(x => x.lookupname == LookupListConstants.WR_WO_TYPE && x.value == Value.ToString())
                                                                        .FirstOrDefault()
                                                                        .text;
                                                        }
                                                        TextBoxId = fieldId + "TextBox";
                                                        @Html.TextBox(TextBoxId, TextBoxValue, new
                                                        {
                                                            @class = "form-control search dropbtn readonly",
                                                            @readonly = "readonly",
                                                            @autocomplete = "off"
                                                        })
                                                        @Html.Hidden(fieldName, Value, new { @id = fieldId })
                                                    }
                                                    else
                                                    {

                                                        @Html.DropDownList(fieldName, LookUpListUnplanned, "--Select--", new
                                                        {
                                                            id = fieldId,
                                                            @class = "form-control search select2picker",
                                                            style = "width:100%;"
                                                        })
                                                    }

                                                }
                                                else
                                                {
                                                    @Html.DropDownList(fieldName, EmptyLookupList, "--Select--", new
                                                        {
                                                            id = fieldId,
                                                            @class = "form-control search select2picker",
                                                            style = "width:100%;"
                                                        })
                                                }
                                            </span>
                                        </li>
                                    }
                                    else
                                    {

                                        var LookUpList = Model.AllRequiredLookUplist
                 .Where(x => x.lookupname == data.LookupName)
                 .Select(x => new SelectListItem { Text = x.text, Value = x.value })
                 .ToList();
                <li>
                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                    <span class="inputText">
                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                        @if (LookUpList != null && LookUpList.Count() > 0)
                        {
                            @Html.DropDownList(fieldName, LookUpList, "--Select--", new
                       {
                           id = fieldId,
                           @class = "form-control search select2picker",
                           style = "width:100%;"
                       })
                        }
                        else
                        {
                            @Html.DropDownList(fieldName, EmptyLookupList, "--Select--", new
                       {
                           id = fieldId,
                           @class = "form-control search select2picker",
                           style = "width:100%;"
                       })
                        }
                    </span>
                </li>
            }
        }

        else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAsset.ToLower() &&
                    (data.ColumnName == "ChargeToId"))
        {
            <li>
                @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                @{
                    string TextFieldName = "", TextFieldId = "";
                    TextFieldId = "ChargeToClientLookupId";
                    TextFieldName = AttachedModelName + "." + TextFieldId;

                }
                <span class="inputText">
                    <div class="dropdown dropTableOuter">
                        <div class="input-group defult-work-order @(Model._userdata.DatabaseKey.Client.AssetTree == true ? "work-order-tree":"")">
                            @Html.ValidationMessage(fieldName, new { style = "display:none" })

                            @Html.TextBox(fieldName, "", new
                            {
                            id = fieldId,
                            @class = "form-control search dropbtn readonly",
                            @readonly = "readonly",
                            autocomplete = "off"
                            })

                            @Html.TextBox(TextFieldName, "", new
                            {
                            id = TextFieldId,
                            @class = "form-control search dropbtn readonly",
                            @readonly = "readonly",
                            autocomplete = "off",
                            @style = "display:none"
                            })
                            <div class="input-group-btn">
                                <button class="btn btn-white btntxtInputGroup ClearAssetModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                        data-valuefield="@fieldId" style="display:none">
                                    <i id="srcicon" class="fa fa-close"></i>
                                </button>
                            </div>
                            <div class="input-group-btn">
                                <button class="btn btn-white btntxtInputGroup OpenAssetModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                        data-valuefield="@fieldId">
                                    <i id="srcicon" class="fa fa-search"></i>
                                </button>

                            </div>
                            <div class="input-group-btn">
                                &nbsp;&nbsp;<button type="button" class="btn btn-blue mobBttn" onclick="QrScannerEquipment('@TextFieldId','@fieldId')"><i class="fa fa-qrcode" style="margin-top:-2px;"></i></button>
                            </div>
                            <div class="input-group-btn">
                                @if (Model._userdata.DatabaseKey.Client.AssetTree == true)
                                {
                                    <i class="fa fa-tree chargeTree TreeAdjustNew" id="imgChargeToTreeLineItemDynamic" style="display: block; margin: 0px -26px 0px 0px" data-textfield="@TextFieldId"
                                       data-valuefield="@fieldId"></i>
                                }
                            </div>
                        </div>
                    </div>
                </span>

                <div style="clear:both;"></div>
            </li>
        }
        else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constPlanner.ToLower() &&
(data.ColumnName == "Planner_PersonnelId"))
        {

            <li>
                @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                @{
                    string TextFieldName = "", TextFieldId = "";
                    TextFieldId = "PlannerClientLookupId";
                    TextFieldName = AttachedModelName + "." + TextFieldId;

                }
                <span class="inputText">
                    <div class="dropdown dropTableOuter">
                        <div class="input-group">
                            @Html.ValidationMessage(fieldName, new { style = "display:none" })

                            @Html.TextBox(fieldName, "", new
                       {
                           id = fieldId,
                           @class = "form-control search dropbtn readonly",
                           @readonly = "readonly",
                           autocomplete = "off"
                       })

                            @Html.TextBox(TextFieldName, "", new
                       {
                           id = TextFieldId,
                           @class = "form-control search dropbtn readonly",
                           @readonly = "readonly",
                           autocomplete = "off",
                           @style = "display:none"
                       })

                            <div class="input-group-btn">
                                <button class="btn btn-white btntxtInputGroup ClearPlannerPersonnelModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                        data-valuefield="@fieldId" style="display:none">
                                    <i id="srcicon" class="fa fa-close"></i>
                                </button>
                            </div>
                            <div class="input-group-btn">
                                <button class="btn btn-white btntxtInputGroup OpenPlannerPersonnelModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                        data-valuefield="@fieldId">
                                    <i id="srcicon" class="fa fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                </span>
            </li>
        }
        else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAccount.ToLower())
        {

            <li>
                @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)

                @{
                    string TextFieldName = "", TextFieldId = "";
                    TextFieldId = "AccountClientLookupId";
                    TextFieldName = AttachedModelName + "." + TextFieldId;

                }
                <span class="inputText">
                    <div class="dropdown dropTableOuter">
                        <div class="input-group">
                            @Html.ValidationMessage(fieldName, new { style = "display:none" })

                            @Html.TextBox(fieldName, "", new
                              {
                                 id = fieldId,
                                 @class = "form-control search dropbtn readonly",
                                 @readonly = "readonly",
                                 autocomplete = "off"
                              })

                            @Html.TextBox(TextFieldName, "", new
                               {
                                  id = TextFieldId,
                                  @class = "form-control search dropbtn readonly",
                                  @readonly = "readonly",
                                  autocomplete = "off",
                                  @style = "display:none"
                               })
                            <div class="input-group-btn">
                                <button class="btn btn-white btntxtInputGroup ClearAccountModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                        data-valuefield="@fieldId" style="display:none">
                                    <i id="srcicon" class="fa fa-close"></i>
                                </button>
                            </div>
                            <div class="input-group-btn">
                                <button class="btn btn-white btntxtInputGroup OpenAccountModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                        data-valuefield="@fieldId">
                                    <i id="srcicon" class="fa fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                </span>

            </li>
        }
        else
        {
            <li>
                @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                <span class="inputText">
                    @Html.ValidationMessage(fieldName, new { style = "display:none" })
                    @Html.UIConfigControl(fieldName, fieldId, data.ColumnType.ToLower(), data.MaxLength, data.ViewOnly)
                    @CustomHelperDynamic.GetCountMessageLabel(data.MaxLength, data.ViewOnly, "")
                </span>
            </li>
        }

    }
                        </ul>
                    </div>
                    <div style="clear:both;"></div>
                    <div class="idBttns">
                        <div class="bttn_pagin">
                            <div class="bttns2">
                                @*V2-928*@
                                @*<button type="submit" class="btn btn-white mobBttn" name="Command" id="btnSaveAnotherOpen" style="cursor:pointer" value="saveAdd"><i class="fa fa-save faIcon"></i> &nbsp;  @Model.Loc.Where(a => a.ResourceId == "globalSaveAndAdd").FirstOrDefault().Value.ToString()</button>*@
                                <button type="submit" class="btn btn-blue mobBttn" name="Command" value="save"><i class="fa fa-save faIcon"></i> &nbsp; @Model.Loc.Where(a => a.ResourceId == "globalSave").FirstOrDefault().Value.ToString()</button>
                            </div>

                            <div class="bttns"><button type="button" class="btn btn-blue mobBttn" id="btnCancelAddWorkRequest"><i class="fa fa-close faIcon"></i> &nbsp; @Model.Loc.Where(a => a.ResourceId == "globalCancel").FirstOrDefault().Value.ToString()</button></div>
                            <div style="clear:both;"></div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@Html.Partial("~/Views/Shared/QR/_QrCodeReaderModal.cshtml")
@Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AssetPoopupLookup.cshtml")
@Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AccountPopupLookup.cshtml")
@Html.Partial("~/Views/Shared/LookupTypeTablePopup/_PersonnelPopupLookup.cshtml")
@if (Model._userdata.DatabaseKey.Client.AssetTree == true)
{
    <div id="woEquipTreeModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="hdrPlantLocation">@Model.Loc.Where(a => a.ResourceId == "spnGlobalEquipmentTreeLookup").FirstOrDefault().Value.ToString()</h4>
                </div>
                <div class="modal-body">
                    <div class="cntTree">
                    </div>
                </div>
            </div>

        </div>
    </div>
}
@Html.HiddenFor(m => m._userdata.Site.SourceAssetAccount, new { id = "SourceAssetAccount" })
<link href="~/Scripts/Metronic/assets/demo/default/base/style_newCustom.css" rel="stylesheet" />
<style type="text/css">
    .filterDescription {
        width: auto;
        float: left;
        font-size: 1.2rem;
        color: #000;
        font-weight: 500;
        line-height: 33px;
    }

        .filterDescription a {
            color: #36a3f7;
            text-decoration: none !important;
        }
</style>



