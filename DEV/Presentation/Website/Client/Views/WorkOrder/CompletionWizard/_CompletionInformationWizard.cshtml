@model Client.Models.Work_Order.WorkOrderVM
@{
    var AttachedModelName = "CompletionModelDynamic";
    var fieldName = "";
    var fieldId = "";
    object Value = null;
    var EmptyLookupList = new List<SelectListItem> { new SelectListItem { } };
    const string constAsset = "Asset";
    const string constAccount = "Account";
}

<div class="row">
    <div class="col-xl-12">
        <div class="m-portlet newPort" id="m_portlet" style="padding:15px;">
            <div class="bottomBlock">
                <div class="tabsArea nobg">
                    <ul class="listView nobrd">
                        @foreach (var data in Model.UIConfigurationDetails)
                        {
                            if (data.Section == true)
                            {
                                <li>
                                    <span class="label"><strong>@data.SectionName</strong></span>
                                </li>
                                continue;
                            }
                            if (string.IsNullOrEmpty(data.ColumnName))
                            {
                                continue;
                            }
                            else if (!string.IsNullOrEmpty(data.ColumnName))
                            {
                                string colName = UtilityFunction.ReturnPropertyNameWithoutCaseComparison(data.ColumnName, Model.CompletionModelDynamic);
                                if (string.IsNullOrEmpty(colName))
                                {
                                    continue;
                                }
                                data.ColumnName = colName;
                            }
                            fieldName = AttachedModelName + "." + data.ColumnName;
                            fieldId = data.ColumnName;
                            Value = Model.CompletionModelDynamic.GetType().GetProperty(data.ColumnName).GetValue(Model.CompletionModelDynamic);

                            if (data.SystemRequired == true)
                            {
                                data.Required = true;
                            }
                            if (data.LookupType.ToLower() == DataDictionaryLookupTypeConstant.LookupList.ToLower() &&
                                                !string.IsNullOrEmpty(data.LookupName))
                            {
                                var LookUpList = Model.AllRequiredLookUplist
                                                .Where(x => x.lookupname == data.LookupName)
                                                .Select(x => new SelectListItem { Text = x.text, Value = x.value })
                                                .ToList();
                                <li>
                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                    <span class="inputText">
                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                        @if (LookUpList != null && LookUpList.Count() > 0)
                                        {
                                            @Html.DropDownList(fieldName, LookUpList, "--Select--", new
                                            {
                                                id = fieldId,
                                                @class = "form-control search select2picker",
                                                style = "width:100%;"
                                            })
                                        }
                                        else
                                        {
                                            @Html.DropDownList(fieldName, EmptyLookupList, "--Select--", new
                                            {
                                                id = fieldId,
                                                @class = "form-control search select2picker",
                                                style = "width:100%;"
                                            })
                                        }
                                    </span>
                                </li>
                            }
                            else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAsset.ToLower() &&
                                    (data.ColumnName == "ChargeToId"))
                            {

                                <li>
                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                    @{
                                        string TextFieldName = "", TextFieldId = "", TextFieldValue = "";
                                        TextFieldId = "ChargeToClientLookupId";
                                        TextFieldName = AttachedModelName + "." + TextFieldId;
                                        TextFieldValue = Model.CompletionModelDynamic.GetType().GetProperty(TextFieldId).GetValue(Model.CompletionModelDynamic).ToString();
                                    }
                                    <span class="inputText">
                                        <div class="dropdown dropTableOuter">
                                            <div class="input-group defult-work-order @(Model._userdata.DatabaseKey.Client.AssetTree == true ? "work-order-tree":"")">
                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })

                                                @Html.TextBox(fieldName, "", new
                                                {
                                                    id = fieldId,
                                                    @class = "form-control search dropbtn readonly",
                                                    @readonly = "readonly",
                                                    autocomplete = "off"
                                                })   

                                                @Html.TextBox(TextFieldName, TextFieldValue, new
                                                {
                                                    id = TextFieldId,
                                                    @class = "form-control search dropbtn readonly",
                                                    @readonly = "readonly",
                                                    autocomplete = "off",
                                                    @style = "display:none"
                                                })
                                                <div class="input-group-btn">
                                                    <button class="btn btn-white btntxtInputGroup ClearAssetModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                            data-valuefield="@fieldId" style="display:none">
                                                        <i id="srcicon" class="fa fa-close"></i>
                                                    </button>
                                                </div>
                                                <div class="input-group-btn">
                                                    <button class="btn btn-white btntxtInputGroup OpenAssetModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                                            data-valuefield="@fieldId">
                                                        <i id="srcicon" class="fa fa-search"></i>
                                                    </button>

                                                </div>
                                                <div class="input-group-btn">
                                                    &nbsp;&nbsp;<button type="button" class="btn btn-blue mobBttn" onclick="QrScannerEquipment('@TextFieldId','@fieldId')"><i class="fa fa-qrcode" style="margin-top:-2px;"></i></button>
                                                </div>
                                                <div class="input-group-btn">
                                                    @if (Model._userdata.DatabaseKey.Client.AssetTree == true)
                                                    {
                                                        <i class="fa fa-tree chargeTree TreeAdjustNew" id="imgChargeToTreeLineItemDynamic" style="display:block; margin: 0px -26px 0px 0px" data-textfield="@TextFieldId"
                                                           data-valuefield="@fieldId"></i>
                                                    }
                                                </div>
                                            </div>
                                        </div>

                                    </span>
                                </li>
                            }
                            else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAccount.ToLower())
                            {

                                <li>
                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)

                                    @{
                                        string TextFieldName = "", TextFieldId = "", TextFieldValue = "";
                                        TextFieldId = "AccountClientLookupId";
                                        TextFieldName = AttachedModelName + "." + TextFieldId;
                                        TextFieldValue = Model.CompletionModelDynamic.GetType().GetProperty(TextFieldId).GetValue(Model.CompletionModelDynamic).ToString();

                                    }
                                    <span class="inputText">
                                        <div class="dropdown dropTableOuter">
                                            <div class="input-group">
                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })

                                                @Html.TextBox(fieldName, "", new
                                                  {
                                                     id = fieldId,
                                                     @class = "form-control search dropbtn readonly",
                                                     @readonly = "readonly",
                                                     autocomplete = "off"
                                                  })

                                                @Html.TextBox(TextFieldName, TextFieldValue, new
                                                   {
                                                      id = TextFieldId,
                                                      @class = "form-control search dropbtn readonly",
                                                      @readonly = "readonly",
                                                      autocomplete = "off",
                                                      @style = "display:none"
                                                   })
                                                <div class="input-group-btn">
                                                    <button class="btn btn-white btntxtInputGroup ClearAccountModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                            data-valuefield="@fieldId" style="display:none">
                                                        <i id="srcicon" class="fa fa-close"></i>
                                                    </button>
                                                </div>
                                                <div class="input-group-btn">
                                                    <button class="btn btn-white btntxtInputGroup OpenAccountModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                                            data-valuefield="@fieldId">
                                                        <i id="srcicon" class="fa fa-search"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>

                                    </span>

                                </li>
                            }
                            else
                            {
                                <li>
                                    @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                    <span class="inputText">
                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                        @Html.UIConfigControl(fieldName, fieldId, data.ColumnType.ToLower(), data.MaxLength, data.ViewOnly)
                                        @CustomHelperDynamic.GetCountMessageLabel(data.MaxLength, data.ViewOnly, Convert.ToString(Value))
                                    </span>
                                </li>
                            }

                        }
                    </ul>
                </div>
                <div style="clear:both;"></div>

            </div>
        </div>
    </div>
</div>


@if (Model._userdata.DatabaseKey.Client.AssetTree == true)
{
    <div id="woEquipTreeModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="hdrPlantLocation">@Model.Loc.Where(a => a.ResourceId == "spnGlobalEquipmentTreeLookup").FirstOrDefault().Value.ToString()</h4>
                </div>
                <div class="modal-body">
                    <div class="cntTree">
                    </div>
                </div>
            </div>

        </div>
    </div>
}

@Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AssetPoopupLookup.cshtml")
@Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AccountPopupLookup.cshtml")

<style type="text/css">
    .lookupTree_workorder {
        text-align: center;
        position: absolute;
        right: 20px;
        top: 9px;
    }

    .chargeTree {
        right: 0px;
    }

    .inputText.wthAdjstNew {
        width: 67% !important;
    }

    .inputText.wthAdjstNew2 {
        width: 68% !important;
    }

    @@media only screen and (min-width: 568px) and (max-width: 639px) {
        .inputText.wthAdjstNew, .inputText.wthAdjstNew2 {
            width: 65% !important;
        }
    }
</style>
