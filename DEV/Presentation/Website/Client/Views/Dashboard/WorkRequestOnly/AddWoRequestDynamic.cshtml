@model Client.Models.Work_Order.WorkOrderVM
@{
    var AttachedModelName = "AddWorkRequest";
    var fieldName = "";
    var fieldId = "";
    var EmptyLookupList = new List<SelectListItem> { new SelectListItem { } };
    const string constAsset = "Asset";
    const string constAccount = "Account";
    const string constPlanner = "Planner";
    object Value = null;
}
<div class="m-subheader">
    <div class="new-m-subheader">
        <div class="PageTitle">
            <div class="align-items-center separator">
                <h3 class="m-subheader__title ">
                    @Model.Loc.Where(a => a.ResourceId == "spnWorkRequest").FirstOrDefault().Value.ToString()
                </h3>
            </div>
        </div>

        <div class="NewBreadcrumbArea">
            <div class="newBreadcrumb">
                <ul>
                    <li><a href="/Dashboard/Dashboard">&nbsp;</a></li>
                    <li><a href="/Dashboard/Dashboard">@Model.Loc.Where(a => a.ResourceId == "spnWorkOrderSearch").FirstOrDefault().Value.ToString()</a></li>
                    <li class="active">@Model.Loc.Where(a => a.ResourceId == "spnAddWorkRequest").FirstOrDefault().Value.ToString()</li>
                </ul>
                <div style="clear:both;"></div>
            </div>
        </div>
        <div style="clear:both;"></div>
    </div>
</div>

@Html.Partial("_ErrorDiv")

<div class="row">
    <div class="col-xl-12">
        <div class="m-portlet newPort" id="m_portlet" style="padding:15px;">
            <div class="bottomBlock">
                @using (Ajax.BeginForm("SaveWoRequestDynamic", "WorkOrder", new AjaxOptions { HttpMethod = "Post", OnSuccess = "WorksRequestAddOnSuccess", OnBegin = "AjaxBeginFormBegin", OnComplete = "AjaxBeginFormComplete", OnFailure = "AjaxBeginFormFaillure" }))
                {
                    @Html.AntiForgeryToken()


                    <div class="tabsArea nobg">
                        <ul class="listView  nobrd rt-part">
                            @if (Model._userdata.IsLoggedInFromMobile && Model._userdata.Security.WorkOrder_Photos.Create)
                            {
                                <li>
                                    @*<span style="padding-bottom:15px">*@
                                    <div class="takePic">
                                        <img src="~/Scripts/ImageZoom/images/NoImage.jpg" class="productImg clsproductImg" id="addphotoworkrequest" style="border: #f5f7f7 1px solid; border-radius: 5px; width: 100%; height: 250px; padding-bottom: 10px">

                                        <button type="button" class="btn btn-blue" title="Take Picture" style="width:100%">
                                            <label for="add_photosWR" style="margin-bottom:0px !important">@Model.Loc.Where(a => a.ResourceId == "spnAddPhotos").FirstOrDefault().Value.ToString()</label>
                                            <input id="add_photosWR" class="addphotoWorkorder" style="display:none;" type="file" value="" accept="image/*" capture="">
                                        </button>
                                    </div>
                                    @*</span>*@
                                </li>
                            }
                            @foreach (var data in Model.UIConfigurationDetails)
                            {
                                if (data.Section == true)
                                {
                                    <li>
                                        <span class="label"><strong>@data.SectionName</strong></span>
                                    </li>
                                    continue;
                                }
                                if (string.IsNullOrEmpty(data.ColumnName))
                                {
                                    continue;
                                }
                                else if (!string.IsNullOrEmpty(data.ColumnName))
                                {
                                    string colName = UtilityFunction.ReturnPropertyNameWithoutCaseComparison(data.ColumnName, Model.AddWorkRequest);
                                    if (string.IsNullOrEmpty(colName))
                                    {
                                        continue;
                                    }
                                    data.ColumnName = colName;
                                }
                                fieldName = AttachedModelName + "." + data.ColumnName;
                                fieldId = data.ColumnName;

                                if (data.SystemRequired == true)
                                {
                                    data.Required = true;
                                }
                                if (data.LookupType.ToLower() == DataDictionaryLookupTypeConstant.LookupList.ToLower() &&
!string.IsNullOrEmpty(data.LookupName))
                                {
                                    if (Model.IsWorkOrderRequest && data.ColumnName == "Type")
                                    {
                                        var LookUpListUnplanned = Model.AllRequiredLookUplist
                                                .Where(x => x.lookupname == LookupListConstants.WR_WO_TYPE)
                                                .Select(x => new SelectListItem { Text = x.text, Value = x.value })
                                                .ToList();
                                        <li>
                                            @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                                            <span class="inputText">
                                                @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                                @if (LookUpListUnplanned != null && LookUpListUnplanned.Count() > 0)
                                                {

                                                    if (data.ViewOnly == true)
                                                    {
                                                        string TextBoxValue = "", TextBoxId = "";
                                                        if (Model.AllRequiredLookUplist.Any(x => x.lookupname == LookupListConstants.WR_WO_TYPE && x.value == Value.ToString()))
                                                        {
                                                            TextBoxValue = Model.AllRequiredLookUplist
                                                                        .Where(x => x.lookupname == LookupListConstants.WR_WO_TYPE && x.value == Value.ToString())
                                                                        .FirstOrDefault()
                                                                        .text;
                                                        }
                                                        TextBoxId = fieldId + "TextBox";
                                                        @Html.TextBox(TextBoxId, TextBoxValue, new
                                                        {
                                                            @class = "form-control search dropbtn readonly",
                                                            @readonly = "readonly",
                                                            @autocomplete = "off"
                                                        })
                                                        @Html.Hidden(fieldName, Value, new { @id = fieldId })
                                                    }
                                                    else
                                                    {

                                                        @Html.DropDownList(fieldName, LookUpListUnplanned, "--Select--", new
                                                        {
                                                            id = fieldId,
                                                            @class = "form-control search select2picker",
                                                            style = "width:100%;"
                                                        })
                                                    }

                                                }
                                                else
                                                {
                                                    @Html.DropDownList(fieldName, EmptyLookupList, "--Select--", new
                                                        {
                                                            id = fieldId,
                                                            @class = "form-control search select2picker",
                                                            style = "width:100%;"
                                                        })
                                                }
                                            </span>
                                        </li>
                                    }
                                    else
                                    {

                                        var LookUpList = Model.AllRequiredLookUplist
                 .Where(x => x.lookupname == data.LookupName)
                 .Select(x => new SelectListItem { Text = x.text, Value = x.value })
                 .ToList();
                        <li>
                            @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                            <span class="inputText">
                                @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                @if (LookUpList != null && LookUpList.Count() > 0)
                                {
                                    @Html.DropDownList(fieldName, LookUpList, "--Select--", new
                               {
                                   id = fieldId,
                                   @class = "form-control search select2picker",
                                   style = "width:100%;"
                               })
                                }
                                else
                                {
                                    @Html.DropDownList(fieldName, EmptyLookupList, "--Select--", new
                               {
                                   id = fieldId,
                                   @class = "form-control search select2picker",
                                   style = "width:100%;"
                               })
                                }
                            </span>
                        </li>
                    }
                }

                else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAsset.ToLower() &&
                            (data.ColumnName == "ChargeToId"))
                {
                        <li>
                            @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                            @{
                                string TextFieldName = "", TextFieldId = "";
                                TextFieldId = "ChargeToClientLookupId";
                                TextFieldName = AttachedModelName + "." + TextFieldId;

                            }
                            <span class="inputText">
                                <div class="dropdown dropTableOuter">
                                    <div class="input-group defult-work-order @(Model._userdata.DatabaseKey.Client.AssetTree == true ? "work-order-tree":"")">
                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })

                                        @Html.TextBox(fieldName, "", new
                                        {
                                        id = fieldId,
                                        @class = "form-control search dropbtn readonly",
                                        @readonly = "readonly",
                                        autocomplete = "off"
                                        })

                                        @Html.TextBox(TextFieldName, "", new
                                        {
                                        id = TextFieldId,
                                        @class = "form-control search dropbtn readonly",
                                        @readonly = "readonly",
                                        autocomplete = "off",
                                        @style = "display:none"
                                        })
                                        <div class="input-group-btn">
                                            <button class="btn btn-white btntxtInputGroup ClearAssetModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                    data-valuefield="@fieldId" style="display:none">
                                                <i id="srcicon" class="fa fa-close"></i>
                                            </button>
                                        </div>
                                        <div class="input-group-btn">
                                            <button class="btn btn-white btntxtInputGroup OpenAssetModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                                    data-valuefield="@fieldId">
                                                <i id="srcicon" class="fa fa-search"></i>
                                            </button>

                                        </div>
                                        <div class="input-group-btn">
                                            &nbsp;&nbsp;<button type="button" class="btn btn-blue mobBttn" onclick="QrScannerEquipment('@TextFieldId','@fieldId')"><i class="fa fa-qrcode" style="margin-top:-2px;"></i></button>
                                        </div>
                                        <div class="input-group-btn">
                                            @if (Model._userdata.DatabaseKey.Client.AssetTree == true)
                                            {
                                                <i class="fa fa-tree chargeTree TreeAdjustNew" id="imgChargeToTreeLineItemDynamic" style="display: block; margin: 0px -26px 0px 0px" data-textfield="@TextFieldId"
                                                   data-valuefield="@fieldId"></i>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </span>

                            <div style="clear:both;"></div>
                        </li>
                    }
                    else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constPlanner.ToLower() &&
(data.ColumnName == "Planner_PersonnelId"))
                    {

                        <li>
                            @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                            @{
                                string TextFieldName = "", TextFieldId = "";
                                TextFieldId = "PlannerClientLookupId";
                                TextFieldName = AttachedModelName + "." + TextFieldId;

                            }
                            <span class="inputText">
                                <div class="dropdown dropTableOuter">
                                    <div class="input-group">
                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })

                                        @Html.TextBox(fieldName, "", new
                                   {
                                       id = fieldId,
                                       @class = "form-control search dropbtn readonly",
                                       @readonly = "readonly",
                                       autocomplete = "off"
                                   })

                                        @Html.TextBox(TextFieldName, "", new
                                   {
                                       id = TextFieldId,
                                       @class = "form-control search dropbtn readonly",
                                       @readonly = "readonly",
                                       autocomplete = "off",
                                       @style = "display:none"
                                   })

                                        <div class="input-group-btn">
                                            <button class="btn btn-white btntxtInputGroup ClearPlannerPersonnelModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                    data-valuefield="@fieldId" style="display:none">
                                                <i id="srcicon" class="fa fa-close"></i>
                                            </button>
                                        </div>
                                        <div class="input-group-btn">
                                            <button class="btn btn-white btntxtInputGroup OpenPlannerPersonnelModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                                    data-valuefield="@fieldId">
                                                <i id="srcicon" class="fa fa-search"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>

                            </span>
                        </li>
                    }
                    else if (data.LookupType == DataDictionaryLookupTypeConstant.Table && data.LookupName.ToLower() == constAccount.ToLower())
                    {

                        <li>
                            @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)

                            @{
                                string TextFieldName = "", TextFieldId = "";
                                TextFieldId = "AccountClientLookupId";
                                TextFieldName = AttachedModelName + "." + TextFieldId;

                            }
                            <span class="inputText">
                                <div class="dropdown dropTableOuter">
                                    <div class="input-group">
                                        @Html.ValidationMessage(fieldName, new { style = "display:none" })

                                        @Html.TextBox(fieldName, "", new
                                   {
                                       id = fieldId,
                                       @class = "form-control search dropbtn readonly",
                                       @readonly = "readonly",
                                       autocomplete = "off"
                                   })

                                        @Html.TextBox(TextFieldName, "", new
                                   {
                                       id = TextFieldId,
                                       @class = "form-control search dropbtn readonly",
                                       @readonly = "readonly",
                                       autocomplete = "off",
                                       @style = "display:none"
                                   })
                                        <div class="input-group-btn">
                                            <button class="btn btn-white btntxtInputGroup ClearAccountModalPopupGridData" type="button" data-textfield="@TextFieldId"
                                                    data-valuefield="@fieldId" style="display:none">
                                                <i id="srcicon" class="fa fa-close"></i>
                                            </button>
                                        </div>
                                        <div class="input-group-btn">
                                            <button class="btn btn-white btntxtInputGroup OpenAccountModalPopupGrid" type="button" data-textfield="@TextFieldId"
                                                    data-valuefield="@fieldId">
                                                <i id="srcicon" class="fa fa-search"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>

                            </span>

                        </li>
                    }
                    else
                    {
                        <li>
                            @CustomHelperDynamic.GetLabel(data.ColumnLabel, data.Required)
                            <span class="inputText">
                                @Html.ValidationMessage(fieldName, new { style = "display:none" })
                                @Html.UIConfigControl(fieldName, fieldId, data.ColumnType.ToLower(), data.MaxLength, data.ViewOnly)
                                @CustomHelperDynamic.GetCountMessageLabel(data.MaxLength, data.ViewOnly, "")
                            </span>
                        </li>
                    }

                }
                        </ul>
                    </div>
                    <div style="clear:both;"></div>
                    <div class="idBttns">
                        <div class="bttn_pagin">
                            <div class="bttns2">
                                @*V2-928*@
                                <button type="submit" class="btn btn-blue mobBttn" name="Command" value="save"><i class="fa fa-save faIcon"></i> &nbsp; @Model.Loc.Where(a => a.ResourceId == "globalSave").FirstOrDefault().Value.ToString()</button>
                            </div>

                            <div class="bttns"><button type="button" class="btn btn-blue mobBttn" id="btnCancelAddWorkRequest"><i class="fa fa-close faIcon"></i> &nbsp; @Model.Loc.Where(a => a.ResourceId == "globalCancel").FirstOrDefault().Value.ToString()</button></div>
                            <div style="clear:both;"></div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@Html.Partial("~/Views/Shared/QR/_QrCodeReaderModal.cshtml")
@Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AssetPoopupLookup.cshtml")
@Html.Partial("~/Views/Shared/LookupTypeTablePopup/_AccountPopupLookup.cshtml")
@Html.Partial("~/Views/Shared/LookupTypeTablePopup/_PersonnelPopupLookup.cshtml")
@if (Model._userdata.DatabaseKey.Client.AssetTree == true)
{
    <div id="woEquipTreeModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="hdrPlantLocation">@Model.Loc.Where(a => a.ResourceId == "spnGlobalEquipmentTreeLookup").FirstOrDefault().Value.ToString()</h4>
                </div>
                <div class="modal-body">
                    <div class="cntTree">
                    </div>
                </div>
            </div>

        </div>
    </div>
}


<link href="~/Scripts/Metronic/assets/demo/default/base/style_newCustom.css" rel="stylesheet" />

<style type="text/css">
    .filterDescription {
        width: auto;
        float: left;
        font-size: 1.2rem;
        color: #000;
        font-weight: 500;
        line-height: 33px;
    }

        .filterDescription a {
            color: #36a3f7;
            text-decoration: none !important;
        }
</style>
@Styles.Render("~/Content/datatable")

@section Scripts {
    @Scripts.Render("~/bundles/datatable")
    @Scripts.Render("~/bundles/QRScanner")
    @Scripts.Render("~/bundles/ImageCompressor")
    <script src="~/Scripts/treeTable.js"></script>
    <script src="~/Scripts/Common/LookupTypeTablePopup/TableAssetPopupLookup.js"></script>
    <script src="~/Scripts/Common/LookupTypeTablePopup/EquipmentAssetTree.js"></script>
    <script src="~/Scripts/Common/LookupTypeTablePopup/TableAccountPoopup.js"></script>
    <script src="~/Scripts/Common/LookupTypeTablePopup/TablePersonnelPoopupForPlanner.js"></script>
    <script type="text/javascript">
        var equipmentid = -1;
        com_github_culmat_jsTreeTable.register(this);
        $(function () {
            $(document).find('.select2picker').select2({});
            $('.select2picker, form').change(function () {
                var areaddescribedby = $(this).attr('aria-describedby');
                if ($(this).valid()) {
                    if (typeof areaddescribedby != 'undefined') {
                        $('#' + areaddescribedby).hide();
                    }
                }
                else {
                    if (typeof areaddescribedby != 'undefined') {
                        $('#' + areaddescribedby).show();
                    }
                }
            });
            if ($('#imgChargeToTreeLineItemDynamic').css('display') == 'block') {
                $('#imgChargeToTreeLineItemDynamic').parent().parent().css('width', '95%')
            }
        })
        function WorksRequestAddOnSuccess(data) {
            if (data.data === "success") {
                if (data.Command === "save") {
                    if (fileExtAddProccess != "") {
                        var imgname = data.workOrderID + "_" + Math.floor((new Date()).getTime() / 1000);
                        CompressImageAddProccess(FilesAddProccess[0], imgname + "." + fileExtAddProccess, data.workOrderID);
                        fileExtAddProccess = "";
                    }
                    SuccessAlertSetting.text = getResourceValue("spnWoRequestAddSuccessfully");
                    swal(SuccessAlertSetting, function () {
                        localStorage.setItem("TabType", 'WorkOrderRequest')
                        window.location.href = '/Dashboard/Dashboard';
                    });
                }
                //V2-928
                //else {
                //    if (fileExtAddProccess != "") {
                //        var imgname = data.workOrderID + "_" + Math.floor((new Date()).getTime() / 1000);
                //        CompressImageAddProccess(FilesAddProccess[0], imgname + "." + fileExtAddProccess, data.workOrderID);
                //        fileExtAddProccess = "";
                //    }
                //    SuccessAlertSetting.text = getResourceValue("spnWoRequestAddSuccessfully");
                //    ResetErrorDiv();
                //    swal(SuccessAlertSetting, function () {
                //        $(document).find('form').trigger("reset");
                //        $(document).find('form').find("select").val("").trigger('change.select2');
                //        $(document).find("#imgChargeToTree").hide();
                //        $(document).find('form').find("select").removeClass("input-validation-error");
                //        $(document).find('form').find("textarea").removeClass("input-validation-error");
                //    });
                //}
            }
            else {
                CloseLoader();
                ShowGenericErrorOnAddUpdate(data);
            }
        }

        $(document).on('click', "#btnCancelAddWorkRequest", function () {
            RedirectToDetailOncancelWOWorkReqForDashboard();
        });
        function RedirectToDetailOncancelWOWorkReqForDashboard() {
            swal(CancelAlertSetting, function () {
                window.location.href = '/Dashboard/Dashboard';
            });
        }
        //#region V2-865

        var FilesAddProccess;
        var fileExtAddProccess = "";
        $(document).on('change', '.addphotoWorkorder', function () {

            var id = $(this).attr('id');
            var val = $(this).val();
            var previewid = $(this).closest(".takePic").find("img").attr('id');
            var imageName = val.replace(/^.*[\\\/]/, '');
            var fileUpload = $("#" + id).get(0);
            var fileExt = imageName.substr(imageName.lastIndexOf('.') + 1);

            if (fileExt != 'jpeg' && fileExt != 'jpg' && fileExt != 'png' && fileExt != 'JPEG' && fileExt != 'JPG' && fileExt != 'PNG') {
                ShowErrorAlert(getResourceValue("spnValidImage"));
                $("#" + id).val('');
                //e.preventDefault();
                return false;
            }
            else if (this.files[0].size > (1024 * 1024 * 10)) {
                ShowImageSizeExceedAlert();
                $("#" + id).val('');
                //e.preventDefault();
                return false;
            }

            else {

                if (window.FormData !== undefined) {
                    var url = window.URL.createObjectURL(this.files[0]);
                    $('#' + previewid).attr('src', url);
                    FilesAddProccess = fileUpload.files;
                    fileExtAddProccess = fileExt;
                }
                else {

                }

            }
        });
        function CompressImageAddProccess(files, imageName, WorkOrderId) {
            new Compressor(files, {
                quality: 0.6,
                convertTypes: ['image/png'],
                convertSize: 100000,
                // The compression process is asynchronous,
                // which means you have to access the `result` in the `success` hook function.
                success(result) {
                    if (result.size < files.size) {
                        SaveCompressedImageAddProccess(result, imageName, WorkOrderId);
                    }
                    else {
                        SaveCompressedImageAddProccess(files, imageName, WorkOrderId);
                    }
                    console.log('file name ' + result.name + ' after compress ' + result.size);
                },
                error(err) {
                    console.log(err.message);
                },
            });
        }
        function SaveCompressedImageAddProccess(data, imageName, WorkOrderId) {
            var AddPhotoFileData = new FormData();
            AddPhotoFileData.append('file', data, imageName);

            $.ajax({
                url: '../base/SaveUploadedFile',
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: AddPhotoFileData,
                success: function (result) {
                    SaveUploadedFileToServerAddProccess(WorkOrderId, imageName);
                    $('#add_photosWR').val('');
                }
            });
        }
        function SaveUploadedFileToServerAddProccess(WorkOrderId, imageName) {
            $.ajax({
                url: '../base/SaveMultipleUploadedFileToServer',
                type: 'POST',

                data: { 'fileName': imageName, objectId: WorkOrderId, TableName: "WorkOrder", AttachObjectName: "WorkOrder" },
                beforeSend: function () {
                    ShowLoader();
                },
                success: function (data) {
                    if (data.result == "0") {

                        CloseLoader();
                        /*ShowImageSaveSuccessAlert();*/
                    }
                    else if (data.result == "1") {
                        CloseLoader();
                        var errorMessage = getResourceValue("ImageExistAlert");
                        ShowErrorAlert(errorMessage);

                    }
                    else {
                        CloseLoader();
                        var errorMessage = getResourceValue("NotAuthorisedUploadFileAlert");
                        ShowErrorAlert(errorMessage);

                    }
                },
                complete: function () {

                },
                error: function () {
                    CloseLoader();
                }
            });
        }
        //#endregion

    </script>
}

