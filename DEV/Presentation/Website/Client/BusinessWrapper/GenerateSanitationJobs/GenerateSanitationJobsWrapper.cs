using Client.BusinessWrapper.Common;
using Client.Common;
using Client.Localization;
//using Client.BusinessWrapper.Work_Order;
using Client.Models;
using Client.Models.Common;
using Client.Models.GenerateSanitationJobs;
//using Client.Models.Work_Order;
using Common.Constants;
using Common.Enumerations;

using Database.Business;

using DataContracts;

using DevExpress.Entity.Model;

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Web.Mvc;

namespace Client.BusinessWrapper.GenerateSanitationJobs
{
    public class GenerateSanitationJobsWrapper 
    {
        private DatabaseKey _dbKey;
        private UserData userData;
        List<string> errorMessage = new List<string>();
        public GenerateSanitationJobsWrapper(UserData userData)
        {
            this.userData = userData;
            _dbKey = userData.DatabaseKey;
        }
        public string GenerateSanitationJobs(GenerateSanitationJobsModel SanGenModel, ref List<Int64> createdSanitationJobList)
        {
            long site = userData.DatabaseKey.User.DefaultSiteId;
            string scheduleType = SanGenModel.ScheduleType;
            int SaniAllowedPrintNumber = 50;
            string onDemandGroup = SanGenModel.OnDemand;
            bool printGeneratedWO = SanGenModel.chkPrintSanitation;
            DateTime genarateDate = SanGenModel?.GenerateThrough ?? DateTime.MinValue;
            bool printAttachment = false;
            string AssetGroup1Ids = string.Join(",", SanGenModel.AssetGroup1Ids ?? new List<string>());
            string AssetGroup2Ids = string.Join(",", SanGenModel.AssetGroup2Ids ?? new List<string>());
            string AssetGroup3Ids = string.Join(",", SanGenModel.AssetGroup3Ids ?? new List<string>());
              DataContracts.SanMasterBatchEntry be = new SanMasterBatchEntry()
            {
                CallerUserInfoId = this.userData.DatabaseKey.User.UserInfoId,
                CallerUserName = this.userData.DatabaseKey.UserName,
            };
            List<SanMasterBatchEntry> SanMasterBatchEntryList = be.SanBatchEntryForSanitationMasterFromSanitationJob_V2(this.userData.DatabaseKey, this.userData.DatabaseKey.Client.ClientId, site, scheduleType, genarateDate, onDemandGroup, printGeneratedWO, printAttachment, AssetGroup1Ids, AssetGroup2Ids, AssetGroup3Ids);

            if (SanMasterBatchEntryList.Count > 0)
            {
                if (SanMasterBatchEntryList.Count > SaniAllowedPrintNumber && SanGenModel.chkPrintSanitation)
                {
                    return ("Printing more than " + SaniAllowedPrintNumber + " records is not allowed in the current system.Please use Preview before Generation mode to restrict the number of records before printing.");
                }
                else
                {
                    try
                    {
                        long SanMasterBatchHeaderid = 0;
                        int  NoOfsanitationJobCreated = 0;
                        foreach (SanMasterBatchEntry batchEntry in SanMasterBatchEntryList)
                        {
                            DataContracts.SanitationJob sanitationJob = new SanitationJob()
                            {
                                CallerUserInfoId = this.userData.DatabaseKey.User.UserInfoId,
                                CallerUserName = this.userData.DatabaseKey.UserName,
                                ClientId = this.userData.DatabaseKey.Client.ClientId,
                                SiteId = this.userData.DatabaseKey.Personnel.SiteId,
                                PersonnelId = this.userData.DatabaseKey.Personnel.PersonnelId,
                                SanMasterBatchEntryId= batchEntry.SanMasterBatchEntryId,
                                Prefix = ""//this.UserData.ClientUIConfiguration.AutoGeneratedIdSettings.PurchaseRequest_AutoGeneratePrefix
                            };
                            if (SanGenModel.ScheduleType == "Days")  // For calendar Radio button
                            {
                                sanitationJob.SanitationJob_GenerationFromSanMasterBatchEntry_Days(this.userData.DatabaseKey);
                            }
                            else   // For OnDemand 
                            {
                              
                                sanitationJob.OnDemandGroup = onDemandGroup;
                                sanitationJob.ScheduledDate = SanGenModel.GenerateThrough;
                                sanitationJob.SanitationJob_GenerationFromSanMasterBatchEntry_OnDemand(userData.DatabaseKey);
                            }
                            NoOfsanitationJobCreated = NoOfsanitationJobCreated + sanitationJob.SanitationJobCount;
                           
                            if (!string.IsNullOrEmpty(sanitationJob.SanitationJobList))
                            {
                                var sanitationjobsId = sanitationJob.SanitationJobList.Split(',').ToList();
                                if (sanitationjobsId.Count > 0)
                                {
                                    createdSanitationJobList.Add(Convert.ToInt64(sanitationjobsId[0]));
                                }
                            }
                            SanMasterBatchHeaderid = batchEntry.SanMasterBatchHeaderId;
                        }

                        if (NoOfsanitationJobCreated > 0)
                        {
                            
                            //Update The SanMasterBatchHeader 
                            Update_SanitationJobGenBatchHeader(NoOfsanitationJobCreated, SanMasterBatchHeaderid);
                        }
                        //return ("success");
                        return (Convert.ToString(createdSanitationJobList.Count()));
                    }
                    catch (Exception ex)
                    {
                        return ("Not all Sanitation Jobs generated successfully");
                    }
                }


            }
            else
            {
                return ("The search returned no results.");
            }
        }
        private void Update_SanitationJobGenBatchHeader(int count, long SanMasterBatchHeaderId)
        {
            SanMasterBatchHeader SanMasterBatchHeaderObj = new SanMasterBatchHeader()
            {
                CallerUserInfoId = this.userData.DatabaseKey.User.UserInfoId,
                CallerUserName = this.userData.DatabaseKey.UserName,
                ClientId = this.userData.DatabaseKey.Client.ClientId,
                SanMasterBatchHeaderId = SanMasterBatchHeaderId,
            };
            SanMasterBatchHeaderObj.Retrieve(this.userData.DatabaseKey);

            SanMasterBatchHeaderObj.BatchEntries = count;
            SanMasterBatchHeaderObj.Update(this.userData.DatabaseKey);
        }
        public string CreateSannitationJobPreview(SanitationJobBatchEntryModel gnSaniModel, ref List<Int64> createdSanitationJobList)
        {
            string AssetGroup1Ids = string.Join(",", gnSaniModel.AssetGroup1Ids ?? new List<string>());
            string AssetGroup2Ids = string.Join(",", gnSaniModel.AssetGroup2Ids ?? new List<string>());
            string AssetGroup3Ids = string.Join(",", gnSaniModel.AssetGroup3Ids ?? new List<string>());
           
            bool printGeneratedWO = gnSaniModel.chkPrintSan;
            if (gnSaniModel.list.Count > 0)
            {
              
                    try
                    {
                        long SanMasterBatchHeaderid = 0;
                        int NoOfsanitationJobCreated = 0;
                        foreach (SanBatchEntryListModel batchEntry in gnSaniModel.list)
                        {
                            DataContracts.SanitationJob sanitationJob = new SanitationJob()
                            {
                                CallerUserInfoId = this.userData.DatabaseKey.User.UserInfoId,
                                CallerUserName = this.userData.DatabaseKey.UserName,
                                ClientId = this.userData.DatabaseKey.Client.ClientId,
                                SiteId = this.userData.DatabaseKey.Personnel.SiteId,
                                PersonnelId = this.userData.DatabaseKey.Personnel.PersonnelId,
                                SanMasterBatchEntryId = batchEntry.SanMasterBatchEntryId,
                                Prefix = ""//this.UserData.ClientUIConfiguration.AutoGeneratedIdSettings.PurchaseRequest_AutoGeneratePrefix
                            };
                            if (gnSaniModel.ScheduleType == "Days")  // For calendar Radio button
                            {
                                sanitationJob.SanitationJob_GenerationFromSanMasterBatchEntry_Days(this.userData.DatabaseKey);
                            }
                            else   // For OnDemand RadioButton
                            {
                                //1 / 11 / 2019
                                sanitationJob.OnDemandGroup = gnSaniModel.OnDemand;
                                sanitationJob.ScheduledDate = gnSaniModel.GenerateThrough;
                                sanitationJob.SanitationJob_GenerationFromSanMasterBatchEntry_OnDemand(userData.DatabaseKey);
                            }
                            NoOfsanitationJobCreated = NoOfsanitationJobCreated + sanitationJob.SanitationJobCount;
                       
                        if (sanitationJob.SanitationJobCount > 0)
                        {
                            if (!string.IsNullOrEmpty(sanitationJob.SanitationJobList ))
                            {   var sanitationjobsId = sanitationJob.SanitationJobList.Split(',').ToList();
                                if(sanitationjobsId.Count>0)
                                {
                                    createdSanitationJobList.Add(Convert.ToInt64(sanitationjobsId[0]));
                                }
                              }
                        }
                        SanMasterBatchHeaderid = batchEntry.SanMasterBatchHeaderId;
                        }

                        if (NoOfsanitationJobCreated > 0)
                        {
                            
                            //Update The SanMasterBatchHeader 
                            Update_SanitationJobGenBatchHeader(NoOfsanitationJobCreated, SanMasterBatchHeaderid);

                        }
                        //return ("success");
                        return (Convert.ToString(createdSanitationJobList.Count()));
                    }
                    catch (Exception ex)
                    {
                        return ("Not all Sanitation Jobs generated successfully");
                    }
               

            }
            return "";
        }

        public List<GenerateSanitationJobsSearchModel> GetSanBatchEntryGenSanitationJobGridData(string orderbycol = "", string orderDir = "", int skip = 0, int length = 0, string ScheduleType = "", DateTime? ScheduleThroughDate = null, string OnDemandGroup = "", List<string> AssetGroup1Ids = null, List<string> AssetGroup2Ids = null, List<string> AssetGroup3Ids = null, DateTime? SaniDueDate = null, string EquipmentClientLookupId = "", string EquipmentName = "", string SanMasterGenShift = "", string SaniMasterDescription = "",long ReturnSanMasterBatchHeaderId = 0)
        {
            CommonWrapper commonWrapper = new CommonWrapper(userData);
            GenerateSanitationJobsSearchModel generateSanitationJobsSearchModel;
            List<GenerateSanitationJobsSearchModel> GenerateSanitationJobsSearchModelList = new List<GenerateSanitationJobsSearchModel>();
            List<SanMasterBatchEntry> SanBatchEntryGenSanitationJobList = new List<SanMasterBatchEntry>();
            SanMasterBatchEntry SanBatchEntryGenSanitationJob = new SanMasterBatchEntry();
            SanBatchEntryGenSanitationJob.ClientId = this.userData.DatabaseKey.Client.ClientId;
            SanBatchEntryGenSanitationJob.siteid = userData.DatabaseKey.User.DefaultSiteId;
            SanBatchEntryGenSanitationJob.OrderbyColumn = orderbycol;
            SanBatchEntryGenSanitationJob.OrderBy = orderDir;
            SanBatchEntryGenSanitationJob.OffSetVal = skip;
            SanBatchEntryGenSanitationJob.NextRow = length;
            SanBatchEntryGenSanitationJob.ScheduleType = ScheduleType;
            SanBatchEntryGenSanitationJob.ScheduleThroughDate = ScheduleThroughDate;
            SanBatchEntryGenSanitationJob.OnDemandgroup = OnDemandGroup;
            SanBatchEntryGenSanitationJob.AssetGroup1Ids = string.Join(",", AssetGroup1Ids ?? new List<string>());
            SanBatchEntryGenSanitationJob.AssetGroup2Ids = string.Join(",", AssetGroup2Ids ?? new List<string>());
            SanBatchEntryGenSanitationJob.AssetGroup3Ids = string.Join(",", AssetGroup3Ids ?? new List<string>());
           

            SanBatchEntryGenSanitationJob.DueDate = SaniDueDate;
            SanBatchEntryGenSanitationJob.EquipmentClientLookupId = EquipmentClientLookupId;
            SanBatchEntryGenSanitationJob.EquipmentName = EquipmentName;
            SanBatchEntryGenSanitationJob.Shift = SanMasterGenShift;
            SanBatchEntryGenSanitationJob.MasterDescription = SaniMasterDescription;
            SanBatchEntryGenSanitationJob.SanMasterBatchHeaderId = ReturnSanMasterBatchHeaderId;
            SanBatchEntryGenSanitationJobList = SanBatchEntryGenSanitationJob.SanMasterBatchEntryForSanitationJobFromSanitationMasterChunkSearch_V2(userData.DatabaseKey, userData.Site.TimeZone);

            foreach (var item in SanBatchEntryGenSanitationJobList)
            {
                generateSanitationJobsSearchModel = new GenerateSanitationJobsSearchModel();
                generateSanitationJobsSearchModel.SanMasterBatchEntryId = item.SanMasterBatchEntryId;
                generateSanitationJobsSearchModel.SanMasterBatchHeaderId = item.SanMasterBatchHeaderId;
              
                if (item.DueDate != null && item.DueDate == default(DateTime))
                {
                    generateSanitationJobsSearchModel.DueDate = null;
                }
                else
                {
                    generateSanitationJobsSearchModel.DueDate = item.DueDate;
                }
                generateSanitationJobsSearchModel.EquipmentClientLookupId = item.EquipmentClientLookupId;
                generateSanitationJobsSearchModel.EquipmentName = item.EquipmentName;
                generateSanitationJobsSearchModel.Shift = item.Shift;
                generateSanitationJobsSearchModel.Description = item.MasterDescription;
                generateSanitationJobsSearchModel.TotalCount = item.TotalCount;
                GenerateSanitationJobsSearchModelList.Add(generateSanitationJobsSearchModel);
            }

            return GenerateSanitationJobsSearchModelList;
        }


    }
}